name: HumanEval_93_encode
language: swift
prompt: "\n/// Write a function that takes a message, and encodes in such a \n///\
  \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
  \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
  \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
  \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n/// \"\
  tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\n\
  assert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\"\
  ) == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\"\
  )\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq\
  \ wRkTg\")"
completions: ["    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let letters\
    \ = Array(message)\n    var encoded = \"\"\n    for letter in letters {\n    \
    \    if let index = vowels.firstIndex(of: letter.lowercased()) {\n           \
    \ encoded += vowels[(index + 2) % vowels.count].uppercased()\n        } else {\n\
    \            encoded += letter.uppercased()\n        }\n    }\n    return encoded",
  "    let vowels = \"aeiou\"\n    let vowels2 = \"cdfghjklmnpqrstvwxyz\"\n    var\
    \ encoded = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            encoded.append(vowels2[vowels.firstIndex(of: char)!])\n     \
    \   } else if vowels2.contains(char) {\n            encoded.append(vowels[vowels2.firstIndex(of:\
    \ char)!])\n        } else {\n            encoded.append(char)\n        }\n  \
    \  }\n    return encoded", "    var encodedMessage = \"\"\n    let vowels: Set<Character>\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in message {\n        if\
    \ vowels.contains(char) {\n            encodedMessage.append(char.next(2))\n \
    \       } else {\n            encodedMessage.append(char.swapCase())\n       \
    \ }\n    }\n    return encodedMessage", "    let vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if vowels.contains(String(letter).lowercased())\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.count\
    \ - alphabet.count + alphabet.firstIndex(of: String(letter).lowercased())!.encodedOffset\
    \ + 2)\n            encodedMessage += String(alphabet[index]).uppercased()\n \
    \       } else {\n            encodedMessage += String(letter).uppercased()\n\
    \        }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encodedMessage", "    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let newAscii = ascii + (ascii < 91 ? 32\
    \ : -32)\n            let newChar = Character(UnicodeScalar(newAscii)!)\n    \
    \        encodedMessage.append(newChar)\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let\
    \ alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for character in message\
    \ {\n        if vowels.contains(character) {\n            let index = alphabet.firstIndex(of:\
    \ character)!\n            encodedMessage.append(alphabet[index + 2])\n      \
    \  } else {\n            encodedMessage.append(character)\n        }\n    }\n\
    \    return encodedMessage.uppercased()", "    let vowels: [Character] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for char in\
    \ message {\n        if vowels.contains(char) {\n            let index = vowels.firstIndex(of:\
    \ char)!\n            let newIndex = (index + 2) % vowels.count\n            encodedMessage.append(vowels[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)\n            let nextIndex = alphabet.index(index!, offsetBy: 2)\n   \
    \         encoded.append(alphabet[nextIndex])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for letter\
    \ in message {\n        if let index = alphabet.firstIndex(of: letter.lowercased())\
    \ {\n            if vowels.contains(letter.lowercased()) {\n                encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage", "    var encodedMessage\
    \ = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \            } else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    var result = \"\"\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in message {\n        if\
    \ vowels.contains(String(char).lowercased()) {\n            let index = vowels.firstIndex(of:\
    \ String(char).lowercased())!\n            let nextIndex = (index + 2) % vowels.count\n\
    \            result += String(vowels[nextIndex]).uppercased()\n        } else\
    \ {\n            result += String(char).uppercased()\n        }\n    }\n    return\
    \ result", "    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if vowels.contains(letter) {\n\
    \            let index = alphabet.firstIndex(of: letter)!\n            let newIndex\
    \ = index + 2\n            let newLetter = alphabet[newIndex]\n            encodedMessage.append(newLetter)\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage", "    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if char.isLetter {\n            let ascii = char.asciiValue!\n  \
    \          let newAscii = ascii + 2\n            let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \            encodedMessage.append(newChar)\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n \
    \   let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\
    \"\n    for char in message {\n        if vowels.contains(char) {\n          \
    \  let index = alphabet.firstIndex(of: char)\n            let newIndex = alphabet.index(index!,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(alphabet[alphabet.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        } else {\n            encoded.append(char)\n        }\n   \
    \ }\n    return encoded", "    var encodedMessage = \"\"\n    let vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \   let newChar = alphabet[newIndex]\n            if vowels.contains(newChar)\
    \ {\n                encodedMessage += newChar.uppercased()\n            } else\
    \ {\n                encodedMessage += newChar\n            }\n        } else\
    \ {\n            encodedMessage += String(char)\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encoded.append(alphabet[newIndex])\n            } else {\n           \
    \     encoded.append(alphabet[index])\n            }\n        } else {\n     \
    \       encoded.append(char)\n        }\n    }\n    return encoded", "    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n\
    \    for char in message {\n        if let asciiValue = char.asciiValue {\n  \
    \          if asciiValue >= 65 && asciiValue <= 90 {\n                encodedMessage.append(Character(UnicodeScalar(asciiValue\
    \ + 32)!))\n            } else if asciiValue >= 97 && asciiValue <= 122 {\n  \
    \              encodedMessage.append(Character(UnicodeScalar(asciiValue - 32)!))\n\
    \            } else {\n                encodedMessage.append(char)\n         \
    \   }\n        }\n    }\n    for vowel in vowels {\n        encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ vowel, with: String(vowel.unicodeScalars.first!.value + 2))\n    }\n    return\
    \ encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char.lowercased()) {\n            if vowels.contains(char.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex])\n            } else {\n\
    \                encodedMessage.append(alphabet[index])\n            }\n     \
    \   } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char.lowercased()) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            if vowels.contains(char.lowercased()) {\n        \
    \        encodedMessage.append(alphabet[newIndex])\n            } else {\n   \
    \             encodedMessage.append(alphabet[newIndex].uppercased())\n       \
    \     }\n        } else {\n            encodedMessage.append(char)\n        }\n\
    \    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            let index = vowels.firstIndex(of:\
    \ char)!\n            let newIndex = alphabet.index(index, offsetBy: 2)\n    \
    \        encodedMessage.append(vowels[newIndex])\n        } else {\n         \
    \   encodedMessage.append(char)\n        }\n    }\n    return encodedMessage",
  "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char in message\
    \ {\n        let lowerChar = String(char).lowercased()\n        if vowels.contains(lowerChar)\
    \ {\n            let index = letters.index(letters.startIndex, offsetBy: letters.index(of:\
    \ lowerChar)! + 2)\n            encodedMessage += String(letters[index]).uppercased()\n\
    \        } else {\n            encodedMessage += String(char).uppercased()\n \
    \       }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n\
    \            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    var encoded = \"\"\n    for\
    \ char in message {\n        if char.isLetter {\n            let ascii = char.asciiValue!\n\
    \            let newAscii = ascii + 2\n            let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \            encoded.append(newChar)\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    var encodedMessage = \"\"\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in message {\n  \
    \      if vowels.contains(String(char).lowercased()) {\n            encodedMessage\
    \ += String(char).lowercased() == \"u\" ? \"a\" : String(char).lowercased() ==\
    \ \"z\" ? \"b\" : String(char).lowercased() == \"y\" ? \"c\" : String(char).lowercased()\
    \ == \"x\" ? \"d\" : String(char).lowercased() == \"w\" ? \"e\" : String(char).lowercased()\
    \ == \"v\" ? \"f\" : String(char).lowercased() == \"u\" ? \"g\" : String(char).lowercased()\
    \ == \"t\" ? \"h\" : String(char).lowercased() == \"s\" ? \"i\" : String(char).lowercased()\
    \ == \"r\" ? \"j\" : String(char).lowercased() == \"q\" ? \"k\" : String(char).lowercased()\
    \ == \"p\" ? \"l\" : String(char).lowercased() == \"o\" ? \"m\" : String(char).lowercased()\
    \ == \"n\" ? \"n\" : String(char).lowercased() == \"m\" ? \"o\" : String(char).lowercased()\
    \ == \"l\" ? \"p\" : String(char).lowercased() == \"k\" ? \"q\" : String(char).lowercased()\
    \ == \"j\" ? \"r\" : String(char).lowercased() == \"i\" ? \"s\" : String(char).lowercased()\
    \ == \"h\" ? \"t\" : String(char).lowercased() == \"g\" ? \"u\" : String(char).lowercased()\
    \ == \"f\" ? \"v\" : String(char).lowercased() == \"e\" ? \"w\" : String(char).lowercased()\
    \ == \"d\" ? \"x\" : String(char).lowercased() == \"c\" ? \"y\" : String(char).lowercased()\
    \ == \"b\" ? \"z\" : String(char).lowercased() == \"a\"", "    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in\
    \ message {\n        if vowels.contains(String(char).lowercased()) {\n       \
    \     encodedMessage += String(char).lowercased() == \"z\" ? \"b\" : String(char).lowercased()\
    \ == \"y\" ? \"a\" : String(char).lowercased() == \"x\" ? \"z\" : String(char).lowercased()\
    \ == \"w\" ? \"y\" : String(char).lowercased() == \"v\" ? \"x\" : String(char).lowercased()\
    \ == \"u\" ? \"w\" : String(char).lowercased() == \"t\" ? \"v\" : String(char).lowercased()\
    \ == \"s\" ? \"u\" : String(char).lowercased() == \"r\" ? \"t\" : String(char).lowercased()\
    \ == \"q\" ? \"s\" : String(char).lowercased() == \"p\" ? \"r\" : String(char).lowercased()\
    \ == \"o\" ? \"q\" : String(char).lowercased() == \"n\" ? \"p\" : String(char).lowercased()\
    \ == \"m\" ? \"o\" : String(char).lowercased() == \"l\" ? \"n\" : String(char).lowercased()\
    \ == \"k\" ? \"m\" : String(char).lowercased() == \"j\" ? \"l\" : String(char).lowercased()\
    \ == \"i\" ? \"k\" : String(char).lowercased() == \"h\" ? \"j\" : String(char).lowercased()\
    \ == \"g\" ? \"i\" : String(char).lowercased() == \"f\" ? \"h\" : String(char).lowercased()\
    \ == \"e\" ? \"g\" : String(char).lowercased() == \"d\" ? \"f\" : String(char).lowercased()\
    \ == \"c\" ? \"e\" : String(char).lowercased() == \"b\" ? \"d\" : String(char).lowercased()\
    \ == \"a\" ? \"c\" : \"\"\n        } else {\n            encodedMessage += String",
  "    var encodedMessage = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message\
    \ {\n        if let index = alphabet.firstIndex(of: char.lowercased()) {\n   \
    \         if vowels.contains(char.lowercased()) {\n                encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encodedMessage", "    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage =\
    \ \"\"\n    for char in message {\n        if vowels.contains(char) {\n      \
    \      let index = vowels.firstIndex(of: char)!\n            encodedMessage.append(vowels[(index\
    \ + 2) % vowels.count])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels: Set<Character>\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            let newChar = alphabet[(index + 2) % alphabet.count]\n \
    \           encodedMessage.append(newChar)\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    for char in message {\n        if char.isLetter {\n            let asciiValue\
    \ = char.asciiValue!\n            let encodedValue = asciiValue + 2\n        \
    \    let encodedChar = Character(UnicodeScalar(encodedValue)!)\n            encodedMessage.append(encodedChar)\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let vowels2 = \"\
    cdfghjklmnpqrstvwxyz\"\n    var encoded = \"\"\n    for char in message {\n  \
    \      if vowels.contains(char) {\n            let index = vowels.firstIndex(of:\
    \ char)!\n            encoded.append(vowels2[vowels2.index(vowels2.startIndex,\
    \ offsetBy: index)])\n        } else if vowels2.contains(char) {\n           \
    \ let index = vowels2.firstIndex(of: char)!\n            encoded.append(vowels[vowels.index(vowels.startIndex,\
    \ offsetBy: index)])\n        } else {\n            encoded.append(char)\n   \
    \     }\n    }\n    return encoded", "    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if char.isLetter {\n            let ascii = char.asciiValue!\n\
    \            let encodedAscii = ascii + 2\n            let encodedChar = Character(UnicodeScalar(encodedAscii)!)\n\
    \            encodedMessage.append(encodedChar)\n        } else {\n          \
    \  encodedMessage.append(char)\n        }\n    }\n    return encodedMessage",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let letters = Array(message)\n\
    \    var encoded = [Character]()\n    for letter in letters {\n        if vowels.contains(String(letter).lowercased())\
    \ {\n            encoded.append(letter.nextLetter.nextLetter)\n        } else\
    \ {\n            encoded.append(letter.swapCase)\n        }\n    }\n    return\
    \ String(encoded)", "    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var\
    \ encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = (index + 2) % alphabet.count\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let consonants =\
    \ \"bcdfghjklmnpqrstvwxyz\"\n    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if vowels.contains(char) {\n            let index = vowels.firstIndex(of:\
    \ char)!\n            let nextIndex = vowels.index(after: index)\n           \
    \ let nextNextIndex = vowels.index(after: nextIndex)\n            encodedMessage.append(vowels[nextNextIndex])\n\
    \        } else if consonants.contains(char) {\n            let index = consonants.firstIndex(of:\
    \ char)!\n            let nextIndex = consonants.index(after: index)\n       \
    \     let nextNextIndex = consonants.index(after: nextIndex)\n            encodedMessage.append(consonants[nextNextIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    var encoded = \"\"\n    for char in message\
    \ {\n        if char.isLetter {\n            let ascii = char.asciiValue!\n  \
    \          let newAscii = ascii + (ascii < 78 ? 2 : -24)\n            encoded.append(Character(UnicodeScalar(newAscii)!))\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = vowels.firstIndex(of: char)!\n            let newIndex\
    \ = (index + 2) % vowels.count\n            encodedMessage.append(vowels[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\
    \n    for char in message {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.firstIndex(of: char.lowercased())!) + 2)\n\
    \            encoded.append(alphabet[index])\n        } else {\n            encoded.append(char.uppercased())\n\
    \        }\n    }\n    return encoded", "    let vowels: Set<Character> = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for letter in message {\n        if let index =\
    \ alphabet.firstIndex(of: letter) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n        } else\
    \ {\n            encoded.append(letter)\n        }\n    }\n    return encoded",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message {\n        if let index\
    \ = alphabet.firstIndex(of: letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex])\n            } else {\n\
    \                encodedMessage.append(letter)\n            }\n        }\n   \
    \ }\n    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        if let index = alphabet.firstIndex(of: char.lowercased()) {\n   \
    \         if vowels.contains(char.lowercased()) {\n                encoded.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encoded.append(alphabet[index])\n\
    \            }\n        } else {\n            encoded.append(char)\n        }\n\
    \    }\n    return encoded", "    var encodedMessage = \"\"\n    let vowels =\
    \ \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in\
    \ message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                let\
    \ newIndex = index + 2\n                if newIndex > alphabet.count - 1 {\n \
    \                   encodedMessage.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: newIndex - alphabet.count)])\n                } else {\n         \
    \           encodedMessage.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: newIndex)])\n                }\n            } else {\n           \
    \     encodedMessage.append(alphabet[index].uppercased())\n            }\n   \
    \     }\n    }\n    return encodedMessage", "    let vowels: Set<Character> =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"]\n    var encoded = \"\"\n    for char in message {\n  \
    \      if vowels.contains(char) {\n            encoded.append(alphabet[alphabet.firstIndex(of:\
    \ char)! + 2])\n        } else {\n            encoded.append(char)\n        }\n\
    \    }\n    return encoded.uppercased()", "    let vowels = \"aeiou\"\n    let\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char\
    \ in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            let newIndex = (index + 2) % alphabet.count\n            let\
    \ newChar = alphabet[newIndex]\n            encoded.append(vowels.contains(char.lowercased())\
    \ ? newChar : newChar.uppercased())\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    var encoded = \"\"\n    for\
    \ char in message {\n        if char.isLetter {\n            let ascii = char.asciiValue!\n\
    \            let newAscii = ascii + 2\n            let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \            encoded.append(newChar)\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        if let index = alphabet.firstIndex(of: char.lowercased()) {\n   \
    \         if vowels.contains(char.lowercased()) {\n                let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n                encoded.append(alphabet[newIndex])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        } else {\n            encoded.append(char)\n        }\n   \
    \ }\n    return encoded", "    let vowels: [Character] = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\",\
    \ \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ]\n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)!\n            let encodedChar\
    \ = alphabet[(index + 2) % alphabet.count]\n            encodedMessage.append(encodedChar)\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        if let index = letters.firstIndex(of: char.lowercased()) {\n    \
    \        if vowels.contains(char.lowercased()) {\n                encoded.append(letters[letters.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encoded.append(letters[index])\n\
    \            }\n        }\n    }\n    return encoded", "    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encoded.append(alphabet[newIndex])\n            } else {\n           \
    \     encoded.append(char.lowercased() == char ? alphabet[index].uppercased()\
    \ : alphabet[index])\n            }\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    let vowels: [Character] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\",\
    \ \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char in message {\n  \
    \      if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            let newIndex = index + 2\n            let newChar = alphabet[newIndex]\n\
    \            encodedMessage.append(newChar)\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels: Set<Character>\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char.lowercased()) {\n            let newIndex = index\
    \ + 2\n            let newChar = alphabet[newIndex % alphabet.count]\n       \
    \     encodedMessage.append(vowels.contains(char.lowercased()) ? newChar : newChar.uppercased())\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    var encodedMessage = \"\"\n    for letter in\
    \ message {\n        if letter.isLetter {\n            let letterIndex = letter.asciiValue!\
    \ - 65\n            let encodedLetterIndex = (letterIndex + 2) % 26\n        \
    \    let encodedLetter = Character(UnicodeScalar(encodedLetterIndex + 65)!)\n\
    \            encodedMessage.append(encodedLetter)\n        } else {\n        \
    \    encodedMessage.append(letter)\n        }\n    }\n    return encodedMessage",
  "    var encodedMessage = \"\"\n    for char in message {\n        let charAscii\
    \ = char.asciiValue!\n        if charAscii >= 65 && charAscii <= 90 {\n      \
    \      encodedMessage.append(Character(UnicodeScalar(charAscii + 32)!))\n    \
    \    } else if charAscii >= 97 && charAscii <= 122 {\n            encodedMessage.append(Character(UnicodeScalar(charAscii\
    \ - 32)!))\n        } else {\n            encodedMessage.append(char)\n      \
    \  }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n    let\
    \ letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for letter\
    \ in message {\n        if let index = letters.firstIndex(of: letter.lowercased())\
    \ {\n            encoded.append(letters[letters.index(index, offsetBy: 2)])\n\
    \        } else {\n            encoded.append(letter)\n        }\n    }\n    return\
    \ encoded", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char.lowercased()) {\n            if vowels.contains(char.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex])\n            } else {\n\
    \                encodedMessage.append(alphabet[index])\n            }\n     \
    \   } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = (index + 2) % letters.count\n\
    \            encoded.append(letters[newIndex])\n        } else {\n           \
    \ encoded.append(char)\n        }\n    }\n    return encoded", "    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = (index + 2) % letters.count\n\
    \            encodedMessage += String(letters[newIndex]).uppercased()\n      \
    \  } else {\n            encodedMessage += String(char)\n        }\n    }\n  \
    \  return encodedMessage", "    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = letters.firstIndex(of: char.lowercased()) {\n            let newIndex = (index\
    \ + 2) % letters.count\n            let newChar = letters[newIndex]\n        \
    \    encodedMessage += vowels.contains(char.lowercased()) ? newChar.uppercased()\
    \ : newChar\n        } else {\n            encodedMessage += char\n        }\n\
    \    }\n    return encodedMessage", "    let vowels: Set<Character> = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = Array(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = (index + 2) % alphabet.count\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\
    \n    for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n                encoded.append(alphabet[newIndex])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        } else {\n            encoded.append(char)\n        }\n   \
    \ }\n    return encoded", "    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(letters[letters.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(letters[index])\n      \
    \      }\n        }\n    }\n    return encoded", "    let vowels: Set<Character>\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    let alphabetArray = Array(alphabet)\n    let messageArray = Array(message)\n\
    \    var encodedMessage = \"\"\n    for char in messageArray {\n        if vowels.contains(char)\
    \ {\n            let index = alphabetArray.firstIndex(of: char)!\n           \
    \ let newIndex = (index + 2) % alphabetArray.count\n            encodedMessage.append(alphabetArray[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let vowels2 = \"\
    cdfghjklmnpqrstvwxyz\"\n    var encoded = \"\"\n    for letter in message {\n\
    \        if let index = vowels.firstIndex(of: letter) {\n            encoded.append(vowels2[vowels2.index(vowels2.startIndex,\
    \ offsetBy: index)])\n        } else if let index = vowels2.firstIndex(of: letter)\
    \ {\n            encoded.append(vowels[vowels.index(vowels.startIndex, offsetBy:\
    \ index)])\n        } else {\n            encoded.append(letter)\n        }\n\
    \    }\n    return encoded", "    return message.map {\n        if $0.isLetter\
    \ {\n            let char = $0.uppercased()\n            if char.isVowel {\n \
    \               let index = char.index(char.startIndex, offsetBy: 2)\n       \
    \         return char[index]\n            } else {\n                return char\n\
    \            }\n        } else {\n            return $0\n        }\n    }.joined()",
  "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    let encodedMessage = message.map { (letter) -> Character in\n        if letter.isUppercase\
    \ {\n            return letter.lowercased().first!\n        } else if letter.isLowercase\
    \ {\n            return letter.uppercased().first!\n        } else {\n       \
    \     return letter\n        }\n    }\n    return encodedMessage.map { (letter)\
    \ -> Character in\n        if vowels.contains(letter) {\n            let index\
    \ = alphabet.firstIndex(of: letter)!\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            return alphabet[newIndex]\n        } else {\n    \
    \        return letter\n        }\n    }.joined()", "    var encodedMessage =\
    \ \"\"\n    for char in message {\n        let lowerChar = char.lowercased()\n\
    \        if lowerChar == \"a\" {\n            encodedMessage += \"c\"\n      \
    \  } else if lowerChar == \"e\" {\n            encodedMessage += \"g\"\n     \
    \   } else if lowerChar == \"i\" {\n            encodedMessage += \"k\"\n    \
    \    } else if lowerChar == \"o\" {\n            encodedMessage += \"q\"\n   \
    \     } else if lowerChar == \"u\" {\n            encodedMessage += \"y\"\n  \
    \      } else if lowerChar == \"y\" {\n            encodedMessage += \"a\"\n \
    \       } else if lowerChar == \"z\" {\n            encodedMessage += \"b\"\n\
    \        } else if lowerChar == \" \" {\n            encodedMessage += \" \"\n\
    \        } else {\n            encodedMessage += String(char.unicodeScalars.first!.value\
    \ + 2)\n        }\n    }\n    return encodedMessage", "    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for letter in\
    \ message {\n        if vowels.contains(String(letter).lowercased()) {\n     \
    \       let index = vowels.firstIndex(of: String(letter).lowercased())!\n    \
    \        let newIndex = (index + 2) % vowels.count\n            encodedMessage\
    \ += vowels[newIndex].uppercased()\n        } else {\n            encodedMessage\
    \ += String(letter).uppercased()\n        }\n    }\n    return encodedMessage",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message {\n        if let index\
    \ = alphabet.firstIndex(of: letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex])\n            } else {\n\
    \                encodedMessage.append(alphabet[index])\n            }\n     \
    \   } else {\n            encodedMessage.append(letter)\n        }\n    }\n  \
    \  return encodedMessage", "    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = letters.firstIndex(of: char.lowercased()) {\n            let newIndex = (index\
    \ + 2) % letters.count\n            let newChar = letters[newIndex]\n        \
    \    if vowels.contains(newChar) {\n                encodedMessage.append(newChar.uppercased())\n\
    \            } else {\n                encodedMessage.append(newChar)\n      \
    \      }\n        } else {\n            encodedMessage.append(char)\n        }\n\
    \    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        if let index = alphabet.firstIndex(of: char.lowercased()) {\n   \
    \         if vowels.contains(char.lowercased()) {\n                let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n                encoded.append(alphabet[newIndex])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        } else {\n            encoded.append(char)\n        }\n   \
    \ }\n    return encoded", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char.lowercased()) {\n            let newIndex = (index\
    \ + 2) % alphabet.count\n            let newChar = alphabet[newIndex]\n      \
    \      encodedMessage += vowels.contains(char.lowercased()) ? newChar.uppercased()\
    \ : newChar\n        } else {\n            encodedMessage += char\n        }\n\
    \    }\n    return encodedMessage", "    var encoded = \"\"\n    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.count\
    \ - alphabet.count + alphabet.firstIndex(of: String(char).lowercased())!.encodedOffset\
    \ + 2)\n            encoded.append(alphabet[index])\n        } else {\n      \
    \      encoded.append(char)\n        }\n    }\n    return encoded", "    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    let alphabetArray = Array(alphabet)\n\
    \    let messageArray = Array(message)\n    for letter in messageArray {\n   \
    \     if vowels.contains(String(letter).lowercased()) {\n            let index\
    \ = alphabetArray.firstIndex(of: String(letter).lowercased())\n            if\
    \ index! + 2 > alphabetArray.count - 1 {\n                encodedMessage += String(alphabetArray[index!\
    \ + 2 - alphabetArray.count])\n            } else {\n                encodedMessage\
    \ += String(alphabetArray[index! + 2])\n            }\n        } else {\n    \
    \        encodedMessage += String(letter).lowercased() == String(letter) ? String(letter).uppercased()\
    \ : String(letter).lowercased()\n        }\n    }\n    return encodedMessage",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage =\
    \ \"\"\n    for char in message {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            encodedMessage += String(char).lowercased() == \"u\" ? \"a\"\
    \ : String(char).lowercased().next().next()\n        } else {\n            encodedMessage\
    \ += String(char).lowercased() == String(char) ? String(char).uppercased() : String(char).lowercased()\n\
    \        }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encodedMessage", "    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let asciiValue = ascii + 2\n         \
    \   let newChar = Character(UnicodeScalar(asciiValue))\n            encodedMessage.append(newChar)\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if char.isLetter {\n            let ascii = char.asciiValue!\n  \
    \          let newAscii = ascii + 2\n            let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \            encodedMessage.append(newChar)\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    for char in message {\n        if char.isLetter {\n            let asciiValue\
    \ = char.asciiValue!\n            let newAsciiValue = asciiValue + 2\n       \
    \     let newChar = Character(UnicodeScalar(newAsciiValue)!)\n            encodedMessage.append(newChar)\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if let index = alphabet.index(of: char.lowercased()) {\n        \
    \    if vowels.contains(char.lowercased()) {\n                let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n  \
    \          } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    let vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if vowels.contains(String(char).lowercased()) {\n            let\
    \ index = vowels.firstIndex(of: String(char).lowercased())!\n            let newIndex\
    \ = (index + 2) % vowels.count\n            encodedMessage += String(vowels[newIndex]).uppercased()\n\
    \        } else {\n            encodedMessage += String(char).uppercased()\n \
    \       }\n    }\n    return encodedMessage", "    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for letter in message\
    \ {\n        if vowels.contains(String(letter).lowercased()) {\n            if\
    \ String(letter).lowercased() == \"u\" {\n                encodedMessage += \"\
    a\"\n            } else {\n                encodedMessage += String(letter).uppercased()\n\
    \            }\n        } else {\n            encodedMessage += String(letter).lowercased()\n\
    \        }\n    }\n    return encodedMessage", "    var result = \"\"\n    for\
    \ char in message {\n        if char.isLetter {\n            let ascii = char.asciiValue!\n\
    \            let isUpper = ascii >= 65 && ascii <= 90\n            let isLower\
    \ = ascii >= 97 && ascii <= 122\n            if isUpper {\n                result.append(Character(UnicodeScalar(ascii\
    \ + 32)!))\n            } else if isLower {\n                result.append(Character(UnicodeScalar(ascii\
    \ - 32)!))\n            }\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result", "    var encodedMessage = \"\"\n    let\
    \ vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for letter in\
    \ message {\n        if vowels.contains(letter) {\n            if let index =\
    \ vowels.firstIndex(of: letter) {\n                let nextIndex = (index + 2)\
    \ % vowels.count\n                encodedMessage.append(vowels[nextIndex])\n \
    \           }\n        } else {\n            encodedMessage.append(letter)\n \
    \       }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n  \
    \  let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for\
    \ char in message {\n        if let index = letters.firstIndex(of: char.lowercased())\
    \ {\n            let newIndex = (index + 2) % letters.count\n            let newChar\
    \ = letters[newIndex]\n            encoded.append(vowels.contains(char.lowercased())\
    \ ? newChar : newChar.uppercased())\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    var encodedMessage = \"\"\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n\
    \            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n   \
    \ let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for\
    \ char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n                encoded.append(alphabet[newIndex])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        } else {\n            encoded.append(char)\n        }\n   \
    \ }\n    return encoded", "    let vowels = \"aeiou\"\n    var encoded = \"\"\n\
    \    for char in message {\n        if vowels.contains(char) {\n            let\
    \ index = vowels.firstIndex(of: char)!\n            let nextIndex = (index + 2)\
    \ % vowels.count\n            encoded.append(vowels[nextIndex])\n        } else\
    \ {\n            encoded.append(char)\n        }\n    }\n    return encoded.uppercased()",
  "    var encodedMessage = \"\"\n    for char in message {\n        if char.isUppercase\
    \ {\n            encodedMessage.append(char.lowercased())\n        } else {\n\
    \            encodedMessage.append(char.uppercased())\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n   \
    \ let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\
    \n    for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n\
    \            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    var encoded = \"\"\n    let\
    \ vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for\
    \ char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                encoded.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encoded.append(alphabet[index])\n\
    \            }\n        } else {\n            encoded.append(char)\n        }\n\
    \    }\n    return encoded", "    var encodedMessage = \"\"\n    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex])\n            } else {\n\
    \                encodedMessage.append(alphabet[index])\n            }\n     \
    \   }\n    }\n    return encodedMessage", "    let vowels: [Character] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\",\
    \ \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char in message {\n  \
    \      if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            let nextChar = alphabet[(index + 2) % alphabet.count]\n\
    \            encodedMessage.append(nextChar)\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n \
    \   let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\
    \"\n    for char in message {\n        if vowels.contains(char) {\n          \
    \  let index = alphabet.firstIndex(of: char)!\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encoded.append(alphabet[newIndex])\n            } else {\n           \
    \     encoded.append(alphabet[index])\n            }\n        } else {\n     \
    \       encoded.append(char)\n        }\n    }\n    return encoded", "    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n\
    \    for char in message {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            let index = vowels.firstIndex(of: String(char).lowercased())\n\
    \            let newIndex = (index! + 2) % 5\n            encodedMessage += vowels[newIndex].uppercased()\n\
    \        } else {\n            encodedMessage += String(char).uppercased()\n \
    \       }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n  \
    \  let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\
    \n    for char in message {\n        if let index = letters.firstIndex(of: char.lowercased())\
    \ {\n            let newIndex = index + 2\n            let newChar = newIndex\
    \ > letters.count - 1 ? letters[newIndex - letters.count] : letters[newIndex]\n\
    \            encodedMessage += vowels.contains(char.lowercased()) ? newChar.uppercased()\
    \ : newChar\n        } else {\n            encodedMessage += char\n        }\n\
    \    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if let index = letters.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                encodedMessage.append(letters[letters.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encodedMessage.append(letters[index])\n\
    \            }\n        }\n    }\n    return encodedMessage", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for\
    \ char in message {\n        if vowels.contains(String(char).lowercased()) {\n\
    \            let index = vowels.firstIndex(of: String(char).lowercased())!\n \
    \           let newIndex = (index + 2) % vowels.count\n            encodedMessage\
    \ += vowels[newIndex].uppercased()\n        } else {\n            encodedMessage\
    \ += String(char).uppercased()\n        }\n    }\n    return encodedMessage",
  "    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet:\
    \ [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n \
    \   for char in message {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.firstIndex(of: char)!\n            let newIndex = (index +\
    \ 2) % alphabet.count\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    let letters = Array(message)\n    var encoded = \"\"\n    for letter\
    \ in letters {\n        if vowels.contains(String(letter).lowercased()) {\n  \
    \          encoded += String(letter).lowercased() == \"u\" ? \"a\" : String(letters[letters.firstIndex(of:\
    \ letter)! + 2])\n        } else {\n            encoded += String(letter).lowercased()\
    \ == letter ? String(letter).uppercased() : String(letter).lowercased()\n    \
    \    }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for character\
    \ in message {\n        if let index = alphabet.firstIndex(of: character.lowercased())\
    \ {\n            if vowels.contains(character.lowercased()) {\n              \
    \  let newIndex = alphabet.index(index, offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n\
    \            } else {\n                encodedMessage.append(character.uppercased())\n\
    \            }\n        }\n    }\n    return encodedMessage", "    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if letter.isUppercase {\n     \
    \       encodedMessage.append(letter.lowercased())\n        } else {\n       \
    \     encodedMessage.append(letter.uppercased())\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            let isUpper = char.isUpperCase\n         \
    \   let newIndex = alphabet.index(index, offsetBy: 2)\n            let newChar\
    \ = alphabet[newIndex]\n            encoded += isUpper ? newChar.uppercased()\
    \ : newChar\n        } else {\n            encoded += char\n        }\n    }\n\
    \    return encoded", "    var encodedMessage = \"\"\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    for letter in message {\n        if let asciiValue\
    \ = letter.asciiValue {\n            if asciiValue >= 65 && asciiValue <= 90 {\n\
    \                encodedMessage.append(Character(UnicodeScalar(asciiValue + 32)!))\n\
    \            } else if asciiValue >= 97 && asciiValue <= 122 {\n             \
    \   encodedMessage.append(Character(UnicodeScalar(asciiValue - 32)!))\n      \
    \      } else {\n                encodedMessage.append(letter)\n            }\n\
    \        }\n    }\n    for vowel in vowels {\n        encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ vowel, with: String(vowel.unicodeScalars.first!.value + 2))\n    }\n    return\
    \ encodedMessage", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n   \
    \ let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\
    \n    for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n   \
    \ let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\
    \n    for character in message {\n        if let index = alphabet.firstIndex(of:\
    \ character.lowercased()) {\n            if vowels.contains(character.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(character)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    var encoded = \"\"\n    for char in message {\n  \
    \      if vowels.contains(String(char).lowercased()) {\n            let index\
    \ = vowels.firstIndex(of: String(char).lowercased())!\n            let newIndex\
    \ = (index + 2) % vowels.count\n            encoded += String(vowels[newIndex]).uppercased()\n\
    \        } else {\n            encoded += String(char).uppercased()\n        }\n\
    \    }\n    return encoded", "    var encoded = \"\"\n    for char in message\
    \ {\n        if char.isLetter {\n            encoded.append(char.isUppercase ?\
    \ char.lowercased() : char.uppercased())\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for letter\
    \ in message {\n        if let index = letters.firstIndex(of: letter.lowercased())\
    \ {\n            if vowels.contains(letter.lowercased()) {\n                encodedMessage.append(letters[letters.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encodedMessage.append(letters[index])\n\
    \            }\n        }\n    }\n    return encodedMessage", "    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    var encoded = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            let newIndex = (index + 2) % alphabet.count\n          \
    \  encoded.append(alphabet[newIndex])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        if let index = alphabet.firstIndex(of: char.lowercased()) {\n   \
    \         let newIndex = alphabet.index(index, offsetBy: 2)\n            if vowels.contains(char.lowercased())\
    \ {\n                encoded.append(alphabet[newIndex])\n            } else {\n\
    \                encoded.append(alphabet[newIndex].uppercased())\n           \
    \ }\n        } else {\n            encoded.append(char)\n        }\n    }\n  \
    \  return encoded", "    var encodedMessage = \"\"\n    let vowels = \"aeiou\"\
    \n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n\
    \        if let index = alphabet.firstIndex(of: char.lowercased()) {\n       \
    \     let newIndex = alphabet.index(index, offsetBy: 2)\n            let newChar\
    \ = alphabet[newIndex]\n            if vowels.contains(char.lowercased()) {\n\
    \                encodedMessage.append(newChar.uppercased())\n            } else\
    \ {\n                encodedMessage.append(newChar)\n            }\n        }\
    \ else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    var encodedMessage = \"\"\n    for char in message {\n\
    \        if char.isLetter {\n            let ascii = char.asciiValue!\n      \
    \      let encoded = ascii + 2\n            encodedMessage.append(Character(UnicodeScalar(encoded)!))\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    var encodedMessage = \"\"\n    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.firstIndex(of: char)!) + 2)\n            encodedMessage.append(alphabet[index])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    var encodedMessage = \"\"\n    let vowels: Set<Character>\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for letter in message {\n        if vowels.contains(letter) {\n        \
    \    let index = alphabet.index(of: letter)!\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else {\n            encodedMessage.append(letter)\n        }\n    }\n   \
    \ return encodedMessage", "    let vowels: Set<Character> = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    let alphabet: [Character] = Array(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    var encodedMessage = \"\"\n    for character in message {\n        if vowels.contains(character)\
    \ {\n            let index = alphabet.firstIndex(of: character)!\n           \
    \ let newIndex = (index + 2) % alphabet.count\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(character)\n        }\n \
    \   }\n    return encodedMessage", "    var encodedMessage = \"\"\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    for character in message {\n        if vowels.contains(character)\
    \ {\n            let index = alphabet.firstIndex(of: character)!\n           \
    \ let newIndex = index + 2\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(character)\n        }\n \
    \   }\n    return encodedMessage", "    let vowels: [Character] = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for letter in message\
    \ {\n        if vowels.contains(letter) {\n            let index = vowels.firstIndex(of:\
    \ letter)!\n            encodedMessage.append(vowels[(index + 2) % vowels.count])\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage.uppercased()", "    var encoded = \"\"\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char\
    \ in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                encoded.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encoded.append(alphabet[index])\n\
    \            }\n        } else {\n            encoded.append(char)\n        }\n\
    \    }\n    return encoded", "    var encodedMessage = \"\"\n    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encodedMessage", "    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if letter.isLetter {\n        \
    \    if letter.isUppercase {\n                encodedMessage.append(letter.lowercased())\n\
    \            } else {\n                encodedMessage.append(letter.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for\
    \ char in message {\n        if vowels.contains(char) {\n            let index\
    \ = vowels.firstIndex(of: char)!\n            let nextIndex = (index + 2) % vowels.count\n\
    \            encodedMessage.append(vowels[nextIndex])\n        } else {\n    \
    \        encodedMessage.append(char)\n        }\n    }\n    return encodedMessage",
  '    return ""', "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n \
    \   for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \   if vowels.contains(char.lowercased()) {\n                encodedMessage.append(alphabet[newIndex])\n\
    \            } else {\n                encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n   \
    \ let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for\
    \ char in message {\n        if let index = letters.firstIndex(of: char.lowercased())\
    \ {\n            let newIndex = index + 2\n            let newChar = letters[newIndex\
    \ % letters.count]\n            encoded.append(vowels.contains(char.lowercased())\
    \ ? newChar : newChar.uppercased())\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        if let index = letters.firstIndex(of: char.lowercased()) {\n    \
    \        if vowels.contains(char.lowercased()) {\n                encoded.append(letters[letters.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encoded.append(letters[index].uppercased())\n\
    \            }\n        }\n    }\n    return encoded", "    let vowels: [Character]\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for letter in message\
    \ {\n        if vowels.contains(letter) {\n            let index = alphabet.firstIndex(of:\
    \ letter)!\n            let newIndex = index + 2\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels: [Character] = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ]\n    var encodedMessage = \"\"\n    for letter in message {\n        if vowels.contains(letter)\
    \ {\n            let index = alphabet.firstIndex(of: letter)!\n            let\
    \ newIndex = (index + 2) % 26\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage", "    var encoded = \"\"\n    for char in message\
    \ {\n        if char.isLetter {\n            encoded.append(char.isUppercase ?\
    \ char.lowercased() : char.uppercased())\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    let vowels: Set<Character> = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = Array(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    let alphabetSet: Set<Character> = Set(alphabet)\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if letter.isLetter {\n        \
    \    let letterIndex = alphabet.firstIndex(of: letter.lowercased())!\n       \
    \     let encodedLetter: Character\n            if letter.isUppercase {\n    \
    \            encodedLetter = alphabet[(letterIndex + 2) % alphabet.count].uppercased()\n\
    \            } else {\n                encodedLetter = alphabet[(letterIndex +\
    \ 2) % alphabet.count]\n            }\n            if vowels.contains(letter.lowercased())\
    \ {\n                encodedMessage.append(encodedLetter)\n            } else\
    \ {\n                encodedMessage.append(letter)\n            }\n        } else\
    \ {\n            encodedMessage.append(letter)\n        }\n    }\n    return encodedMessage",
  "    var encodedMessage = \"\"\n    let vowels = \"aeiou\"\n    for character in\
    \ message {\n        if vowels.contains(character) {\n            let index =\
    \ vowels.firstIndex(of: character)!\n            let newIndex = (index + 2) %\
    \ 5\n            encodedMessage.append(vowels[newIndex])\n        } else {\n \
    \           encodedMessage.append(character)\n        }\n    }\n    return encodedMessage",
  "    var encodedMessage = \"\"\n    for char in message {\n        if char.isLetter\
    \ {\n            encodedMessage += String(char.isUppercase ? char.lowercased()\
    \ : char.uppercased())\n        } else {\n            encodedMessage += String(char)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n \
    \   var encoded = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = vowels.firstIndex(of: char)!\n            let newIndex\
    \ = (index + 2) % vowels.count\n            encoded.append(vowels[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(alphabet[alphabet.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\
    \n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage =\
    \ \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    let vowels: [Character] = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for letter in message {\n\
    \        if vowels.contains(letter) {\n            let index = alphabet.firstIndex(of:\
    \ letter)!\n            let newIndex = index + 2\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage", "    var result = \"\"\n    let vowels = \"aeiou\"\
    \n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n\
    \        if let index = alphabet.firstIndex(of: char.lowercased()) {\n       \
    \     if vowels.contains(char.lowercased()) {\n                let newIndex =\
    \ alphabet.index(index, offsetBy: 2)\n                result.append(alphabet[newIndex].uppercased())\n\
    \            } else {\n                result.append(alphabet[index].uppercased())\n\
    \            }\n        } else {\n            result.append(char)\n        }\n\
    \    }\n    return result", "    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if char.isLetter {\n            if char.isUppercase {\n         \
    \       encodedMessage.append(char.lowercased())\n            } else {\n     \
    \           encodedMessage.append(char.uppercased())\n            }\n        }\
    \ else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char.lowercased()) {\n            if vowels.contains(char.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex])\n            } else {\n\
    \                encodedMessage.append(alphabet[index])\n            }\n     \
    \   } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    var encodedMessage = \"\"\n    for char in message {\n\
    \        if char.isLetter {\n            if char.isUppercase {\n             \
    \   encodedMessage.append(char.lowercased())\n            } else {\n         \
    \       encodedMessage.append(char.uppercased())\n            }\n        } else\
    \ {\n            encodedMessage.append(char)\n        }\n    }\n    return encodedMessage",
  "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encoded = \"\"\n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                let newIndex = index + 2\n                if newIndex > alphabet.count\
    \ - 1 {\n                    encoded.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: newIndex - alphabet.count)])\n                } else {\n         \
    \           encoded.append(alphabet[alphabet.index(alphabet.startIndex, offsetBy:\
    \ newIndex)])\n                }\n            } else {\n                encoded.append(alphabet[index].uppercased())\n\
    \            }\n        } else {\n            encoded.append(letter)\n       \
    \ }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if let index = letters.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                encodedMessage.append(letters[letters.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encodedMessage.append(letters[index])\n\
    \            }\n        }\n    }\n    return encodedMessage", "    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let asciiValue = ascii + 2\n         \
    \   let newChar = Character(UnicodeScalar(asciiValue)!)\n            encodedMessage.append(newChar)\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    var encoded = \"\"\n    for char in message\
    \ {\n        if char.isLetter {\n            let ascii = char.asciiValue!\n  \
    \          let asciiEncoded = ascii + 2\n            let charEncoded = Character(UnicodeScalar(asciiEncoded)!)\n\
    \            encoded.append(charEncoded)\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    var encodedMessage = \"\"\n    for\
    \ character in message {\n        if character.isLetter {\n            if character.isUppercase\
    \ {\n                encodedMessage.append(character.lowercased())\n         \
    \   } else {\n                encodedMessage.append(character.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(character)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  \
    \  var encodedMessage = \"\"\n    for letter in message {\n        if let index\
    \ = alphabet.firstIndex(of: letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    for char in message {\n        encodedMessage += encodeChar(char: char)\n\
    \    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n    let vowels2\
    \ = \"cdfghjklmnpqrstvwxyz\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        if vowels.contains(char) {\n            encoded.append(vowels2[vowels.firstIndex(of:\
    \ char)!])\n        } else if vowels2.contains(char) {\n            encoded.append(vowels[vowels2.firstIndex(of:\
    \ char)!])\n        } else {\n            encoded.append(char)\n        }\n  \
    \  }\n    return encoded", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        if let index = alphabet.firstIndex(of: char.lowercased()) {\n   \
    \         if vowels.contains(char.lowercased()) {\n                let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n                encoded.append(alphabet[newIndex])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        } else {\n            encoded.append(char)\n        }\n   \
    \ }\n    return encoded", "    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if char.isLetter {\n            let ascii = char.asciiValue!\n  \
    \          let isUpper = ascii >= 65 && ascii <= 90\n            let asciiOffset\
    \ = isUpper ? 65 : 97\n            let asciiValue = ascii - asciiOffset\n    \
    \        let encodedAsciiValue = (asciiValue + 2) % 26\n            let encodedAscii\
    \ = encodedAsciiValue + asciiOffset\n            let encodedChar = Character(UnicodeScalar(encodedAscii)!)\n\
    \            encodedMessage.append(encodedChar)\n        } else {\n          \
    \  encodedMessage.append(char)\n        }\n    }\n    return encodedMessage",
  "    var encodedMessage = \"\"\n    for char in message {\n        if char.isLetter\
    \ {\n            if char.isUppercase {\n                encodedMessage.append(char.lowercased())\n\
    \            } else {\n                encodedMessage.append(char.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n   \
    \ let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n\
    \    for char in message {\n        if let index = letters.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                let\
    \ newIndex = index + 2\n                if newIndex > letters.count - 1 {\n  \
    \                  encodedMessage.append(letters[letters.index(letters.startIndex,\
    \ offsetBy: newIndex - letters.count)])\n                } else {\n          \
    \          encodedMessage.append(letters[letters.index(letters.startIndex, offsetBy:\
    \ newIndex)])\n                }\n            } else {\n                encodedMessage.append(letters[index].uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let\
    \ letters: Set<Character> = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\",\
    \ \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for char in message\
    \ {\n        if letters.contains(char) {\n            if vowels.contains(char)\
    \ {\n                let nextChar = char.unicodeScalars.first!.value + 2\n   \
    \             let nextCharString = String(UnicodeScalar(nextChar)!)\n        \
    \        encodedMessage += nextCharString\n            } else {\n            \
    \    encodedMessage += String(char).uppercased()\n            }\n        } else\
    \ {\n            encodedMessage += String(char)\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)\n            let nextIndex\
    \ = alphabet.index(index!, offsetBy: 2)\n            encoded.append(alphabet[nextIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    var encodedMessage = \"\"\n    for char in message {\n      \
    \  if char.isUppercase {\n            encodedMessage.append(char.lowercased())\n\
    \        } else {\n            encodedMessage.append(char.uppercased())\n    \
    \    }\n    }\n    return encodedMessage", "    let vowels: Set<Character> = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char in message {\n  \
    \      if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            encodedMessage.append(alphabet[(index + 2) % alphabet.count])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage.uppercased()", "    let vowels = \"aeiou\"\n    let\
    \ letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n  \
    \  for letter in message {\n        if let index = letters.firstIndex(of: letter.lowercased())\
    \ {\n            if vowels.contains(letter.lowercased()) {\n                let\
    \ newIndex = index + 2\n                encodedMessage.append(letters[newIndex\
    \ % letters.count].uppercased())\n            } else {\n                encodedMessage.append(letters[index].uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n \
    \   let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\
    \n    for char in message {\n        if let index = letters.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                let\
    \ newIndex = index + 2\n                if newIndex > letters.count - 1 {\n  \
    \                  encodedMessage.append(letters[letters.index(letters.startIndex,\
    \ offsetBy: newIndex - letters.count)])\n                } else {\n          \
    \          encodedMessage.append(letters[letters.index(letters.startIndex, offsetBy:\
    \ newIndex)])\n                }\n            } else {\n                encodedMessage.append(letters[index].uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n   \
    \ let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for\
    \ char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n                encoded.append(alphabet[newIndex])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        } else {\n            encoded.append(char)\n        }\n   \
    \ }\n    return encoded", "    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message {\n        if let index\
    \ = letters.firstIndex(of: letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                encodedMessage.append(letters[letters.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(letters[index])\n\
    \            }\n        }\n    }\n    return encodedMessage", "    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let letters\
    \ = Array(message)\n    var encoded = \"\"\n    for letter in letters {\n    \
    \    if vowels.contains(String(letter).lowercased()) {\n            let index\
    \ = vowels.firstIndex(of: String(letter).lowercased())!\n            encoded +=\
    \ String(vowels[(index + 2) % 5]).uppercased()\n        } else {\n           \
    \ encoded += String(letter).uppercased()\n        }\n    }\n    return encoded",
  "    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = vowels.firstIndex(of: char)!\n            let nextIndex =\
    \ (index + 2) % vowels.count\n            encodedMessage.append(vowels[nextIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if char.isLetter {\n            if char.isUppercase {\n         \
    \       encodedMessage.append(char.lowercased())\n            } else {\n     \
    \           encodedMessage.append(char.uppercased())\n            }\n        }\
    \ else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    var encodedMessage = \"\"\n    for char in message {\n\
    \        if char.isLetter {\n            let asciiValue = char.asciiValue!\n \
    \           let encodedValue = asciiValue + 2\n            let encodedChar = Character(UnicodeScalar(encodedValue)!)\n\
    \            encodedMessage.append(encodedChar)\n        } else {\n          \
    \  encodedMessage.append(char)\n        }\n    }\n    return encodedMessage",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let letters = Array(message)\n\
    \    var encoded = \"\"\n    for letter in letters {\n        if vowels.contains(String(letter).lowercased())\
    \ {\n            encoded += String(letter).lowercased() == \"u\" ? \"a\" : String(letters[letters.firstIndex(of:\
    \ letter)! + 2])\n        } else {\n            encoded += String(letter).lowercased()\
    \ == letter ? String(letter).uppercased() : String(letter).lowercased()\n    \
    \    }\n    }\n    return encoded", "    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if char.isLetter {\n            let ascii = char.asciiValue!\n\
    \            let encodedChar = ascii + 2\n            let encodedAscii = encodedChar\
    \ > 90 ? encodedChar - 26 : encodedChar\n            encodedMessage.append(Character(UnicodeScalar(encodedAscii)!))\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if char.isLetter {\n            if char.isLowercase {\n         \
    \       encodedMessage.append(char.uppercased())\n            } else {\n     \
    \           encodedMessage.append(char.lowercased())\n            }\n        }\
    \ else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    return message.map {\n        switch $0 {\n        case\
    \ \"a\":\n            return \"c\"\n        case \"e\":\n            return \"\
    g\"\n        case \"i\":\n            return \"k\"\n        case \"o\":\n    \
    \        return \"q\"\n        case \"u\":\n            return \"s\"\n       \
    \ case \"A\":\n            return \"C\"\n        case \"E\":\n            return\
    \ \"G\"\n        case \"I\":\n            return \"K\"\n        case \"O\":\n\
    \            return \"Q\"\n        case \"U\":\n            return \"S\"\n   \
    \     default:\n            return $0\n        }\n    }.map {\n        switch\
    \ $0 {\n        case \"a\"...\"z\":\n            return Character(UnicodeScalar($0.asciiValue!\
    \ + 2)!)\n        case \"A\"...\"Z\":\n            return Character(UnicodeScalar($0.asciiValue!\
    \ + 2)!)\n        default:\n            return $0\n        }\n    }.joined()",
  "  var encoded = \"\"\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  let\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  for char in message {\n    if vowels.contains(String(char).lowercased())\
    \ {\n      let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.firstIndex(of: char.lowercased())!) + 2)\n\
    \      encoded.append(alphabet[index])\n    } else {\n      encoded.append(char)\n\
    \    }\n  }\n  return encoded", "    var encodedMessage = \"\"\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in message {\n        if\
    \ vowels.contains(String(char).lowercased()) {\n            encodedMessage +=\
    \ String(char).lowercased() == \"u\" ? \"a\" : String(char).lowercased() == \"\
    z\" ? \"b\" : String(char).lowercased() == \"y\" ? \"c\" : String(char).lowercased()\
    \ == \"x\" ? \"d\" : String(char).lowercased() == \"w\" ? \"e\" : String(char).lowercased()\
    \ == \"v\" ? \"f\" : String(char).lowercased() == \"u\" ? \"g\" : String(char).lowercased()\
    \ == \"t\" ? \"h\" : String(char).lowercased() == \"s\" ? \"i\" : String(char).lowercased()\
    \ == \"r\" ? \"j\" : String(char).lowercased() == \"q\" ? \"k\" : String(char).lowercased()\
    \ == \"p\" ? \"l\" : String(char).lowercased() == \"o\" ? \"m\" : String(char).lowercased()\
    \ == \"n\" ? \"n\" : String(char).lowercased() == \"m\" ? \"o\" : String(char).lowercased()\
    \ == \"l\" ? \"p\" : String(char).lowercased() == \"k\" ? \"q\" : String(char).lowercased()\
    \ == \"j\" ? \"r\" : String(char).lowercased() == \"i\" ? \"s\" : String(char).lowercased()\
    \ == \"h\" ? \"t\" : String(char).lowercased() == \"g\" ? \"u\" : String(char).lowercased()\
    \ == \"f\" ? \"v\" : String(char).lowercased() == \"e\" ? \"w\" : String(char).lowercased()\
    \ == \"d\" ? \"x\" : String(char).lowercased() == \"c\" ? \"y\" : String(char).lowercased()\
    \ == \"b\" ? \"z\" : String(char).lowercased() == \"a\"", "    let vowels = \"\
    aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded =\
    \ \"\"\n    for char in message {\n        if vowels.contains(char) {\n      \
    \      let index = alphabet.firstIndex(of: char)!\n            let newIndex =\
    \ alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(alphabet[alphabet.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        } else {\n            encoded.append(char)\n        }\n   \
    \ }\n    return encoded", "    let vowels = \"aeiou\"\n    let vowels2 = \"cdfghjklmnpqrstvwxyz\"\
    \n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n\
    \    for char in message {\n        if alphabet.contains(char) {\n           \
    \ let index = alphabet.firstIndex(of: char)!\n            if vowels.contains(char)\
    \ {\n                let index2 = vowels.firstIndex(of: char)!\n             \
    \   encoded.append(vowels2[vowels2.index(vowels2.startIndex, offsetBy: index2)])\n\
    \            } else {\n                encoded.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: index)])\n            }\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for letter\
    \ in message {\n        if let index = alphabet.firstIndex(of: letter.lowercased())\
    \ {\n            if vowels.contains(letter.lowercased()) {\n                encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage", "    var encodedMessage\
    \ = \"\"\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for letter in\
    \ message {\n        if letter.isUppercase {\n            encodedMessage.append(letter.lowercased())\n\
    \        } else if letter.isLowercase {\n            encodedMessage.append(letter.uppercased())\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    for i in 0..<encodedMessage.count {\n        if vowels.contains(encodedMessage[encodedMessage.index(encodedMessage.startIndex,\
    \ offsetBy: i)]) {\n            encodedMessage.remove(at: encodedMessage.index(encodedMessage.startIndex,\
    \ offsetBy: i))\n            encodedMessage.insert(alphabet[alphabet.firstIndex(of:\
    \ encodedMessage[encodedMessage.index(encodedMessage.startIndex, offsetBy: i)])!\
    \ + 2], at: encodedMessage.index(encodedMessage.startIndex, offsetBy: i))\n  \
    \      }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in message\
    \ {\n        if vowels.contains(String(char).lowercased()) {\n            encodedMessage\
    \ += String(char).lowercased() == \"u\" ? \"a\" : String(char).lowercased() ==\
    \ \"z\" ? \"b\" : String(char).lowercased() == \"y\" ? \"c\" : String(char).lowercased()\
    \ == \"x\" ? \"d\" : String(char).lowercased() == \"w\" ? \"e\" : String(char).lowercased()\
    \ == \"v\" ? \"f\" : String(char).lowercased() == \"u\" ? \"g\" : String(char).lowercased()\
    \ == \"t\" ? \"h\" : String(char).lowercased() == \"s\" ? \"i\" : String(char).lowercased()\
    \ == \"r\" ? \"j\" : String(char).lowercased() == \"q\" ? \"k\" : String(char).lowercased()\
    \ == \"p\" ? \"l\" : String(char).lowercased() == \"o\" ? \"m\" : String(char).lowercased()\
    \ == \"n\" ? \"n\" : String(char).lowercased() == \"m\" ? \"o\" : String(char).lowercased()\
    \ == \"l\" ? \"p\" : String(char).lowercased() == \"k\" ? \"q\" : String(char).lowercased()\
    \ == \"j\" ? \"r\" : String(char).lowercased() == \"i\" ? \"s\" : String(char).lowercased()\
    \ == \"h\" ? \"t\" : String(char).lowercased() == \"g\" ? \"u\" : String(char).lowercased()\
    \ == \"f\" ? \"v\" : String(char).lowercased() == \"e\" ? \"w\" : String(char).lowercased()\
    \ == \"d\" ? \"x\" : String(char).lowercased() == \"c\" ? \"y\" : String(char).lowercased()\
    \ == \"b\" ? \"z\" : String(char).lowercased() == \"a\"", "    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            encodedMessage\
    \ += String(char.lowercased().unicodeScalars.first!.value + 2)\n        }\n  \
    \  }\n    return encodedMessage", "    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if char.isLetter {\n            let ascii = char.asciiValue!\n\
    \            let newAscii = ascii + 2\n            let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \            encodedMessage.append(newChar)\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    for char in message {\n        if char.isLetter {\n            if char.isUppercase\
    \ {\n                encodedMessage.append(char.lowercased())\n            } else\
    \ {\n                encodedMessage.append(char.uppercased())\n            }\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let vowels2 = \"\
    cdfghjklmnpqrstvwxyz\"\n    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if vowels.contains(char) {\n            let index = vowels.firstIndex(of:\
    \ char)!\n            let newIndex = vowels.index(index, offsetBy: 2)\n      \
    \      encodedMessage.append(vowels[newIndex])\n        } else if vowels2.contains(char)\
    \ {\n            let index = vowels2.firstIndex(of: char)!\n            let newIndex\
    \ = vowels2.index(index, offsetBy: 2)\n            encodedMessage.append(vowels2[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message\
    \ {\n        if let index = alphabet.firstIndex(of: char.lowercased()) {\n   \
    \         if vowels.contains(char.lowercased()) {\n                encoded.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encoded.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\
    \n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage =\
    \ \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encodedMessage.append(alphabet[newIndex])\n            } else {\n    \
    \            encodedMessage.append(alphabet[index])\n            }\n        }\
    \ else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n   \
    \ let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for\
    \ letter in message {\n        if let index = alphabet.firstIndex(of: letter.lowercased())\
    \ {\n            let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \   let newLetter = alphabet[newIndex]\n            if vowels.contains(newLetter)\
    \ {\n                encoded.append(newLetter.uppercased())\n            } else\
    \ {\n                encoded.append(newLetter)\n            }\n        } else\
    \ {\n            encoded.append(letter)\n        }\n    }\n    return encoded",
  "    let vowels = \"aeiou\"\n    let vowels2 = \"cdfghjklmnpqrstvwxyz\"\n    var\
    \ encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = vowels.firstIndex(of: char)!\n            encodedMessage.append(vowels2[vowels2.index(vowels2.startIndex,\
    \ offsetBy: index)])\n        } else if vowels2.contains(char) {\n           \
    \ let index = vowels2.firstIndex(of: char)!\n            encodedMessage.append(vowels[vowels.index(vowels.startIndex,\
    \ offsetBy: index)])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    let vowels = \"aeiou\"\n    for letter in message {\n        if vowels.contains(letter)\
    \ {\n            let index = vowels.firstIndex(of: letter)!\n            let nextIndex\
    \ = vowels.index(after: index)\n            let nextLetter = vowels[nextIndex]\n\
    \            encodedMessage.append(nextLetter)\n        } else {\n           \
    \ encodedMessage.append(letter)\n        }\n    }\n    return encodedMessage",
  "    var encoded = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n\
    \        if vowels.contains(String(char).lowercased()) {\n            let index\
    \ = alphabet.index(alphabet.startIndex, offsetBy: alphabet.count - alphabet.count\
    \ + alphabet.index(of: String(char).lowercased())!.encodedOffset + 2)\n      \
    \      encoded.append(alphabet[index])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    let vowels: [Character] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for char in\
    \ message {\n        if vowels.contains(char) {\n            let index = vowels.firstIndex(of:\
    \ char)!\n            let nextIndex = (index + 2) % vowels.count\n           \
    \ encodedMessage.append(vowels[nextIndex])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels: [Character] =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            encodedMessage.append(alphabet[index + 2])\n        } else\
    \ {\n            encodedMessage.append(char)\n        }\n    }\n    return encodedMessage",
  "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encodedMessage = \"\"\n    for letter in message {\n        if let index\
    \ = alphabet.firstIndex(of: letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex])\n            } else {\n\
    \                encodedMessage.append(letter.uppercased())\n            }\n \
    \       }\n    }\n    return encodedMessage", "    let vowels: Set<Character>\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for character in message\
    \ {\n        if vowels.contains(character) {\n            let index = alphabet.firstIndex(of:\
    \ character)!\n            let newIndex = (index + 2) % alphabet.count\n     \
    \       encodedMessage.append(alphabet[newIndex])\n        } else {\n        \
    \    encodedMessage.append(character)\n        }\n    }\n    return encodedMessage",
  "    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encoded = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = (index + 2) % letters.count\n\
    \            let newChar = letters[newIndex]\n            encoded.append(vowels.contains(char.lowercased())\
    \ ? newChar : newChar.uppercased())\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for letter in\
    \ message {\n        if let index = letters.firstIndex(of: letter.lowercased())\
    \ {\n            let isUppercased = letter.isUppercased\n            if vowels.contains(letter.lowercased())\
    \ {\n                let newIndex = letters.index(index, offsetBy: 2)\n      \
    \          encoded.append(letters[newIndex].uppercased() if isUppercased else\
    \ letters[newIndex])\n            } else {\n                encoded.append(letters[index].uppercased()\
    \ if isUppercased else letters[index])\n            }\n        }\n    }\n    return\
    \ encoded", "    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = vowels.firstIndex(of: char)!\n            let newIndex\
    \ = (index + 2) % vowels.count\n            encodedMessage.append(vowels[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    var encodedMessage = \"\"\n    for char in message\
    \ {\n        let charString = String(char)\n        if charString.lowercased()\
    \ == charString {\n            encodedMessage += charString.uppercased()\n   \
    \     } else {\n            encodedMessage += charString.lowercased()\n      \
    \  }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encodedMessage", "    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = index + 2\n            if newIndex\
    \ > letters.count - 1 {\n                encoded.append(letters[letters.index(letters.startIndex,\
    \ offsetBy: newIndex - letters.count)])\n            } else {\n              \
    \  encoded.append(letters[letters.index(letters.startIndex, offsetBy: newIndex)])\n\
    \            }\n        } else {\n            encoded.append(char)\n        }\n\
    \    }\n    return encoded"]
stop_tokens:
- "\n}"
