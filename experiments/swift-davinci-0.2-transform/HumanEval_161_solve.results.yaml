language: swift
name: HumanEval_161_solve
results:
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpxishqhth/tmpxishqhth.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae26402dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae263d24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae263d24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae263d237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxishqhth                        0x0000564ae1ba08d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae264219460 __libc_start_main +
    245

    6    tmpxishqhth                        0x0000564ae1ba0429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  var result = \"\"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isUppercase\
    \ ? c.lowercased() : c.uppercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  var result = \"\"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isUppercase\
    \ ? c.lowercased() : c.uppercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpxishqhth/tmpxishqhth.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae26402dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae263d24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae263d24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae263d237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxishqhth                        0x0000564ae1ba08d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae264219460 __libc_start_main +
    245

    6    tmpxishqhth                        0x0000564ae1ba0429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    if result.isEmpty {\n\
    \        return String(s.reversed())\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpd_7xv7p9/tmpd_7xv7p9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae410e43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae410b3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae410b3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae410b397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_7xv7p9                        0x000055ed997548d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae41102f460 __libc_start_main +
    245

    6    tmpd_7xv7p9                        0x000055ed99754429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    if result.isEmpty {\n\
    \        return String(s.reversed())\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpd_7xv7p9/tmpd_7xv7p9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae410e43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae410b3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae410b3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae410b397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_7xv7p9                        0x000055ed997548d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae41102f460 __libc_start_main +
    245

    6    tmpd_7xv7p9                        0x000055ed99754429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    if result.isEmpty {\n\
    \        return String(s.reversed())\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpd_7xv7p9/tmpd_7xv7p9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae410e43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae410b3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae410b3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae410b397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_7xv7p9                        0x000055ed997548d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae41102f460 __libc_start_main +
    245

    6    tmpd_7xv7p9                        0x000055ed99754429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    if result.isEmpty {\n\
    \        return String(s.reversed())\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpd_7xv7p9/tmpd_7xv7p9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae410e43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae410b3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae410b3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae410b397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_7xv7p9                        0x000055ed997548d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae41102f460 __libc_start_main +
    245

    6    tmpd_7xv7p9                        0x000055ed99754429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpxishqhth/tmpxishqhth.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae26402dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae263d24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae263d24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae263d237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxishqhth                        0x0000564ae1ba08d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae264219460 __libc_start_main +
    245

    6    tmpxishqhth                        0x0000564ae1ba0429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.isEmpty {\n        return\
    \ s\n    }\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result.append(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpdhan4kuj/tmpdhan4kuj.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add3d325c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add3d01cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add3d01c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add3d01b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdhan4kuj                        0x000055e2c49fa8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002add3d511460 __libc_start_main +
    245

    6    tmpdhan4kuj                        0x000055e2c49fa429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    if result.isEmpty {\n\
    \        return String(s.reversed())\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpd_7xv7p9/tmpd_7xv7p9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae410e43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae410b3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae410b3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae410b397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_7xv7p9                        0x000055ed997548d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae41102f460 __libc_start_main +
    245

    6    tmpd_7xv7p9                        0x000055ed99754429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    if result.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpmnmwc87y/tmpmnmwc87y.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5235833c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b523552ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b523552a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52355297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmnmwc87y                        0x00005576d8a488d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b5235a1f460 __libc_start_main +
    245

    6    tmpmnmwc87y                        0x00005576d8a48429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    if result.isEmpty {\n\
    \        return String(s.reversed())\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpd_7xv7p9/tmpd_7xv7p9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae410e43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae410b3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae410b3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae410b397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_7xv7p9                        0x000055ed997548d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae41102f460 __libc_start_main +
    245

    6    tmpd_7xv7p9                        0x000055ed99754429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    guard s.contains(where: { $0.isLetter\
    \ }) else {\n        return String(s.reversed())\n    }\n    return String(s.map\
    \ { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased())\
    \ : $0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = CharacterSet.letters\n\
    \    let digits = CharacterSet.decimalDigits\n    var result = \"\"\n    for c\
    \ in s {\n        if letters.contains(c.unicodeScalars.first!) {\n           \
    \ result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ if digits.contains(c.unicodeScalars.first!) {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpxwl2pgp8.swift:15:19: error: cannot find 'CharacterSet' in scope\n\
    \    let letters = CharacterSet.letters\n                  ^~~~~~~~~~~~\n/tmp/tmpxwl2pgp8.swift:16:18:\
    \ error: cannot find 'CharacterSet' in scope\n    let digits = CharacterSet.decimalDigits\n\
    \                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    if result.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp_c9zrl1o/tmp_c9zrl1o.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d35b2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d35824b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d35824988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d358237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_c9zrl1o                        0x00005608c788d8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b8d35d19460 __libc_start_main +
    245

    6    tmp_c9zrl1o                        0x00005608c788d429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = CharacterSet.letters\n\
    \    var result = \"\"\n    for c in s {\n        if letters.contains(c.unicodeScalars.first!)\
    \ {\n            if c.isUppercase {\n                result.append(c.lowercased())\n\
    \            } else {\n                result.append(c.uppercased())\n       \
    \     }\n        } else {\n            result.append(c)\n        }\n    }\n  \
    \  if result.isEmpty {\n        return String(s.reversed())\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp3p29yopj.swift:15:19: error: cannot find 'CharacterSet' in scope\n\
    \    let letters = CharacterSet.letters\n                  ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.isEmpty {\n        return\
    \ s\n    }\n    var result = \"\"\n    for c in s {\n        if c.isLetter {\n\
    \            result.append(c.isLowercase ? c.uppercased() : c.lowercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvamsi_dv/tmpvamsi_dv.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78b7545c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78b723cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78b723c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78b723b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvamsi_dv                        0x0000561796e578d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b78b7731460 __libc_start_main +
    245

    6    tmpvamsi_dv                        0x0000561796e57429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    if result.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp_c9zrl1o/tmp_c9zrl1o.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d35b2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d35824b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d35824988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d358237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_c9zrl1o                        0x00005608c788d8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b8d35d19460 __libc_start_main +
    245

    6    tmp_c9zrl1o                        0x00005608c788d429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.isEmpty {\n        return\
    \ s\n    }\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result.append(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpdhan4kuj/tmpdhan4kuj.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add3d325c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add3d01cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add3d01c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add3d01b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdhan4kuj                        0x000055e2c49fa8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002add3d511460 __libc_start_main +
    245

    6    tmpdhan4kuj                        0x000055e2c49fa429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    if result.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp_c9zrl1o/tmp_c9zrl1o.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d35b2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d35824b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d35824988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d358237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_c9zrl1o                        0x00005608c788d8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b8d35d19460 __libc_start_main +
    245

    6    tmp_c9zrl1o                        0x00005608c788d429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.toggle() : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpye22d95r.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.toggle() : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpye22d95r.swift:19:37: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'toggle'\n    return s.map { $0.isLetter ? $0.toggle() : $0 }\n\
    \                                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = CharacterSet.letters\n\
    \    var result = \"\"\n    for char in s {\n        if letters.contains(char.unicodeScalars.first!)\
    \ {\n            result += String(char).lowercased() == String(char) ? String(char).uppercased()\
    \ : String(char).lowercased()\n        } else {\n            result += String(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp95db3_us.swift:15:19: error: cannot find 'CharacterSet' in scope\n\
    \    let letters = CharacterSet.letters\n                  ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return String(s.map { $0.isLetter ? $0.toggle() : $0 })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp6viq6kss.swift:19:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'toggle'\n    return String(s.map { $0.isLetter ?\
    \ $0.toggle() : $0 })\n                                        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = CharacterSet.letters\n\
    \    let digits = CharacterSet.decimalDigits\n    var result = \"\"\n    for c\
    \ in s {\n        if letters.contains(UnicodeScalar(String(c))!) {\n         \
    \   if c.isUppercase {\n                result.append(c.lowercased())\n      \
    \      } else {\n                result.append(c.uppercased())\n            }\n\
    \        } else if digits.contains(UnicodeScalar(String(c))!) {\n            result.append(c)\n\
    \        }\n    }\n    if result.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpvv6z82zz.swift:15:19: error: cannot find 'CharacterSet' in scope\n\
    \    let letters = CharacterSet.letters\n                  ^~~~~~~~~~~~\n/tmp/tmpvv6z82zz.swift:16:18:\
    \ error: cannot find 'CharacterSet' in scope\n    let digits = CharacterSet.decimalDigits\n\
    \                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.reversed().map { $0.isLetter\
    \ ? $0.isUppercase ? $0.lowercased() : $0.uppercased() : $0 }.joined()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp2t1h34a9.swift:15:43: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to closure result type 'String'\n    return s.reversed().map\
    \ { $0.isLetter ? $0.isUppercase ? $0.lowercased() : $0.uppercased() : $0 }.joined()\n\
    \                              ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2t1h34a9.swift:15:60: error: result values in '? :' expression have mismatching\
    \ types 'String' and 'String.Element' (aka 'Character')\n    return s.reversed().map\
    \ { $0.isLetter ? $0.isUppercase ? $0.lowercased() : $0.uppercased() : $0 }.joined()\n\
    \                                            ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.reversed().map { $0.isLetter\
    \ ? $0.isUppercase ? $0.lowercased() : $0.uppercased() : $0 }.joined()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp2t1h34a9.swift:15:43: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to closure result type 'String'\n    return s.reversed().map\
    \ { $0.isLetter ? $0.isUppercase ? $0.lowercased() : $0.uppercased() : $0 }.joined()\n\
    \                              ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2t1h34a9.swift:15:60: error: result values in '? :' expression have mismatching\
    \ types 'String' and 'String.Element' (aka 'Character')\n    return s.reversed().map\
    \ { $0.isLetter ? $0.isUppercase ? $0.lowercased() : $0.uppercased() : $0 }.joined()\n\
    \                                            ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.isEmpty {\n        return\
    \ s\n    }\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result.append(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpdhan4kuj/tmpdhan4kuj.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add3d325c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add3d01cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add3d01c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add3d01b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdhan4kuj                        0x000055e2c49fa8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002add3d511460 __libc_start_main +
    245

    6    tmpdhan4kuj                        0x000055e2c49fa429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    if s.contains(\"\
    a\") || s.contains(\"b\") || s.contains(\"c\") || s.contains(\"d\") || s.contains(\"\
    e\") || s.contains(\"f\") || s.contains(\"g\") || s.contains(\"h\") || s.contains(\"\
    i\") || s.contains(\"j\") || s.contains(\"k\") || s.contains(\"l\") || s.contains(\"\
    m\") || s.contains(\"n\") || s.contains(\"o\") || s.contains(\"p\") || s.contains(\"\
    q\") || s.contains(\"r\") || s.contains(\"s\") || s.contains(\"t\") || s.contains(\"\
    u\") || s.contains(\"v\") || s.contains(\"w\") || s.contains(\"x\") || s.contains(\"\
    y\") || s.contains(\"z\") {\n        for char in s {\n            if char.isUppercase\
    \ {\n                result += String(char).lowercased()\n            } else if\
    \ char.isLowercase {\n                result += String(char).uppercased()\n  \
    \          } else {\n                result += String(char)\n            }\n \
    \       }\n    } else {\n        for char in s {\n            result = String(char)\
    \ + result\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpquflvm7v.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpquflvm7v.swift:19:37: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'toggleCase'\n    return s.map { $0.isLetter ? $0.toggleCase()\
    \ : $0 }\n                                 ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    if result.isEmpty {\n\
    \        return String(s.reversed())\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpd_7xv7p9/tmpd_7xv7p9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae410e43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae410b3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae410b3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae410b397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_7xv7p9                        0x000055ed997548d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae41102f460 __libc_start_main +
    245

    6    tmpd_7xv7p9                        0x000055ed99754429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.isEmpty {\n        return\
    \ s\n    }\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result.append(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpdhan4kuj/tmpdhan4kuj.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add3d325c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add3d01cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add3d01c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add3d01b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdhan4kuj                        0x000055e2c49fa8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002add3d511460 __libc_start_main +
    245

    6    tmpdhan4kuj                        0x000055e2c49fa429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    guard s.rangeOfCharacter(from:\
    \ CharacterSet.letters) != nil else {\n        return String(s.reversed())\n \
    \   }\n    var result = \"\"\n    for char in s {\n        if char.isLetter {\n\
    \            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp2145_j0_.swift:15:36: error: cannot find 'CharacterSet' in scope\n\
    \    guard s.rangeOfCharacter(from: CharacterSet.letters) != nil else {\n    \
    \                               ^~~~~~~~~~~~\n/tmp/tmp2145_j0_.swift:15:13: error:\
    \ value of type 'String' has no member 'rangeOfCharacter'\n    guard s.rangeOfCharacter(from:\
    \ CharacterSet.letters) != nil else {\n          ~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.toggled() : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpn2f8r5hw.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.toggled() : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpn2f8r5hw.swift:19:37: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'toggled'\n    return s.map { $0.isLetter ? $0.toggled() : $0\
    \ }\n                                 ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpquflvm7v.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpquflvm7v.swift:19:37: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'toggleCase'\n    return s.map { $0.isLetter ? $0.toggleCase()\
    \ : $0 }\n                                 ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpquflvm7v.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpquflvm7v.swift:19:37: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'toggleCase'\n    return s.map { $0.isLetter ? $0.toggleCase()\
    \ : $0 }\n                                 ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = CharacterSet.letters\n\
    \    var result = \"\"\n    for char in s {\n        if letters.contains(char.unicodeScalars.first!)\
    \ {\n            if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp66eah4ei.swift:15:19: error: cannot find 'CharacterSet' in scope\n\
    \    let letters = CharacterSet.letters\n                  ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    var\
    \ letters = [Character]()\n    for char in s {\n        if char.isLetter {\n \
    \           letters.append(char)\n        }\n    }\n    if letters.isEmpty {\n\
    \        for char in s {\n            result.append(char)\n        }\n       \
    \ return String(result.reversed())\n    }\n    for char in s {\n        if char.isLetter\
    \ {\n            if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpxishqhth/tmpxishqhth.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae26402dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae263d24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae263d24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae263d237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxishqhth                        0x0000564ae1ba08d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae264219460 __libc_start_main +
    245

    6    tmpxishqhth                        0x0000564ae1ba0429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    if result.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpmnmwc87y/tmpmnmwc87y.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5235833c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b523552ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b523552a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52355297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmnmwc87y                        0x00005576d8a488d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b5235a1f460 __libc_start_main +
    245

    6    tmpmnmwc87y                        0x00005576d8a48429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpquflvm7v.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpquflvm7v.swift:19:37: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'toggleCase'\n    return s.map { $0.isLetter ? $0.toggleCase()\
    \ : $0 }\n                                 ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    let\
    \ letters = \"abcdefghijklmnopqrstuvwxyz\"\n    let lettersUpper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    for char in s {\n        if letters.contains(char) {\n            result\
    \ += String(char).uppercased()\n        } else if lettersUpper.contains(char)\
    \ {\n            result += String(char).lowercased()\n        } else {\n     \
    \       result += String(char)\n        }\n    }\n    if result == s {\n     \
    \   return String(result.reversed())\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return String(s.map { $0.isLetter ? $0.toggleCase() : $0 })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpmgnk8zwe.swift:19:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'toggleCase'\n    return String(s.map { $0.isLetter\
    \ ? $0.toggleCase() : $0 })\n                                        ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    var\
    \ letters = [Character]()\n    for char in s {\n        if char.isLetter {\n \
    \           letters.append(char)\n        }\n    }\n    if letters.isEmpty {\n\
    \        for char in s {\n            result.append(char)\n        }\n       \
    \ return String(result.reversed())\n    }\n    for char in s {\n        if char.isLetter\
    \ {\n            if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824581
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    var\
    \ letters = [Character]()\n    for char in s {\n        if char.isLetter {\n \
    \           letters.append(char)\n        }\n    }\n    if letters.isEmpty {\n\
    \        for char in s {\n            result.append(char)\n        }\n       \
    \ return String(result.reversed())\n    }\n    for char in s {\n        if char.isLetter\
    \ {\n            if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = CharacterSet.letters\n\
    \    let digits = CharacterSet.decimalDigits\n    var result = \"\"\n    for char\
    \ in s {\n        if letters.contains(char.unicodeScalars.first!) {\n        \
    \    result.append(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else if digits.contains(char.unicodeScalars.first!) {\n           \
    \ result.append(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : String(result.reversed())\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmppezkmopu.swift:15:19: error: cannot find 'CharacterSet' in scope\n\
    \    let letters = CharacterSet.letters\n                  ^~~~~~~~~~~~\n/tmp/tmppezkmopu.swift:16:18:\
    \ error: cannot find 'CharacterSet' in scope\n    let digits = CharacterSet.decimalDigits\n\
    \                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    let\
    \ letters = CharacterSet.letters\n    if s.rangeOfCharacter(from: letters) ==\
    \ nil {\n        for c in s.reversed() {\n            result.append(c)\n     \
    \   }\n    } else {\n        for c in s {\n            if letters.contains(UnicodeScalar(String(c))!)\
    \ {\n                if c.isUppercase {\n                    result.append(c.lowercased())\n\
    \                } else {\n                    result.append(c.uppercased())\n\
    \                }\n            } else {\n                result.append(c)\n \
    \           }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp13jtu2am.swift:16:19: error: cannot find 'CharacterSet' in scope\n\
    \    let letters = CharacterSet.letters\n                  ^~~~~~~~~~~~\n/tmp/tmp13jtu2am.swift:17:10:\
    \ error: value of type 'String' has no member 'rangeOfCharacter'\n    if s.rangeOfCharacter(from:\
    \ letters) == nil {\n       ~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    } else\
    \ {\n        return String(s.map { $0.isLetter ? $0.toggleCase() : $0 })\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\"\
    )\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\n\
    assert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\"\
    )\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\"\
    )\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp0q41lkkg.swift:19:48: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'toggleCase'\n        return String(s.map { $0.isLetter\
    \ ? $0.toggleCase() : $0 })\n                                            ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            if c.isLowercase {\n        \
    \        result.append(c.uppercased())\n            } else {\n               \
    \ result.append(c.lowercased())\n            }\n        } else {\n           \
    \ result.append(c)\n        }\n    }\n    if result.isEmpty {\n        return\
    \ String(s.reversed())\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpyqh06yz8/tmpyqh06yz8.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcaf5cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcaf2c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcaf2c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcaf2c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyqh06yz8                        0x0000564331c3d8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002afcaf7b7460 __libc_start_main +
    245

    6    tmpyqh06yz8                        0x0000564331c3d429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpquflvm7v.swift:19:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpquflvm7v.swift:19:37: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'toggleCase'\n    return s.map { $0.isLetter ? $0.toggleCase()\
    \ : $0 }\n                                 ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.isEmpty {\n        return\
    \ s\n    }\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isUppercase ?\
    \ c.lowercased() : c.uppercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpxishqhth/tmpxishqhth.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae26402dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae263d24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae263d24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae263d237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxishqhth                        0x0000564ae1ba08d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae264219460 __libc_start_main +
    245

    6    tmpxishqhth                        0x0000564ae1ba0429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            if char.isUppercase {\n\
    \                result.append(char.lowercased())\n            } else {\n    \
    \            result.append(char.uppercased())\n            }\n        } else {\n\
    \            result.append(char)\n        }\n    }\n    if result.isEmpty {\n\
    \        return String(s.reversed())\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpd_7xv7p9/tmpd_7xv7p9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae410e43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae410b3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae410b3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae410b397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_7xv7p9                        0x000055ed997548d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae41102f460 __libc_start_main +
    245

    6    tmpd_7xv7p9                        0x000055ed99754429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    if result.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpmnmwc87y/tmpmnmwc87y.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5235833c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b523552ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b523552a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52355297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmnmwc87y                        0x00005576d8a488d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b5235a1f460 __libc_start_main +
    245

    6    tmpmnmwc87y                        0x00005576d8a48429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.isEmpty ? s : s.map\
    \ { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased())\
    \ : $0 }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\"\
    ) == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\"\
    ) == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpxybj8ym5.swift:15:48: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to closure result type 'String'\n    return s.isEmpty ? s\
    \ : s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased())\
    \ : $0 }.joined()\n                                   ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    if s.isEmpty {\n        return\
    \ s\n    }\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result.append(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpdhan4kuj/tmpdhan4kuj.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add3d325c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add3d01cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add3d01c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add3d01b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdhan4kuj                        0x000055e2c49fa8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002add3d511460 __libc_start_main +
    245

    6    tmpdhan4kuj                        0x000055e2c49fa429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.reversed().map { $0.isLetter\
    \ ? $0.isUppercase ? $0.lowercased() : $0.uppercased() : $0 }.joined()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp2t1h34a9.swift:15:43: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to closure result type 'String'\n    return s.reversed().map\
    \ { $0.isLetter ? $0.isUppercase ? $0.lowercased() : $0.uppercased() : $0 }.joined()\n\
    \                              ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2t1h34a9.swift:15:60: error: result values in '? :' expression have mismatching\
    \ types 'String' and 'String.Element' (aka 'Character')\n    return s.reversed().map\
    \ { $0.isLetter ? $0.isUppercase ? $0.lowercased() : $0.uppercased() : $0 }.joined()\n\
    \                                            ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    if result.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp_c9zrl1o/tmp_c9zrl1o.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d35b2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d35824b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d35824988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d358237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_c9zrl1o                        0x00005608c788d8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b8d35d19460 __libc_start_main +
    245

    6    tmp_c9zrl1o                        0x00005608c788d429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    if result.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp_c9zrl1o/tmp_c9zrl1o.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d35b2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d35824b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d35824988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d358237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_c9zrl1o                        0x00005608c788d8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b8d35d19460 __libc_start_main +
    245

    6    tmp_c9zrl1o                        0x00005608c788d429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    return s.reversed().map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\"\
    ) == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\"\
    ) == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpxuvwaqep.swift:15:43: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to closure result type 'String'\n    return s.reversed().map\
    \ { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased())\
    \ : $0 }.joined()\n                              ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = CharacterSet.letters\n\
    \    let digits = CharacterSet.decimalDigits\n    var result = \"\"\n    for char\
    \ in s {\n        if letters.contains(char.unicodeScalars.first!) {\n        \
    \    result.append(String(char).lowercased() == String(char) ? String(char).uppercased()\
    \ : String(char).lowercased())\n        } else if digits.contains(char.unicodeScalars.first!)\
    \ {\n            result.append(String(char))\n        }\n    }\n    if result.count\
    \ == 0 {\n        return String(s.reversed())\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpw11junnw.swift:15:19: error: cannot find 'CharacterSet' in scope\n\
    \    let letters = CharacterSet.letters\n                  ^~~~~~~~~~~~\n/tmp/tmpw11junnw.swift:16:18:\
    \ error: cannot find 'CharacterSet' in scope\n    let digits = CharacterSet.decimalDigits\n\
    \                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    var\
    \ isLetter = false\n    for char in s {\n        if char.isLetter {\n        \
    \    isLetter = true\n            result.append(char.isUppercase ? char.lowercased()\
    \ : char.uppercased())\n        } else {\n            result.append(char)\n  \
    \      }\n    }\n    return isLetter ? result : String(result.reversed())\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var str = \"\"\n    for char\
    \ in s {\n        if char.isLetter {\n            str.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            str.append(char)\n\
    \        }\n    }\n    return str.isEmpty ? String(s.reversed()) : str\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpnx17phpx/tmpnx17phpx.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae07d719c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae07d410b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae07d410988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae07d40f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnx17phpx                        0x000055adcbf4e8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae07d905460 __libc_start_main +
    245

    6    tmpnx17phpx                        0x000055adcbf4e429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    let letters = CharacterSet.letters\n\
    \    let digits = CharacterSet.decimalDigits\n    var result = \"\"\n    for c\
    \ in s {\n        if letters.contains(UnicodeScalar(String(c))!) {\n         \
    \   result += String(c).uppercased() == String(c) ? String(c).lowercased() : String(c).uppercased()\n\
    \        } else if digits.contains(UnicodeScalar(String(c))!) {\n            result\
    \ += String(c)\n        }\n    }\n    return result.count > 0 ? result : String(s.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpc2c3dj0d.swift:15:19: error: cannot find 'CharacterSet' in scope\n\
    \    let letters = CharacterSet.letters\n                  ^~~~~~~~~~~~\n/tmp/tmpc2c3dj0d.swift:16:18:\
    \ error: cannot find 'CharacterSet' in scope\n    let digits = CharacterSet.decimalDigits\n\
    \                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ c in s {\n        if c.isLetter {\n            result.append(c.isLowercase ?\
    \ c.uppercased() : c.lowercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp5yes74qv/tmp5yes74qv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b330817cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3307e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3307e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3307e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yes74qv                        0x00005581f12d58d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b3308368460 __libc_start_main +
    245

    6    tmp5yes74qv                        0x00005581f12d5429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"\
    4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n///\
    \ \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result.append(char.isLowercase\
    \ ? char.uppercased() : char.lowercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpsb2jqohg/tmpsb2jqohg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea400c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea3fdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea3fdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea3fdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsb2jqohg                        0x000055c9011ff8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aea402ae460 __libc_start_main +
    245

    6    tmpsb2jqohg                        0x000055c9011ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824498
