name: HumanEval_105_by_length
language: swift
prompt: "\n/// Given an array of integers, sort the integers that are between 1 and\
  \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
  \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
  , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr:\
  \ [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
  , \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty array:\n\
  /// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the array has any\
  \ strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n/// [\"One\"]\n\
  func by_length(arr: [Int]) -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3])\
  \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
  ])\nassert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr:\
  \ [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\"\
  , \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\",\
  \ \"Four\"])"
completions: ["    let sorted = arr.filter { $0 >= 1 && $0 <= 9 }.sorted()\n    return\
    \ sorted.reversed().map { String(describing: $0) }", "    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names", "    var result = [String]()\n\
    \    for i in arr {\n        switch i {\n        case 1:\n            result.append(\"\
    One\")\n        case 2:\n            result.append(\"Two\")\n        case 3:\n\
    \            result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result.sorted(by: >)", "    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ names = reversed.map { String($0) }\n    return names", "    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped", "    let sorted =\
    \ arr.filter { $0 > 0 && $0 < 10 }.sorted()\n    let reversed = sorted.reversed()\n\
    \    let words = reversed.map { String($0) }\n    let result = words.map { $0.replacingOccurrences(of:\
    \ \"1\", with: \"One\")\n        .replacingOccurrences(of: \"2\", with: \"Two\"\
    )\n        .replacingOccurrences(of: \"3\", with: \"Three\")\n        .replacingOccurrences(of:\
    \ \"4\", with: \"Four\")\n        .replacingOccurrences(of: \"5\", with: \"Five\"\
    )\n        .replacingOccurrences(of: \"6\", with: \"Six\")\n        .replacingOccurrences(of:\
    \ \"7\", with: \"Seven\")\n        .replacingOccurrences(of: \"8\", with: \"Eight\"\
    )\n        .replacingOccurrences(of: \"9\", with: \"Nine\")\n    }\n    return\
    \ result", '    return arr.filter({ $0 >= 1 && $0 <= 9 }).sorted().reversed().map({
    String($0) })', "    let sorted = arr.filter { $0 > 0 && $0 < 10 }.sorted()\n\
    \    let reversed = sorted.reversed()\n    let mapped = reversed.map { String($0)\
    \ }\n    return mapped", "    let sorted = arr.filter { $0 > 0 && $0 < 10 }.sorted()\n\
    \    let reversed = sorted.reversed()\n    let result = reversed.map { String(describing:\
    \ $0) }\n    return result", "    let numbers = arr.filter { $0 >= 1 && $0 <=\
    \ 9 }.sorted().reversed()\n    return numbers.map { String(describing: $0) }",
  "    let sorted = arr.filter { $0 >= 1 && $0 <= 9 }.sorted()\n    return sorted.map\
    \ { String($0) }.reversed()", "    var result = [String]()\n    for i in arr {\n\
    \        switch i {\n        case 1:\n            result.append(\"One\")\n   \
    \     case 2:\n            result.append(\"Two\")\n        case 3:\n         \
    \   result.append(\"Three\")\n        case 4:\n            result.append(\"Four\"\
    )\n        case 5:\n            result.append(\"Five\")\n        case 6:\n   \
    \         result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return result.sorted().reversed()", "    let sorted = arr.filter({$0\
    \ >= 1 && $0 <= 9}).sorted()\n    let reversed = sorted.reversed()\n    let strings\
    \ = reversed.map({String($0)})\n    return strings", "    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped", "    let sorted =\
    \ arr.filter { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n\
    \    let mapped = reversed.map { String($0) }\n    return mapped", "    let sorted\
    \ = arr.filter { $0 >= 1 && $0 <= 9 }.sorted()\n    return sorted.map { String($0)\
    \ }.reversed()", "    let sorted = arr.filter { $0 >= 1 && $0 <= 9 }.sorted()\n\
    \    let reversed = sorted.reversed()\n    let mapped = reversed.map { String($0)\
    \ }\n    return mapped", "    let sorted = arr.filter({$0 > 0 && $0 < 10}).sorted()\n\
    \    let reversed = sorted.reversed()\n    let mapped = reversed.map({String($0)})\n\
    \    return mapped", "    let sorted = arr.filter { $0 >= 1 && $0 <= 9 }.sorted()\n\
    \    let reversed = sorted.reversed()\n    let strings = reversed.map { String($0)\
    \ }\n    let result = strings.map {\n        switch $0 {\n        case \"1\":\n\
    \            return \"One\"\n        case \"2\":\n            return \"Two\"\n\
    \        case \"3\":\n            return \"Three\"\n        case \"4\":\n    \
    \        return \"Four\"\n        case \"5\":\n            return \"Five\"\n \
    \       case \"6\":\n            return \"Six\"\n        case \"7\":\n       \
    \     return \"Seven\"\n        case \"8\":\n            return \"Eight\"\n  \
    \      case \"9\":\n            return \"Nine\"\n        default:\n          \
    \  return \"\"\n        }\n    }\n    return result", "    let sorted = arr.filter\
    \ { $0 >= 1 && $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let\
    \ mapped = reversed.map { String($0) }\n    return mapped"]
stop_tokens:
- "\n}"
