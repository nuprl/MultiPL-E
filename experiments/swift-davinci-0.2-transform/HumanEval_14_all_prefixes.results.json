{
  "language": "swift",
  "name": "HumanEval_14_all_prefixes",
  "results": [
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp2rzdyaf0/tmp2rzdyaf0.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49dc6d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49dc3cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49dc3cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49dc3cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2rzdyaf0                        0x000056167c499b48 <unavailable> + 6984\n5    libc.so.6                          0x00002b49dc8c2460 __libc_start_main + 245\n6    tmp2rzdyaf0                        0x000056167c4995a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp387bxzpt/tmp387bxzpt.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81c34c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81c31b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b81c31b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b81c31b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp387bxzpt                        0x000055f456a3ab98 <unavailable> + 7064\n5    libc.so.6                          0x00002b81c36ad460 __libc_start_main + 245\n6    tmp387bxzpt                        0x000055f456a3a5f9 <unavailable> + 5625\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp387bxzpt/tmp387bxzpt.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81c34c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81c31b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b81c31b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b81c31b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp387bxzpt                        0x000055f456a3ab98 <unavailable> + 7064\n5    libc.so.6                          0x00002b81c36ad460 __libc_start_main + 245\n6    tmp387bxzpt                        0x000055f456a3a5f9 <unavailable> + 5625\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp387bxzpt/tmp387bxzpt.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81c34c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81c31b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b81c31b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b81c31b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp387bxzpt                        0x000055f456a3ab98 <unavailable> + 7064\n5    libc.so.6                          0x00002b81c36ad460 __libc_start_main + 245\n6    tmp387bxzpt                        0x000055f456a3a5f9 <unavailable> + 5625\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp2rzdyaf0/tmp2rzdyaf0.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49dc6d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49dc3cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49dc3cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49dc3cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2rzdyaf0                        0x000056167c499b48 <unavailable> + 6984\n5    libc.so.6                          0x00002b49dc8c2460 __libc_start_main + 245\n6    tmp2rzdyaf0                        0x000056167c4995a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpc3r68kya/tmpc3r68kya.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cfe98ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cfe685b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cfe685988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cfe6847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc3r68kya                        0x0000558352afab48 <unavailable> + 6984\n5    libc.so.6                          0x00002b6cfeb7a460 __libc_start_main + 245\n6    tmpc3r68kya                        0x0000558352afa5a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpc3r68kya/tmpc3r68kya.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cfe98ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cfe685b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cfe685988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cfe6847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc3r68kya                        0x0000558352afab48 <unavailable> + 6984\n5    libc.so.6                          0x00002b6cfeb7a460 __libc_start_main + 245\n6    tmpc3r68kya                        0x0000558352afa5a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp2rzdyaf0/tmp2rzdyaf0.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49dc6d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49dc3cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49dc3cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49dc3cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2rzdyaf0                        0x000056167c499b48 <unavailable> + 6984\n5    libc.so.6                          0x00002b49dc8c2460 __libc_start_main + 245\n6    tmp2rzdyaf0                        0x000056167c4995a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 1,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    return (1...string.count).map { string.prefix($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfwl4mp6i.swift:6:44: error: cannot convert value of type 'String.SubSequence' (aka 'Substring') to closure result type 'String'\n    return (1...string.count).map { string.prefix($0) }\n                                    ~~~~~~~^~~~~~~~~~\n                                    String(          )\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp387bxzpt/tmp387bxzpt.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81c34c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81c31b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b81c31b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b81c31b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp387bxzpt                        0x000055f456a3ab98 <unavailable> + 7064\n5    libc.so.6                          0x00002b81c36ad460 __libc_start_main + 245\n6    tmp387bxzpt                        0x000055f456a3a5f9 <unavailable> + 5625\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpc3r68kya/tmpc3r68kya.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cfe98ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cfe685b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cfe685988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cfe6847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc3r68kya                        0x0000558352afab48 <unavailable> + 6984\n5    libc.so.6                          0x00002b6cfeb7a460 __libc_start_main + 245\n6    tmpc3r68kya                        0x0000558352afa5a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpc3r68kya/tmpc3r68kya.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cfe98ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cfe685b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cfe685988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cfe6847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc3r68kya                        0x0000558352afab48 <unavailable> + 6984\n5    libc.so.6                          0x00002b6cfeb7a460 __libc_start_main + 245\n6    tmpc3r68kya                        0x0000558352afa5a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp387bxzpt/tmp387bxzpt.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81c34c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81c31b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b81c31b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b81c31b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp387bxzpt                        0x000055f456a3ab98 <unavailable> + 7064\n5    libc.so.6                          0x00002b81c36ad460 __libc_start_main + 245\n6    tmp387bxzpt                        0x000055f456a3a5f9 <unavailable> + 5625\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpc3r68kya/tmpc3r68kya.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cfe98ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cfe685b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cfe685988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cfe6847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc3r68kya                        0x0000558352afab48 <unavailable> + 6984\n5    libc.so.6                          0x00002b6cfeb7a460 __libc_start_main + 245\n6    tmpc3r68kya                        0x0000558352afa5a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp2rzdyaf0/tmp2rzdyaf0.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49dc6d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49dc3cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49dc3cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49dc3cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2rzdyaf0                        0x000056167c499b48 <unavailable> + 6984\n5    libc.so.6                          0x00002b49dc8c2460 __libc_start_main + 245\n6    tmp2rzdyaf0                        0x000056167c4995a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp2rzdyaf0/tmp2rzdyaf0.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49dc6d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49dc3cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49dc3cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49dc3cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2rzdyaf0                        0x000056167c499b48 <unavailable> + 6984\n5    libc.so.6                          0x00002b49dc8c2460 __libc_start_main + 245\n6    tmp2rzdyaf0                        0x000056167c4995a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex...string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp2rzdyaf0/tmp2rzdyaf0.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49dc6d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49dc3cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49dc3cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49dc3cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2rzdyaf0                        0x000056167c499b48 <unavailable> + 6984\n5    libc.so.6                          0x00002b49dc8c2460 __libc_start_main + 245\n6    tmp2rzdyaf0                        0x000056167c4995a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp387bxzpt/tmp387bxzpt.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81c34c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81c31b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b81c31b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b81c31b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp387bxzpt                        0x000055f456a3ab98 <unavailable> + 7064\n5    libc.so.6                          0x00002b81c36ad460 __libc_start_main + 245\n6    tmp387bxzpt                        0x000055f456a3a5f9 <unavailable> + 5625\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpc3r68kya/tmpc3r68kya.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cfe98ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cfe685b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cfe685988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cfe6847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc3r68kya                        0x0000558352afab48 <unavailable> + 6984\n5    libc.so.6                          0x00002b6cfeb7a460 __libc_start_main + 245\n6    tmpc3r68kya                        0x0000558352afa5a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp387bxzpt/tmp387bxzpt.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81c34c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81c31b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b81c31b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b81c31b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp387bxzpt                        0x000055f456a3ab98 <unavailable> + 7064\n5    libc.so.6                          0x00002b81c36ad460 __libc_start_main + 245\n6    tmp387bxzpt                        0x000055f456a3a5f9 <unavailable> + 5625\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp2rzdyaf0/tmp2rzdyaf0.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49dc6d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49dc3cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49dc3cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49dc3cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2rzdyaf0                        0x000056167c499b48 <unavailable> + 6984\n5    libc.so.6                          0x00002b49dc8c2460 __libc_start_main + 245\n6    tmp2rzdyaf0                        0x000056167c4995a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpc3r68kya/tmpc3r68kya.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cfe98ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cfe685b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cfe685988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cfe6847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc3r68kya                        0x0000558352afab48 <unavailable> + 6984\n5    libc.so.6                          0x00002b6cfeb7a460 __libc_start_main + 245\n6    tmpc3r68kya                        0x0000558352afa5a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpc3r68kya/tmpc3r68kya.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cfe98ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cfe685b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cfe685988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cfe6847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc3r68kya                        0x0000558352afab48 <unavailable> + 6984\n5    libc.so.6                          0x00002b6cfeb7a460 __libc_start_main + 245\n6    tmpc3r68kya                        0x0000558352afa5a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 1...string.count {\n        prefixes.append(String(string.prefix(i)))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b08e1513c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b08e120a561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b08e120a286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b08e120a13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b08e1209bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmphqlsi306                        0x0000565383c5ac85 <unavailable> + 7301\n6    tmphqlsi306                        0x0000565383c5a6e5 <unavailable> + 5861\n7    libc.so.6                          0x00002b08e16ff460 __libc_start_main + 245\n8    tmphqlsi306                        0x0000565383c5a3e9 <unavailable> + 5097\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp387bxzpt/tmp387bxzpt.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81c34c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81c31b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b81c31b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b81c31b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp387bxzpt                        0x000055f456a3ab98 <unavailable> + 7064\n5    libc.so.6                          0x00002b81c36ad460 __libc_start_main + 245\n6    tmp387bxzpt                        0x000055f456a3a5f9 <unavailable> + 5625\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpc3r68kya/tmpc3r68kya.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cfe98ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cfe685b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cfe685988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cfe6847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc3r68kya                        0x0000558352afab48 <unavailable> + 6984\n5    libc.so.6                          0x00002b6cfeb7a460 __libc_start_main + 245\n6    tmpc3r68kya                        0x0000558352afa5a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp73r2kdlc/tmp73r2kdlc.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c4fe76c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c4fb6db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c4fb6d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c4fb6c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp73r2kdlc                        0x000056051f974b98 <unavailable> + 7064\n5    libc.so.6                          0x00002b9c50062460 __libc_start_main + 245\n6    tmp73r2kdlc                        0x000056051f9745f9 <unavailable> + 5625\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    let length = string.count\n    var result = [String]()\n    for i in 0..<length {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpc3r68kya/tmpc3r68kya.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cfe98ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cfe685b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cfe685988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cfe6847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc3r68kya                        0x0000558352afab48 <unavailable> + 6984\n5    libc.so.6                          0x00002b6cfeb7a460 __libc_start_main + 245\n6    tmpc3r68kya                        0x0000558352afa5a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp387bxzpt/tmp387bxzpt.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81c34c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81c31b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b81c31b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b81c31b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp387bxzpt                        0x000055f456a3ab98 <unavailable> + 7064\n5    libc.so.6                          0x00002b81c36ad460 __libc_start_main + 245\n6    tmp387bxzpt                        0x000055f456a3a5f9 <unavailable> + 5625\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp387bxzpt/tmp387bxzpt.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81c34c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81c31b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b81c31b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b81c31b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp387bxzpt                        0x000055f456a3ab98 <unavailable> + 7064\n5    libc.so.6                          0x00002b81c36ad460 __libc_start_main + 245\n6    tmp387bxzpt                        0x000055f456a3a5f9 <unavailable> + 5625\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpc3r68kya/tmpc3r68kya.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cfe98ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cfe685b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cfe685988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cfe6847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc3r68kya                        0x0000558352afab48 <unavailable> + 6984\n5    libc.so.6                          0x00002b6cfeb7a460 __libc_start_main + 245\n6    tmpc3r68kya                        0x0000558352afa5a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp387bxzpt/tmp387bxzpt.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81c34c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81c31b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b81c31b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b81c31b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp387bxzpt                        0x000055f456a3ab98 <unavailable> + 7064\n5    libc.so.6                          0x00002b81c36ad460 __libc_start_main + 245\n6    tmp387bxzpt                        0x000055f456a3a5f9 <unavailable> + 5625\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpc3r68kya/tmpc3r68kya.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cfe98ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cfe685b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cfe685988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cfe6847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc3r68kya                        0x0000558352afab48 <unavailable> + 6984\n5    libc.so.6                          0x00002b6cfeb7a460 __libc_start_main + 245\n6    tmpc3r68kya                        0x0000558352afa5a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 1,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n    for i in 1...string.count {\n        prefixes.append(string.prefix(i))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9r04jduf.swift:8:18: error: no exact matches in call to instance method 'append'\n        prefixes.append(string.prefix(i))\n                 ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37: note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n                                    ^\n/tmp/tmp9r04jduf.swift:8:18: note: found candidate with type '(__owned PrefixSequence<String>) -> ()'\n        prefixes.append(string.prefix(i))\n                 ^\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0...string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp7r8_0ycb/tmp7r8_0ycb.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad94c76ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad94c461b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad94c461988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad94c4607b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7r8_0ycb                        0x0000561fe9a6995e <unavailable> + 6494\n5    libc.so.6                          0x00002ad94c956460 __libc_start_main + 245\n6    tmp7r8_0ycb                        0x0000561fe9a695a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp2rzdyaf0/tmp2rzdyaf0.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49dc6d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49dc3cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49dc3cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49dc3cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2rzdyaf0                        0x000056167c499b48 <unavailable> + 6984\n5    libc.so.6                          0x00002b49dc8c2460 __libc_start_main + 245\n6    tmp2rzdyaf0                        0x000056167c4995a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpc3r68kya/tmpc3r68kya.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cfe98ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cfe685b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cfe685988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cfe6847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc3r68kya                        0x0000558352afab48 <unavailable> + 6984\n5    libc.so.6                          0x00002b6cfeb7a460 __libc_start_main + 245\n6    tmpc3r68kya                        0x0000558352afa5a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for index in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: index + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp2rzdyaf0/tmp2rzdyaf0.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49dc6d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49dc3cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49dc3cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49dc3cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2rzdyaf0                        0x000056167c499b48 <unavailable> + 6984\n5    libc.so.6                          0x00002b49dc8c2460 __libc_start_main + 245\n6    tmp2rzdyaf0                        0x000056167c4995a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpc3r68kya/tmpc3r68kya.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cfe98ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cfe685b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cfe685988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cfe6847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc3r68kya                        0x0000558352afab48 <unavailable> + 6984\n5    libc.so.6                          0x00002b6cfeb7a460 __libc_start_main + 245\n6    tmpc3r68kya                        0x0000558352afa5a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpc3r68kya/tmpc3r68kya.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cfe98ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cfe685b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cfe685988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cfe6847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc3r68kya                        0x0000558352afab48 <unavailable> + 6984\n5    libc.so.6                          0x00002b6cfeb7a460 __libc_start_main + 245\n6    tmpc3r68kya                        0x0000558352afa5a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 1,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(string.prefix(i + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplq40fxo7.swift:8:16: error: no exact matches in call to instance method 'append'\n        result.append(string.prefix(i + 1))\n               ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37: note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n                                    ^\n/tmp/tmplq40fxo7.swift:8:16: note: found candidate with type '(__owned PrefixSequence<String>) -> ()'\n        result.append(string.prefix(i + 1))\n               ^\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpc3r68kya/tmpc3r68kya.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cfe98ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cfe685b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cfe685988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cfe6847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc3r68kya                        0x0000558352afab48 <unavailable> + 6984\n5    libc.so.6                          0x00002b6cfeb7a460 __libc_start_main + 245\n6    tmpc3r68kya                        0x0000558352afa5a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0...string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpl11jsat3/tmpl11jsat3.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0ff218dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0ff1e84b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0ff1e84988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0ff1e837b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl11jsat3                        0x000055631d19c81e <unavailable> + 6174\n5    libc.so.6                          0x00002b0ff2379460 __libc_start_main + 245\n6    tmpl11jsat3                        0x000055631d19c469 <unavailable> + 5225\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp2rzdyaf0/tmp2rzdyaf0.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49dc6d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49dc3cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49dc3cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49dc3cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2rzdyaf0                        0x000056167c499b48 <unavailable> + 6984\n5    libc.so.6                          0x00002b49dc8c2460 __libc_start_main + 245\n6    tmp2rzdyaf0                        0x000056167c4995a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp2rzdyaf0/tmp2rzdyaf0.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49dc6d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49dc3cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49dc3cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49dc3cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2rzdyaf0                        0x000056167c499b48 <unavailable> + 6984\n5    libc.so.6                          0x00002b49dc8c2460 __libc_start_main + 245\n6    tmp2rzdyaf0                        0x000056167c4995a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0...string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp30mly96o/tmp30mly96o.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adda06dec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adda03d5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adda03d5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adda03d47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp30mly96o                        0x00005593f543495e <unavailable> + 6494\n5    libc.so.6                          0x00002adda08ca460 __libc_start_main + 245\n6    tmp30mly96o                        0x00005593f54345a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpc3r68kya/tmpc3r68kya.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cfe98ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cfe685b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cfe685988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cfe6847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc3r68kya                        0x0000558352afab48 <unavailable> + 6984\n5    libc.so.6                          0x00002b6cfeb7a460 __libc_start_main + 245\n6    tmpc3r68kya                        0x0000558352afa5a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex...string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpc3r68kya/tmpc3r68kya.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cfe98ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cfe685b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cfe685988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cfe6847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc3r68kya                        0x0000558352afab48 <unavailable> + 6984\n5    libc.so.6                          0x00002b6cfeb7a460 __libc_start_main + 245\n6    tmpc3r68kya                        0x0000558352afa5a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 1...string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6f6d0acc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6f6cda3561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b6f6cda3286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b6f6cda313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b6f6cda2bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp43z2is19                        0x0000562c6d4b7e45 <unavailable> + 7749\n6    tmp43z2is19                        0x0000562c6d4b78a5 <unavailable> + 6309\n7    libc.so.6                          0x00002b6f6d298460 __libc_start_main + 245\n8    tmp43z2is19                        0x0000562c6d4b75a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex...string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp73r2kdlc/tmp73r2kdlc.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c4fe76c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c4fb6db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c4fb6d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c4fb6c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp73r2kdlc                        0x000056051f974b98 <unavailable> + 7064\n5    libc.so.6                          0x00002b9c50062460 __libc_start_main + 245\n6    tmp73r2kdlc                        0x000056051f9745f9 <unavailable> + 5625\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0...string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpl11jsat3/tmpl11jsat3.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0ff218dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0ff1e84b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0ff1e84988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0ff1e837b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl11jsat3                        0x000055631d19c81e <unavailable> + 6174\n5    libc.so.6                          0x00002b0ff2379460 __libc_start_main + 245\n6    tmpl11jsat3                        0x000055631d19c469 <unavailable> + 5225\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp2rzdyaf0/tmp2rzdyaf0.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49dc6d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49dc3cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49dc3cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49dc3cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2rzdyaf0                        0x000056167c499b48 <unavailable> + 6984\n5    libc.so.6                          0x00002b49dc8c2460 __libc_start_main + 245\n6    tmp2rzdyaf0                        0x000056167c4995a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp2rzdyaf0/tmp2rzdyaf0.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49dc6d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49dc3cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49dc3cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49dc3cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2rzdyaf0                        0x000056167c499b48 <unavailable> + 6984\n5    libc.so.6                          0x00002b49dc8c2460 __libc_start_main + 245\n6    tmp2rzdyaf0                        0x000056167c4995a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpc3r68kya/tmpc3r68kya.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cfe98ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cfe685b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cfe685988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cfe6847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc3r68kya                        0x0000558352afab48 <unavailable> + 6984\n5    libc.so.6                          0x00002b6cfeb7a460 __libc_start_main + 245\n6    tmpc3r68kya                        0x0000558352afa5a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpc3r68kya/tmpc3r68kya.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cfe98ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cfe685b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cfe685988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cfe6847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc3r68kya                        0x0000558352afab48 <unavailable> + 6984\n5    libc.so.6                          0x00002b6cfeb7a460 __libc_start_main + 245\n6    tmpc3r68kya                        0x0000558352afa5a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpc3r68kya/tmpc3r68kya.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cfe98ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cfe685b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cfe685988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cfe6847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc3r68kya                        0x0000558352afab48 <unavailable> + 6984\n5    libc.so.6                          0x00002b6cfeb7a460 __libc_start_main + 245\n6    tmpc3r68kya                        0x0000558352afa5a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpc3r68kya/tmpc3r68kya.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cfe98ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cfe685b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cfe685988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cfe6847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc3r68kya                        0x0000558352afab48 <unavailable> + 6984\n5    libc.so.6                          0x00002b6cfeb7a460 __libc_start_main + 245\n6    tmpc3r68kya                        0x0000558352afa5a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp2rzdyaf0/tmp2rzdyaf0.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49dc6d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49dc3cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49dc3cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49dc3cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2rzdyaf0                        0x000056167c499b48 <unavailable> + 6984\n5    libc.so.6                          0x00002b49dc8c2460 __libc_start_main + 245\n6    tmp2rzdyaf0                        0x000056167c4995a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp2rzdyaf0/tmp2rzdyaf0.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49dc6d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49dc3cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49dc3cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49dc3cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2rzdyaf0                        0x000056167c499b48 <unavailable> + 6984\n5    libc.so.6                          0x00002b49dc8c2460 __libc_start_main + 245\n6    tmp2rzdyaf0                        0x000056167c4995a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpc3r68kya/tmpc3r68kya.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cfe98ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cfe685b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cfe685988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cfe6847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc3r68kya                        0x0000558352afab48 <unavailable> + 6984\n5    libc.so.6                          0x00002b6cfeb7a460 __libc_start_main + 245\n6    tmpc3r68kya                        0x0000558352afa5a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 1,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(string.prefix(i + 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt2sxyuso.swift:8:16: error: no exact matches in call to instance method 'append'\n        result.append(string.prefix(i + 1))\n               ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37: note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n                                    ^\n/tmp/tmpt2sxyuso.swift:8:16: note: found candidate with type '(__owned PrefixSequence<String>) -> ()'\n        result.append(string.prefix(i + 1))\n               ^\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpc3r68kya/tmpc3r68kya.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cfe98ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cfe685b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cfe685988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cfe6847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpc3r68kya                        0x0000558352afab48 <unavailable> + 6984\n5    libc.so.6                          0x00002b6cfeb7a460 __libc_start_main + 245\n6    tmpc3r68kya                        0x0000558352afa5a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp2rzdyaf0/tmp2rzdyaf0.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b49dc6d6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b49dc3cdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b49dc3cd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49dc3cc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2rzdyaf0                        0x000056167c499b48 <unavailable> + 6984\n5    libc.so.6                          0x00002b49dc8c2460 __libc_start_main + 245\n6    tmp2rzdyaf0                        0x000056167c4995a9 <unavailable> + 5545\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp387bxzpt/tmp387bxzpt.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81c34c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81c31b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b81c31b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b81c31b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp387bxzpt                        0x000055f456a3ab98 <unavailable> + 7064\n5    libc.so.6                          0x00002b81c36ad460 __libc_start_main + 245\n6    tmp387bxzpt                        0x000055f456a3a5f9 <unavailable> + 5625\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0...string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmpl11jsat3/tmpl11jsat3.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0ff218dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0ff1e84b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0ff1e84988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0ff1e837b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl11jsat3                        0x000055631d19c81e <unavailable> + 6174\n5    libc.so.6                          0x00002b0ff2379460 __libc_start_main + 245\n6    tmpl11jsat3                        0x000055631d19c469 <unavailable> + 5225\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex...string.index(string.startIndex, offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": -4,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex, offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "Exception",
      "stderr": "tmp73r2kdlc/tmp73r2kdlc.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c4fe76c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c4fb6db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c4fb6d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c4fb6c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp73r2kdlc                        0x000056051f974b98 <unavailable> + 7064\n5    libc.so.6                          0x00002b9c50062460 __libc_start_main + 245\n6    tmp73r2kdlc                        0x000056051f9745f9 <unavailable> + 5625\n",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    },
    {
      "exit_code": 0,
      "program": "\n/// Return list of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex, offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660014076
    }
  ]
}