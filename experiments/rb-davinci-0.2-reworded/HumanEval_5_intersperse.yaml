name: HumanEval_5_intersperse
language: rb
prompt: "# Insert a number 'delimeter' between every two consecutive elements of input\
  \ array `numbers'\n# >>> intersperse.call([], 4)\n# []\n# >>> intersperse.call([1,\
  \ 2, 3], 4)\n# [1, 4, 2, 4, 3]\ndef intersperse(numbers, delimeter)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersperse\n\
  \    candidate = method(:intersperse)\n    assert_equal([], candidate.call([], 7))\n\
  \    assert_equal([5, 8, 6, 8, 3, 8, 2], candidate.call([5, 6, 3, 2], 8))\n    assert_equal([2,\
  \ 2, 2, 2, 2], candidate.call([2, 2, 2], 2))\n  end\nend\n"
completions: ["  numbers.inject([]) { |result, number|\n    result << number\n   \
    \ result << delimeter\n  }.pop\nend", "  numbers.inject([]) { |result, number|\n\
    \    result << number\n    result << delimeter\n  }.pop\nend", "  numbers.each_with_object([])\
    \ do |number, result|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n  end\nend", "  numbers.inject([]) do |result, number|\n  \
    \  result << number\n    result << delimeter unless number == numbers.last\n \
    \   result\n  end\nend", "  numbers.inject([]) do |result, number|\n    if result.empty?\n\
    \      result << number\n    else\n      result << delimeter << number\n    end\n\
    \  end\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter unless number == numbers.last\n    result\n  end\nend",
  "  numbers.inject([]) do |result, number|\n    result << number\n    result << delimeter\
    \ unless number == numbers.last\n    result\n  end\nend", "  numbers.each_with_object([])\
    \ do |number, result|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n  end\nend", "  numbers.inject([]) do |result, number|\n  \
    \  result << number\n    result << delimeter unless result.length == numbers.length\
    \ * 2 - 1\n    result\n  end\nend", "  numbers.inject([]) do |result, number|\n\
    \    result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.inject([]) do |acc, number|\n    acc << number\n\
    \    acc << delimeter unless number == numbers.last\n    acc\n  end\nend", " \
    \ numbers.inject([]) do |result, number|\n    result << number\n    result <<\
    \ delimeter unless number == numbers.last\n    result\n  end\nend", "  numbers.inject([])\
    \ do |result, n|\n    result << n\n    result << delimeter unless n == numbers.last\n\
    \    result\n  end\nend", "  numbers.each_with_object([]) do |number, result|\n\
    \    result << number\n    result << delimeter unless number == numbers.last\n\
    \  end\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter unless number == numbers.last\n    result\n  end\nend",
  "  numbers.map.with_index { |number, index| [number, delimeter] }.flatten[0...-1]\n\
    end", "  numbers.inject([]) { |result, number| result + [number, delimeter] }[0..-2]\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter unless number == numbers.last\n    result\n  end\nend", "  numbers.each_with_object([])\
    \ do |number, result|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n  end\nend", "  numbers.inject([]) do |result, number|\n  \
    \  result << number\n    result << delimeter unless number == numbers.last\n \
    \   result\n  end\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter unless number == numbers.last\n    result\n\
    \  end\nend", "  numbers.each_with_object([]) do |number, result|\n    result\
    \ << number\n    result << delimeter unless number == numbers.last\n  end\nend",
  "  numbers.inject([]) do |result, number|\n    result << number\n    result << delimeter\
    \ unless number == numbers.last\n    result\n  end\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end.pop\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter unless number == numbers.last\n    result\n  end\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n    result\n  end\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter\n  end.pop\nend", " \
    \ numbers.inject([]) do |result, number|\n    result << number\n    result <<\
    \ delimeter unless number == numbers.last\n    result\n  end\nend", "  numbers.inject([])\
    \ { |result, number| result << number << delimeter }[0...-1]\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end.slice(0,\
    \ numbers.size * 2 - 1)\nend", "  numbers.inject([]) do |acc, number|\n    acc\
    \ << number\n    acc << delimeter unless number == numbers.last\n    acc\n  end\n\
    end", "  numbers.inject([]) { |result, number| result << number << delimeter }[0...-1]\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter unless number == numbers.last\n    result\n  end\nend", "  numbers.inject([])\
    \ { |result, number| result << number << delimeter }[0..-2]\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n    result\n  end\nend", "  numbers.inject([]) { |result, number|\
    \ result + [number, delimeter] }[0..-2]\nend", "  numbers.each_with_object([])\
    \ do |number, result|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n  end\nend", "  numbers.inject([]) do |result, number|\n  \
    \  result << number\n    result << delimeter unless number == numbers.last\n \
    \   result\n  end\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter unless number == numbers.last\n    result\n\
    \  end\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter\n  end.pop\nend", "  numbers.inject([]) do |result, number|\n\
    \    result << number\n    result << delimeter unless result.length == numbers.length\
    \ * 2 - 1\n    result\n  end\nend", "  numbers.inject([]) do |result, number|\n\
    \    result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.each_with_object([]) do |number, result|\n\
    \    result << number\n    result << delimeter unless number == numbers.last\n\
    \  end\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter unless number == numbers.last\n    result\n  end\nend",
  "  numbers.inject([]) { |result, number|\n    result << number\n    result << delimeter\n\
    \  }.pop\nend", "  numbers.inject([]) do |acc, n|\n    acc << n\n    acc << delimeter\
    \ unless acc.length == numbers.length * 2 - 1\n    acc\n  end\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n    result\n  end\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter\n  end.pop\nend", " \
    \ numbers.inject([]) do |result, number|\n    result << number\n    result <<\
    \ delimeter\n  end.pop\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter unless number == numbers.last\n    result\n\
    \  end\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter unless number == numbers.last\n    result\n  end\nend",
  "  numbers.inject([]) do |result, number|\n    result << number\n    result << delimeter\
    \ unless number == numbers.last\n    result\n  end\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n    result\n  end\nend", "  numbers.inject([]) { |result, number|\
    \ result + [number, delimeter] }[0..-2]\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter\n  end.pop\nend", " \
    \ numbers.inject([]) do |result, number|\n    result << number\n    result <<\
    \ delimeter unless number == numbers.last\n    result\n  end\nend", "  numbers.each_with_object([])\
    \ do |number, result|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n  end\nend", "  numbers.inject([]) do |acc, number|\n    acc\
    \ << number\n    acc << delimeter\n  end.pop\nend", "  numbers.inject([]) do |acc,\
    \ number|\n    acc << number\n    acc << delimeter unless number == numbers.last\n\
    \    acc\n  end\nend", "  numbers.inject([]) do |result, number|\n    result <<\
    \ number\n    result << delimeter\n  end[0..-2]\nend", "  numbers.inject([]) do\
    \ |result, number|\n    result << number\n    result << delimeter\n  end.slice(0,\
    \ numbers.size * 2 - 1)\nend", "  numbers.inject([]) do |result, number|\n   \
    \ result << number\n    result << delimeter unless number == numbers.last\n  \
    \  result\n  end\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter unless number == numbers.last\n    result\n\
    \  end\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter unless number == numbers.last\n    result\n  end\nend",
  "  numbers.inject([]) do |result, number|\n    result << number\n    result << delimeter\n\
    \  end.slice(0, -1)\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter unless number == numbers.last\n    result\n\
    \  end\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter unless number == numbers.last\n    result\n  end\nend",
  "  numbers.inject([]) { |result, number| result << number << delimeter }.pop(delimeter.size)\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter\n  end.pop\nend", "  numbers.inject([]) do |result, number|\n \
    \   result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter unless number == numbers.last\n    result\n\
    \  end\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter unless number == numbers.last\n    result\n  end\nend",
  "  numbers.inject([]) do |result, number|\n    result << number\n    result << delimeter\
    \ unless number == numbers.last\n    result\n  end\nend", "  numbers.inject([])\
    \ { |result, number| result << number << delimeter }[0...-1]\nend", "  numbers.inject([])\
    \ { |result, number| result << number << delimeter }[0...-1]\nend", "  numbers.inject([])\
    \ { |result, number| result + [number, delimeter] }[0..-2]\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n    result\n  end\nend", "  numbers.each_with_object([]) do\
    \ |number, result|\n    result << number\n    result << delimeter unless result.size\
    \ == numbers.size * 2 - 1\n  end\nend", "  numbers.inject([]) do |result, number|\n\
    \    result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.each_with_object([]) do |number, result|\n\
    \    result << number\n    result << delimeter unless number == numbers.last\n\
    \  end\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter unless number == numbers.last\n    result\n  end\nend",
  "  numbers.inject([]) do |result, number|\n    result << number\n    result << delimeter\n\
    \  end.pop\nend", "  numbers.each_with_object([]) do |number, result|\n    result\
    \ << number\n    result << delimeter unless number == numbers.last\n  end\nend",
  "  numbers.inject([]) { |result, number| result << number << delimeter }.pop(delimeter)\n\
    end", "  numbers.each_with_object([]) do |number, result|\n    result << number\n\
    \    result << delimeter unless number == numbers.last\n  end\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n    result\n  end\nend", "  numbers.each_with_object([]) do\
    \ |number, result|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n  end\nend", "  numbers.inject([]) do |acc, number|\n    acc\
    \ << number\n    acc << delimeter unless number == numbers.last\n    acc\n  end\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter unless number == numbers.last\n    result\n  end\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n    result\n  end\nend", "  numbers.each_with_object([]) do\
    \ |number, result|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n  end\nend", "  numbers.inject([]) { |result, n| result + [n,\
    \ delimeter] }[0...-1]\nend", "  numbers.inject([]) { |result, number| result\
    \ << number << delimeter }.pop(delimeter)\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter unless number == numbers.last\n    result\n\
    \  end\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter unless number == numbers.last\n    result\n  end\nend",
  "  numbers.each_with_object([]) do |number, result|\n    result << number\n    result\
    \ << delimeter unless number == numbers.last\n  end\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n    result\n  end\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter\n  end.pop\nend", " \
    \ numbers.inject([]) do |result, number|\n    result << number\n    result <<\
    \ delimeter\n  end.pop\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter unless number == numbers.last\n    result\n\
    \  end\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter unless number == numbers.last\n    result\n  end\nend",
  "  numbers.inject([]) do |result, number|\n    result << number\n    result << delimeter\
    \ unless number == numbers.last\n    result\n  end\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n    result\n  end\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter\n  end.pop\nend", "  numbers.inject([]) do\
    \ |result, number|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n    result\n  end\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter\n  end.pop\nend", "  numbers.inject([]) do\
    \ |result, number|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n    result\n  end\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.each_with_object([]) do |number, result|\n\
    \    result << number\n    result << delimeter unless number == numbers.last\n\
    \  end\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter unless number == numbers.last\n    result\n  end\nend",
  "  numbers.inject([]) { |result, number| result << number << delimeter }.pop(delimeter.size)\n\
    end", "  numbers.each_with_object([]) do |number, result|\n    result << number\n\
    \    result << delimeter unless number == numbers.last\n  end\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end.pop\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter\n  end.pop\nend", "  numbers.inject([]) do |result, number|\n \
    \   result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.inject([]) { |result, number|\n    result\
    \ << number\n    result << delimeter\n  }.pop\nend", "  numbers.inject([]) do\
    \ |result, number|\n    result << number\n    result << delimeter\n  end.pop\n\
    end", "  numbers.inject([]) do |acc, n|\n    acc << n\n    acc << delimeter unless\
    \ n == numbers.last\n    acc\n  end\nend", "  numbers.inject([]) do |result, number|\n\
    \    result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter unless number == numbers.last\n    result\n\
    \  end\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter unless number == numbers.last\n    result\n  end\nend",
  "  numbers.inject([]) do |result, number|\n    result << number\n    result << delimeter\
    \ unless number == numbers.last\n    result\n  end\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end.pop\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter\n  end[0..-2]\nend", "  numbers.inject([]) do |result, number|\n\
    \    result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter unless number == numbers.last\n    result\n\
    \  end\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter\n  end.pop\nend", "  numbers.inject([]) do |result, number|\n\
    \    result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter unless number == numbers.last\n    result\n\
    \  end\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter\n  end[0...-1]\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter\n  end.pop\nend", " \
    \ numbers.inject([]) do |result, number|\n    result << number\n    result <<\
    \ delimeter unless number == numbers.last\n    result\n  end\nend", "  numbers.inject([])\
    \ { |acc, n| acc << n << delimeter }[0...-1]\nend", "  numbers.each_with_object([])\
    \ do |number, result|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n  end\nend", "  numbers.inject([]) { |result, number| result\
    \ << number << delimeter }.pop(delimeter)\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter\n  end.slice(0, -1)\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n    result\n  end\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter unless number == numbers.last\n    result\n\
    \  end\nend", "  numbers.each_with_object([]) do |number, result|\n    result\
    \ << number\n    result << delimeter unless number == numbers.last\n  end\nend",
  "  numbers.inject([]) do |acc, n|\n    acc << n\n    acc << delimeter unless n ==\
    \ numbers.last\n    acc\n  end\nend", "  numbers.inject([]) { |result, number|\
    \ result << number << delimeter }.pop(delimeter)\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n    result\n  end\nend", "  numbers.inject([]) do |result,\
    \ n|\n    result << n\n    result << delimeter\n  end.slice(0, numbers.size *\
    \ 2 - 1)\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter unless result.length == numbers.length * 2 - 1\n    result\n\
    \  end\nend", "  numbers.each_with_object([]) do |number, result|\n    result\
    \ << number\n    result << delimeter unless number == numbers.last\n  end\nend",
  "  numbers.inject([]) do |result, number|\n    result << number\n    result << delimeter\n\
    \  end.pop\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter unless number == numbers.last\n    result\n  end\nend",
  "  numbers.inject([]) do |result, number|\n    result << number\n    result << delimeter\
    \ unless number == numbers.last\n    result\n  end\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n    result\n  end\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter unless number == numbers.last\n    result\n\
    \  end\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter unless number == numbers.last\n    result\n  end\nend",
  "  numbers.inject([]) do |result, number|\n    result << number\n    result << delimeter\
    \ unless number == numbers.last\n    result\n  end\nend", "  numbers.inject([])\
    \ { |result, number|\n    result << number\n    result << delimeter\n  }.pop\n\
    end", "  numbers.inject([]) { |result, number| result << number << delimeter }.pop(delimeter)\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter unless number == numbers.last\n    result\n  end\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n    result\n  end\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.each_with_object([]) do |number, result|\n\
    \    result << number\n    result << delimeter unless number == numbers.last\n\
    \  end\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter unless number == numbers.last\n    result\n  end\nend",
  "  numbers.inject([]) do |result, number|\n    result << number\n    result << delimeter\
    \ unless number == numbers.last\n    result\n  end\nend", "  numbers.each_with_object([])\
    \ do |number, result|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n  end\nend", "  numbers.inject([]) do |result, number|\n  \
    \  result << number\n    result << delimeter\n  end.pop\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end.pop\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter unless number == numbers.last\n    result\n  end\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n    result\n  end\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter\n  end.pop\nend", "  numbers.inject([]) do\
    \ |result, number|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n    result\n  end\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter unless number == numbers.last\n    result\n\
    \  end\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter unless number == numbers.last\n    result\n  end\nend",
  "  numbers.inject([]) do |result, number|\n    result << number\n    result << delimeter\
    \ unless number == numbers.last\n    result\n  end\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n    result\n  end\nend", "  numbers.inject([]) do |acc, number|\n\
    \    acc << number\n    acc << delimeter unless number == numbers.last\n    acc\n\
    \  end\nend", "  numbers.inject([]) do |acc, number|\n    acc << number\n    acc\
    \ << delimeter unless number == numbers.last\n    acc\n  end\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n    result\n  end\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.inject([]) do |acc, number|\n    acc << number\n\
    \    acc << delimeter unless acc.length == numbers.length * 2 - 1\n    acc\n \
    \ end\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter unless number == numbers.last\n    result\n  end\nend",
  "  numbers.each_with_object([]) do |number, result|\n    result << number\n    result\
    \ << delimeter unless number == numbers.last\n  end\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter unless number\
    \ == numbers.last\n    result\n  end\nend", "  numbers.inject([]) do |result,\
    \ number|\n    result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.inject([]) do |acc, n|\n    acc << n\n  \
    \  acc << delimeter unless n == numbers.last\n    acc\n  end\nend", "  numbers.inject([])\
    \ do |result, number|\n    result << number\n    result << delimeter\n  end.pop\n\
    end", "  numbers.inject([]) do |result, number|\n    result << number\n    result\
    \ << delimeter\n  end.pop\nend", "  numbers.inject([]) do |result, number|\n \
    \   result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter unless number == numbers.last\n    result\n\
    \  end\nend", "  numbers.each_with_object([]) do |number, result|\n    result\
    \ << number\n    result << delimeter unless number == numbers.last\n  end\nend",
  "  numbers.inject([]) do |result, number|\n    if result.empty?\n      result <<\
    \ number\n    else\n      result << delimeter << number\n    end\n  end\nend",
  "  numbers.inject([]) do |result, number|\n    result << number\n    result << delimeter\n\
    \  end.pop\nend", "  numbers.inject([]) do |result, number|\n    result << number\n\
    \    result << delimeter\n  end.pop\nend", "  numbers.inject([]) do |result, number|\n\
    \    result << number\n    result << delimeter unless number == numbers.last\n\
    \    result\n  end\nend", "  numbers.inject([]) do |result, number|\n    result\
    \ << number\n    result << delimeter\n  end.slice(0, numbers.length * 2 - 1)\n\
    end", "  numbers.inject([]) do |acc, n|\n    acc << n\n    acc << delimeter unless\
    \ n == numbers.last\n    acc\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
