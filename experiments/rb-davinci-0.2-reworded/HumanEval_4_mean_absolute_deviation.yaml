name: HumanEval_4_mean_absolute_deviation
language: rb
prompt: "# For a given array of input numbers, calculate Mean Absolute Deviation\n\
  # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
  \ difference between each\n# element and a centerpoint (mean in this case):\n# MAD\
  \ = average | x - x_mean |\n# >>> mean_absolute_deviation.call([1.0, 2.0, 3.0, 4.0])\n\
  # 1.0\ndef mean_absolute_deviation(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_mean_absolute_deviation\n\
  \    candidate = method(:mean_absolute_deviation)\n    assert_equal(0.5, candidate.call([1.0,\
  \ 2.0]))\n    assert_equal(1.0, candidate.call([1.0, 2.0, 3.0, 4.0]))\n    assert_equal(1.2,\
  \ candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n  end\nend\n"
completions: ["  mean = numbers.reduce(:+) / numbers.size.to_f\n  numbers.map { |x|\
    \ (x - mean).abs }.reduce(:+) / numbers.size.to_f\nend", "  numbers.mean.abs\n\
    end", "  mean = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.mean\nend",
  "  mean = mean(numbers)\n  mean_absolute_deviation = mean(numbers.map { |n| (n -\
    \ mean).abs })\n  mean_absolute_deviation\nend", "  mean = mean(numbers)\n  deviations\
    \ = numbers.map { |n| (n - mean).abs }\n  mean(deviations)\nend", "  # TODO: Implement\
    \ this method\n  # Hint: You can use the mean() method from the previous exercise\n\
    \  mean = mean(numbers)\n  absolute_deviations = numbers.map { |x| (x - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  mean = numbers.reduce(:+) / numbers.length.to_f\n\
    \  mean_absolute_deviation = numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length.to_f\n\
    \  mean_absolute_deviation\nend", "  mean = mean(numbers)\n  sum = 0.0\n  numbers.each\
    \ do |number|\n    sum += (number - mean).abs\n  end\n  sum / numbers.length\n\
    end", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n\
    \  mean_absolute_deviation = 0.0\n  numbers.each do |number|\n    mean_absolute_deviation\
    \ += (number - mean).abs\n  end\n  mean_absolute_deviation / numbers.length\n\
    end", "  mean = mean(numbers)\n  mean_absolute_deviation = 0.0\n  numbers.each\
    \ do |number|\n    mean_absolute_deviation += (number - mean).abs\n  end\n  mean_absolute_deviation\
    \ / numbers.length\nend", "  mean = mean(numbers)\n  numbers.map { |n| (n - mean).abs\
    \ }.mean\nend", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n\
    \  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs } / numbers.size\nend",
  "  mean = mean(numbers)\n  sum = 0\n  numbers.each do |number|\n    sum += (number\
    \ - mean).abs\n  end\n  sum / numbers.length\nend", "  mean = mean(numbers)\n\
    \  sum = 0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n\
    \  sum / numbers.length\nend", "  mean = numbers.reduce(:+) / numbers.length\n\
    \  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length\nend", "  mean\
    \ = mean(numbers)\n  numbers.map { |n| (n - mean).abs }.mean\nend", "  mean =\
    \ mean(numbers)\n  sum = 0\n  numbers.each do |number|\n    sum += (number - mean).abs\n\
    \  end\n  sum / numbers.length\nend", "  mean = numbers.mean\n  numbers.map {\
    \ |num| (num - mean).abs }.mean\nend", "  mean = numbers.inject(0.0) { |sum, el|\
    \ sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs\
    \ } / numbers.size\nend", "  mean = numbers.reduce(:+) / numbers.length.to_f\n\
    \  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length.to_f\nend",
  "  mean = mean(numbers)\n  mean_absolute_deviation = 0\n  numbers.each do |number|\n\
    \    mean_absolute_deviation += (number - mean).abs\n  end\n  mean_absolute_deviation\
    \ / numbers.length\nend", "  mean = numbers.reduce(:+) / numbers.length\n  numbers.map\
    \ { |x| (x - mean).abs }.reduce(:+) / numbers.length\nend", "  mean = mean(numbers)\n\
    \  mean_absolute_deviation = 0\n  numbers.each do |number|\n    mean_absolute_deviation\
    \ += (number - mean).abs\n  end\n  mean_absolute_deviation / numbers.length\n\
    end", "  mean = mean(numbers)\n  numbers.map { |n| (n - mean).abs }.reduce(:+)\
    \ / numbers.length\nend", "  mean = mean(numbers)\n  sum = 0.0\n  numbers.each\
    \ do |number|\n    sum += (number - mean).abs\n  end\n  sum / numbers.length\n\
    end", "  numbers.inject(0.0) { |sum, num| sum + (num - numbers.mean).abs } / numbers.length\n\
    end", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n\
    \  numbers.map { |x| (x - mean).abs }.mean\nend", "  mean = mean(numbers)\n  sum\
    \ = 0.0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n \
    \ sum / numbers.length\nend", "  mean = mean(numbers)\n  sum = 0.0\n  numbers.each\
    \ do |number|\n    sum += (number - mean).abs\n  end\n  sum / numbers.length\n\
    end", "  mean = mean(numbers)\n  sum = 0\n  numbers.each do |number|\n    sum\
    \ += (number - mean).abs\n  end\n  sum / numbers.length\nend", "  mean = mean(numbers)\n\
    \  mean_absolute_deviation = numbers.map { |n| (n - mean).abs }.mean\n  mean_absolute_deviation\n\
    end", "  mean = mean(numbers)\n  sum = 0\n  numbers.each do |n|\n    sum += (n\
    \ - mean).abs\n  end\n  sum / numbers.size\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.length\n  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length\n\
    end", "  mean = numbers.reduce(:+) / numbers.length\n  numbers.map { |x| (x -\
    \ mean).abs }.reduce(:+) / numbers.length\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = numbers.reduce(:+) / numbers.length\n\
    \  mean_absolute_deviation = numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length\n\
    \  mean_absolute_deviation\nend", "  mean = mean(numbers)\n  numbers.inject(0.0)\
    \ { |sum, n| sum + (n - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n\
    \  mean_absolute_deviation = numbers.inject(0) do |sum, number|\n    sum + (number\
    \ - mean).abs\n  end\n  mean_absolute_deviation / numbers.size\nend", "  mean\
    \ = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  numbers.map\
    \ { |x| (x - mean).abs }.mean\nend", "  mean = numbers.mean\n  numbers.map { |x|\
    \ (x - mean).abs }.mean\nend", "  # TODO: Implement this function!\n  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  mean_absolute_deviation = numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\n  return mean_absolute_deviation\n\
    end", "  mean = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.mean\nend",
  "  # TODO: Implement this\n  return 0\nend", "  mean = numbers.reduce(:+) / numbers.length\n\
    \  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length\nend", "  mean\
    \ = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n\
    \  sum = 0.0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n\
    \  sum / numbers.length\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", " \
    \ mean = mean(numbers)\n  mean_absolute_deviation = numbers.inject(0) do |sum,\
    \ number|\n    sum + (number - mean).abs\n  end\n  mean_absolute_deviation / numbers.length\n\
    end", "  mean = numbers.reduce(:+) / numbers.size.to_f\n  numbers.map { |n| (n\
    \ - mean).abs }.reduce(:+) / numbers.size.to_f\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.size\n  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.size\n\
    end", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  # TODO: Implement\
    \ this function\n  mean = numbers.reduce(:+) / numbers.length\n  absolute_differences\
    \ = numbers.map { |number| (number - mean).abs }\n  absolute_differences.reduce(:+)\
    \ / absolute_differences.length\nend", "  mean = mean(numbers)\n  sum = 0\n  numbers.each\
    \ do |number|\n    sum += (number - mean).abs\n  end\n  sum / numbers.length\n\
    end", "  numbers = numbers.to_a\n  mean = numbers.reduce(:+) / numbers.size.to_f\n\
    \  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.size.to_f\nend", " \
    \ mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.length\n  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length\n\
    end", "  mean = mean(numbers)\n  sum = 0\n  numbers.each do |number|\n    sum\
    \ += (number - mean).abs\n  end\n  sum / numbers.length\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  mean_absolute_deviation\
    \ = 0\n  numbers.each do |number|\n    mean_absolute_deviation += (number - mean).abs\n\
    \  end\n  mean_absolute_deviation / numbers.length\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = numbers.mean\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  absolute_deviations.mean\n\
    end", "  mean = numbers.reduce(:+) / numbers.length.to_f\n  numbers.map { |number|\
    \ (number - mean).abs }.reduce(:+) / numbers.length.to_f\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  numbers.mean.abs\nend", "  mean\
    \ = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  sum = 0.0\n\
    \  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n  sum / numbers.length\n\
    end", "  mean = numbers.reduce(:+) / numbers.length\n  numbers.map { |n| (n -\
    \ mean).abs }.reduce(:+) / numbers.length\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  mean_absolute_deviation\
    \ = 0.0\n  numbers.each do |number|\n    mean_absolute_deviation += (number -\
    \ mean).abs\n  end\n  mean_absolute_deviation / numbers.length\nend", "  mean\
    \ = mean(numbers)\n  mean_absolute_deviation = 0.0\n  numbers.each do |number|\n\
    \    mean_absolute_deviation += (number - mean).abs\n  end\n  mean_absolute_deviation\
    \ / numbers.length\nend", "  mean = mean(numbers)\n  mean_absolute_deviation =\
    \ 0\n  numbers.each do |number|\n    mean_absolute_deviation += (number - mean).abs\n\
    \  end\n  mean_absolute_deviation / numbers.length\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = numbers.reduce(:+) / numbers.length\n\
    \  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length\nend", "  mean\
    \ = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.mean\nend", "  mean =\
    \ mean(numbers)\n  absolute_deviations = numbers.map { |number| (number - mean).abs\
    \ }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n  numbers.map\
    \ { |x| (x - mean).abs }.reduce(:+) / numbers.length\nend", "  mean = mean(numbers)\n\
    \  mean_absolute_deviation = 0.0\n  numbers.each do |number|\n    mean_absolute_deviation\
    \ += (number - mean).abs\n  end\n  mean_absolute_deviation / numbers.length\n\
    end", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n\
    \  numbers.map { |x| (x - mean).abs }.mean\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.length\n  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length\n\
    end", "  mean = mean(numbers)\n  average(numbers.map { |x| (x - mean).abs })\n\
    end", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n\
    \  sum = 0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n\
    \  sum / numbers.size\nend", "  mean = mean(numbers)\n  mean_absolute_deviation\
    \ = mean(numbers.map { |number| (number - mean).abs })\n  mean_absolute_deviation\n\
    end", "  mean = numbers.reduce(:+) / numbers.length\n  numbers.map { |n| (n -\
    \ mean).abs }.reduce(:+) / numbers.length\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = numbers.reduce(:+) / numbers.length\n\
    \  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length\nend", "  mean\
    \ = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.size\n\
    end", "  mean = mean(numbers)\n  mean_absolute_deviation = 0.0\n  numbers.each\
    \ do |number|\n    mean_absolute_deviation += (number - mean).abs\n  end\n  mean_absolute_deviation\
    \ / numbers.length\nend", "  mean = numbers.inject(0.0) { |sum, el| sum + el }\
    \ / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs } /\
    \ numbers.size\nend", "  mean = mean(numbers)\n  mean_absolute_deviation = 0.0\n\
    \  numbers.each do |number|\n    mean_absolute_deviation += (number - mean).abs\n\
    \  end\n  mean_absolute_deviation / numbers.length\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.length.to_f\n  mean_absolute_deviation = numbers.map { |x| (x - mean).abs\
    \ }.reduce(:+) / numbers.length.to_f\n  return mean_absolute_deviation\nend",
  "  mean = numbers.mean\n  numbers.map { |n| (n - mean).abs }.mean\nend", "  mean\
    \ = mean(numbers)\n  mean_absolute_deviation = mean(numbers.map { |x| (x - mean).abs\
    \ })\n  mean_absolute_deviation\nend", "  mean = numbers.inject(0.0) { |sum, el|\
    \ sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs\
    \ } / numbers.size\nend", "  mean = numbers.reduce(:+) / numbers.size.to_f\n \
    \ numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.size.to_f\nend", " \
    \ mean = numbers.reduce(:+) / numbers.length.to_f\n  absolute_deviations = numbers.map\
    \ { |n| (n - mean).abs }\n  absolute_deviations.reduce(:+) / absolute_deviations.length.to_f\n\
    end", "  mean = mean(numbers)\n  numbers.map { |x| (x - mean).abs }.mean\nend",
  "  # TODO: Implement\nend", "  mean = numbers.reduce(:+) / numbers.length\n  numbers.map\
    \ { |x| (x - mean).abs }.reduce(:+) / numbers.length\nend", "  mean = mean_arithmetic(numbers)\n\
    \  absolute_deviations = numbers.map { |number| (number - mean).abs }\n  mean_arithmetic(absolute_deviations)\n\
    end", "  mean = mean(numbers)\n  sum = 0\n  numbers.each do |number|\n    sum\
    \ += (number - mean).abs\n  end\n  sum / numbers.length\nend", "  mean = mean(numbers)\n\
    \  numbers.map { |x| (x - mean).abs }.mean\nend", "  mean = mean(numbers)\n  numbers.map\
    \ { |x| (x - mean).abs }.mean\nend", "  mean = numbers.reduce(:+) / numbers.size\n\
    \  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.size\nend", "  mean\
    \ = mean(numbers)\n  average(numbers.map { |n| (n - mean).abs })\nend", "  mean\
    \ = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n\
    \  sum = 0.0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n\
    \  sum / numbers.length\nend", "  mean = mean(numbers)\n  mean_absolute_deviation\
    \ = 0.0\n  numbers.each do |number|\n    mean_absolute_deviation += (number -\
    \ mean).abs\n  end\n  mean_absolute_deviation / numbers.length\nend", "  # TODO:\
    \ Implement this function\n  # Hint: You can use the mean function defined above\n\
    \  # Hint: You can use the absolute_value function defined above\n  # Hint: You\
    \ can use the reduce function defined above\n  # Hint: You can use the map function\
    \ defined above\n  # Hint: You can use the length function defined above\n  #\
    \ Hint: You can use the zip function defined above\n  # Hint: You can use the\
    \ sum function defined above\n  # Hint: You can use the enumerate function defined\
    \ above\n  # Hint: You can use the range function defined above\n  # Hint: You\
    \ can use the enumerate function defined above\n  # Hint: You can use the range\
    \ function defined above\n  # Hint: You can use the enumerate function defined\
    \ above\n  # Hint: You can use the range function defined above\n  # Hint: You\
    \ can use the enumerate function defined above\n  # Hint: You can use the range\
    \ function defined above\n  # Hint: You can use the enumerate function defined\
    \ above\n  # Hint: You can use the range function defined above\n  # Hint: You\
    \ can use the enumerate function defined above\n  # Hint: You can use the range\
    \ function defined above\n  # Hint: You can use the enumerate function defined\
    \ above\n  # Hint: You can use the range function defined above\n  # Hint: You\
    \ can use the enumerate function defined above\n  # Hint: You can use the range\
    \ function defined above\n  # Hint: You can use the enumerate function defined\
    \ above\n  # Hint: You can use the range function defined above\n  # Hint: You\
    \ can use the enumerate function defined above\n  # Hint: You can use the range\
    \ function defined above\n  # Hint: You can use the enumerate function defined\
    \ above\n  # Hint: You can use the range function defined above\n  # Hint: You\
    \ can use the enumerate function defined above\n  # Hint: You can use the range\
    \ function defined above\n  # Hint: You can use the enumerate function defined\
    \ above\n  # Hint: You can use the range function defined above\n  # Hint: You\
    \ can use the enumerate function defined above\n  # Hint: You can use the range",
  "  # TODO: Implement this method!\n  mean = numbers.inject(0.0) { |sum, el| sum\
    \ + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs\
    \ } / numbers.size\nend", "  mean = mean(numbers)\n  absolute_deviations = numbers.map\
    \ { |x| (x - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.size.to_f\n  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.size.to_f\n\
    end", "  mean = mean(numbers)\n  sum = 0.0\n  numbers.each do |number|\n    sum\
    \ += (number - mean).abs\n  end\n  sum / numbers.length\nend", "  mean = mean(numbers)\n\
    \  sum = 0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n\
    \  sum / numbers.length\nend", "  mean = mean(numbers)\n  numbers.map { |number|\
    \ (number - mean).abs }.mean\nend", "  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = numbers.reduce(:+) / numbers.length.to_f\n  mean_absolute_deviation\
    \ = numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length.to_f\n  mean_absolute_deviation\n\
    end", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n\
    \  numbers.map { |x| (x - mean).abs }.mean\nend", "  mean = mean(numbers)\n  mean_absolute_deviation\
    \ = 0\n  numbers.each do |number|\n    mean_absolute_deviation += (number - mean).abs\n\
    \  end\n  mean_absolute_deviation / numbers.length\nend", "  mean = mean(numbers)\n\
    \  sum = 0.0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n\
    \  sum / numbers.length\nend", "  # TODO: Implement this method\n  # Hint: You\
    \ can use the mean method you defined above\n  mean = mean(numbers)\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  mean(absolute_deviations)\n\
    end", "  mean = numbers.reduce(:+) / numbers.size\n  numbers.map { |n| (n - mean).abs\
    \ }.reduce(:+) / numbers.size\nend", "  mean = mean(numbers)\n  sum = 0.0\n  numbers.each\
    \ do |number|\n    sum += (number - mean).abs\n  end\n  sum / numbers.length\n\
    end", "  mean = mean(numbers)\n  mean_absolute_deviation = 0.0\n  numbers.each\
    \ do |number|\n    mean_absolute_deviation += (number - mean).abs\n  end\n  mean_absolute_deviation\
    \ / numbers.size\nend", "  mean = mean(numbers)\n  mean_absolute_deviation = 0.0\n\
    \  numbers.each do |number|\n    mean_absolute_deviation += (number - mean).abs\n\
    \  end\n  mean_absolute_deviation / numbers.size\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.length.to_f\n  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length.to_f\n\
    end", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.length.to_f\n  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length.to_f\n\
    end", "  mean = numbers.reduce(:+) / numbers.length\n  numbers.map { |number|\
    \ (number - mean).abs }.reduce(:+) / numbers.length\nend", "  mean = mean(numbers)\n\
    \  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length\nend", "  mean\
    \ = mean(numbers)\n  sum = 0\n  numbers.each do |number|\n    sum += (number -\
    \ mean).abs\n  end\n  sum / numbers.length\nend", "  mean = mean(numbers)\n  numbers.map\
    \ { |number| (number - mean).abs }.mean\nend", "  mean = mean(numbers)\n  mean_absolute_deviation\
    \ = 0.0\n  numbers.each do |number|\n    mean_absolute_deviation += (number -\
    \ mean).abs\n  end\n  mean_absolute_deviation / numbers.size\nend", "  mean =\
    \ numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.mean\n\
    \  numbers.map { |x| (x - mean).abs }.mean\nend", "  mean = mean(numbers)\n  mean_absolute_deviation\
    \ = 0.0\n  numbers.each do |number|\n    mean_absolute_deviation += (number -\
    \ mean).abs\n  end\n  mean_absolute_deviation / numbers.length\nend", "  mean\
    \ = numbers.reduce(:+) / numbers.length\n  average_absolute_difference = numbers.map\
    \ { |n| (n - mean).abs }.reduce(:+) / numbers.length\n  average_absolute_difference\n\
    end", "  mean = mean(numbers)\n  sum = 0.0\n  numbers.each do |x|\n    sum +=\
    \ (x - mean).abs\n  end\n  sum / numbers.length\nend", "  mean = mean(numbers)\n\
    \  sum = 0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n\
    \  sum / numbers.length\nend", "  mean = mean(numbers)\n  mean_absolute_deviation\
    \ = 0.0\n  numbers.each do |number|\n    mean_absolute_deviation += (number -\
    \ mean).abs\n  end\n  mean_absolute_deviation / numbers.length\nend", "  mean\
    \ = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum,\
    \ el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el -\
    \ mean).abs } / numbers.size\nend", "  # TODO: Implement this function\n  mean\
    \ = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  absolute_deviations\
    \ = numbers.map { |number| (number - mean).abs }\n  absolute_deviations.inject(0.0)\
    \ { |sum, el| sum + el } / absolute_deviations.size\nend", "  # TODO: Implement\
    \ this method\n  # Hint: You can use the mean method from above\n  # Hint: You\
    \ can use the absolute_value method from above\n  # Hint: You can use the reduce\
    \ method from above\n  # Hint: You can use the length method from above\n  # Hint:\
    \ You can use the map method from above\n  # Hint: You can use the each method\
    \ from above\n  # Hint: You can use the each_with_index method from above\n  #\
    \ Hint: You can use the each_with_object method from above\n  # Hint: You can\
    \ use the each_entry method from above\n  # Hint: You can use the each_slice method\
    \ from above\n  # Hint: You can use the each_cons method from above\n  # Hint:\
    \ You can use the each_with_index method from above\n  # Hint: You can use the\
    \ each_index method from above\n  # Hint: You can use the each_line method from\
    \ above\n  # Hint: You can use the each_byte method from above\n  # Hint: You\
    \ can use the each_char method from above\n  # Hint: You can use the each_key\
    \ method from above\n  # Hint: You can use the each_value method from above\n\
    \  # Hint: You can use the each_pair method from above\n  # Hint: You can use\
    \ the each_slice method from above\n  # Hint: You can use the each_cons method\
    \ from above\n  # Hint: You can use the each_with_object method from above\n \
    \ # Hint: You can use the each_with_index method from above\n  # Hint: You can\
    \ use the each_entry method from above\n  # Hint: You can use the each_line method\
    \ from above\n  # Hint: You can use the each_byte method from above\n  # Hint:\
    \ You can use the each_char method from above\n  # Hint: You can use the each_key\
    \ method from above\n  # Hint: You can use the each_value method from above\n\
    \  # Hint: You can use the each_pair method from above\n  # Hint: You can use\
    \ the each_slice method from above\n  # Hint: You", "  mean = mean(numbers)\n\
    \  mean_absolute_deviation = numbers.inject(0) do |sum, number|\n    sum + (number\
    \ - mean).abs\n  end\n  mean_absolute_deviation / numbers.length\nend", "  mean\
    \ = mean(numbers)\n  mean_absolute_deviation = 0.0\n  numbers.each do |number|\n\
    \    mean_absolute_deviation += (number - mean).abs\n  end\n  mean_absolute_deviation\
    \ / numbers.size\nend", "  mean = mean(numbers)\n  sum = 0.0\n  numbers.each do\
    \ |number|\n    sum += (number - mean).abs\n  end\n  sum / numbers.length\nend",
  "  mean = mean(numbers)\n  sum = 0.0\n  numbers.each do |number|\n    sum += (number\
    \ - mean).abs\n  end\n  sum / numbers.length\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.length\n  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length\n\
    end", "  mean = numbers.reduce(:+) / numbers.length\n  numbers.map { |n| (n -\
    \ mean).abs }.reduce(:+) / numbers.length\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = numbers.reduce(:+) / numbers.size.to_f\n\
    \  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.size.to_f\nend", " \
    \ mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  numbers.map\
    \ { |x| (x - mean).abs }.mean\nend", "  mean = numbers.inject(0.0) { |sum, el|\
    \ sum + el } / numbers.size\n  absolute_deviations = numbers.map { |n| (n - mean).abs\
    \ }\n  absolute_deviations.inject(0.0) { |sum, el| sum + el } / absolute_deviations.size\n\
    end", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = numbers.reduce(:+)\
    \ / numbers.length.to_f\n  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length.to_f\n\
    end", "  mean = average(numbers)\n  absolute_deviations = numbers.map { |n| (n\
    \ - mean).abs }\n  average(absolute_deviations)\nend", "  mean = mean(numbers)\n\
    \  mean_absolute_deviation = 0.0\n  numbers.each do |number|\n    mean_absolute_deviation\
    \ += (number - mean).abs\n  end\n  mean_absolute_deviation / numbers.length\n\
    end", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0)\
    \ { |sum, el| sum + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n\
    \  mean_absolute_deviation = 0\n  numbers.each do |number|\n    mean_absolute_deviation\
    \ += (number - mean).abs\n  end\n  mean_absolute_deviation / numbers.length\n\
    end", "  mean = mean(numbers)\n  mean_absolute_deviation = 0.0\n  numbers.each\
    \ do |number|\n    mean_absolute_deviation += (number - mean).abs\n  end\n  mean_absolute_deviation\
    \ / numbers.length\nend", "  mean = numbers.reduce(:+) / numbers.length.to_f\n\
    \  absolute_differences = numbers.map { |number| (number - mean).abs }\n  absolute_differences.reduce(:+)\
    \ / absolute_differences.length.to_f\nend", "  mean = mean(numbers)\n  mean_absolute_deviation\
    \ = 0.0\n  numbers.each do |number|\n    mean_absolute_deviation += (number -\
    \ mean).abs\n  end\n  mean_absolute_deviation / numbers.length\nend", "  mean\
    \ = mean(numbers)\n  numbers.map { |n| (n - mean).abs }.reduce(:+) / numbers.length\n\
    end", "  # TODO: Implement this method\n  # Hint: You can use the mean method\
    \ from above to calculate the mean\n  #       of an array of numbers\n  mean =\
    \ mean(numbers)\n  sum = 0\n  numbers.each do |number|\n    sum += (number - mean).abs\n\
    \  end\n  sum / numbers.length\nend", "  mean = mean(numbers)\n  mean_absolute_deviation\
    \ = 0\n  numbers.each do |number|\n    mean_absolute_deviation += (number - mean).abs\n\
    \  end\n  mean_absolute_deviation / numbers.length\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = mean(numbers)\n  mean_absolute_deviation\
    \ = 0.0\n  numbers.each do |number|\n    mean_absolute_deviation += (number -\
    \ mean).abs\n  end\n  mean_absolute_deviation / numbers.length\nend", "  mean\
    \ = mean(numbers)\n  mean_absolute_deviation = 0.0\n  numbers.each do |number|\n\
    \    mean_absolute_deviation += (number - mean).abs\n  end\n  mean_absolute_deviation\
    \ / numbers.length\nend", "  # TODO: Implement this function\n  mean = numbers.reduce(:+)\
    \ / numbers.length\n  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length\n\
    end", "  mean = mean(numbers)\n  sum = 0.0\n  numbers.each do |number|\n    sum\
    \ += (number - mean).abs\n  end\n  sum / numbers.length\nend", "  mean = numbers.inject(0.0)\
    \ { |sum, el| sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum\
    \ + (el - mean).abs } / numbers.size\nend", "  mean = numbers.reduce(:+) / numbers.size.to_f\n\
    \  mean_absolute_deviation = numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.size.to_f\n\
    \  mean_absolute_deviation\nend", "  mean = numbers.inject(0.0) { |sum, el| sum\
    \ + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs\
    \ } / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum, el| sum + el }\
    \ / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs } /\
    \ numbers.size\nend", "  mean = numbers.inject(0.0) { |sum, el| sum + el } / numbers.size\n\
    \  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs } / numbers.size\nend",
  "  mean = numbers.reduce(:+) / numbers.size\n  numbers.map { |n| (n - mean).abs\
    \ }.reduce(:+) / numbers.size\nend", "  mean = mean(numbers)\n  sum = 0\n  numbers.each\
    \ do |number|\n    sum += (number - mean).abs\n  end\n  sum / numbers.length\n\
    end", "  mean = mean(numbers)\n  numbers.inject(0.0) { |sum, number| sum + (number\
    \ - mean).abs } / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum, el|\
    \ sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs\
    \ } / numbers.size\nend", "  mean = mean(numbers)\n  sum = 0\n  numbers.each do\
    \ |number|\n    sum += (number - mean).abs\n  end\n  sum / numbers.length\nend",
  "  mean = numbers.mean\n  numbers.map { |x| (x - mean).abs }.mean\nend", "  mean\
    \ = numbers.reduce(:+) / numbers.size\n  numbers.map { |number| (number - mean).abs\
    \ }.reduce(:+) / numbers.size\nend", "  mean = numbers.inject(0.0) { |sum, el|\
    \ sum + el } / numbers.size\n  numbers.inject(0.0) { |sum, el| sum + (el - mean).abs\
    \ } / numbers.size\nend", "  mean = mean(numbers)\n  absolute_deviations = numbers.map\
    \ { |n| (n - mean).abs }\n  mean(absolute_deviations)\nend", "  mean = mean(numbers)\n\
    \  sum = 0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n\
    \  sum / numbers.size\nend", "  mean = mean(numbers)\n  deviations = numbers.map\
    \ { |n| (n - mean).abs }\n  mean(deviations)\nend", "  mean = mean(numbers)\n\
    \  sum = 0\n  numbers.each do |number|\n    sum += (number - mean).abs\n  end\n\
    \  sum / numbers.length\nend", "  mean = numbers.reduce(:+) / numbers.length.to_f\n\
    \  numbers.map { |x| (x - mean).abs }.reduce(:+) / numbers.length.to_f\nend",
  "  mean = mean(numbers)\n  absolute_deviations = numbers.map { |x| (x - mean).abs\
    \ }\n  mean(absolute_deviations)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
