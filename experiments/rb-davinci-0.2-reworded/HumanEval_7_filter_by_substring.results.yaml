language: rb
name: HumanEval_7_filter_by_substring
results:
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |str| str.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpwpelxzjk

    Started

    .

    Finished in 0.000470629 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2124.82 tests/s, 8499.26 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |str| str.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpwpelxzjk

    Started

    .

    Finished in 0.000470629 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2124.82 tests/s, 8499.26 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |str| str.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpwpelxzjk

    Started

    .

    Finished in 0.000470629 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2124.82 tests/s, 8499.26 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |str| str.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpwpelxzjk

    Started

    .

    Finished in 0.000470629 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2124.82 tests/s, 8499.26 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |s| s.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfqy778lh

    Started

    .

    Finished in 0.000502946 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1988.29 tests/s, 7953.14 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |string| string.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdnez1fto

    Started

    .

    Finished in 0.000483003 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2070.38 tests/s, 8281.52 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
- exit_code: 0
  program: "# Filter an input array of strings only for ones that contain given substring\n\
    # >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"\
    ]\ndef filter_by_substring(strings, substring)\n  strings.select { |str| str.include?(substring)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_by_substring\n    candidate = method(:filter_by_substring)\n   \
    \ assert_equal([], candidate.call([], \"john\"))\n    assert_equal([\"xxx\", \"\
    xxxAAA\", \"xxx\"], candidate.call([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"))\n    assert_equal([\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"], candidate.call([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\"))\n    assert_equal([\"grunt\", \"prune\"], candidate.call([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpwpelxzjk

    Started

    .

    Finished in 0.000470629 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2124.82 tests/s, 8499.26 assertions/s

    '
  stdout: ''
  timestamp: 1659798215
