name: HumanEval_90_next_smallest
language: rb
prompt: "# You are given an array of integers.\n# Write a function next_smallest()\
  \ that returns the 2nd smallest element of the array.\n# Return nil if there is\
  \ no such element.\n# >>> next_smallest.call([1, 2, 3, 4, 5])\n# 2\n# >>> next_smallest.call([5,\
  \ 1, 4, 3, 2])\n# 2\n# >>> next_smallest.call([])\n# nil\n# >>> next_smallest.call([1,\
  \ 1])\n# nil\ndef next_smallest(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_next_smallest\n\
  \    candidate = method(:next_smallest)\n    assert_equal(2, candidate.call([1,\
  \ 2, 3, 4, 5]))\n    assert_equal(2, candidate.call([5, 1, 4, 3, 2]))\n    assert_equal(nil,\
  \ candidate.call([]))\n    assert_equal(nil, candidate.call([1, 1]))\n    assert_equal(1,\
  \ candidate.call([1, 1, 1, 1, 0]))\n    assert_equal(nil, candidate.call([1, 1]))\n\
  \    assert_equal(-35, candidate.call([-35, 34, 12, -45]))\n  end\nend\n"
completions: ["  lst.sort[1]\nend", "  return nil if lst.empty?\n  return nil if lst.uniq.length\
    \ == 1\n  lst.uniq.sort[1]\nend", "  lst.sort[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.size == 1\n  lst.sort[1]\nend", "  lst.sort[1]\nend",
  "  return nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\n\
    end", "  lst.sort!\n  lst.each_with_index do |num, index|\n    return lst[index\
    \ + 1] if lst[index + 1] != num\n  end\n  nil\nend", "  lst.sort.uniq[1]\nend",
  "  return nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\n\
    end", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.length == 1\n  lst.sort.uniq[1]\nend", "  return nil\
    \ if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend", " \
    \ lst.sort.uniq[1]\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort.uniq[1]\n\
    end", "  return nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\n\
    end", "  lst.sort.uniq[1]\nend", "  lst.sort[1]\nend", "  lst.sort[1]\nend", " \
    \ return nil if lst.empty?\n  lst.sort.uniq[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.size == 1\n  lst.sort[1]\nend", "  lst.sort!\n  lst.uniq!\n\
    \  if lst.length < 2\n    return nil\n  else\n    return lst[1]\n  end\nend",
  "  lst.sort!\n  lst.each_with_index do |num, idx|\n    return lst[idx + 1] if lst[idx\
    \ + 1] != num\n  end\n  nil\nend", "  lst.sort!\n  lst.each_with_index do |e,\
    \ i|\n    return lst[i+1] if lst[i+1] != e\n  end\n  nil\nend", "  lst.sort.uniq[1]\n\
    end", "  lst.sort[1]\nend", "  lst.sort[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.size == 1\n  lst.sort[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.length == 1\n  lst.sort.uniq[1]\nend", "  lst.sort!\n\
    \  lst.uniq!\n  lst[1]\nend", "  lst.sort[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend", "  lst.sort[1]\nend",
  "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  return nil if lst.empty?\n  return\
    \ nil if lst.uniq.size == 1\n  lst.sort[1]\nend", "  lst.sort[1]\nend", "  lst.sort.uniq[1]\n\
    end", "  return nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\n\
    end", "  lst.sort[1]\nend", "  lst.sort[1]\nend", "  lst.sort[1]\nend", "  lst.sort[1]\n\
    end", "  lst.sort.uniq[1]\nend", "  return nil if lst.empty?\n  lst.sort!\n  lst.each_with_index\
    \ do |num, index|\n    return lst[index + 1] if lst[index + 1] != num\n  end\n\
    \  nil\nend", "  return nil if lst.empty?\n  lst.sort.uniq[1]\nend", "  return\
    \ nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend",
  "  if lst.length < 2\n    return nil\n  end\n  lst.sort!\n  if lst[0] == lst[1]\n\
    \    return nil\n  end\n  return lst[1]\nend", "  lst.sort[1]\nend", "  return\
    \ nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend",
  "  lst.sort!\n  lst.uniq!\n  return nil if lst.length < 2\n  lst[1]\nend", "  lst.sort.uniq[1]\n\
    end", "  return nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\n\
    end", "  lst.sort!\n  lst.each_with_index do |item, index|\n    if lst[index +\
    \ 1] != item\n      return lst[index + 1]\n    end\n  end\n  return nil\nend",
  "  return nil if lst.empty?\n  return nil if lst.size == 1\n  lst.sort!\n  lst.uniq!\n\
    \  return nil if lst.size == 1\n  lst[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend", "  return nil if lst.length\
    \ < 2\n  lst.sort[1]\nend", "  return nil if lst.empty?\n  return nil if lst.uniq.length\
    \ == 1\n  lst.sort[1]\nend", "  return nil if lst.empty?\n  return nil if lst.uniq.size\
    \ == 1\n  lst.sort[1]\nend", "  lst.sort!\n  lst.each_with_index do |num, index|\n\
    \    return lst[index + 1] if lst[index + 1] != num\n  end\n  nil\nend", "  lst.sort.uniq[1]\n\
    end", "  lst.sort[1]\nend", "  lst.sort[1]\nend", "  lst.sort[1]\nend", "  return\
    \ nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend",
  "  lst.sort!\n  lst.uniq!\n  return nil if lst.length < 2\n  lst[1]\nend", "  lst.sort[1]\n\
    end", "  lst.sort.uniq[1]\nend", "  lst.sort[1]\nend", "  lst.sort.uniq[1]\nend",
  "  if lst.length < 2\n    return nil\n  end\n  lst.sort!\n  return lst[1]\nend",
  "  lst.sort!\n  lst.each_with_index do |e, i|\n    return lst[i+1] if lst[i+1] !=\
    \ e\n  end\n  nil\nend", "  lst.sort.uniq[1]\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |x, i|\n    if x != lst[i+1]\n      return lst[i+1]\n    end\n  end\n  return\
    \ nil\nend", "  lst.sort.uniq[1]\nend", "  return nil if lst.empty?\n  return\
    \ nil if lst.uniq.size == 1\n  lst.sort[1]\nend", "  return nil if lst.length\
    \ < 2\n  lst.sort.uniq[1]\nend", "  lst.sort.uniq[1]\nend", "  lst.sort!\n  lst.uniq!\n\
    \  lst[1]\nend", "  lst.sort[1]\nend", "  lst.sort.uniq[1]\nend", "  lst.sort!\n\
    \  lst.each_with_index do |num, index|\n    if lst[index + 1] != num\n      return\
    \ lst[index + 1]\n    end\n  end\n  nil\nend", "  return nil if lst.empty?\n \
    \ return nil if lst.uniq.length == 1\n  lst.sort[1]\nend", "  return nil if lst.length\
    \ < 2\n  lst.sort[1]\nend", "  lst.sort[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.size == 1\n  lst.sort[1]\nend", "  lst.sort[1]\nend",
  "  lst.sort.uniq[1]\nend", "  lst.sort[1]\nend", "  return nil if lst.empty?\n \
    \ sorted = lst.sort\n  return nil if sorted.uniq.size == 1\n  sorted[1]\nend",
  "  lst.sort!.uniq!\n  lst[1]\nend", "  lst.sort.uniq[1]\nend", "  return nil if\
    \ lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend", "  lst.sort!\n\
    \  lst.each_with_index do |e, i|\n    return lst[i+1] if e != lst[i+1]\n  end\n\
    \  nil\nend", "  lst.sort[1]\nend", "  lst.sort[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.size == 1\n  lst.sort[1]\nend", "  lst.sort!\n  lst.uniq!\n\
    \  if lst.length < 2\n    return nil\n  else\n    return lst[1]\n  end\nend",
  "  return nil if lst.empty?\n  return nil if lst.uniq.size == 1\n  lst.sort[1]\n\
    end", "  return nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\n\
    end", "  lst.sort[1]\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort.uniq[1]\n\
    end", "  lst.sort.uniq[1]\nend", "  lst.sort.uniq[1]\nend", "  lst.sort[1]\nend",
  "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort.uniq[1]\nend", "  lst.sort[1]\n\
    end", "  return nil if lst.empty?\n  return nil if lst.uniq.size == 1\n  lst.sort[1]\n\
    end", "  return nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\n\
    end", "  lst.sort.uniq[1]\nend", "  return nil if lst.empty?\n  return nil if\
    \ lst.uniq.size == 1\n  lst.sort[1]\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\n\
    end", "  lst.sort[1]\nend", "  lst.sort[1]\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    return lst[i+1] if lst[i+1] != e\n  end\n  nil\nend", "  lst.sort!\n\
    \  lst.uniq!\n  if lst.length < 2\n    return nil\n  else\n    return lst[1]\n\
    \  end\nend", "  return nil if lst.empty?\n  return nil if lst.uniq.size == 1\n\
    \  lst.sort[1]\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort[1]\n\
    end", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend", "  lst.sort[1]\nend",
  "  lst.sort.uniq[1]\nend", "  lst.sort.uniq[1]\nend", "  lst.sort.uniq[1]\nend",
  "  lst.sort.uniq[1]\nend", "  lst.sort[1]\nend", "  lst.sort.uniq[1]\nend", "  lst.sort.uniq[1]\n\
    end", "  return nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\n\
    end", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.size == 1\n  lst.sort.uniq[1]\nend", "\tlst.sort!\n\t\
    lst.each_with_index do |num, idx|\n\t\tif lst[idx+1] != num\n\t\t\treturn lst[idx+1]\n\
    \t\tend\n\tend\n\treturn nil\nend", "  return nil if lst.empty?\n  return nil\
    \ if lst.uniq.length == 1\n  lst.sort[1]\nend", "  lst.sort[1]\nend", "  lst.sort[1]\n\
    end", "  return nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\n\
    end", "  lst.sort[1]\nend", "  lst.sort.uniq[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.size == 1\n  lst.sort[1]\nend", "  lst.sort[1]\nend",
  "  lst.sort[1]\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n    return\
    \ lst[i+1] if lst[i+1] != e\n  end\n  nil\nend", "  lst.sort[1]\nend", "  lst.sort.uniq[1]\n\
    end", "  return nil if lst.empty?\n  return nil if lst.uniq.size == 1\n  lst.sort[1]\n\
    end", "  lst.sort[1]\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  return\
    \ nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend",
  "  return nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\n\
    end", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |num, index|\n    if index > 0 && num != lst[index - 1]\n      return num\n\
    \    end\n  end\n  nil\nend", "  lst.sort!\n  lst.each_with_index do |num, index|\n\
    \    if index == lst.length - 1\n      return nil\n    elsif num != lst[index\
    \ + 1]\n      return lst[index + 1]\n    end\n  end\nend", "  lst.sort[1]\nend",
  "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  return nil if lst.empty?\n  return\
    \ nil if lst.uniq.size == 1\n  lst.sort[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.size == 1\n  lst.sort[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.size == 1\n  lst.sort[1]\nend", "  lst.sort!\n  lst.uniq!\n\
    \  lst[1]\nend", "  lst.sort[1]\nend", "  lst.sort.uniq[1]\nend", "  lst.sort.uniq[1]\n\
    end", "  lst.sort[1]\nend", "  return nil if lst.empty?\n  return nil if lst.uniq.size\
    \ == 1\n  lst.sort[1]\nend", "  lst.sort.uniq[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend", "  lst.sort.uniq[1]\n\
    end", "  return nil if lst.empty?\n  return nil if lst.uniq.size == 1\n  lst.sort[1]\n\
    end", "  return nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\n\
    end", "  lst.sort.uniq[1]\nend", "  lst.sort!\n  lst.each_with_index do |item,\
    \ index|\n    if index + 1 < lst.length\n      return lst[index + 1] if lst[index\
    \ + 1] != item\n    end\n  end\n  nil\nend", "  lst.sort[1]\nend", "  lst.sort[1]\n\
    end", "  lst.sort[1]\nend", "  lst.sort!\n  lst.each_with_index do |num, index|\n\
    \    if lst[index] != lst[index + 1]\n      return lst[index + 1]\n    end\n \
    \ end\n  nil\nend", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort.uniq[1]\n\
    end", "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  lst.sort[1]\nend", "  return\
    \ nil if lst.length < 2\n  lst.sort[1]\nend", "  return nil if lst.length < 2\n\
    \  lst.sort[1]\nend", "  lst.sort[1]\nend", "  return nil if lst.empty?\n  return\
    \ nil if lst.uniq.length == 1\n  lst.sort[1]\nend", "  return nil if lst.empty?\n\
    \  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend", "  lst.sort[1]\nend",
  "  lst.sort[1]\nend", "  lst.sort[1]\nend", "  lst.sort.uniq[1]\nend", "  return\
    \ nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend",
  "  lst.sort[1]\nend", "  lst.sort!\n  lst.each_with_index do |x, i|\n    if x !=\
    \ lst[i + 1]\n      return lst[i + 1]\n    end\n  end\n  nil\nend", "  return\
    \ nil if lst.empty?\n  return nil if lst.uniq.length == 1\n  lst.sort[1]\nend",
  "  lst.sort!\n  lst.uniq!\n  lst[1]\nend", "  return nil if lst.empty?\n  return\
    \ nil if lst.uniq.size == 1\n  lst.sort[1]\nend", "  return nil if lst.empty?\
    \ || lst.length == 1\n  lst.sort!\n  lst.uniq!\n  return nil if lst.length ==\
    \ 1\n  lst[1]\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
