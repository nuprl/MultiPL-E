name: HumanEval_102_choose_num
language: rb
prompt: "# This function takes two positive numbers x and y and returns the\n# biggest\
  \ even integer number that is in the range [x, y] inclusive. If \n# there's no such\
  \ number, then the function should return -1.\n# For example:\n# >>> choose_num.call(12,\
  \ 15)\n# 14\n# >>> choose_num.call(13, 12)\n# -1\ndef choose_num(x, y)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_choose_num\n\
  \    candidate = method(:choose_num)\n    assert_equal(14, candidate.call(12, 15))\n\
  \    assert_equal(-1, candidate.call(13, 12))\n    assert_equal(12354, candidate.call(33,\
  \ 12354))\n    assert_equal(-1, candidate.call(5234, 5233))\n    assert_equal(28,\
  \ candidate.call(6, 29))\n    assert_equal(-1, candidate.call(27, 10))\n    assert_equal(-1,\
  \ candidate.call(7, 7))\n    assert_equal(546, candidate.call(546, 546))\n  end\n\
  end\n"
completions: ["  (x..y).reverse_each do |i|\n    return i if i.even?\n  end\n  -1\n\
    end", "  # YOUR CODE HERE\nend", "  if x > y\n    return -1\n  end\n  if x % 2\
    \ == 0\n    return x\n  end\n  if x % 2 == 1\n    return x + 1\n  end\nend", " \
    \ # YOUR CODE HERE\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n\
    \    return x\n  end\n  if x % 2 == 1\n    return x + 1\n  end\nend", "  if x\
    \ == y\n    return x if x.even?\n    return -1\n  end\n  if x > y\n    x, y =\
    \ y, x\n  end\n  while x <= y\n    return x if x.even?\n    x += 1\n  end\n  -1\n\
    end", "  (x..y).each do |num|\n    return num if num.even?\n  end\n  -1\nend",
  "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  return\
    \ x + 1\nend", "  (x..y).each do |num|\n    return num if num.even?\n  end\n \
    \ -1\nend", "  if x % 2 == 0\n    return x\n  elsif x % 2 == 1\n    x += 1\n \
    \   return x\n  end\nend", "  (x..y).each do |i|\n    return i if i % 2 == 0\n\
    \  end\n  -1\nend", "  (x..y).select { |num| num.even? }.max || -1\nend", "  if\
    \ x > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  return\
    \ x + 1\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return\
    \ x\n  end\n  return x + 1\nend", "  (x..y).each do |num|\n    return num if num.even?\n\
    \  end\n  -1\nend", "  if x % 2 == 0\n    return x\n  elsif x % 2 == 1\n    return\
    \ x + 1\n  end\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n   \
    \ return x\n  end\n  return x + 1\nend", "  if x > y\n    return -1\n  end\n \
    \ if x % 2 == 0\n    return x\n  end\n  return x + 1\nend", "  if x % 2 == 0 &&\
    \ y % 2 == 0\n    if x > y\n      return y\n    else\n      return x\n    end\n\
    \  elsif x % 2 == 0 && y % 2 != 0\n    return x\n  elsif x % 2 != 0 && y % 2 ==\
    \ 0\n    return y\n  else\n    return -1\n  end\nend", "  if x > y\n    return\
    \ -1\n  end\n  if x % 2 == 0\n    return x\n  else\n    return x + 1\n  end\n\
    end", "  # TODO: Implement this function\nend", "  return -1 if x > y\n  (x..y).reverse_each\
    \ do |i|\n    return i if i.even?\n  end\nend", "  (x..y).each { |i| return i\
    \ if i.even? }\n  -1\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n\
    \    return x\n  end\n  return choose_num(x + 1, y)\nend", "  if x > y\n    return\
    \ -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  return x + 1\nend", "  if\
    \ x > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  if x %\
    \ 2 == 1\n    return x + 1\n  end\nend", "  (x..y).each do |i|\n    return i if\
    \ i.even?\n  end\n  -1\nend", "  if x > y\n    return -1\n  end\n  if x % 2 ==\
    \ 0\n    return x\n  else\n    return x + 1\n  end\nend", "  if x > y\n    return\
    \ -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  return x + 1\nend", "  if\
    \ x > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  return\
    \ x + 1\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return\
    \ x\n  end\n  if x % 2 == 1\n    return x + 1\n  end\nend", "  (x..y).each do\
    \ |i|\n    return i if i.even?\n  end\n  -1\nend", "  if x > y\n    return -1\n\
    \  end\n  if x % 2 == 0\n    return x\n  end\n  return x + 1\nend", "  (x..y).each\
    \ do |i|\n    return i if i.even?\n  end\n  -1\nend", "  (x..y).each do |num|\n\
    \    return num if num.even?\n  end\n  -1\nend", "  if x > y\n    return -1\n\
    \  end\n  if x % 2 == 0\n    return x\n  end\n  return x + 1\nend", "  if x >\
    \ y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  return x +\
    \ 1\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n\
    \  end\n  return x + 1\nend", "  if x > y\n    return -1\n  end\n  if x % 2 ==\
    \ 0\n    return x\n  end\n  return choose_num(x + 1, y)\nend", "  if x > y\n \
    \   return -1\n  end\n  if x % 2 == 0\n    return x\n  else\n    return x + 1\n\
    \  end\nend", "  # YOUR CODE HERE\nend", "  if x > y\n    return -1\n  end\n \
    \ if x % 2 == 0\n    return x\n  end\n  return x + 1\nend", "  (x..y).each do\
    \ |num|\n    return num if num.even?\n  end\n  -1\nend", "  if x > y\n    return\
    \ -1\n  elsif x % 2 == 0\n    return x\n  elsif y % 2 == 0\n    return y\n  else\n\
    \    return -1\n  end\nend", "  if x > y\n    return -1\n  end\n  if x % 2 ==\
    \ 0\n    return x\n  else\n    return x + 1\n  end\nend", "  (x..y).each do |num|\n\
    \    return num if num.even?\n  end\n  -1\nend", "  (x..y).each do |i|\n    return\
    \ i if i.even?\n  end\n  -1\nend", "  if x > y\n    return -1\n  end\n  if x %\
    \ 2 == 0\n    return x\n  end\n  if x % 2 == 1\n    return x + 1\n  end\nend",
  "  (x..y).each do |i|\n    return i if i.even?\n  end\n  -1\nend", "  if x > y\n\
    \    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  return x + 1\n\
    end", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n\
    \  return x + 1\nend", "  (x..y).each do |i|\n    return i if i.even?\n  end\n\
    \  -1\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n\
    \  end\n  return x + 1\nend", "  (x..y).each do |i|\n    return i if i.even?\n\
    \  end\n  -1\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return\
    \ x\n  else\n    return x + 1\n  end\nend", "  if x > y\n    return -1\n  end\n\
    \  if x % 2 == 0\n    return x\n  end\n  return x + 1\nend", "  (x..y).each do\
    \ |num|\n    return num if num.even?\n  end\n  -1\nend", "  (x..y).each do |i|\n\
    \    return i if i.even?\n  end\n  -1\nend", "  if x > y\n    return -1\n  end\n\
    \  if x % 2 == 0\n    return x\n  end\n  return x + 1\nend", "  (x..y).each do\
    \ |i|\n    return i if i % 2 == 0\n  end\n  -1\nend", "  (x..y).each do |n|\n\
    \    return n if n.even?\n  end\n  -1\nend", "  if x > y\n    return -1\n  end\n\
    \  if x % 2 == 0\n    return x\n  end\n  if x % 2 == 1\n    return x + 1\n  end\n\
    end", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n\
    \  if x % 2 == 1\n    return choose_num(x + 1, y)\n  end\nend", "  if x > y\n\
    \    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  return x + 1\n\
    end", "  (x..y).select { |i| i.even? }.max\nend", "  if x > y\n    return -1\n\
    \  end\n  if x % 2 == 0\n    return x\n  end\n  return x + 1\nend", "  if x >\
    \ y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  if x % 2 ==\
    \ 1\n    return choose_num(x + 1, y)\n  end\nend", "  if x > y\n    return -1\n\
    \  end\n  if x % 2 == 0\n    return x\n  end\n  return x + 1\nend", "  if x >\
    \ y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  return x +\
    \ 1\nend", "  (x..y).each do |i|\n    return i if i.even?\n  end\n  -1\nend",
  "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  if x\
    \ % 2 == 1\n    return x + 1\n  end\nend", "  if x > y\n    return -1\n  end\n\
    \  if x % 2 == 0\n    return x\n  else\n    return x + 1\n  end\nend", "  if x\
    \ > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  if x % 2\
    \ == 1\n    return x + 1\n  end\nend", "  (x..y).each do |i|\n    return i if\
    \ i.even?\n  end\n  -1\nend", "  (x..y).select { |n| n.even? }.max || -1\nend",
  "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  if x\
    \ % 2 == 1\n    return x + 1\n  end\nend", "  return -1 if x > y\n  (x..y).reverse_each\
    \ do |i|\n    return i if i.even?\n  end\nend", "  if x > y\n    return -1\n \
    \ end\n  if x % 2 == 0\n    return x\n  end\n  return x + 1\nend", "  if x > y\n\
    \    return -1\n  elsif x % 2 == 0\n    return x\n  else\n    return x + 1\n \
    \ end\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n\
    \  end\n  if x % 2 == 1\n    return choose_num(x + 1, y)\n  end\nend", "  (x..y).each\
    \ do |num|\n    return num if num.even?\n  end\n  -1\nend", "  (x..y).each do\
    \ |i|\n    return i if i.even?\n  end\n  -1\nend", "  (x..y).each do |i|\n   \
    \ return i if i.even?\n  end\n  -1\nend", "  # YOUR CODE HERE\nend", "  if x >\
    \ y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  if x % 2 ==\
    \ 1\n    return x + 1\n  end\nend", "  if x > y\n    return -1\n  end\n  if x\
    \ % 2 == 0\n    return x\n  end\n  return x + 1\nend", "  (x..y).each do |i|\n\
    \    return i if i.even?\n  end\n  -1\nend", "  (x..y).each do |i|\n    return\
    \ i if i.even?\n  end\n  -1\nend", "  if x > y\n    return -1\n  elsif x % 2 ==\
    \ 0\n    return x\n  else\n    return x + 1\n  end\nend", "  (x..y).select { |n|\
    \ n.even? }.max || -1\nend", "  if x > y\n    return -1\n  end\n  if x % 2 ==\
    \ 0\n    return x\n  else\n    return x + 1\n  end\nend", "  if x > y\n    return\
    \ -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  if y % 2 == 0\n    return\
    \ y\n  end\n  return -1\nend", "  (x..y).each do |num|\n    return num if num.even?\n\
    \  end\n  -1\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return\
    \ x\n  end\n  return x + 1\nend", "  (x..y).each do |i|\n    return i if i.even?\n\
    \  end\n  -1\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return\
    \ x\n  end\n  return x + 1\nend", "  if x > y\n    return -1\n  end\n  if x %\
    \ 2 == 0\n    return x\n  end\n  if x % 2 == 1\n    return x + 1\n  end\nend",
  "  (x..y).each do |i|\n    return i if i.even?\n  end\n  -1\nend", "  if x > y\n\
    \    return -1\n  end\n  if x % 2 == 0\n    return x\n  else\n    return x + 1\n\
    \  end\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n\
    \  end\n  if x % 2 == 1\n    return x + 1\n  end\nend", "  (x..y).each do |i|\n\
    \    return i if i.even?\n  end\n  -1\nend", "  if x > y\n    return -1\n  end\n\
    \  if x % 2 == 0\n    return x\n  end\n  if x % 2 == 1\n    return x + 1\n  end\n\
    end", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n\
    \  return x + 1\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n  \
    \  return x\n  else\n    return x + 1\n  end\nend", "  # TODO: Implement this\
    \ function\nend", "  (x..y).each do |i|\n    return i if i.even?\n  end\n  -1\n\
    end", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  else\n\
    \    return x + 1\n  end\nend", "  # YOUR CODE HERE\nend", "  if x > y\n    return\
    \ -1\n  end\n  if x % 2 == 0\n    return x\n  else\n    return x + 1\n  end\n\
    end", "  x.upto(y) do |i|\n    return i if i.even?\n  end\n  -1\nend", "  if x\
    \ > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  else\n    return\
    \ x + 1\n  end\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n   \
    \ return x\n  end\n  return x + 1\nend", "  (x..y).each do |i|\n    return i if\
    \ i.even?\n  end\n  -1\nend", "  (x..y).each do |i|\n    return i if i.even?\n\
    \  end\n  -1\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return\
    \ x\n  end\n  if x % 2 == 1\n    return choose_num(x + 1, y)\n  end\nend", " \
    \ if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  return\
    \ x + 1\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return\
    \ x\n  end\n  if x % 2 == 1\n    return choose_num(x + 1, y)\n  end\nend", " \
    \ if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  if x\
    \ % 2 == 1\n    return choose_num(x + 1, y)\n  end\nend", "  (x..y).each do |num|\n\
    \    return num if num.even?\n  end\n  -1\nend", "  if x > y\n    return -1\n\
    \  end\n  if x % 2 == 0\n    return x\n  end\n  return x + 1\nend", "  (x..y).each\
    \ do |i|\n    return i if i.even?\n  end\n  -1\nend", "  if x % 2 == 0\n    return\
    \ x\n  elsif x + 1 == y\n    return -1\n  else\n    return choose_num(x + 1, y)\n\
    \  end\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n\
    \  end\n  if x % 2 == 1\n    return choose_num(x + 1, y)\n  end\nend", "  if x\
    \ > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  if y % 2\
    \ == 0\n    return y\n  end\n  return -1\nend", "  if x % 2 == 0\n    return x\n\
    \  elsif x + 1 == y\n    return -1\n  else\n    return choose_num(x + 1, y)\n\
    \  end\nend", "  # YOUR CODE HERE\nend", "  if x > y\n    return -1\n  end\n \
    \ if x % 2 == 0\n    return x\n  end\n  return x + 1\nend", "  if x > y\n    return\
    \ -1\n  end\n  for i in x..y\n    if i % 2 == 0\n      return i\n    end\n  end\n\
    \  return -1\nend", "  if x.even? && y.even?\n    return y\n  elsif x.even? &&\
    \ y.odd?\n    return x\n  elsif x.odd? && y.even?\n    return y\n  elsif x.odd?\
    \ && y.odd?\n    return -1\n  end\nend", "  if x > y\n    return -1\n  end\n \
    \ if x % 2 == 0\n    return x\n  end\n  if x % 2 == 1\n    return x + 1\n  end\n\
    end", "  (x..y).each do |num|\n    return num if num.even?\n  end\n  -1\nend",
  "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  return\
    \ x + 1\nend", "  (x..y).each do |n|\n    return n if n.even?\n  end\n  -1\nend",
  "  (x..y).each do |num|\n    return num if num.even?\n  end\n  -1\nend", "  if x\
    \ > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  return x\
    \ + 1\nend", "  (x..y).each do |i|\n    return i if i.even?\n  end\n  -1\nend",
  "  (x..y).each do |i|\n    return i if i.even?\n  end\n  -1\nend", "  if x > y\n\
    \    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  if x % 2 == 1\n\
    \    return x + 1\n  end\nend", "  (x..y).each do |num|\n    return num if num.even?\n\
    \  end\n  -1\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return\
    \ x\n  end\n  return x + 1\nend", "  (x..y).each do |i|\n    return i if i.even?\n\
    \  end\n  -1\nend", "  # TODO: Implement this function.\nend", "  if x > y\n \
    \   return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  if x % 2 == 1\n\
    \    return choose_num(x + 1, y)\n  end\nend", "  if x > y\n    return -1\n  end\n\
    \  if x % 2 == 0\n    return x\n  end\n  if x % 2 == 1\n    return choose_num(x\
    \ + 1, y)\n  end\nend", "  (x..y).each do |i|\n    return i if i.even?\n  end\n\
    \  -1\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n\
    \  else\n    return x + 1\n  end\nend", "  (x..y).each do |i|\n    return i if\
    \ i.even?\n  end\n  -1\nend", "  (x..y).select { |n| n.even? }.max || -1\nend",
  "  # TODO: implement this function\nend", "  if x > y\n    return -1\n  end\n  if\
    \ x % 2 == 0\n    return x\n  end\n  return x + 1\nend", "  (x..y).each do |i|\n\
    \    return i if i.even?\n  end\n  -1\nend", "  if x > y\n    return -1\n  end\n\
    \  if x % 2 == 0\n    return x\n  end\n  if x % 2 == 1\n    return choose_num(x\
    \ + 1, y)\n  end\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n \
    \   return x\n  else\n    return x + 1\n  end\nend", "  if x > y\n    return -1\n\
    \  end\n  if x % 2 == 0\n    return x\n  end\n  if x % 2 == 1\n    x += 1\n  \
    \  return x\n  end\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n\
    \    return x\n  end\n  return x + 1\nend", "  if x > y\n    return -1\n  end\n\
    \  if x % 2 == 0\n    return x\n  end\n  return x + 1\nend", "  if x % 2 == 0\n\
    \    return x if x == y\n    return x if x < y\n  end\n  if y % 2 == 0\n    return\
    \ y if y > x\n  end\n  return -1\nend", "  (x..y).each do |i|\n    return i if\
    \ i % 2 == 0\n  end\n  -1\nend", "  if x > y\n    return -1\n  end\n  if x % 2\
    \ == 0\n    return x\n  end\n  if x + 1 == y\n    return -1\n  end\n  return x\
    \ + 2\nend", "  (x..y).select { |n| n.even? }.max || -1\nend", "  if x > y\n \
    \   return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  return x + 1\nend",
  "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  if x\
    \ % 2 == 1\n    return x + 1\n  end\nend", "  if x > y\n    return -1\n  end\n\
    \  if x % 2 == 0\n    return x\n  end\n  return x + 1\nend", "  if x > y\n   \
    \ return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  return x + 1\nend",
  "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  if x\
    \ % 2 == 1\n    return choose_num(x + 1, y)\n  end\nend", "  if x % 2 == 0 &&\
    \ y % 2 == 0\n    if x > y\n      return y\n    else\n      return x\n    end\n\
    \  elsif x % 2 == 0 && y % 2 != 0\n    return x\n  elsif x % 2 != 0 && y % 2 ==\
    \ 0\n    return y\n  else\n    return -1\n  end\nend", "  return -1 if x > y\n\
    \  (x..y).reverse_each do |num|\n    return num if num.even?\n  end\nend", " \
    \ if x % 2 == 0\n    x\n  elsif y % 2 == 0\n    y\n  else\n    -1\n  end\nend",
  "  (x..y).each do |i|\n    if i % 2 == 0\n      return i\n    end\n  end\n  return\
    \ -1\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n\
    \  end\n  if x % 2 == 1\n    return x + 1\n  end\nend", "  if x > y\n    return\
    \ -1\n  end\n  if x % 2 == 0\n    return x\n  else\n    return x + 1\n  end\n\
    end", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n\
    \  return x + 1\nend", "  (x..y).each do |num|\n    return num if num.even?\n\
    \  end\n  -1\nend", "  (x..y).select { |n| n.even? }.max || -1\nend", "  (x..y).each\
    \ do |num|\n    return num if num.even?\n  end\n  -1\nend", "  if x > y\n    return\
    \ -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  if x % 2 == 1\n    return\
    \ choose_num(x + 1, y)\n  end\nend", "  if x > y\n    return -1\n  end\n  if x\
    \ % 2 == 0\n    return x\n  else\n    return x + 1\n  end\nend", "  (x..y).each\
    \ do |i|\n    return i if i.even?\n  end\n  -1\nend", "  if x > y\n    return\
    \ -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  return x + 1\nend", "  if\
    \ x > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  else\n    return\
    \ x + 1\n  end\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n   \
    \ return x\n  end\n  return x + 1\nend", "  if x > y\n    return -1\n  end\n \
    \ if x % 2 == 0\n    return x\n  end\n  if x % 2 == 1\n    return choose_num(x\
    \ + 1, y)\n  end\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n \
    \   return x\n  else\n    return x + 1\n  end\nend", "  (x..y).each do |num|\n\
    \    return num if num.even?\n  end\n  -1\nend", "  (x..y).select { |n| n.even?\
    \ }.max || -1\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return\
    \ x\n  end\n  if x % 2 == 1\n    return x + 1\n  end\nend", "  if x > y\n    return\
    \ -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  return x + 1\nend", "  if\
    \ x > y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  else\n    return\
    \ x + 1\n  end\nend", "  (x..y).each do |i|\n    return i if i.even?\n  end\n\
    \  -1\nend", "  (x..y).each do |i|\n    return i if i.even?\n  end\n  -1\nend",
  "  if x % 2 == 0\n    x\n  elsif x + 1 == y\n    -1\n  else\n    choose_num(x +\
    \ 1, y)\n  end\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n   \
    \ return x\n  end\n  return x + 1\nend", "  if x > y\n    return -1\n  end\n \
    \ if x % 2 == 0\n    return x\n  end\n  return x + 1\nend", "  if x % 2 == 0\n\
    \    return x\n  elsif x + 1 == y\n    return -1\n  else\n    return choose_num(x\
    \ + 1, y)\n  end\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n \
    \   return x\n  end\n  return x + 1\nend", "  (x..y).each do |n|\n    return n\
    \ if n.even?\n  end\n  -1\nend", "  (x..y).each do |i|\n    return i if i.even?\n\
    \  end\n  -1\nend", "  if x > y\n    return -1\n  end\n  if x % 2 == 0\n    return\
    \ x\n  else\n    return x + 1\n  end\nend", "  if x > y\n    return -1\n  end\n\
    \  if x % 2 == 0\n    return x\n  end\n  choose_num(x + 1, y)\nend", "  if x >\
    \ y\n    return -1\n  end\n  if x % 2 == 0\n    return x\n  end\n  if x % 2 ==\
    \ 1\n    return x + 1\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
