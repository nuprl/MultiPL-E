language: rb
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphree92ie\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphree92ie.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008022172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.65 tests/s, 249.31 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl68kf56h\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpl68kf56h.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007983176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.26 tests/s, 250.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphree92ie\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphree92ie.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008022172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.65 tests/s, 249.31 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |x| x.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphhaatr5j\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphhaatr5j.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008188036 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.13 tests/s, 244.26 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |n| n.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpwv0_d8t4\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpwv0_d8t4.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008218487 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.68 tests/s, 243.35 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphree92ie\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphree92ie.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008022172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.65 tests/s, 249.31 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphree92ie\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphree92ie.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008022172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.65 tests/s, 249.31 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |n| n.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpo96fecn3\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpo96fecn3.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.01134614 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.14 tests/s, 176.27 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl68kf56h\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpl68kf56h.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007983176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.26 tests/s, 250.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |n| n.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpo96fecn3\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpo96fecn3.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.01134614 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.14 tests/s, 176.27 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphree92ie\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphree92ie.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008022172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.65 tests/s, 249.31 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |n| n.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnz70nf2n\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpnz70nf2n.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007974099 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.41 tests/s, 250.81 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |n| n.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp60ov5h3u\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmp60ov5h3u.rb:12:in\
    \ `digits'\n/tmp/tmp60ov5h3u.rb:12:in `block in count_nums'\n/tmp/tmp60ov5h3u.rb:12:in\
    \ `count'\n/tmp/tmp60ov5h3u.rb:12:in `count_nums'\n/tmp/tmp60ov5h3u.rb:19:in `call'\n\
    /tmp/tmp60ov5h3u.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001208329 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    827.59 tests/s, 827.59 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |x| x.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzsu4hz22\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpzsu4hz22.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008082464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.72 tests/s, 247.45 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphree92ie\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphree92ie.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008022172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.65 tests/s, 249.31 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl68kf56h\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpl68kf56h.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007983176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.26 tests/s, 250.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select{|x|\
    \ x.abs.to_s.split('').map(&:to_i).reduce(:+) > 0}.size\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmly2lk1y\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpmly2lk1y.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007914278 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.35 tests/s, 252.71 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphree92ie\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphree92ie.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008022172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.65 tests/s, 249.31 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |x| x.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzsu4hz22\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpzsu4hz22.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008082464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.72 tests/s, 247.45 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphree92ie\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphree92ie.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008022172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.65 tests/s, 249.31 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl68kf56h\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpl68kf56h.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007983176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.26 tests/s, 250.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum.positive? }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphz2l_nw7\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmphz2l_nw7.rb:12:in\
    \ `digits'\n/tmp/tmphz2l_nw7.rb:12:in `block in count_nums'\n/tmp/tmphz2l_nw7.rb:12:in\
    \ `count'\n/tmp/tmphz2l_nw7.rb:12:in `count_nums'\n/tmp/tmphz2l_nw7.rb:19:in `call'\n\
    /tmp/tmphz2l_nw7.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.002107086 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    474.59 tests/s, 474.59 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl68kf56h\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpl68kf56h.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007983176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.26 tests/s, 250.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl68kf56h\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpl68kf56h.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007983176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.26 tests/s, 250.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |x| x.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzsu4hz22\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpzsu4hz22.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008082464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.72 tests/s, 247.45 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl68kf56h\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpl68kf56h.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007983176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.26 tests/s, 250.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |x| x.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzsu4hz22\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpzsu4hz22.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008082464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.72 tests/s, 247.45 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl68kf56h\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpl68kf56h.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007983176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.26 tests/s, 250.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl68kf56h\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpl68kf56h.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007983176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.26 tests/s, 250.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |x| x.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzsu4hz22\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpzsu4hz22.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008082464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.72 tests/s, 247.45 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select{|n|\
    \ n.abs.to_s.chars.map(&:to_i).reduce(:+) > 0}.size\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n    candidate\
    \ = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n    assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2,\
    \ 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n  \
    \  assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
    \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
    \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplb4qdxtx\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmplb4qdxtx.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008095225 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.53 tests/s, 247.06 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |x| x.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzsu4hz22\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpzsu4hz22.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008082464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.72 tests/s, 247.45 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |x| x.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphhaatr5j\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphhaatr5j.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008188036 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    122.13 tests/s, 244.26 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |x| x.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzsu4hz22\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpzsu4hz22.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008082464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.72 tests/s, 247.45 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |x| x.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzsu4hz22\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpzsu4hz22.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008082464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.72 tests/s, 247.45 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphree92ie\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphree92ie.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008022172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.65 tests/s, 249.31 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl68kf56h\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpl68kf56h.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007983176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.26 tests/s, 250.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl68kf56h\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpl68kf56h.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007983176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.26 tests/s, 250.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |x| x.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzsu4hz22\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpzsu4hz22.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008082464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.72 tests/s, 247.45 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl68kf56h\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpl68kf56h.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007983176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.26 tests/s, 250.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphree92ie\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphree92ie.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008022172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.65 tests/s, 249.31 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl68kf56h\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpl68kf56h.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007983176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.26 tests/s, 250.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |n| n.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpo96fecn3\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpo96fecn3.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.01134614 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.14 tests/s, 176.27 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl68kf56h\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpl68kf56h.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007983176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.26 tests/s, 250.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphree92ie\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphree92ie.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008022172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.65 tests/s, 249.31 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |x| x.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzsu4hz22\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpzsu4hz22.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008082464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.72 tests/s, 247.45 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |n| n.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnz70nf2n\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpnz70nf2n.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007974099 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.41 tests/s, 250.81 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  #\
    \ your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyype8p6_\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpyype8p6_.rb:18:in `test_count_nums'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n  => 18:     assert_equal(0, candidate.call([]))\n\
    \     19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008124031 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.09 tests/s, 123.09 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |n| n.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnz70nf2n\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpnz70nf2n.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007974099 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.41 tests/s, 250.81 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum.positive? }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphz2l_nw7\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmphz2l_nw7.rb:12:in\
    \ `digits'\n/tmp/tmphz2l_nw7.rb:12:in `block in count_nums'\n/tmp/tmphz2l_nw7.rb:12:in\
    \ `count'\n/tmp/tmphz2l_nw7.rb:12:in `count_nums'\n/tmp/tmphz2l_nw7.rb:19:in `call'\n\
    /tmp/tmphz2l_nw7.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.002107086 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    474.59 tests/s, 474.59 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphree92ie\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphree92ie.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008022172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.65 tests/s, 249.31 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl68kf56h\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpl68kf56h.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007983176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.26 tests/s, 250.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphree92ie\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphree92ie.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008022172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.65 tests/s, 249.31 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |n| n.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnz70nf2n\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpnz70nf2n.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007974099 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.41 tests/s, 250.81 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphree92ie\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphree92ie.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008022172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.65 tests/s, 249.31 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |x| x.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzsu4hz22\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpzsu4hz22.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008082464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.72 tests/s, 247.45 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |x| x.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzsu4hz22\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpzsu4hz22.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008082464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.72 tests/s, 247.45 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphree92ie\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphree92ie.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008022172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.65 tests/s, 249.31 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |n| n.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp60ov5h3u\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmp60ov5h3u.rb:12:in\
    \ `digits'\n/tmp/tmp60ov5h3u.rb:12:in `block in count_nums'\n/tmp/tmp60ov5h3u.rb:12:in\
    \ `count'\n/tmp/tmp60ov5h3u.rb:12:in `count_nums'\n/tmp/tmp60ov5h3u.rb:19:in `call'\n\
    /tmp/tmp60ov5h3u.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001208329 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    827.59 tests/s, 827.59 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |x| x.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzsu4hz22\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpzsu4hz22.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008082464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.72 tests/s, 247.45 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl68kf56h\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpl68kf56h.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007983176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.26 tests/s, 250.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl68kf56h\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpl68kf56h.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007983176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.26 tests/s, 250.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphree92ie\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphree92ie.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008022172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.65 tests/s, 249.31 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphree92ie\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphree92ie.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008022172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.65 tests/s, 249.31 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphree92ie\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphree92ie.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008022172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.65 tests/s, 249.31 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |x| x.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzsu4hz22\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpzsu4hz22.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008082464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.72 tests/s, 247.45 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphree92ie\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphree92ie.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008022172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.65 tests/s, 249.31 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |x| x.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzsu4hz22\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpzsu4hz22.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008082464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.72 tests/s, 247.45 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |x| x.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzsu4hz22\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpzsu4hz22.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008082464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.72 tests/s, 247.45 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |x| x.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqvkxnw5p\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpqvkxnw5p.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.00770658 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.76 tests/s, 259.52 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |n| n.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpo96fecn3\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpo96fecn3.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.01134614 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.14 tests/s, 176.27 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |x| x.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzsu4hz22\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpzsu4hz22.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008082464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.72 tests/s, 247.45 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |n| n.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpo96fecn3\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpo96fecn3.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.01134614 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.14 tests/s, 176.27 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl68kf56h\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpl68kf56h.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007983176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.26 tests/s, 250.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |n| n.digits.sum.positive? }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbx71lnl0\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpbx71lnl0.rb:12:in\
    \ `digits'\n/tmp/tmpbx71lnl0.rb:12:in `block in count_nums'\n/tmp/tmpbx71lnl0.rb:12:in\
    \ `count'\n/tmp/tmpbx71lnl0.rb:12:in `count_nums'\n/tmp/tmpbx71lnl0.rb:19:in `call'\n\
    /tmp/tmpbx71lnl0.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001231019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    812.34 tests/s, 812.34 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl68kf56h\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpl68kf56h.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007983176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.26 tests/s, 250.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |n| n.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp60ov5h3u\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmp60ov5h3u.rb:12:in\
    \ `digits'\n/tmp/tmp60ov5h3u.rb:12:in `block in count_nums'\n/tmp/tmp60ov5h3u.rb:12:in\
    \ `count'\n/tmp/tmp60ov5h3u.rb:12:in `count_nums'\n/tmp/tmp60ov5h3u.rb:19:in `call'\n\
    /tmp/tmp60ov5h3u.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001208329 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    827.59 tests/s, 827.59 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqtuyxlxj\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpqtuyxlxj.rb:12:in\
    \ `digits'\n/tmp/tmpqtuyxlxj.rb:12:in `block in count_nums'\n/tmp/tmpqtuyxlxj.rb:12:in\
    \ `select'\n/tmp/tmpqtuyxlxj.rb:12:in `count_nums'\n/tmp/tmpqtuyxlxj.rb:19:in\
    \ `call'\n/tmp/tmpqtuyxlxj.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001218924 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    820.40 tests/s, 820.40 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |x| x.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzsu4hz22\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpzsu4hz22.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008082464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.72 tests/s, 247.45 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphree92ie\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphree92ie.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008022172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.65 tests/s, 249.31 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphree92ie\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphree92ie.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008022172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.65 tests/s, 249.31 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |n| n.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnz70nf2n\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpnz70nf2n.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007974099 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.41 tests/s, 250.81 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |n| n.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnz70nf2n\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpnz70nf2n.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007974099 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.41 tests/s, 250.81 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl68kf56h\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpl68kf56h.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007983176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.26 tests/s, 250.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |x| x.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_count_nums\n    candidate = method(:count_nums)\n    assert_equal(0,\
    \ candidate.call([]))\n    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1, 100, 98, -7, 1,\
    \ -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1,\
    \ candidate.call([0, 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp8mbkkef_\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmp8mbkkef_.rb:12:in\
    \ `digits'\n/tmp/tmp8mbkkef_.rb:12:in `block in count_nums'\n/tmp/tmp8mbkkef_.rb:12:in\
    \ `count'\n/tmp/tmp8mbkkef_.rb:12:in `count_nums'\n/tmp/tmp8mbkkef_.rb:19:in `call'\n\
    /tmp/tmp8mbkkef_.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001212809 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    824.53 tests/s, 824.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphree92ie\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphree92ie.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008022172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.65 tests/s, 249.31 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl68kf56h\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpl68kf56h.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007983176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.26 tests/s, 250.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl68kf56h\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpl68kf56h.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007983176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.26 tests/s, 250.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl68kf56h\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpl68kf56h.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007983176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.26 tests/s, 250.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |n| n.digits.sum.positive? }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbx71lnl0\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmpbx71lnl0.rb:12:in\
    \ `digits'\n/tmp/tmpbx71lnl0.rb:12:in `block in count_nums'\n/tmp/tmpbx71lnl0.rb:12:in\
    \ `count'\n/tmp/tmpbx71lnl0.rb:12:in `count_nums'\n/tmp/tmpbx71lnl0.rb:19:in `call'\n\
    /tmp/tmpbx71lnl0.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.001231019 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    812.34 tests/s, 812.34 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl68kf56h\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpl68kf56h.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007983176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.26 tests/s, 250.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |n| n.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnz70nf2n\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpnz70nf2n.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007974099 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.41 tests/s, 250.81 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphree92ie\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphree92ie.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008022172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.65 tests/s, 249.31 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |x| x.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzsu4hz22\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpzsu4hz22.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008082464 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.72 tests/s, 247.45 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphree92ie\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphree92ie.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008022172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.65 tests/s, 249.31 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.count\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphree92ie\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmphree92ie.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008022172 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    124.65 tests/s, 249.31 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |n| n.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpo96fecn3\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpo96fecn3.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.01134614 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    88.14 tests/s, 176.27 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.select\
    \ { |num| num.abs.digits.sum > 0 }.size\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl68kf56h\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpl68kf56h.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007983176 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.26 tests/s, 250.53 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |n| n.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpnz70nf2n\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpnz70nf2n.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.007974099 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    125.41 tests/s, 250.81 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.abs.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg6qee7tq\nStarted\nF\n===============================================================================\n\
    Failure: test_count_nums(TestHumanEval)\n/tmp/tmpg6qee7tq.rb:19:in `test_count_nums'\n\
    \     16:   def test_count_nums\n     17:     candidate = method(:count_nums)\n\
    \     18:     assert_equal(0, candidate.call([]))\n  => 19:     assert_equal(0,\
    \ candidate.call([-1, -2, 0]))\n     20:     assert_equal(6, candidate.call([1,\
    \ 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1, 6, 9,\
    \ -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98, -7,\
    \ 1, -1]))\n<0> expected but was\n<2>\n===============================================================================\n\
    \nFinished in 0.008799835 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    113.64 tests/s, 227.28 assertions/s\n"
  timestamp: 1659798457
- exit_code: 1
  program: "# Write a function count_nums which takes an array of integers and returns\n\
    # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
    \ then its first signed digit will be negative:\n# e.g. -123 has signed digits\
    \ -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11,\
    \ -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.count\
    \ { |num| num.digits.sum > 0 }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_count_nums\n    candidate = method(:count_nums)\n\
    \    assert_equal(0, candidate.call([]))\n    assert_equal(0, candidate.call([-1,\
    \ -2, 0]))\n    assert_equal(6, candidate.call([1, 1, 2, -2, 3, 4, 5]))\n    assert_equal(5,\
    \ candidate.call([1, 6, 9, -6, 0, 1, 5]))\n    assert_equal(4, candidate.call([1,\
    \ 100, 98, -7, 1, -1]))\n    assert_equal(5, candidate.call([12, 23, 34, -45,\
    \ -56, 0]))\n    assert_equal(1, candidate.call([0, 1]))\n    assert_equal(1,\
    \ candidate.call([1]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptiwhq37y\nStarted\nE\n===============================================================================\n\
    Error: test_count_nums(TestHumanEval): Math::DomainError: out of domain\n/tmp/tmptiwhq37y.rb:12:in\
    \ `digits'\n/tmp/tmptiwhq37y.rb:12:in `block in count_nums'\n/tmp/tmptiwhq37y.rb:12:in\
    \ `count'\n/tmp/tmptiwhq37y.rb:12:in `count_nums'\n/tmp/tmptiwhq37y.rb:19:in `call'\n\
    /tmp/tmptiwhq37y.rb:19:in `test_count_nums'\n     16:   def test_count_nums\n\
    \     17:     candidate = method(:count_nums)\n     18:     assert_equal(0, candidate.call([]))\n\
    \  => 19:     assert_equal(0, candidate.call([-1, -2, 0]))\n     20:     assert_equal(6,\
    \ candidate.call([1, 1, 2, -2, 3, 4, 5]))\n     21:     assert_equal(5, candidate.call([1,\
    \ 6, 9, -6, 0, 1, 5]))\n     22:     assert_equal(4, candidate.call([1, 100, 98,\
    \ -7, 1, -1]))\n===============================================================================\n\
    \nFinished in 0.00123395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    810.41 tests/s, 810.41 assertions/s\n"
  timestamp: 1659798457
