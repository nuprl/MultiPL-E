name: HumanEval_58_common
language: rb
prompt: "# Return sorted unique common elements for two arrays.\n# >>> common.call([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common.call([5,\
  \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
  \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
  \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3,\
  \ 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
completions: ["  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 &\
    \ l2).sort.uniq\nend", "  l1.sort.uniq & l2.sort.uniq\nend", "  (l1 & l2).sort.uniq\n\
    end", "  l1 & l2\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\n\
    end", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\n\
    end", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort\nend", "  l1.uniq.sort &\
    \ l2.uniq.sort\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend",
  "  l1.sort.uniq & l2.sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\n\
    end", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\n\
    end", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort\n\
    end", "  l1.uniq.sort & l2.uniq.sort\nend", "  (l1 & l2).sort.uniq\nend", "  (l1\
    \ & l2).sort\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend",
  "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort\n\
    end", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  l1 & l2\n\
    end", "  (l1 & l2).sort.uniq\nend", "  l1 & l2\nend", "  (l1 & l2).sort.uniq\n\
    end", "  (l1 & l2).sort.uniq\nend", "  l1 & l2\nend", "  (l1 & l2).sort.uniq\n\
    end", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort\n\
    end", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort\nend", "  (l1 & l2).sort\n\
    end", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\n\
    end", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort\n\
    end", "  l1 & l2\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\n\
    end", "  (l1 & l2).sort.uniq\nend", "  l1 & l2\nend", "  (l1 & l2).sort.uniq\n\
    end", "  (l1 & l2).sort.uniq\nend", "  l1 & l2\nend", "  (l1 & l2).sort.uniq\n\
    end", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\n\
    end", "  (l1 & l2).sort\nend", "  l1.select { |e| l2.include?(e) }.uniq.sort\n\
    end", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\n\
    end", "  l1 & l2\nend", "  (l1 & l2).sort\nend", "  (l1 & l2).sort.uniq\nend",
  "  (l1 & l2).sort\nend", "  l1 & l2\nend", "  (l1 & l2).sort\nend", "  l1.uniq.sort\
    \ & l2.uniq.sort\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\n\
    end", "  l1.sort.uniq & l2.sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  (l1\
    \ & l2).sort.uniq\nend", "  l1.uniq.sort & l2.uniq.sort\nend", "  (l1 & l2).sort.uniq\n\
    end", "  (l1 & l2).sort.uniq\nend", "  l1.uniq.sort & l2.uniq.sort\nend", "  l1.uniq.sort\
    \ & l2.uniq.sort\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort\nend",
  "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort\nend", "  l1.uniq.sort & l2.uniq.sort\n\
    end", "  (l1 & l2).sort.uniq\nend", "  l1.select { |e| l2.include?(e) }.uniq.sort\n\
    end", "  l1 & l2\nend", "  l1.uniq.sort & l2.uniq.sort\nend", "  (l1 & l2).sort.uniq\n\
    end", "  l1.sort.uniq & l2.sort.uniq\nend", "  (l1 & l2).sort\nend", "  (l1 &\
    \ l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  l1 & l2\nend", "  (l1\
    \ & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\n\
    end", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\n\
    end", "  (l1 & l2).sort.uniq\nend", "  l1.select { |e| l2.include?(e) }.uniq.sort\n\
    end", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  l1.select\
    \ { |e| l2.include?(e) }.uniq.sort\nend", "  (l1 & l2).sort.uniq\nend", "  l1\
    \ & l2\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  (l1\
    \ & l2).sort.uniq\nend", "  l1 & l2\nend", "  (l1 & l2).sort.uniq\nend", "  l1.uniq.sort\
    \ & l2.uniq.sort\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\n\
    end", "  (l1 & l2).sort\nend", "  (l1 & l2).sort\nend", "  l1.uniq.sort & l2.uniq.sort\n\
    end", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort\n\
    end", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort\nend", "  (l1 & l2).sort\n\
    end", "  l1 & l2\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort\nend",
  "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort\nend", "  (l1 & l2).sort.uniq\n\
    end", "  l1 & l2\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\n\
    end", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\n\
    end", "  (l1 & l2).sort\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\n\
    end", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort\nend", "  (l1 & l2).sort.uniq\n\
    end", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  l1.uniq.sort\
    \ & l2.uniq.sort\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\n\
    end", "  l1.uniq.sort & l2.uniq.sort\nend", "  (l1 & l2).sort.uniq\nend", "  (l1\
    \ & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  l1.sort.uniq & l2.sort.uniq\n\
    end", "  (l1 & l2).sort.uniq\nend", "  l1 & l2\nend", "  (l1 & l2).sort.uniq\n\
    end", "  l1.uniq.sort & l2.uniq.sort\nend", "  l1.uniq.sort & l2.uniq.sort\nend",
  "  (l1 & l2).sort\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\n\
    end", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\n\
    end", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\n\
    end", "  (l1 & l2).sort\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\n\
    end", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\n\
    end", "  l1.uniq.sort & l2.uniq.sort\nend", "  (l1 & l2).sort.uniq\nend", "  (l1\
    \ & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort\nend",
  "  (l1 & l2).sort.uniq\nend", "  l1.select { |e| l2.include?(e) }.uniq.sort\nend",
  "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  l1 & l2\nend", " \
    \ (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\n\
    end", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort.uniq\nend", "  (l1 & l2).sort\n\
    end", "  l1.uniq.sort & l2.uniq.sort\nend", "  (l1 & l2).sort.uniq\nend", "  (l1\
    \ & l2).sort\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
