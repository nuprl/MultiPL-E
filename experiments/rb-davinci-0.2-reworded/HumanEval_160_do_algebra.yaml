name: HumanEval_160_do_algebra
language: rb
prompt: "# Given two arrays operator, and operand. The first array has basic algebra\
  \ operations, and \n# the second array is an array of integers. Use the two given\
  \ arrays to build the algebric \n# expression and return the evaluation of this\
  \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
  \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation (\
  \ ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
  \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator array is equal\
  \ to the length of operand array minus one.\n# Operand is an array of of non-negative\
  \ integers.\n# Operator array has at least one operator, and operand array has at\
  \ least two operands.\ndef do_algebra(operator, operand)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
  \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"**\"\
  , \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\", \"*\"\
  , \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
  \ 3, 4]))\n  end\nend\n"
completions: ["  result = operand[0]\n  i = 0\n  while i < operator.length\n    if\
    \ operator[i] == '+'\n      result += operand[i+1]\n    elsif operator[i] == '-'\n\
    \      result -= operand[i+1]\n    elsif operator[i] == '*'\n      result *= operand[i+1]\n\
    \    elsif operator[i] == '//'\n      result /= operand[i+1]\n    elsif operator[i]\
    \ == '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  # write your code here\n  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    case operator[i]\n    when '+'\n      result += operand[i+1]\n    when '-'\n\
    \      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n  \
    \  when '//'\n      result /= operand[i+1]\n    when '**'\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend", "  result = operand[0]\n  for i in\
    \ 0..operator.length-1\n    result = result.send(operator[i], operand[i+1])\n\
    \  end\n  result\nend", "  # your code here\nend", "  #your code here\nend", " \
    \ # your code here\nend", "  # code here\nend", "  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result = result.send(operator[index], operand)\n\
    \  end\nend", "  operand.each_with_index.inject(0) do |result, (operand, index)|\n\
    \    result = result.send(operator[index], operand)\n  end\nend", "  result =\
    \ operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n   \
    \ when '+'\n      result += operand[i + 1]\n    when '-'\n      result -= operand[i\
    \ + 1]\n    when '*'\n      result *= operand[i + 1]\n    when '//'\n      result\
    \ /= operand[i + 1]\n    when '**'\n      result **= operand[i + 1]\n    end\n\
    \    i += 1\n  end\n  result\nend", "  # your code here\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  # your code here\n  result = operand[0]\n\
    \  operand.each_with_index do |num, index|\n    if index > 0\n      result = result.send(operator[index-1],\
    \ num)\n    end\n  end\n  result\nend", "  # your code here\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result = result.send(operator[index], operand)\n\
    \  end\nend", "  # your code here\nend", "  # your code here\nend", "  result\
    \ = operand[0]\n  operand.each_with_index do |num, i|\n    next if i == 0\n  \
    \  result = result.send(operator[i-1], num)\n  end\n  result\nend", "  # Your\
    \ code here\nend", "  # your code here\nend", "  result = operand[0]\n  i = 0\n\
    \  while i < operator.length\n    case operator[i]\n    when '+'\n      result\
    \ += operand[i + 1]\n    when '-'\n      result -= operand[i + 1]\n    when '*'\n\
    \      result *= operand[i + 1]\n    when '//'\n      result /= operand[i + 1]\n\
    \    when '**'\n      result **= operand[i + 1]\n    end\n    i += 1\n  end\n\
    \  result\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    case operator[i]\n    when '+'\n      result += operand[i + 1]\n    when\
    \ '-'\n      result -= operand[i + 1]\n    when '*'\n      result *= operand[i\
    \ + 1]\n    when '//'\n      result /= operand[i + 1]\n    when '**'\n      result\
    \ **= operand[i + 1]\n    end\n    i += 1\n  end\n  result\nend", "  result =\
    \ operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n   \
    \ when '+'\n      result += operand[i + 1]\n    when '-'\n      result -= operand[i\
    \ + 1]\n    when '*'\n      result *= operand[i + 1]\n    when '//'\n      result\
    \ /= operand[i + 1]\n    when '**'\n      result **= operand[i + 1]\n    end\n\
    \    i += 1\n  end\n  result\nend", "  result = operand[0]\n  i = 0\n  while i\
    \ < operator.length\n    case operator[i]\n    when '+'\n      result += operand[i\
    \ + 1]\n    when '-'\n      result -= operand[i + 1]\n    when '*'\n      result\
    \ *= operand[i + 1]\n    when '//'\n      result /= operand[i + 1]\n    when '**'\n\
    \      result **= operand[i + 1]\n    end\n    i += 1\n  end\n  result\nend",
  "  #your code here\nend", "  # your code here\nend", "  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend", "  # your code here\nend", "  result = operand[0]\n  operator.each_with_index\
    \ do |op, i|\n    result = result.send(op, operand[i+1])\n  end\n  result\nend",
  "  result = operand[0]\n  for i in 0..operator.length-1\n    case operator[i]\n\
    \    when '+'\n      result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n\
    \    when '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend",
  "  result = operand[0]\n  operator.each_with_index do |op, i|\n    case op\n   \
    \ when '+'\n      result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n\
    \    when '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend",
  "  #code here\nend", "  result = operand[0]\n  (1...operand.length).each do |i|\n\
    \    result = result.send(operator[i-1], operand[i])\n  end\n  result\nend", " \
    \ # write your code here\n  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    case operator[i]\n    when '+'\n      result += operand[i+1]\n    when '-'\n\
    \      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n  \
    \  when '//'\n      result /= operand[i+1]\n    when '**'\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    case operator[i]\n    when '+'\n      result += operand[i + 1]\n    when\
    \ '-'\n      result -= operand[i + 1]\n    when '*'\n      result *= operand[i\
    \ + 1]\n    when '//'\n      result /= operand[i + 1]\n    when '**'\n      result\
    \ **= operand[i + 1]\n    end\n    i += 1\n  end\n  result\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  # your code here\nend", "  result\
    \ = operand[0]\n  operator.each_with_index do |op, i|\n    result = result.send(op,\
    \ operand[i+1])\n  end\n  result\nend", "  result = operand[0]\n  i = 0\n  while\
    \ i < operator.length\n    case operator[i]\n    when '+'\n      result += operand[i\
    \ + 1]\n    when '-'\n      result -= operand[i + 1]\n    when '*'\n      result\
    \ *= operand[i + 1]\n    when '//'\n      result /= operand[i + 1]\n    when '**'\n\
    \      result **= operand[i + 1]\n    end\n    i += 1\n  end\n  result\nend",
  "  result = operand[0]\n  i = 0\n  while i < operator.length\n    if operator[i]\
    \ == '+'\n      result += operand[i+1]\n    elsif operator[i] == '-'\n      result\
    \ -= operand[i+1]\n    elsif operator[i] == '*'\n      result *= operand[i+1]\n\
    \    elsif operator[i] == '//'\n      result /= operand[i+1]\n    elsif operator[i]\
    \ == '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  # your code here\nend", "  # your code here\nend", "  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    case op\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend",
  "  result = operand[0]\n  for i in 1..operand.length-1\n    result = result.send(operator[i-1],\
    \ operand[i])\n  end\n  result\nend", "  # code here\nend", "  result = operand[0]\n\
    \  operand.each_with_index do |num, i|\n    next if i == 0\n    result = result.send(operator[i-1],\
    \ num)\n  end\n  result\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  result = operand[0]\n  operator.each_with_index\
    \ do |op, i|\n    case op\n    when '+'\n      result += operand[i+1]\n    when\
    \ '-'\n      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n\
    \    when '//'\n      result /= operand[i+1]\n    when '**'\n      result **=\
    \ operand[i+1]\n    end\n  end\n  result\nend", "  result = operand[0]\n  i =\
    \ 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n      result\
    \ += operand[i + 1]\n    when '-'\n      result -= operand[i + 1]\n    when '*'\n\
    \      result *= operand[i + 1]\n    when '//'\n      result /= operand[i + 1]\n\
    \    when '**'\n      result **= operand[i + 1]\n    end\n    i += 1\n  end\n\
    \  result\nend", "  result = operand[0]\n  for i in 0..operator.length-1\n   \
    \ case operator[i]\n    when '+'\n      result += operand[i+1]\n    when '-'\n\
    \      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n  \
    \  when '//'\n      result /= operand[i+1]\n    when '**'\n      result **= operand[i+1]\n\
    \    end\n  end\n  result\nend", "  result = operand[0]\n  for i in 0..operator.length-1\n\
    \    case operator[i]\n    when '+'\n      result += operand[i+1]\n    when '-'\n\
    \      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n  \
    \  when '//'\n      result /= operand[i+1]\n    when '**'\n      result **= operand[i+1]\n\
    \    end\n  end\n  result\nend", "  result = operand[0]\n  operand.each_with_index\
    \ do |x, i|\n    if i == 0\n      next\n    end\n    case operator[i-1]\n    when\
    \ '+'\n      result += x\n    when '-'\n      result -= x\n    when '*'\n    \
    \  result *= x\n    when '/'\n      result /= x\n    when '**'\n      result **=\
    \ x\n    end\n  end\n  result\nend", "  # your code here\nend", "  # your code\
    \ here\nend", "  # code here\nend", "  result = operand[0]\n  operator.each_with_index\
    \ do |op, i|\n    result = result.send(op, operand[i+1])\n  end\n  result\nend",
  "  # code here\nend", "  result = operand[0]\n  operator.each_with_index do |op,\
    \ i|\n    result = result.send(op, operand[i+1])\n  end\n  result\nend", "  #\
    \ your code here\n  result = operand[0]\n  for i in 0..operator.length-1\n   \
    \ case operator[i]\n    when \"+\"\n      result += operand[i+1]\n    when \"\
    -\"\n      result -= operand[i+1]\n    when \"*\"\n      result *= operand[i+1]\n\
    \    when \"//\"\n      result /= operand[i+1]\n    when \"**\"\n      result\
    \ **= operand[i+1]\n    end\n  end\n  return result\nend", "  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  # your code here\nend", "  # code here\nend", "  # your code here\nend",
  "  result = operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n\
    \    when '+'\n      result += operand[i + 1]\n    when '-'\n      result -= operand[i\
    \ + 1]\n    when '*'\n      result *= operand[i + 1]\n    when '//'\n      result\
    \ /= operand[i + 1]\n    when '**'\n      result **= operand[i + 1]\n    end\n\
    \    i += 1\n  end\n  result\nend", "  result = operand[0]\n  i = 0\n  while i\
    \ < operator.length\n    case operator[i]\n    when '+'\n      result += operand[i\
    \ + 1]\n    when '-'\n      result -= operand[i + 1]\n    when '*'\n      result\
    \ *= operand[i + 1]\n    when '//'\n      result /= operand[i + 1]\n    when '**'\n\
    \      result **= operand[i + 1]\n    end\n    i += 1\n  end\n  result\nend",
  "  #your code here\n  result = operand[0]\n  (0...operator.length).each do |i|\n\
    \    if operator[i] == \"+\"\n      result += operand[i+1]\n    elsif operator[i]\
    \ == \"-\"\n      result -= operand[i+1]\n    elsif operator[i] == \"*\"\n   \
    \   result *= operand[i+1]\n    elsif operator[i] == \"//\"\n      result /= operand[i+1]\n\
    \    elsif operator[i] == \"**\"\n      result **= operand[i+1]\n    end\n  end\n\
    \  result\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    case operator[i]\n    when '+'\n      result += operand[i + 1]\n    when\
    \ '-'\n      result -= operand[i + 1]\n    when '*'\n      result *= operand[i\
    \ + 1]\n    when '//'\n      result /= operand[i + 1]\n    when '**'\n      result\
    \ **= operand[i + 1]\n    end\n    i += 1\n  end\n  result\nend", "  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend", "  result = operand[0]\n  operator.each_with_index do |op, i|\n \
    \   result = result.send(op, operand[i+1])\n  end\n  result\nend", "  result =\
    \ operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n   \
    \ when '+'\n      result += operand[i + 1]\n    when '-'\n      result -= operand[i\
    \ + 1]\n    when '*'\n      result *= operand[i + 1]\n    when '//'\n      result\
    \ /= operand[i + 1]\n    when '**'\n      result **= operand[i + 1]\n    end\n\
    \    i += 1\n  end\n  result\nend", "  # TODO: Your code here\nend", "  result\
    \ = operand[0]\n  operator.each_with_index do |op, i|\n    result = result.send(op,\
    \ operand[i+1])\n  end\n  result\nend", "  # your code here\nend", "  result =\
    \ operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n   \
    \ when '+'\n      result += operand[i + 1]\n    when '-'\n      result -= operand[i\
    \ + 1]\n    when '*'\n      result *= operand[i + 1]\n    when '//'\n      result\
    \ /= operand[i + 1]\n    when '**'\n      result **= operand[i + 1]\n    end\n\
    \    i += 1\n  end\n  result\nend", "  result = operand[0]\n  (1...operand.length).each\
    \ do |i|\n    result = result.send(operator[i-1], operand[i])\n  end\n  result\n\
    end", "  result = operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n\
    \    when '+'\n      result += operand[i + 1]\n    when '-'\n      result -= operand[i\
    \ + 1]\n    when '*'\n      result *= operand[i + 1]\n    when '//'\n      result\
    \ /= operand[i + 1]\n    when '**'\n      result **= operand[i + 1]\n    end\n\
    \    i += 1\n  end\n  result\nend", "  # your code here\nend", "  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  # your code here\nend", "  result = operand[0]\n  i = 0\n  while i <\
    \ operator.length\n    if operator[i] == '+'\n      result += operand[i+1]\n \
    \   elsif operator[i] == '-'\n      result -= operand[i+1]\n    elsif operator[i]\
    \ == '*'\n      result *= operand[i+1]\n    elsif operator[i] == '//'\n      result\
    \ /= operand[i+1]\n    elsif operator[i] == '**'\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend", "  result = operand[0]\n  for i in\
    \ 0..operator.length-1\n    case operator[i]\n    when '+'\n      result += operand[i+1]\n\
    \    when '-'\n      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n\
    \    when '//'\n      result /= operand[i+1]\n    when '**'\n      result **=\
    \ operand[i+1]\n    end\n  end\n  result\nend", "  operand.each_with_index.inject(0)\
    \ do |result, (operand, index)|\n    result = result.send(operator[index], operand)\n\
    \  end\nend", "  result = operand[0]\n  operator.each_with_index do |op, i|\n\
    \    result = result.send(op, operand[i+1])\n  end\n  result\nend", "  # your\
    \ code here\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    if operator[i] == '+'\n      result += operand[i+1]\n    elsif operator[i]\
    \ == '-'\n      result -= operand[i+1]\n    elsif operator[i] == '*'\n      result\
    \ *= operand[i+1]\n    elsif operator[i] == '//'\n      result /= operand[i+1]\n\
    \    elsif operator[i] == '**'\n      result **= operand[i+1]\n    end\n    i\
    \ += 1\n  end\n  result\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    case operator[i]\n    when '+'\n      result += operand[i + 1]\n    when\
    \ '-'\n      result -= operand[i + 1]\n    when '*'\n      result *= operand[i\
    \ + 1]\n    when '//'\n      result /= operand[i + 1]\n    when '**'\n      result\
    \ **= operand[i + 1]\n    end\n    i += 1\n  end\n  result\nend", "  # your code\
    \ here\n  result = operand[0]\n  operand.each_with_index do |num, i|\n    if i\
    \ == 0\n      next\n    else\n      case operator[i-1]\n      when \"+\"\n   \
    \     result += num\n      when \"-\"\n        result -= num\n      when \"*\"\
    \n        result *= num\n      when \"//\"\n        result /= num\n      when\
    \ \"**\"\n        result **= num\n      end\n    end\n  end\n  result\nend", " \
    \ result = operand[0]\n  for i in 0..operator.length-1\n    if operator[i] ==\
    \ '+'\n      result += operand[i+1]\n    elsif operator[i] == '-'\n      result\
    \ -= operand[i+1]\n    elsif operator[i] == '*'\n      result *= operand[i+1]\n\
    \    elsif operator[i] == '//'\n      result /= operand[i+1]\n    elsif operator[i]\
    \ == '**'\n      result **= operand[i+1]\n    end\n  end\n  return result\nend",
  "  #code here\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    case operator[i]\n    when '+'\n      result += operand[i + 1]\n    when\
    \ '-'\n      result -= operand[i + 1]\n    when '*'\n      result *= operand[i\
    \ + 1]\n    when '//'\n      result /= operand[i + 1]\n    when '**'\n      result\
    \ **= operand[i + 1]\n    end\n    i += 1\n  end\n  result\nend", "  result =\
    \ operand[0]\n  operator.each_with_index do |op, i|\n    result = result.send(op,\
    \ operand[i+1])\n  end\n  result\nend", "  #your code here\nend", "  # your code\
    \ here\nend", "  result = operand[0]\n  operator.each_with_index do |op, i|\n\
    \    result = result.send(op, operand[i+1])\n  end\n  result\nend", "  result\
    \ = operand[0]\n  (1...operand.length).each do |i|\n    result = result.send(operator[i-1],\
    \ operand[i])\n  end\n  result\nend", "  # your code here\nend", "  # your code\
    \ here\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n \
    \   case operator[i]\n    when '+'\n      result += operand[i + 1]\n    when '-'\n\
    \      result -= operand[i + 1]\n    when '*'\n      result *= operand[i + 1]\n\
    \    when '//'\n      result /= operand[i + 1]\n    when '**'\n      result **=\
    \ operand[i + 1]\n    end\n    i += 1\n  end\n  result\nend", "  #your code here\n\
    end", "  # your code here\nend", "  # write your code here\n  result = operand[0]\n\
    \  operator.each_with_index do |op, index|\n    case op\n    when '+'\n      result\
    \ += operand[index + 1]\n    when '-'\n      result -= operand[index + 1]\n  \
    \  when '*'\n      result *= operand[index + 1]\n    when '//'\n      result /=\
    \ operand[index + 1]\n    when '**'\n      result **= operand[index + 1]\n   \
    \ end\n  end\n  result\nend", "  result = operand[0]\n  for i in 0..operator.length-1\n\
    \    if operator[i] == '+'\n      result += operand[i+1]\n    elsif operator[i]\
    \ == '-'\n      result -= operand[i+1]\n    elsif operator[i] == '*'\n      result\
    \ *= operand[i+1]\n    elsif operator[i] == '//'\n      result /= operand[i+1]\n\
    \    elsif operator[i] == '**'\n      result **= operand[i+1]\n    end\n  end\n\
    \  return result\nend", "  # code here\nend", "  #your code here\nend", "  # code\
    \ here\nend", "  # write your code here\n  result = operand[0]\n  i = 0\n  while\
    \ i < operator.length\n    case operator[i]\n    when '+'\n      result += operand[i+1]\n\
    \    when '-'\n      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n\
    \    when '//'\n      result /= operand[i+1]\n    when '**'\n      result **=\
    \ operand[i+1]\n    end\n    i += 1\n  end\n  result\nend", "  # your code here\n\
    end", "  # code here\nend", "  result = operand[0]\n  for i in 0..operator.length-1\n\
    \    result = result.send(operator[i], operand[i+1])\n  end\n  result\nend", " \
    \ result = operand[0]\n  i = 0\n  while i < operator.length\n    if operator[i]\
    \ == '+'\n      result += operand[i+1]\n    elsif operator[i] == '-'\n      result\
    \ -= operand[i+1]\n    elsif operator[i] == '*'\n      result *= operand[i+1]\n\
    \    elsif operator[i] == '//'\n      result /= operand[i+1]\n    elsif operator[i]\
    \ == '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  result = operand[0]\n  i = 0\n  while i <\
    \ operator.length\n    case operator[i]\n    when '+'\n      result += operand[i+1]\n\
    \    when '-'\n      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n\
    \    when '//'\n      result /= operand[i+1]\n    when '**'\n      result **=\
    \ operand[i+1]\n    end\n    i += 1\n  end\n  result\nend", "  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  result = operand[0]\n  i = 0\n  while i < operator.length\n    if operator[i]\
    \ == '+'\n      result += operand[i+1]\n    elsif operator[i] == '-'\n      result\
    \ -= operand[i+1]\n    elsif operator[i] == '*'\n      result *= operand[i+1]\n\
    \    elsif operator[i] == '//'\n      result /= operand[i+1]\n    elsif operator[i]\
    \ == '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  # your code here\nend", "  #your code here\nend", "  # your code here\n\
    end", "  result = operand[0]\n  i = 0\n  while i < operator.length\n    result\
    \ = result.send(operator[i], operand[i+1])\n    i += 1\n  end\n  result\nend",
  "  # your code here\nend", "  result = operand[0]\n  operator.each_with_index do\
    \ |op, i|\n    case op\n    when '+'\n      result += operand[i+1]\n    when '-'\n\
    \      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n  \
    \  when '//'\n      result /= operand[i+1]\n    when '**'\n      result **= operand[i+1]\n\
    \    end\n  end\n  result\nend", "  # your code here\nend", "  # your code here\n\
    end", "  result = operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n\
    \    when '+'\n      result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n\
    \    when '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # code here\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    case operator[i]\n    when '+'\n      result += operand[i + 1]\n    when\
    \ '-'\n      result -= operand[i + 1]\n    when '*'\n      result *= operand[i\
    \ + 1]\n    when '//'\n      result /= operand[i + 1]\n    when '**'\n      result\
    \ **= operand[i + 1]\n    end\n    i += 1\n  end\n  result\nend", "  result =\
    \ operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n   \
    \ when '+'\n      result += operand[i + 1]\n    when '-'\n      result -= operand[i\
    \ + 1]\n    when '*'\n      result *= operand[i + 1]\n    when '//'\n      result\
    \ /= operand[i + 1]\n    when '**'\n      result **= operand[i + 1]\n    end\n\
    \    i += 1\n  end\n  result\nend", "  result = operand[0]\n  i = 0\n  while i\
    \ < operator.length\n    if operator[i] == '+'\n      result += operand[i+1]\n\
    \    elsif operator[i] == '-'\n      result -= operand[i+1]\n    elsif operator[i]\
    \ == '*'\n      result *= operand[i+1]\n    elsif operator[i] == '//'\n      result\
    \ /= operand[i+1]\n    elsif operator[i] == '**'\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend", "  result = operand[0]\n  i = 0\n\
    \  while i < operator.length\n    case operator[i]\n    when '+'\n      result\
    \ += operand[i + 1]\n    when '-'\n      result -= operand[i + 1]\n    when '*'\n\
    \      result *= operand[i + 1]\n    when '//'\n      result /= operand[i + 1]\n\
    \    when '**'\n      result **= operand[i + 1]\n    end\n    i += 1\n  end\n\
    \  result\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    result = result.send(operator[i], operand[i+1])\n    i += 1\n  end\n  result\n\
    end", "  # your code here\nend", "  result = operand[0]\n  operator.each_with_index\
    \ do |op, i|\n    case op\n    when '+'\n      result += operand[i+1]\n    when\
    \ '-'\n      result -= operand[i+1]\n    when '*'\n      result *= operand[i+1]\n\
    \    when '//'\n      result /= operand[i+1]\n    when '**'\n      result **=\
    \ operand[i+1]\n    end\n  end\n  result\nend", "  # your code here\nend", " \
    \ # your code here\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    case operator[i]\n    when '+'\n      result += operand[i + 1]\n    when\
    \ '-'\n      result -= operand[i + 1]\n    when '*'\n      result *= operand[i\
    \ + 1]\n    when '//'\n      result /= operand[i + 1]\n    when '**'\n      result\
    \ **= operand[i + 1]\n    end\n    i += 1\n  end\n  result\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  result = operand[0]\n  for i in 0..operator.length\
    \ - 1\n    case operator[i]\n    when '+'\n      result += operand[i + 1]\n  \
    \  when '-'\n      result -= operand[i + 1]\n    when '*'\n      result *= operand[i\
    \ + 1]\n    when '//'\n      result /= operand[i + 1]\n    when '**'\n      result\
    \ **= operand[i + 1]\n    end\n  end\n  result\nend", "  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend", "  result\
    \ = operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n \
    \   when '+'\n      result += operand[i + 1]\n    when '-'\n      result -= operand[i\
    \ + 1]\n    when '*'\n      result *= operand[i + 1]\n    when '//'\n      result\
    \ /= operand[i + 1]\n    when '**'\n      result **= operand[i + 1]\n    end\n\
    \    i += 1\n  end\n  result\nend", "  return operand[0] if operator.empty?\n\
    \  operand[0].send(operator[0], operand[1])\nend", "  operand.each_with_index.reduce(0)\
    \ do |result, (operand, index)|\n    result.send(operator[index], operand)\n \
    \ end\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n  \
    \  case operator[i]\n    when '+'\n      result += operand[i + 1]\n    when '-'\n\
    \      result -= operand[i + 1]\n    when '*'\n      result *= operand[i + 1]\n\
    \    when '//'\n      result /= operand[i + 1]\n    when '**'\n      result **=\
    \ operand[i + 1]\n    end\n    i += 1\n  end\n  result\nend", "  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == '+'\n      result\
    \ += operand[i+1]\n    elsif operator[i] == '-'\n      result -= operand[i+1]\n\
    \    elsif operator[i] == '*'\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == '//'\n      result /= operand[i+1]\n    elsif operator[i] == '**'\n     \
    \ result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend", "  # your\
    \ code here\n  result = operand[0]\n  i = 0\n  while i < operator.length\n   \
    \ case operator[i]\n    when \"+\"\n      result += operand[i+1]\n    when \"\
    -\"\n      result -= operand[i+1]\n    when \"*\"\n      result *= operand[i+1]\n\
    \    when \"//\"\n      result /= operand[i+1]\n    when \"**\"\n      result\
    \ **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend", "  # your code\
    \ here\n  result = operand[0]\n  i = 0\n  while i < operator.length\n    if operator[i]\
    \ == \"+\"\n      result += operand[i+1]\n    elsif operator[i] == \"-\"\n   \
    \   result -= operand[i+1]\n    elsif operator[i] == \"*\"\n      result *= operand[i+1]\n\
    \    elsif operator[i] == \"//\"\n      result /= operand[i+1]\n    elsif operator[i]\
    \ == \"**\"\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  result = operand[0]\n  for i in 0..operator.length-1\n    case operator[i]\n\
    \    when '+'\n      result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n\
    \    when '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend",
  "  result = operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n\
    \    when '+'\n      result += operand[i + 1]\n    when '-'\n      result -= operand[i\
    \ + 1]\n    when '*'\n      result *= operand[i + 1]\n    when '//'\n      result\
    \ /= operand[i + 1]\n    when '**'\n      result **= operand[i + 1]\n    end\n\
    \    i += 1\n  end\n  result\nend", "  # your code here\nend", "  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    case op\n    when '+'\n      result\
    \ += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when '*'\n\
    \      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n \
    \   when '**'\n      result **= operand[i+1]\n    end\n  end\n  result\nend",
  "  # your code here\nend", "  #your code here\nend", "  result = operand[0]\n  i\
    \ = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n     \
    \ result += operand[i + 1]\n    when '-'\n      result -= operand[i + 1]\n   \
    \ when '*'\n      result *= operand[i + 1]\n    when '//'\n      result /= operand[i\
    \ + 1]\n    when '**'\n      result **= operand[i + 1]\n    end\n    i += 1\n\
    \  end\n  result\nend", "  result = operand[0]\n  (1...operand.length).each do\
    \ |i|\n    result = result.send(operator[i-1], operand[i])\n  end\n  result\n\
    end", "  #your code here\nend", "  # write your code here\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    case operator[i]\n    when '+'\n  \
    \    result += operand[i+1]\n    when '-'\n      result -= operand[i+1]\n    when\
    \ '*'\n      result *= operand[i+1]\n    when '//'\n      result /= operand[i+1]\n\
    \    when '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  result = operand[0]\n  i = 0\n  while i < operator.length\n    if operator[i]\
    \ == '+'\n      result += operand[i+1]\n    elsif operator[i] == '-'\n      result\
    \ -= operand[i+1]\n    elsif operator[i] == '*'\n      result *= operand[i+1]\n\
    \    elsif operator[i] == '//'\n      result /= operand[i+1]\n    elsif operator[i]\
    \ == '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  result = operand[0]\n  i = 0\n  while i < operator.length\n    if operator[i]\
    \ == '+'\n      result += operand[i+1]\n    elsif operator[i] == '-'\n      result\
    \ -= operand[i+1]\n    elsif operator[i] == '*'\n      result *= operand[i+1]\n\
    \    elsif operator[i] == '//'\n      result /= operand[i+1]\n    elsif operator[i]\
    \ == '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  result = operand[0]\n  i = 0\n  while i < operator.length\n    if operator[i]\
    \ == '+'\n      result += operand[i+1]\n    elsif operator[i] == '-'\n      result\
    \ -= operand[i+1]\n    elsif operator[i] == '*'\n      result *= operand[i+1]\n\
    \    elsif operator[i] == '//'\n      result /= operand[i+1]\n    elsif operator[i]\
    \ == '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  # your code here\nend", "  # code here\nend", "  result = operand[0]\n\
    \  operator.each_with_index do |op, i|\n    result = result.send(op, operand[i+1])\n\
    \  end\n  result\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    case operator[i]\n    when '+'\n      result += operand[i + 1]\n    when\
    \ '-'\n      result -= operand[i + 1]\n    when '*'\n      result *= operand[i\
    \ + 1]\n    when '//'\n      result /= operand[i + 1]\n    when '**'\n      result\
    \ **= operand[i + 1]\n    end\n    i += 1\n  end\n  result\nend", "  result =\
    \ operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n   \
    \ when '+'\n      result += operand[i + 1]\n    when '-'\n      result -= operand[i\
    \ + 1]\n    when '*'\n      result *= operand[i + 1]\n    when '//'\n      result\
    \ /= operand[i + 1]\n    when '**'\n      result **= operand[i + 1]\n    end\n\
    \    i += 1\n  end\n  result\nend", "  result = operand[0]\n  for i in 0..operator.length-1\n\
    \    result = result.send(operator[i], operand[i+1])\n  end\n  result\nend", " \
    \ result = operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n\
    \    when '+'\n      result += operand[i + 1]\n    when '-'\n      result -= operand[i\
    \ + 1]\n    when '*'\n      result *= operand[i + 1]\n    when '//'\n      result\
    \ /= operand[i + 1]\n    when '**'\n      result **= operand[i + 1]\n    end\n\
    \    i += 1\n  end\n  result\nend", "  result = operand[0]\n  i = 0\n  while i\
    \ < operator.length\n    case operator[i]\n    when '+'\n      result += operand[i\
    \ + 1]\n    when '-'\n      result -= operand[i + 1]\n    when '*'\n      result\
    \ *= operand[i + 1]\n    when '//'\n      result /= operand[i + 1]\n    when '**'\n\
    \      result **= operand[i + 1]\n    end\n    i += 1\n  end\n  result\nend",
  "  #your code here\nend", "  result = operand[0]\n  i = 0\n  while i < operator.length\n\
    \    case operator[i]\n    when '+'\n      result += operand[i + 1]\n    when\
    \ '-'\n      result -= operand[i + 1]\n    when '*'\n      result *= operand[i\
    \ + 1]\n    when '//'\n      result /= operand[i + 1]\n    when '**'\n      result\
    \ **= operand[i + 1]\n    end\n    i += 1\n  end\n  result\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  result = operand[0]\n  i = 0\n  while\
    \ i < operator.length\n    if operator[i] == '+'\n      result += operand[i+1]\n\
    \    elsif operator[i] == '-'\n      result -= operand[i+1]\n    elsif operator[i]\
    \ == '*'\n      result *= operand[i+1]\n    elsif operator[i] == '//'\n      result\
    \ /= operand[i+1]\n    elsif operator[i] == '**'\n      result **= operand[i+1]\n\
    \    end\n    i += 1\n  end\n  result\nend", "  # code here\nend", "  result =\
    \ operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n   \
    \ when '+'\n      result += operand[i + 1]\n    when '-'\n      result -= operand[i\
    \ + 1]\n    when '*'\n      result *= operand[i + 1]\n    when '//'\n      result\
    \ /= operand[i + 1]\n    when '**'\n      result **= operand[i + 1]\n    end\n\
    \    i += 1\n  end\n  result\nend", "  result = operand[0]\n  (0...operator.length).each\
    \ do |i|\n    result = result.send(operator[i], operand[i+1])\n  end\n  result\n\
    end", "  # your code here\nend", "  result = operand[0]\n  i = 0\n  while i <\
    \ operator.length\n    case operator[i]\n    when '+'\n      result += operand[i\
    \ + 1]\n    when '-'\n      result -= operand[i + 1]\n    when '*'\n      result\
    \ *= operand[i + 1]\n    when '//'\n      result /= operand[i + 1]\n    when '**'\n\
    \      result **= operand[i + 1]\n    end\n    i += 1\n  end\n  result\nend",
  "  result = operand[0]\n  i = 0\n  while i < operator.length\n    if operator[i]\
    \ == '+'\n      result += operand[i+1]\n    elsif operator[i] == '-'\n      result\
    \ -= operand[i+1]\n    elsif operator[i] == '*'\n      result *= operand[i+1]\n\
    \    elsif operator[i] == '//'\n      result /= operand[i+1]\n    elsif operator[i]\
    \ == '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  result = operand[0]\n  i = 0\n  while i < operator.length\n    case operator[i]\n\
    \    when '+'\n      result += operand[i + 1]\n    when '-'\n      result -= operand[i\
    \ + 1]\n    when '*'\n      result *= operand[i + 1]\n    when '//'\n      result\
    \ /= operand[i + 1]\n    when '**'\n      result **= operand[i + 1]\n    end\n\
    \    i += 1\n  end\n  result\nend", "  # your code here\nend", "  #your code here\n\
    end", "  result = operand[0]\n  i = 0\n  while i < operator.length\n    if operator[i]\
    \ == '+'\n      result += operand[i+1]\n    elsif operator[i] == '-'\n      result\
    \ -= operand[i+1]\n    elsif operator[i] == '*'\n      result *= operand[i+1]\n\
    \    elsif operator[i] == '//'\n      result /= operand[i+1]\n    elsif operator[i]\
    \ == '**'\n      result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\n\
    end", "  # your code here\nend", "  # your code here\n  result = operand[0]\n\
    \  i = 0\n  while i < operator.length\n    if operator[i] == \"+\"\n      result\
    \ += operand[i+1]\n    elsif operator[i] == \"-\"\n      result -= operand[i+1]\n\
    \    elsif operator[i] == \"*\"\n      result *= operand[i+1]\n    elsif operator[i]\
    \ == \"//\"\n      result /= operand[i+1]\n    elsif operator[i] == \"**\"\n \
    \     result **= operand[i+1]\n    end\n    i += 1\n  end\n  result\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
