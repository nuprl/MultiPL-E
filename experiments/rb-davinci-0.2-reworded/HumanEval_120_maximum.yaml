name: HumanEval_120_maximum
language: rb
prompt: "# Given an array arr of integers and a positive integer k, return a sorted\
  \ array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>>\
  \ maximum.call([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum.call([4,\
  \ -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum.call([-3, 2, 1, 2, -1, -2, 1],\
  \ 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of [1, 1000].\n\
  # 2. The elements in the array will be in the range of [-1000, 1000].\n# 3. 0 <=\
  \ k <= len(arr)\ndef maximum(arr, k)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_maximum\n\
  \    candidate = method(:maximum)\n    assert_equal([-4, -3, 5], candidate.call([-3,\
  \ -4, 5], 3))\n    assert_equal([4, 4], candidate.call([4, -4, 4], 2))\n    assert_equal([2],\
  \ candidate.call([-3, 2, 1, 2, -1, -2, 1], 1))\n    assert_equal([2, 20, 123], candidate.call([123,\
  \ -123, 20, 0, 1, 2, -3], 3))\n    assert_equal([0, 1, 2, 20], candidate.call([-123,\
  \ 20, 0, 1, 2, -3], 4))\n    assert_equal([-13, -8, 0, 0, 3, 5, 15], candidate.call([5,\
  \ 15, 0, 3, -13, -8, 0], 7))\n    assert_equal([3, 5], candidate.call([-1, 0, 2,\
  \ 5, 3, -10], 2))\n    assert_equal([5], candidate.call([1, 0, 5, -7], 1))\n   \
  \ assert_equal([-4, 4], candidate.call([4, -4], 2))\n    assert_equal([-10, 10],\
  \ candidate.call([-10, 10], 2))\n    assert_equal([], candidate.call([1, 2, 3, -23,\
  \ 243, -400, 0], 0))\n  end\nend\n"
completions: ["  arr.sort[-k..-1]\nend", "  arr.sort.reverse.first(k)\nend", "  arr.sort.last(k)\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort.last(k)\nend", "  arr.sort[-k..-1]\n\
    end", "  return arr if k == arr.length\n  arr.sort[-k..-1]\nend", "  return arr\
    \ if k == arr.length\n  return arr.sort[-k..-1] if k == 1\n  return arr.sort[-k..-1]\
    \ if k == arr.length\n  return arr.sort[-k..-1] if k > arr.length\nend", "  arr.sort.reverse.take(k)\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort.reverse.take(k)\nend", "  arr.sort.reverse.take(k)\nend", " \
    \ arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\nend",
  "  arr.sort.reverse.take(k)\nend", "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\nend", "  arr.sort.reverse.first(k)\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\nend", "  arr.sort.last(k)\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\nend", "  arr.sort.last(k)\n\
    end", "  arr.sort.last(k)\nend", "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort.reverse.first(k)\nend", "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort.reverse.take(k)\nend", "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort.last(k)\nend", "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\n\
    end", "  return arr if k == arr.length\n  return arr.sort[-k..-1] if k == 1\n\
    \  return arr.sort[-k..-1] if k == arr.length - 1\n  return arr.sort[-k..-1] if\
    \ k == arr.length - 2\n  return arr.sort[-k..-1] if k == arr.length - 3\n  return\
    \ arr.sort[-k..-1] if k == arr.length - 4\n  return arr.sort[-k..-1] if k == arr.length\
    \ - 5\n  return arr.sort[-k..-1] if k == arr.length - 6\n  return arr.sort[-k..-1]\
    \ if k == arr.length - 7\n  return arr.sort[-k..-1] if k == arr.length - 8\n \
    \ return arr.sort[-k..-1] if k == arr.length - 9\n  return arr.sort[-k..-1] if\
    \ k == arr.length - 10\n  return arr.sort[-k..-1] if k == arr.length - 11\n  return\
    \ arr.sort[-k..-1] if k == arr.length - 12\n  return arr.sort[-k..-1] if k ==\
    \ arr.length - 13\n  return arr.sort[-k..-1] if k == arr.length - 14\n  return\
    \ arr.sort[-k..-1] if k == arr.length - 15\n  return arr.sort[-k..-1] if k ==\
    \ arr.length - 16\n  return arr.sort[-k..-1] if k == arr.length - 17\n  return\
    \ arr.sort[-k..-1] if k == arr.length - 18\n  return arr.sort[-k..-1] if k ==\
    \ arr.length - 19\n  return arr.sort[-k..-1] if k == arr.length - 20\n  return\
    \ arr.sort[-k..-1] if k == arr.length - 21\n  return arr.sort[-k..-1] if k ==\
    \ arr.length - 22\n  return arr.sort[-k..-1] if k == arr.length - 23\n ", "  arr.sort.reverse.take(k)\n\
    end", "  arr.sort.reverse.take(k)\nend", "  arr.sort.reverse.take(k)\nend", " \
    \ arr.sort[-k..-1]\nend", "  arr.sort.last(k)\nend", "  arr.sort.last(k)\nend",
  "  arr.sort[-k..-1]\nend", "  arr.sort.reverse.first(k)\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort.last(k)\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort.reverse.first(k)\nend", "  arr.sort.reverse.take(k)\nend", " \
    \ arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\nend", "  arr.sort.last(k)\n\
    end", "  arr.sort.last(k)\nend", "  arr.sort.last(k)\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort.reverse.first(k)\nend", "  arr.sort.reverse.take(k)\nend", " \
    \ arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\nend", "  arr.sort.last(k)\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\nend", "  arr.sort!\n  arr[-k..-1]\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort.last(k)\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort.last(k)\nend", "  arr.sort.reverse.take(k)\nend", "  arr.sort.last(k)\n\
    end", "  arr.sort.last(k)\nend", "  arr.sort.last(k)\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort.last(k)\nend", "  arr.sort[-k..-1]\nend", "  arr.sort.reverse.first(k)\n\
    end", "  arr.sort.last(k)\nend", "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\nend", "  arr.sort.reverse.first(k)\n\
    end", "  return arr if k == arr.length\n  return arr.sort[-k..-1] if k > arr.length\n\
    \  return arr.sort[0..k-1] if k < arr.length\nend", "  arr.sort.reverse.first(k)\n\
    end", "  arr.sort.last(k)\nend", "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort.reverse.take(k)\nend", "  arr.sort.reverse.take(k)\nend", " \
    \ arr.sort!\n  arr[-k..-1]\nend", "  arr.sort[-k..-1]\nend", "  arr.sort.last(k)\n\
    end", "  arr.sort.reverse.take(k)\nend", "  arr.sort.reverse.take(k)\nend", " \
    \ arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\nend", "  arr.sort.last(k)\n\
    end", "  arr.sort.reverse.take(k)\nend", "  arr.sort.reverse.take(k)\nend", " \
    \ arr.sort.last(k)\nend", "  arr.sort.reverse.take(k)\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort.reverse.first(k)\nend", "  arr.sort.last(k)\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort.last(k)\nend", "  arr.sort.reverse.first(k)\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\n\
    end", "  arr.sort.last(k)\nend", "  arr.sort.last(k)\nend", "  arr.sort.reverse.take(k)\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\nend", "  arr.sort.last(k)\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort.reverse.take(k)\nend", "  arr.sort.reverse.take(k)\nend", " \
    \ arr.sort.reverse.take(k)\nend", "  arr.sort.last(k)\nend", "  arr.sort.last(k)\n\
    end", "  arr.sort.last(k)\nend", "  arr.sort.last(k)\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort.reverse.take(k)\nend", "  arr.sort.last(k)\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\nend", "  arr.sort.last(k)\n\
    end", "  arr.sort.last(k)\nend", "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort.last(k)\nend", "  arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\n\
    end", "  arr.sort.reverse.take(k)\nend", "  arr.sort.last(k)\nend", "  arr.sort.reverse.take(k)\n\
    end", "  arr.sort.reverse.take(k)\nend", "  arr.sort[-k..-1]\nend", "  arr.sort.last(k)\n\
    end", "  arr.sort.last(k)\nend", "  arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort.reverse.first(k)\nend", "  arr.sort.reverse.take(k)\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort.reverse.take(k)\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort.reverse.first(k)\nend", "  arr.sort.reverse.take(k)\nend", " \
    \ return arr if k == arr.length\n  return arr.max(k) if k == 1\n  return arr.min(k)\
    \ if k == arr.length - 1\n  return arr.min(k) if k == 2 && arr.length == 3\n \
    \ return [arr[0], arr[-1]] if k == 2 && arr.length == 4\n  return [arr[0], arr[1]]\
    \ if k == 2 && arr.length == 5\n  return [arr[0], arr[1], arr[-1]] if k == 3 &&\
    \ arr.length == 5\n  return [arr[0], arr[1], arr[2]] if k == 3 && arr.length ==\
    \ 6\n  return [arr[0], arr[1], arr[2], arr[-1]] if k == 4 && arr.length == 6\n\
    \  return [arr[0], arr[1], arr[2], arr[3]] if k == 4 && arr.length == 7\n  return\
    \ [arr[0], arr[1], arr[2], arr[3], arr[-1]] if k == 5 && arr.length == 7\n  return\
    \ [arr[0], arr[1], arr[2], arr[3], arr[4]] if k == 5 && arr.length == 8\n  return\
    \ [arr[0], arr[1], arr[2], arr[3], arr[4], arr[-1]] if k == 6 && arr.length ==\
    \ 8\n  return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]] if k == 6 && arr.length\
    \ == 9\n  return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[-1]] if\
    \ k == 7 && arr.length == 9\n  return [arr[0], arr[1], arr[2], arr[3], arr[4],\
    \ arr[5], arr[6]] if k == 7 && arr.length == 10\n  return [arr[0], arr[1], arr[2],\
    \ arr[3], arr[4], arr[5], arr[6], arr[-1]] if k == 8 && arr.length == 10\n  return\
    \ [arr[0], arr[1], arr[2],", "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort.last(k)\nend", "  arr.sort.last(k)\nend", "  arr.sort.last(k)\n\
    end", "  arr.sort.reverse.take(k)\nend", "  arr.sort.reverse.first(k)\nend", " \
    \ arr.sort.last(k)\nend", "  arr.sort.reverse.take(k)\nend", "  arr.sort[-k..-1]\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort[-k..-1]\nend", "  arr.sort.last(k)\n\
    end", "  arr.sort[-k..-1]\nend", "  arr.sort.last(k)\nend", "  arr.sort.reverse.take(k)\n\
    end", "  arr.sort.reverse.take(k)\nend", "  arr.sort.last(k)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
