name: HumanEval_156_int_to_mini_roman
language: rb
prompt: "# Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  # and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n#\
  \ >>> int_to_mini_roman.call(19)\n# \"xix\"\n# >>> int_to_mini_roman.call(152)\n\
  # \"clii\"\n# >>> int_to_mini_roman.call(426)\n# \"cdxxvi\"\ndef int_to_mini_roman(number)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_int_to_mini_roman\n\
  \    candidate = method(:int_to_mini_roman)\n    assert_equal(\"xix\", candidate.call(19))\n\
  \    assert_equal(\"clii\", candidate.call(152))\n    assert_equal(\"ccli\", candidate.call(251))\n\
  \    assert_equal(\"cdxxvi\", candidate.call(426))\n    assert_equal(\"d\", candidate.call(500))\n\
  \    assert_equal(\"i\", candidate.call(1))\n    assert_equal(\"iv\", candidate.call(4))\n\
  \    assert_equal(\"xliii\", candidate.call(43))\n    assert_equal(\"xc\", candidate.call(90))\n\
  \    assert_equal(\"xciv\", candidate.call(94))\n    assert_equal(\"dxxxii\", candidate.call(532))\n\
  \    assert_equal(\"cm\", candidate.call(900))\n    assert_equal(\"cmxciv\", candidate.call(994))\n\
  \    assert_equal(\"m\", candidate.call(1000))\n  end\nend\n"
completions: ["  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500\
    \ => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50\
    \ => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"\
    v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  # Your code here\nend", "  #\
    \ your code here\nend", "  roman_numerals = {\n    1 => 'i',\n    4 => 'iv',\n\
    \    5 => 'v',\n    9 => 'ix',\n    10 => 'x',\n    40 => 'xl',\n    50 => 'l',\n\
    \    90 => 'xc',\n    100 => 'c',\n    400 => 'cd',\n    500 => 'd',\n    900\
    \ => 'cm',\n    1000 => 'm'\n  }\n  roman_numerals.keys.reverse.each_with_object('')\
    \ do |key, roman|\n    while number >= key\n      roman << roman_numerals[key]\n\
    \      number -= key\n    end\n  end\nend", "  roman_numerals = {\n    1000 =>\
    \ \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 =>\
    \ \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"\
    x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }",
  "  # Your code here\nend", "  roman_numerals = {\n    1000 => \"m\",\n    900 =>\
    \ \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 =>\
    \ \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"\
    ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  roman_numerals\
    \ = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"\
    cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\"\
    ,\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n   \
    \ 1 => \"i\"\n  }", "  # TODO: implement me\nend", "  roman_numerals = {\n   \
    \ 1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n\
    \    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n \
    \   10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 =>\
    \ \"i\"\n  }", "  roman_numeral = \"\"\n  roman_numerals = {\n    1000 => \"m\"\
    ,\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\"\
    ,\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n\
    \    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }\n  roman_numerals.each\
    \ do |key, value|\n    roman_numeral << value * (number / key)\n    number = number\
    \ % key\n  end\n  roman_numeral\nend", "  # TODO: implement me\nend", "  # TODO:\
    \ Implement this method\nend", "  roman_numerals = {\n    1000 => \"m\",\n   \
    \ 900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n \
    \   90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n   \
    \ 9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  roman_numeral\
    \ = \"\"\n  roman_numeral += \"m\" * (number / 1000)\n  roman_numeral += \"d\"\
    \ * (number % 1000 / 500)\n  roman_numeral += \"c\" * (number % 500 / 100)\n \
    \ roman_numeral += \"l\" * (number % 100 / 50)\n  roman_numeral += \"x\" * (number\
    \ % 50 / 10)\n  roman_numeral += \"v\" * (number % 10 / 5)\n  roman_numeral +=\
    \ \"i\" * (number % 5 / 1)\n  roman_numeral\nend", "  roman_numerals = {\n   \
    \ 1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n\
    \    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n \
    \   10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 =>\
    \ \"i\"\n  }\n  result = \"\"\n  roman_numerals.each do |key, value|\n    while\
    \ number >= key\n      result << value\n      number -= key\n    end\n  end\n\
    \  result\nend", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\"\
    ,\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\"\
    ,\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n \
    \   5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }\n  roman_string = \"\"\n\
    \  roman_numerals.each do |key, value|\n    while number >= key\n      roman_string\
    \ << value\n      number -= key\n    end\n  end\n  roman_string\nend", "  roman_numerals\
    \ = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"\
    cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\"\
    ,\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n   \
    \ 1 => \"i\"\n  }", "  roman_numerals = {\n    1 => 'i',\n    5 => 'v',\n    10\
    \ => 'x',\n    50 => 'l',\n    100 => 'c',\n    500 => 'd',\n    1000 => 'm'\n\
    \  }\n  result = ''\n  roman_numerals.keys.reverse.each do |divisor|\n    quotient,\
    \ modulus = number.divmod(divisor)\n    if quotient > 0\n      result << roman_numerals[divisor]\
    \ * quotient\n      number = modulus\n    end\n  end\n  result\nend", "  roman_numerals\
    \ = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"\
    cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\"\
    ,\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n   \
    \ 1 => \"i\"\n  }", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\"\
    ,\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\"\
    ,\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n \
    \   5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  roman_numerals = {\n\
    \    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n    10 => 'x',\n\
    \    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 => 'c',\n    400 =>\
    \ 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n  }\n  result = ''\n\
    \  roman_numerals.keys.reverse.each do |divisor|\n    quotient, modulus = number.divmod(divisor)\n\
    \    result << roman_numerals[divisor] * quotient\n    number = modulus\n  end\n\
    \  result\nend", "  roman_numerals = {\n    1 => 'i',\n    5 => 'v',\n    10 =>\
    \ 'x',\n    50 => 'l',\n    100 => 'c',\n    500 => 'd',\n    1000 => 'm'\n  }\n\
    \  roman_numerals.default = ''\n  roman_numerals[number]\nend", "  roman_numeral\
    \ = \"\"\n  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500\
    \ => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50\
    \ => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"\
    v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }\n  roman_numerals.each do |key, value|\n\
    \    roman_numeral << value * (number / key)\n    number = number % key\n  end\n\
    \  roman_numeral\nend", "  roman = \"\"\n  roman = roman + \"m\" * (number / 1000)\n\
    \  roman = roman + \"d\" * (number % 1000 / 500)\n  roman = roman + \"c\" * (number\
    \ % 500 / 100)\n  roman = roman + \"l\" * (number % 100 / 50)\n  roman = roman\
    \ + \"x\" * (number % 50 / 10)\n  roman = roman + \"v\" * (number % 10 / 5)\n\
    \  roman = roman + \"i\" * (number % 5 / 1)\n  roman\nend", "  # Your code here\n\
    end", "  raise ArgumentError, \"Number must be between 1 and 1000\" unless number.between?(1,\
    \ 1000)\n  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500\
    \ => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50\
    \ => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"\
    v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }\n  roman_numerals.reduce(\"\") do\
    \ |roman_numeral, (arabic_numeral, roman_numeral_string)|\n    while number >=\
    \ arabic_numeral\n      roman_numeral << roman_numeral_string\n      number -=\
    \ arabic_numeral\n    end\n    roman_numeral\n  end\nend", "  roman_numerals =\
    \ {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"\
    cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\"\
    ,\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n   \
    \ 1 => \"i\"\n  }", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\"\
    ,\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\"\
    ,\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n \
    \   5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  roman_numerals = {\n\
    \    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\"\
    ,\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n\
    \    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1\
    \ => \"i\"\n  }", "  raise ArgumentError, \"Number must be between 1 and 1000\"\
    \ unless (1..1000).include?(number)\n  roman_numeral = \"\"\n  roman_numeral <<\
    \ \"m\" * (number / 1000)\n  roman_numeral << \"d\" * (number % 1000 / 500)\n\
    \  roman_numeral << \"c\" * (number % 500 / 100)\n  roman_numeral << \"l\" * (number\
    \ % 100 / 50)\n  roman_numeral << \"x\" * (number % 50 / 10)\n  roman_numeral\
    \ << \"v\" * (number % 10 / 5)\n  roman_numeral << \"i\" * (number % 5 / 1)\n\
    \  roman_numeral\nend", "  # your code here\nend", "  roman_numerals = {\n   \
    \ 1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n\
    \    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n \
    \   10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 =>\
    \ \"i\"\n  }", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\",\n\
    \    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n\
    \    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n   \
    \ 5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  roman_numerals = {\n\
    \    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\"\
    ,\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n\
    \    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1\
    \ => \"i\"\n  }", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\"\
    ,\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\"\
    ,\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n \
    \   5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  roman_numerals = {\n\
    \    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\"\
    ,\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n\
    \    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1\
    \ => \"i\"\n  }", "  roman_numeral = ''\n  roman_numeral << 'm' * (number / 1000)\n\
    \  roman_numeral << 'd' * (number % 1000 / 500)\n  roman_numeral << 'c' * (number\
    \ % 500 / 100)\n  roman_numeral << 'l' * (number % 100 / 50)\n  roman_numeral\
    \ << 'x' * (number % 50 / 10)\n  roman_numeral << 'v' * (number % 10 / 5)\n  roman_numeral\
    \ << 'i' * (number % 5 / 1)\n  roman_numeral\nend", "  roman_numerals = {\n  \
    \  1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n    10 => 'x',\n\
    \    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 => 'c',\n    400 =>\
    \ 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n  }\n  result = ''\n\
    \  roman_numerals.keys.reverse.each do |divisor|\n    quotient, modulus = number.divmod(divisor)\n\
    \    result << roman_numerals[divisor] * quotient\n    number = modulus\n  end\n\
    \  result\nend", "  # Your code here\nend", "  roman_numerals = {\n    1000 =>\
    \ \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 =>\
    \ \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"\
    x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }",
  "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\"\
    ,\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n\
    \    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4\
    \ => \"iv\",\n    1 => \"i\"\n  }", "  roman_numerals = {\n    1000 => \"m\",\n\
    \    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n\
    \    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n  \
    \  9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  roman_numerals\
    \ = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"\
    cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\"\
    ,\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n   \
    \ 1 => \"i\"\n  }", "  # TODO: Implement this function\nend", "  # TODO: Implement\
    \ this method\nend", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"\
    cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"\
    xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\"\
    ,\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  roman_numeral =\
    \ \"\"\n  roman_numeral << \"m\" * (number / 1000)\n  roman_numeral << \"d\" *\
    \ (number % 1000 / 500)\n  roman_numeral << \"c\" * (number % 500 / 100)\n  roman_numeral\
    \ << \"l\" * (number % 100 / 50)\n  roman_numeral << \"x\" * (number % 50 / 10)\n\
    \  roman_numeral << \"v\" * (number % 10 / 5)\n  roman_numeral << \"i\" * (number\
    \ % 5 / 1)\n  roman_numeral\nend", "  roman_numerals = {\n    1000 => \"m\",\n\
    \    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n\
    \    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n  \
    \  9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  roman_numerals\
    \ = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"\
    cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\"\
    ,\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n   \
    \ 1 => \"i\"\n  }", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\"\
    ,\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\"\
    ,\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n \
    \   5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }\n  result = \"\"\n  roman_numerals.each\
    \ do |key, value|\n    while number >= key\n      result << value\n      number\
    \ -= key\n    end\n  end\n  result\nend", "  # TODO: Implement me\nend", "  raise\
    \ ArgumentError, \"Number must be between 1 and 1000\" unless (1..1000).include?(number)\n\
    \  roman_numerals = {\n    1 => \"i\",\n    4 => \"iv\",\n    5 => \"v\",\n  \
    \  9 => \"ix\",\n    10 => \"x\",\n    40 => \"xl\",\n    50 => \"l\",\n    90\
    \ => \"xc\",\n    100 => \"c\",\n    400 => \"cd\",\n    500 => \"d\",\n    900\
    \ => \"cm\",\n    1000 => \"m\"\n  }\n  result = \"\"\n  roman_numerals.keys.reverse.each\
    \ do |key|\n    while number >= key\n      result << roman_numerals[key]\n   \
    \   number -= key\n    end\n  end\n  result\nend", "  roman_numerals = {\n   \
    \ 1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n\
    \    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n \
    \   10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 =>\
    \ \"i\"\n  }", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\",\n\
    \    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n\
    \    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n   \
    \ 5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  # Your code here\nend",
  "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\"\
    ,\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n\
    \    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4\
    \ => \"iv\",\n    1 => \"i\"\n  }", "  roman_numerals = {\n    1000 => \"m\",\n\
    \    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n\
    \    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n  \
    \  9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  roman_numerals\
    \ = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"\
    cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\"\
    ,\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n   \
    \ 1 => \"i\"\n  }", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\"\
    ,\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\"\
    ,\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n \
    \   5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  roman_numerals = {\n\
    \    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\"\
    ,\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n\
    \    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1\
    \ => \"i\"\n  }", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\"\
    ,\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\"\
    ,\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n \
    \   5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  roman_numerals = {\n\
    \    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\"\
    ,\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n\
    \    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1\
    \ => \"i\"\n  }", "  roman = \"\"\n  roman << \"m\" * (number / 1000)\n  roman\
    \ << \"d\" * (number % 1000 / 500)\n  roman << \"c\" * (number % 500 / 100)\n\
    \  roman << \"l\" * (number % 100 / 50)\n  roman << \"x\" * (number % 50 / 10)\n\
    \  roman << \"v\" * (number % 10 / 5)\n  roman << \"i\" * (number % 5 / 1)\n \
    \ roman\nend", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\",\n\
    \    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n\
    \    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n   \
    \ 5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  roman_numeral = \"\"\
    \n  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"\
    d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\"\
    ,\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n  \
    \  4 => \"iv\",\n    1 => \"i\"\n  }\n  roman_numerals.each do |key, value|\n\
    \    roman_numeral << value * (number / key)\n    number = number % key\n  end\n\
    \  roman_numeral\nend", "  # TODO: Implement this method\nend", "  roman = \"\"\
    \n  roman << \"m\" * (number / 1000)\n  roman << \"d\" * (number % 1000 / 500)\n\
    \  roman << \"c\" * (number % 500 / 100)\n  roman << \"l\" * (number % 100 / 50)\n\
    \  roman << \"x\" * (number % 50 / 10)\n  roman << \"v\" * (number % 10 / 5)\n\
    \  roman << \"i\" * (number % 5 / 1)\n  roman\nend", "  # TODO: implement me\n\
    end", "  # TODO: implement me\nend", "  roman_numerals = {\n    1000 => \"m\"\
    ,\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\"\
    ,\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n\
    \    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", " \
    \ roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\"\
    ,\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n\
    \    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4\
    \ => \"iv\",\n    1 => \"i\"\n  }", "  roman_numeral = \"\"\n  roman_numeral +=\
    \ \"m\" * (number / 1000)\n  roman_numeral += \"d\" * (number % 1000 / 500)\n\
    \  roman_numeral += \"c\" * (number % 500 / 100)\n  roman_numeral += \"l\" * (number\
    \ % 100 / 50)\n  roman_numeral += \"x\" * (number % 50 / 10)\n  roman_numeral\
    \ += \"v\" * (number % 10 / 5)\n  roman_numeral += \"i\" * (number % 5 / 1)\n\
    \  roman_numeral\nend", "  # Your code here\nend", "  roman_numerals = {\n   \
    \ 1 => 'i',\n    5 => 'v',\n    10 => 'x',\n    50 => 'l',\n    100 => 'c',\n\
    \    500 => 'd',\n    1000 => 'm'\n  }\n  roman_numerals.default = ''\n  result\
    \ = ''\n  num = number\n  while num > 0\n    if num >= 1000\n      result += roman_numerals[1000]\n\
    \      num -= 1000\n    elsif num >= 500\n      result += roman_numerals[500]\n\
    \      num -= 500\n    elsif num >= 100\n      result += roman_numerals[100]\n\
    \      num -= 100\n    elsif num >= 50\n      result += roman_numerals[50]\n \
    \     num -= 50\n    elsif num >= 10\n      result += roman_numerals[10]\n   \
    \   num -= 10\n    elsif num >= 5\n      result += roman_numerals[5]\n      num\
    \ -= 5\n    elsif num >= 1\n      result += roman_numerals[1]\n      num -= 1\n\
    \    end\n  end\n  result\nend", "  # Your code here\nend", "  roman_numerals\
    \ = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"\
    cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\"\
    ,\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n   \
    \ 1 => \"i\"\n  }", "  # TODO: Implement me!\nend", "  # TODO: Implement me!\n\
    end", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 =>\
    \ \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 =>\
    \ \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\"\
    ,\n    4 => \"iv\",\n    1 => \"i\"\n  }\n  result = \"\"\n  roman_numerals.each\
    \ do |key, value|\n    while number >= key\n      result << value\n      number\
    \ -= key\n    end\n  end\n  result\nend", "  # your code here\nend", "  roman_numerals\
    \ = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"\
    cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\"\
    ,\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n   \
    \ 1 => \"i\"\n  }", "  # your code here\nend", "  # TODO: implement this method\n\
    end", "  # TODO: implement me\nend", "  # TODO: implement this method\nend", " \
    \ roman_numerals = {\n    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n\
    \    10 => 'x',\n    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 =>\
    \ 'c',\n    400 => 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n\
    \  }\n  roman_numerals.keys.reverse.each_with_object('') do |num, result|\n  \
    \  while number >= num\n      result << roman_numerals[num]\n      number -= num\n\
    \    end\n  end\nend", "  roman_numerals = {\n    1 => 'i',\n    4 => 'iv',\n\
    \    5 => 'v',\n    9 => 'ix',\n    10 => 'x',\n    40 => 'xl',\n    50 => 'l',\n\
    \    90 => 'xc',\n    100 => 'c',\n    400 => 'cd',\n    500 => 'd',\n    900\
    \ => 'cm',\n    1000 => 'm'\n  }\n  roman_numerals.keys.reverse.each_with_object('')\
    \ do |key, roman|\n    while number >= key\n      roman << roman_numerals[key]\n\
    \      number -= key\n    end\n  end\nend", "  # TODO: implement this method\n\
    end", "  roman_numerals = {\n    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n  \
    \  9 => 'ix',\n    10 => 'x',\n    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n\
    \    100 => 'c',\n    400 => 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000\
    \ => 'm'\n  }\n  result = ''\n  roman_numerals.keys.reverse.each do |divisor|\n\
    \    quotient, modulus = number.divmod(divisor)\n    result << roman_numerals[divisor]\
    \ * quotient\n    number = modulus\n  end\n  result\nend", "  roman_numerals =\
    \ {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"\
    cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\"\
    ,\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n   \
    \ 1 => \"i\"\n  }", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\"\
    ,\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\"\
    ,\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n \
    \   5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  # TODO: implement\
    \ me\nend", "  roman_numerals = {\n    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n\
    \    9 => 'ix',\n    10 => 'x',\n    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n\
    \    100 => 'c',\n    400 => 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000\
    \ => 'm'\n  }\n  result = ''\n  roman_numerals.reverse_each do |key, value|\n\
    \    while number >= key\n      result << value\n      number -= key\n    end\n\
    \  end\n  result\nend", "  # TODO: Implement me!\nend", "  roman_numerals = {\n\
    \    1 => 'i',\n    5 => 'v',\n    10 => 'x',\n    50 => 'l',\n    100 => 'c',\n\
    \    500 => 'd',\n    1000 => 'm'\n  }\n  result = ''\n  roman_numerals.keys.reverse.each\
    \ do |key|\n    while number >= key\n      number -= key\n      result << roman_numerals[key]\n\
    \    end\n  end\n  result\nend", "  roman_numerals = {\n    1000 => \"m\",\n \
    \   900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n\
    \    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n  \
    \  9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  #\
    \ TODO: implement me\nend", "  roman_numerals = {\n    1000 => \"m\",\n    900\
    \ => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90\
    \ => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 =>\
    \ \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  roman_numeral\
    \ = \"\"\n  roman_numeral << \"m\" * (number / 1000)\n  number = number % 1000\n\
    \  roman_numeral << \"d\" * (number / 500)\n  number = number % 500\n  roman_numeral\
    \ << \"c\" * (number / 100)\n  number = number % 100\n  roman_numeral << \"l\"\
    \ * (number / 50)\n  number = number % 50\n  roman_numeral << \"x\" * (number\
    \ / 10)\n  number = number % 10\n  roman_numeral << \"v\" * (number / 5)\n  number\
    \ = number % 5\n  roman_numeral << \"i\" * number\n  roman_numeral\nend", "  roman_numerals\
    \ = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"\
    cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\"\
    ,\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n   \
    \ 1 => \"i\"\n  }\n  result = \"\"\n  roman_numerals.each do |key, value|\n  \
    \  result << value * (number / key)\n    number = number % key\n  end\n  result\n\
    end", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 =>\
    \ \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 =>\
    \ \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\"\
    ,\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  roman = \"\"\n  roman << \"m\" *\
    \ (number / 1000)\n  roman << \"d\" * (number % 1000 / 500)\n  roman << \"c\"\
    \ * (number % 500 / 100)\n  roman << \"l\" * (number % 100 / 50)\n  roman << \"\
    x\" * (number % 50 / 10)\n  roman << \"v\" * (number % 10 / 5)\n  roman << \"\
    i\" * (number % 5 / 1)\n  roman\nend", "  roman_numerals = {\n    1000 => \"m\"\
    ,\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\"\
    ,\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n\
    \    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }\n  result\
    \ = \"\"\n  roman_numerals.each do |key, value|\n    result << value * (number\
    \ / key)\n    number = number % key\n  end\n  result\nend", "  # TODO: implement\
    \ me\nend", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\",\n  \
    \  500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n \
    \   50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n    5\
    \ => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  roman_numerals = {\n \
    \   1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n\
    \    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n \
    \   10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 =>\
    \ \"i\"\n  }\n  result = \"\"\n  roman_numerals.each do |key, value|\n    result\
    \ << value * (number / key)\n    number = number % key\n  end\n  result\nend",
  "  # Your code here\nend", "  roman_numerals = {\n    1000 => \"m\",\n    900 =>\
    \ \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 =>\
    \ \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"\
    ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }\n  result = \"\"\
    \n  roman_numerals.each do |key, value|\n    while number >= key\n      result\
    \ << value\n      number -= key\n    end\n  end\n  result\nend", "  roman_numerals\
    \ = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"\
    cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\"\
    ,\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n   \
    \ 1 => \"i\"\n  }", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\"\
    ,\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\"\
    ,\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n \
    \   5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  roman_numerals = {\n\
    \    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\"\
    ,\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n\
    \    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1\
    \ => \"i\"\n  }", "  # TODO: implement this method\nend", "  roman_numerals =\
    \ {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n \
    \   100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n\
    \    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result =\
    \ ''\n  roman_numerals.each do |key, value|\n    while number >= key\n      result\
    \ += value\n      number -= key\n    end\n  end\n  result\nend", "  roman_numerals\
    \ = {\n    1 => 'i',\n    5 => 'v',\n    10 => 'x',\n    50 => 'l',\n    100 =>\
    \ 'c',\n    500 => 'd',\n    1000 => 'm'\n  }\n  roman_numeral = ''\n  number_string\
    \ = number.to_s\n  number_string.length.times do |i|\n    digit = number_string[i].to_i\n\
    \    if digit == 4\n      roman_numeral += roman_numerals[10 ** (number_string.length\
    \ - i - 1)] + roman_numerals[5 * 10 ** (number_string.length - i - 1)]\n    elsif\
    \ digit == 9\n      roman_numeral += roman_numerals[10 ** (number_string.length\
    \ - i - 1)] + roman_numerals[10 ** (number_string.length - i)]\n    elsif digit\
    \ >= 5\n      roman_numeral += roman_numerals[5 * 10 ** (number_string.length\
    \ - i - 1)] + roman_numerals[10 ** (number_string.length - i - 1)] * (digit -\
    \ 5)\n    else\n      roman_numeral += roman_numerals[10 ** (number_string.length\
    \ - i - 1)] * digit\n    end\n  end\n  roman_numeral\nend", "  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result\
    \ = ''\n  roman_numerals.each do |key, value|\n    result << value * (number /\
    \ key)\n    number = number % key\n  end\n  result\nend", "  roman_numerals =\
    \ {\n    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n    10 => 'x',\n\
    \    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 => 'c',\n    400 =>\
    \ 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n  }\n  result = ''\n\
    \  roman_numerals.keys.reverse.each do |divisor|\n    quotient, modulus = number.divmod(divisor)\n\
    \    result << roman_numerals[divisor] * quotient\n    number = modulus\n  end\n\
    \  result\nend", "  roman_numerals = {\n    1000 => 'm',\n    900 => 'cm',\n \
    \   500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 =>\
    \ 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4\
    \ => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key, value|\n\
    \    while number >= key\n      result += value\n      number -= key\n    end\n\
    \  end\n  result\nend", "  roman_numeral = \"\"\n  roman_numeral << \"m\" * (number\
    \ / 1000)\n  roman_numeral << \"d\" * (number % 1000 / 500)\n  roman_numeral <<\
    \ \"c\" * (number % 500 / 100)\n  roman_numeral << \"l\" * (number % 100 / 50)\n\
    \  roman_numeral << \"x\" * (number % 50 / 10)\n  roman_numeral << \"v\" * (number\
    \ % 10 / 5)\n  roman_numeral << \"i\" * (number % 5 / 1)\n  roman_numeral\nend",
  "  # TODO: Implement me!\nend", "  # TODO: implement me\nend", "  roman_numerals\
    \ = {\n    1000 => 'm',\n    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n\
    \    100 => 'c',\n    90 => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 =>\
    \ 'x',\n    9 => 'ix',\n    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  roman_numerals.each_with_object('')\
    \ do |(arabic, roman), result|\n    result << roman * (number / arabic)\n    number\
    \ %= arabic\n  end\nend", "  roman_numerals = {\n    1000 => 'm',\n    900 =>\
    \ 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n\
    \    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n\
    \    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each do |key,\
    \ value|\n    result << value * (number / key)\n    number = number % key\n  end\n\
    \  result\nend", "  # Your code here\nend", "  roman_numeral = \"\"\n  roman_numeral\
    \ << \"m\" * (number / 1000)\n  roman_numeral << \"d\" * (number % 1000 / 500)\n\
    \  roman_numeral << \"c\" * (number % 500 / 100)\n  roman_numeral << \"l\" * (number\
    \ % 100 / 50)\n  roman_numeral << \"x\" * (number % 50 / 10)\n  roman_numeral\
    \ << \"v\" * (number % 10 / 5)\n  roman_numeral << \"i\" * (number % 5 / 1)\n\
    \  roman_numeral\nend", "  # Your code here\nend", "  roman_numerals = {\n   \
    \ 1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n\
    \    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n \
    \   10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 =>\
    \ \"i\"\n  }", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\",\n\
    \    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n\
    \    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n   \
    \ 5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }\n  result = \"\"\n  roman_numerals.each\
    \ do |key, value|\n    while number >= key\n      result << value\n      number\
    \ -= key\n    end\n  end\n  result\nend", "  roman_numerals = {\n    1000 => \"\
    m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"\
    c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\"\
    ,\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }",
  "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\"\
    ,\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n\
    \    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4\
    \ => \"iv\",\n    1 => \"i\"\n  }", "  roman_numerals = {\n    1000 => \"m\",\n\
    \    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n\
    \    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n  \
    \  9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  #\
    \ TODO: implement me\nend", "  roman_numerals = {\n    1 => 'i',\n    5 => 'v',\n\
    \    10 => 'x',\n    50 => 'l',\n    100 => 'c',\n    500 => 'd',\n    1000 =>\
    \ 'm'\n  }\n  result = ''\n  roman_numerals.keys.reverse.each do |divisor|\n \
    \   quotient, modulus = number.divmod(divisor)\n    next if quotient.zero?\n \
    \   result << roman_numerals[divisor] * quotient\n    number = modulus\n  end\n\
    \  result\nend", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\"\
    ,\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\"\
    ,\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n \
    \   5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }\n  result = \"\"\n  roman_numerals.each\
    \ do |key, value|\n    while number >= key\n      result << value\n      number\
    \ -= key\n    end\n  end\n  result\nend", "  # TODO: Implement this method\nend",
  "  roman_numerals = {\n    1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n\
    \    10 => 'x',\n    40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 =>\
    \ 'c',\n    400 => 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n\
    \  }\n  roman_numerals.keys.reverse.each_with_object('') do |key, roman|\n   \
    \ while number >= key\n      roman << roman_numerals[key]\n      number -= key\n\
    \    end\n  end\nend", "  roman_numeral = \"\"\n  roman_numeral << \"m\" * (number\
    \ / 1000)\n  roman_numeral << \"d\" * (number % 1000 / 500)\n  roman_numeral <<\
    \ \"c\" * (number % 500 / 100)\n  roman_numeral << \"l\" * (number % 100 / 50)\n\
    \  roman_numeral << \"x\" * (number % 50 / 10)\n  roman_numeral << \"v\" * (number\
    \ % 10 / 5)\n  roman_numeral << \"i\" * (number % 5 / 1)\n  roman_numeral\nend",
  "  # TODO: implement this method\nend", "  roman_numerals = {\n    1000 => 'm',\n\
    \    900 => 'cm',\n    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90\
    \ => 'xc',\n    50 => 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n\
    \    5 => 'v',\n    4 => 'iv',\n    1 => 'i'\n  }\n  result = ''\n  roman_numerals.each\
    \ do |key, value|\n    while number >= key\n      result += value\n      number\
    \ -= key\n    end\n  end\n  result\nend", "  # TODO: Implement this method\nend",
  "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\"\
    ,\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n\
    \    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4\
    \ => \"iv\",\n    1 => \"i\"\n  }", "  # TODO: implement me!\nend", "  result\
    \ = \"\"\n  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500\
    \ => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50\
    \ => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"\
    v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }\n  roman_numerals.each do |key, value|\n\
    \    while number >= key\n      result << value\n      number -= key\n    end\n\
    \  end\n  result\nend", "  roman_numerals = {\n    1 => 'i',\n    4 => 'iv',\n\
    \    5 => 'v',\n    9 => 'ix',\n    10 => 'x',\n    40 => 'xl',\n    50 => 'l',\n\
    \    90 => 'xc',\n    100 => 'c',\n    400 => 'cd',\n    500 => 'd',\n    900\
    \ => 'cm',\n    1000 => 'm'\n  }\n  result = ''\n  roman_numerals.keys.reverse.each\
    \ do |key|\n    while number >= key\n      result << roman_numerals[key]\n   \
    \   number -= key\n    end\n  end\n  result\nend", "  roman_numerals = {\n   \
    \ 1 => 'i',\n    5 => 'v',\n    10 => 'x',\n    50 => 'l',\n    100 => 'c',\n\
    \    500 => 'd',\n    1000 => 'm'\n  }\n  result = ''\n  roman_numerals.keys.reverse.each\
    \ do |divisor|\n    quotient, modulus = number.divmod(divisor)\n    next if quotient.zero?\n\
    \    if quotient == 4\n      result << roman_numerals[divisor] + roman_numerals[divisor\
    \ * 5]\n    elsif quotient == 9\n      result << roman_numerals[divisor] + roman_numerals[divisor\
    \ * 10]\n    else\n      result << roman_numerals[divisor] * quotient\n    end\n\
    \    number = modulus\n  end\n  result\nend", "  roman_numerals = {\n    1000\
    \ => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100\
    \ => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 =>\
    \ \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n\
    \  }", "  # Your code here\nend", "  # TODO: implement me\nend", "  # TODO: implement\
    \ this method\nend", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"\
    cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"\
    xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\"\
    ,\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  # TODO: implement\
    \ this method\nend", "  # TODO: Implement this method\nend", "  # TODO: implement\
    \ this method\nend", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"\
    cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"\
    xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\"\
    ,\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  roman_numerals\
    \ = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"\
    cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\"\
    ,\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n   \
    \ 1 => \"i\"\n  }", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\"\
    ,\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\"\
    ,\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n \
    \   5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  roman_numerals = {\n\
    \    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\"\
    ,\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n\
    \    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1\
    \ => \"i\"\n  }", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\"\
    ,\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\"\
    ,\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n \
    \   5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  # TODO: implement\
    \ this method\nend", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"\
    cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"\
    xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\"\
    ,\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  # your code here\n\
    end", "  # Your code here\nend", "  roman_numerals = {\n    1    => 'i',\n   \
    \ 5    => 'v',\n    10   => 'x',\n    50   => 'l',\n    100  => 'c',\n    500\
    \  => 'd',\n    1000 => 'm'\n  }", "  roman_numerals = {\n    1000 => \"m\",\n\
    \    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n\
    \    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n  \
    \  9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  #\
    \ TODO: Implement me!\nend", "  roman_numerals = {\n    1000 => \"m\",\n    900\
    \ => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90\
    \ => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 =>\
    \ \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  roman_numerals\
    \ = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"\
    cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\"\
    ,\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n   \
    \ 1 => \"i\"\n  }", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\"\
    ,\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\"\
    ,\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n \
    \   5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  roman_numerals = {\n\
    \    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\"\
    ,\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n\
    \    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1\
    \ => \"i\"\n  }", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\"\
    ,\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\"\
    ,\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n \
    \   5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  # TODO: Implement\
    \ this method\nend", "  # Your code here\nend", "  # your code here\nend", " \
    \ roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\"\
    ,\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n\
    \    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4\
    \ => \"iv\",\n    1 => \"i\"\n  }", "  roman_numerals = {\n    1000 => \"m\",\n\
    \    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n\
    \    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n  \
    \  9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  #\
    \ your code here\nend", "  # Your code here\nend", "  roman = \"\"\n  roman <<\
    \ \"m\" * (number / 1000)\n  roman << \"d\" * (number % 1000 / 500)\n  roman <<\
    \ \"c\" * (number % 500 / 100)\n  roman << \"l\" * (number % 100 / 50)\n  roman\
    \ << \"x\" * (number % 50 / 10)\n  roman << \"v\" * (number % 10 / 5)\n  roman\
    \ << \"i\" * (number % 5 / 1)\n  roman\nend", "  # your code here\nend", "  roman_numerals\
    \ = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"\
    cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\"\
    ,\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n   \
    \ 1 => \"i\"\n  }\n  result = \"\"\n  roman_numerals.each do |key, value|\n  \
    \  while number >= key\n      result << value\n      number -= key\n    end\n\
    \  end\n  result\nend", "  # Your code here\nend", "  roman_numerals = {\n   \
    \ 1 => 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n    10 => 'x',\n \
    \   40 => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 => 'c',\n    400 =>\
    \ 'cd',\n    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n  }\n  result = ''\n\
    \  roman_numerals.keys.reverse.each do |divisor|\n    quotient, modulus = number.divmod(divisor)\n\
    \    result << roman_numerals[divisor] * quotient\n    number = modulus\n  end\n\
    \  result\nend", "  # TODO: implement me\nend", "  roman_numerals = {\n    1000\
    \ => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100\
    \ => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 =>\
    \ \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n\
    \  }", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500\
    \ => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50\
    \ => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"\
    v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  result = \"\"\n  while number\
    \ > 0\n    if number >= 1000\n      result += \"m\"\n      number -= 1000\n  \
    \  elsif number >= 900\n      result += \"cm\"\n      number -= 900\n    elsif\
    \ number >= 500\n      result += \"d\"\n      number -= 500\n    elsif number\
    \ >= 400\n      result += \"cd\"\n      number -= 400\n    elsif number >= 100\n\
    \      result += \"c\"\n      number -= 100\n    elsif number >= 90\n      result\
    \ += \"xc\"\n      number -= 90\n    elsif number >= 50\n      result += \"l\"\
    \n      number -= 50\n    elsif number >= 40\n      result += \"xl\"\n      number\
    \ -= 40\n    elsif number >= 10\n      result += \"x\"\n      number -= 10\n \
    \   elsif number >= 9\n      result += \"ix\"\n      number -= 9\n    elsif number\
    \ >= 5\n      result += \"v\"\n      number -= 5\n    elsif number >= 4\n    \
    \  result += \"iv\"\n      number -= 4\n    elsif number >= 1\n      result +=\
    \ \"i\"\n      number -= 1\n    end\n  end\n  result\nend", "  roman_numerals\
    \ = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\",\n    400 => \"\
    cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\"\
    ,\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n   \
    \ 1 => \"i\"\n  }", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\"\
    ,\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\"\
    ,\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n \
    \   5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  roman_numerals = {\n\
    \    1 => 'i',\n    5 => 'v',\n    10 => 'x',\n    50 => 'l',\n    100 => 'c',\n\
    \    500 => 'd',\n    1000 => 'm'\n  }\n  result = ''\n  roman_numerals.keys.reverse.each\
    \ do |divisor|\n    quotient, modulus = number.divmod(divisor)\n    next if quotient.zero?\n\
    \    result << roman_numerals[divisor] * quotient\n    number = modulus\n  end\n\
    \  result\nend", "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\"\
    ,\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\"\
    ,\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n \
    \   5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }\n  result = \"\"\n  roman_numerals.each\
    \ do |key, value|\n    while number >= key\n      result << value\n      number\
    \ -= key\n    end\n  end\n  result\nend", "  # TODO: Implement this method\nend",
  "  roman_numerals = {\n    1000 => \"m\",\n    900 => \"cm\",\n    500 => \"d\"\
    ,\n    400 => \"cd\",\n    100 => \"c\",\n    90 => \"xc\",\n    50 => \"l\",\n\
    \    40 => \"xl\",\n    10 => \"x\",\n    9 => \"ix\",\n    5 => \"v\",\n    4\
    \ => \"iv\",\n    1 => \"i\"\n  }", "  roman_numerals = {\n    1000 => \"m\",\n\
    \    900 => \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n\
    \    90 => \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n  \
    \  9 => \"ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  #\
    \ Your code here\nend", "  roman_numerals = {\n    1000 => \"m\",\n    900 =>\
    \ \"cm\",\n    500 => \"d\",\n    400 => \"cd\",\n    100 => \"c\",\n    90 =>\
    \ \"xc\",\n    50 => \"l\",\n    40 => \"xl\",\n    10 => \"x\",\n    9 => \"\
    ix\",\n    5 => \"v\",\n    4 => \"iv\",\n    1 => \"i\"\n  }", "  # TODO: Implement\
    \ this method\nend", "  roman_numerals = {\n    1 => 'i',\n    4 => 'iv',\n  \
    \  5 => 'v',\n    9 => 'ix',\n    10 => 'x',\n    40 => 'xl',\n    50 => 'l',\n\
    \    90 => 'xc',\n    100 => 'c',\n    400 => 'cd',\n    500 => 'd',\n    900\
    \ => 'cm',\n    1000 => 'm'\n  }\n  result = ''\n  roman_numerals.keys.reverse.each\
    \ do |divisor|\n    quotient, modulus = number.divmod(divisor)\n    result <<\
    \ roman_numerals[divisor] * quotient\n    number = modulus\n  end\n  result\n\
    end", "  # TODO: Implement this method\nend", "  roman_numerals = {\n    1 =>\
    \ 'i',\n    4 => 'iv',\n    5 => 'v',\n    9 => 'ix',\n    10 => 'x',\n    40\
    \ => 'xl',\n    50 => 'l',\n    90 => 'xc',\n    100 => 'c',\n    400 => 'cd',\n\
    \    500 => 'd',\n    900 => 'cm',\n    1000 => 'm'\n  }\n  roman_numerals.keys.reverse.each_with_object('')\
    \ do |key, result|\n    while number >= key\n      result << roman_numerals[key]\n\
    \      number -= key\n    end\n  end\nend", "  # your code here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
