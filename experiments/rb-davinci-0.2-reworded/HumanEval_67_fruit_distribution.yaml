name: HumanEval_67_fruit_distribution
language: rb
prompt: "# In this task, you will be given a string that represents a number of apples\
  \ and oranges \n# that are distributed in a basket of fruit this basket contains\
  \ \n# apples, oranges, and mango fruits. Given the string that represents the total\
  \ number of \n# the oranges and apples and an integer that represent the total number\
  \ of the fruits \n# in the basket return the number of the mango fruits in the basket.\n\
  # for examble:\n# >>> fruit_distribution.call(\"5 apples and 6 oranges\", 19)\n\
  # 8\n# >>> fruit_distribution.call(\"0 apples and 1 oranges\", 3)\n# 2\n# >>> fruit_distribution.call(\"\
  2 apples and 3 oranges\", 100)\n# 95\n# >>> fruit_distribution.call(\"100 apples\
  \ and 1 oranges\", 120)\n# 19\ndef fruit_distribution(s, n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
  \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
  5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples and\
  \ 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
  , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n    assert_equal(95,\
  \ candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0, candidate.call(\"\
  2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"1 apples and\
  \ 100 oranges\", 120))\n  end\nend\n"
completions: ["  s.split(\" \").map { |x| x.to_i }.sum - n\nend", "  s.split(\" \"\
    ).map(&:to_i).reduce(:+) - n\nend", "  # your code here\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  # Your code here\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  # Your code here\nend", "  #\
    \ your code here\nend", "  # your code here\nend", "  # Your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # Your code here\nend", "  a, o = s.split(\" and \"\
    ).map { |x| x.split(\" \").first.to_i }\n  n - a - o\nend", "  # Your code here\n\
    end", "  # your code here\nend", "  # write your code here\nend", "  # Your code\
    \ here\nend", "  # your code here\nend", "  # your code here\nend", "  # Your\
    \ code here\nend", "  # your code here\nend", "  # your code here\nend", "  s.split(\"\
    \ and \").map { |x| x.split(\" \")[0].to_i }.sum - n\nend", "  # Your code here\n\
    end", "  # your code here\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # Your code here\n\
    end", "  # your code here\nend", "  # write your code here\nend", "  # Your code\
    \ here\nend", "  # your code here\nend", "  # Write your code here\nend", "  #\
    \ your code here\nend", "  # Your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # Write your code here\n\
    \  # To print results to the standard output you can use puts\n  # Example: puts\
    \ \"Hello world!\"\n  s.split(\" \").map(&:to_i).inject(:+)\nend", "  # Your code\
    \ here\nend", "  # your code here\nend", "  # your code here\nend", "  s.split(\"\
    \ and \").map { |x| x.split(\" \").first.to_i }.reduce(:+).to_i\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  # write your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # Your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # write your code here\nend", "  # your code here\n\
    end", "  s.split(\" and \").map { |x| x.split(\" \")[0].to_i }.reduce(:+) - n\n\
    end", "  s.split(' ').map(&:to_i).reduce(:+) - n\nend", "  # Your code here\n\
    end", "  # your code here\nend", "  # Your code here\nend", "  s.split(\" and\
    \ \").map { |x| x.split(\" \").first.to_i }.reduce(:+).to_i - n\nend", "  # Your\
    \ code here\nend", "  # your code here\nend", "  # Your code here\nend", "  #\
    \ Your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # Your code here\nend", "  s.split(\" \").map(&:to_i).inject(:+) - n\nend", " \
    \ # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  a = s.split(\" and \")\n\
    \  a[0] = a[0].split(\" \")[0].to_i\n  a[1] = a[1].split(\" \")[0].to_i\n  n -\
    \ a[0] - a[1]\nend", "  # your code here\nend", "  # your code here\nend", " \
    \ s.split(\" and \").map{|e| e.split(\" \")[0].to_i}.reduce(:+).to_i\nend", " \
    \ s.split(\" \").map(&:to_i).reduce(:+) - n\nend", "  # your code here\nend",
  "  # write your code here\nend", "  s.split(\" and \").map { |x| x.split(\" \").map(&:to_i)\
    \ }.flatten.inject(:+) - n\nend", "  # Your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  a, o = s.split(' and ').map { |x| x.split(' ').first.to_i }\n  n - a\
    \ - o\nend", "  # your code here\nend", "  # your code here\nend", "  s.split(\"\
    \ and \").map { |e| e.split(\" \").first.to_i }.sum - n\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  # Your code here\nend", "  # your code here\nend", "  #\
    \ Your code here\nend", "  # write your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  # Your code here\nend", "  # Your code here\n\
    end", "  # your code here\nend", "  s.split(\" \").map(&:to_i).inject(:+) - n\n\
    end", "  # Your code here\nend", "  # your code here\nend", "  # your code here\n\
    end", "  # your code here\nend", "  s.split(\" \").map { |x| x.to_i }.inject(:+)\
    \ - n\nend", "  # your code here\nend", "  # Your code here\nend", "  # Your code\
    \ here\nend", "  # your code here\nend", "  # Your code goes here\nend", "  #\
    \ your code here\nend", "  # Your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # Your code goes here\n\
    end", "  # your code here\nend", "  # Write your code here\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  # your code here\nend", "  # Your code here\nend", "  #\
    \ your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # Your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # Your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  s.split(\" \").map(&:to_i).reduce(:+) - n\nend", " \
    \ # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # Your code here\nend",
  "  # your code here\nend", "  s.split(\" and \").map { |e| e.split(\" \")[0].to_i\
    \ }.sum - n\nend", "  # your code here\nend", "  # your code here\nend", "  #\
    \ your code here\nend", "  # Your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # Your code here\nend", "  # your code here\nend",
  "  # your code here\nend", "  # your code here\nend", "  # your code here\nend",
  "  return n - s.split(\" and \").map{|x| x.split(\" \")[0].to_i}.reduce(:+)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
