name: HumanEval_70_strange_sort_list
language: rb
prompt: "# Given array of integers, return array in strange order.\n# Strange sorting,\
  \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
  \ then minimum and so on.\n# >>> strange_sort_list.call([1, 2, 3, 4])\n# [1, 4,\
  \ 2, 3]\n# >>> strange_sort_list.call([5, 5, 5, 5])\n# [5, 5, 5, 5]\n# >>> strange_sort_list.call([])\n\
  # []\ndef strange_sort_list(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
  \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
  \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
  \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
  \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5,\
  \ 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7,\
  \ 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2,\
  \ 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n  end\n\
  end\n"
completions: ["  return lst if lst.empty?\n  lst.sort!\n  lst.insert(1, lst.pop)\n\
    \  lst.insert(-2, lst.shift)\n  lst\nend", "  return lst if lst.empty?\n  lst.sort!\n\
    \  min = lst.shift\n  max = lst.pop\n  strange_sort_list(lst).unshift(max).unshift(min)\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  return\
    \ lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size > 1\n    result\
    \ << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n  result\n\
    end", "  lst.sort.each_slice(2).to_a.flatten.reverse\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.flatten.reverse\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  return lst if lst.empty?\n\
    \  lst.sort!\n  result = []\n  result << lst.shift\n  result << lst.pop\n  until\
    \ lst.empty?\n    result << lst.shift\n    result << lst.pop\n  end\n  result\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  return\
    \ lst if lst.empty?\n  lst.sort!\n  res = []\n  i = 0\n  j = lst.length - 1\n\
    \  while i <= j\n    res << lst[i]\n    res << lst[j] if i != j\n    i += 1\n\
    \    j -= 1\n  end\n  res\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size\
    \ > 1\n    result << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n\
    \  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend",
  "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort_by.with_index { |_, i| i.even? ? lst.min : lst.max }\nend",
  "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.partition.with_index\
    \ { |_, i| i.even? }.flatten\nend", "  return lst if lst.empty?\n  lst.sort!\n\
    \  result = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend", "  return lst if lst.empty?\n \
    \ lst.sort.each_slice(2).to_a.transpose.flatten\nend", "  return lst if lst.empty?\n\
    \  lst.sort!\n  result = []\n  while lst.size > 1\n    result << lst.shift\n \
    \   result << lst.pop\n  end\n  result << lst.shift\n  result\nend", "  return\
    \ lst if lst.empty?\n  lst.sort!\n  lst.each_with_index.map do |_, i|\n    if\
    \ i.even?\n      lst.shift\n    else\n      lst.pop\n    end\n  end\nend", " \
    \ lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  return lst if\
    \ lst.empty?\n  result = []\n  lst.sort!\n  while lst.size > 0\n    result <<\
    \ lst.shift\n    result << lst.pop\n  end\n  result.compact\nend", "  lst.sort.partition.with_index\
    \ { |_, i| i.even? }.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  return\
    \ lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size > 1\n    result\
    \ << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n  result\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size\
    \ > 1\n    result << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n\
    \  result\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  return\
    \ lst if lst.empty?\n  result = []\n  lst.sort!\n  while lst.size > 1\n    result\
    \ << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n  result\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort_by.with_index { |x, i| [i.even? ? x : -x] }\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  return lst if lst.empty?\n\
    \  lst.sort!\n  result = []\n  while lst.any?\n    result << lst.shift\n    result\
    \ << lst.pop\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size\
    \ > 1\n    result << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n\
    \  result\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  return\
    \ lst if lst.empty?\n  lst.sort!\n  res = []\n  while lst.size > 1\n    res <<\
    \ lst.shift\n    res << lst.pop\n  end\n  res << lst.shift\n  res\nend", "  lst.sort.partition.with_index\
    \ { |_, i| i.even? }.flatten\nend", "  return lst if lst.empty?\n  lst.sort!\n\
    \  res = []\n  while lst.size > 1\n    res << lst.shift\n    res << lst.pop\n\
    \  end\n  res << lst.shift\n  res\nend", "  return lst if lst.empty?\n  new_lst\
    \ = []\n  new_lst << lst.min\n  lst.delete(lst.min)\n  new_lst << lst.max\n  lst.delete(lst.max)\n\
    \  new_lst << lst.min\n  lst.delete(lst.min)\n  new_lst << lst.max\n  lst.delete(lst.max)\n\
    \  new_lst\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend",
  "  return lst if lst.empty?\n  lst.sort!\n  result = [lst.shift]\n  while lst.any?\n\
    \    result << lst.pop\n    result << lst.shift\n  end\n  result\nend", "  return\
    \ lst if lst.empty?\n  result = []\n  lst.sort!\n  while lst.size > 1\n    result\
    \ << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n  result\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size\
    \ > 0\n    result << lst.shift\n    result << lst.pop\n  end\n  result\nend",
  "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort_by.with_index\
    \ { |_, i| i.even? ? lst.min : lst.max }\nend", "  lst.sort_by.with_index { |_,\
    \ i| i.even? ? lst.min : lst.max }\nend", "  return lst if lst.empty?\n  lst.sort!\n\
    \  (lst.length / 2).times do |i|\n    lst.insert(2 * i + 1, lst.pop)\n  end\n\
    \  lst\nend", '  return lst if lst.empty?', "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  lst.unshift(lst.pop)\n  lst\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  return lst if lst.empty?\n\
    \  lst.sort!\n  lst[0], lst[1] = lst[1], lst[0]\n  lst\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.length\
    \ > 0\n    result << lst.shift\n    result << lst.pop\n  end\n  result\nend",
  "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  return lst if\
    \ lst.empty?\n  result = []\n  lst.sort!\n  while lst.size > 1\n    result <<\
    \ lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n  result\nend",
  "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  return lst if lst.size <= 1\n  result = []\n  lst.sort!\n  while lst.size\
    \ > 0\n    result << lst.shift\n    result << lst.pop\n  end\n  result.compact\n\
    end", "  lst.sort.partition.with_index { |_, i| i.even? }.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size\
    \ > 0\n    result << lst.shift\n    result << lst.pop\n  end\n  result\nend",
  "  return lst if lst.empty?\n  lst.sort!\n  res = []\n  while lst.size > 1\n   \
    \ res << lst.shift\n    res << lst.pop\n  end\n  res << lst.shift\n  res\nend",
  "  return lst if lst.empty?\n  lst.sort!\n  lst.unshift(lst.pop)\n  lst\nend", " \
    \ lst.sort_by.with_index { |_, i| i.even? ? lst.min : lst.max }\nend", "  return\
    \ lst if lst.empty?\n  result = []\n  result << lst.min\n  lst.delete(lst.min)\n\
    \  while lst.length > 0\n    result << lst.max\n    lst.delete(lst.max)\n    result\
    \ << lst.min\n    lst.delete(lst.min)\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  return\
    \ lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  return\
    \ lst if lst.empty?\n  lst.sort!\n  lst.insert(1, lst.pop)\n  lst\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  return lst if lst.empty?\n\
    \  lst.sort!\n  result = []\n  while lst.size > 1\n    result << lst.shift\n \
    \   result << lst.pop\n  end\n  result << lst.shift\n  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  (lst.length/2).times do |i|\n\
    \    lst.insert(2*i+1, lst.pop)\n  end\n  lst\nend", "  lst.sort.each_slice(2).to_a.flatten.reverse\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size\
    \ > 1\n    result << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n\
    \  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend",
  "  lst.sort_by.with_index { |_, i| i.even? ? lst.min : lst.max }\nend", "  lst.sort.each_slice(2).to_a.flatten.reverse\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.length\
    \ > 0\n    result << lst.shift\n    result << lst.pop\n  end\n  result.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size\
    \ > 1\n    result << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n\
    \  result\nend", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while\
    \ lst.size > 1\n    result << lst.shift\n    result << lst.pop\n  end\n  result\
    \ << lst.shift\n  result\nend", "  return lst if lst.empty?\n  sorted = []\n \
    \ lst.sort!\n  while lst.size > 0\n    sorted << lst.shift\n    sorted << lst.pop\n\
    \  end\n  sorted\nend", "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  (lst.length / 2).times do |i|\n\
    \    lst.insert(2 * i + 1, lst.pop)\n  end\n  lst\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  (0..lst.size / 2).map { |i|\
    \ [lst[i], lst[-i - 1]] }.flatten\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  lst.unshift(lst.pop)\n  lst\n\
    end", "  return lst if lst.empty?\n  result = []\n  lst.sort!\n  while lst.size\
    \ > 0\n    result << lst.shift\n    result << lst.pop\n  end\n  result\nend",
  "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  until lst.empty?\n\
    \    result << lst.shift\n    result << lst.pop\n  end\n  result\nend", "  return\
    \ lst if lst.empty?\n  result = []\n  lst.sort!\n  while lst.size > 1\n    result\
    \ << lst.shift\n    result << lst.pop\n  end\n  result << lst.pop\n  result\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  res = []\n  while lst.size >\
    \ 0\n    res << lst.shift\n    res << lst.pop\n  end\n  res.compact\nend", " \
    \ lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  return lst if lst.empty?\n\
    \  lst.sort!\n  result = []\n  while lst.length > 0\n    result << lst.shift\n\
    \    result << lst.pop\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  return lst if lst.empty?\n  result = []\n  lst.sort!\n  while lst.size\
    \ > 0\n    result << lst.shift\n    result << lst.pop\n  end\n  result\nend",
  "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  lst.each_with_index.map do |e,\
    \ i|\n    i.even? ? e : lst.pop\n  end\nend", "  lst.sort_by.with_index { |_,\
    \ i| i.even? ? lst.min : lst.max }\nend", "  return lst if lst.empty?\n  lst.sort!\n\
    \  lst.each_slice(2).to_a.transpose.flatten\nend", "  return lst if lst.empty?\n\
    \  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\nend", "  return lst\
    \ if lst.empty?\n  result = []\n  lst.sort!\n  while lst.size > 0\n    result\
    \ << lst.shift\n    result << lst.pop\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  return\
    \ lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  i = 0\n  j =\
    \ lst.length - 1\n  while i <= j\n    result << lst[i]\n    result << lst[j] if\
    \ i != j\n    i += 1\n    j -= 1\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size\
    \ > 1\n    result << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n\
    \  result\nend", "  return lst if lst.empty?\n  lst.sort!\n  (lst.size / 2).times\
    \ do |i|\n    lst.insert(i * 2 + 1, lst.pop)\n  end\n  lst\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  min = lst.shift\n  max = lst.pop\n\
    \  result = [min]\n  while !lst.empty?\n    result << lst.pop\n    result << lst.shift\n\
    \  end\n  result << max\nend", "  return lst if lst.empty?\n  lst.sort!\n  res\
    \ = []\n  while lst.size > 1\n    res << lst.shift\n    res << lst.pop\n  end\n\
    \  res << lst.pop\n  res\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort_by.with_index { |_, i| i.even? ? lst.min : lst.max }\nend",
  "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort_by.with_index\
    \ { |_, i| i.even? ? lst.min : lst.max }\nend", "  return lst if lst.empty?\n\
    \  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\nend", "  return lst\
    \ if lst.empty?\n  result = []\n  lst.sort!\n  while lst.size > 1\n    result\
    \ << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n  result\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  return lst if lst.empty?\n\
    \  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\nend", "  return lst\
    \ if lst.empty?\n  lst.sort!\n  i = 0\n  while i < lst.size\n    lst.insert(i,\
    \ lst.pop) if i.odd?\n    i += 1\n  end\n  lst\nend", "  lst.sort_by.with_index\
    \ { |x, i| i.even? ? x : -x }\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  left = lst[0..(lst.length /\
    \ 2 - 1)]\n  right = lst[(lst.length / 2)..-1]\n  result = []\n  left.each_with_index\
    \ do |e, i|\n    result << e\n    result << right[i] if right[i]\n  end\n  result\n\
    end", "  lst.sort_by.with_index { |_, i| i.even? ? lst.min : lst.max }\nend",
  "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size > 1\n\
    \    result << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n\
    \  result\nend", "  lst.sort.each_slice(2).to_a.flatten.reverse\nend", "  return\
    \ lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size > 0\n    result\
    \ << lst.shift\n    result << lst.pop\n  end\n  result.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size\
    \ > 1\n    result << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n\
    \  result\nend", "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size\
    \ > 1\n    result << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n\
    \  result\nend", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while\
    \ lst.size > 0\n    result << lst.shift\n    result << lst.pop\n  end\n  result\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size\
    \ > 1\n    result << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n\
    \  result\nend", "  return lst if lst.empty?\n  lst.sort!\n  lst.unshift(lst.pop)\n\
    \  lst\nend", "  return lst if lst.empty?\n  lst.sort!\n  lst.insert(1, lst.pop)\n\
    \  lst\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  return\
    \ lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  return lst if lst.empty?\n  result = []\n  min = lst.min\n  max = lst.max\n\
    \  while result.length < lst.length\n    result << min\n    result << max\n  \
    \  lst.delete(min)\n    lst.delete(max)\n    min = lst.min\n    max = lst.max\n\
    \  end\n  result\nend", "  return lst if lst.empty?\n  lst.sort!\n  lst.unshift(lst.pop)\n\
    \  lst\nend", "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  i = 0\n  while i < lst.size\n\
    \    lst.insert(i, lst.pop) if i.odd?\n    i += 1\n  end\n  lst\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size\
    \ > 1\n    result << lst.shift\n    result << lst.pop\n  end\n  result << lst.shift\n\
    \  result\nend", "  return lst if lst.empty?\n  lst.sort!\n  lst.unshift(lst.pop)\n\
    \  lst\nend", "  return lst if lst.empty?\n  lst.sort!\n  lst.each_slice(2).to_a.transpose.flatten\n\
    end", "  return lst if lst.empty?\n  result = []\n  lst.sort!\n  while lst.size\
    \ > 0\n    result << lst.shift\n    result << lst.pop\n  end\n  result.compact\n\
    end", "  lst.sort_by.with_index { |_, i| i.even? ? lst.min : lst.max }\nend",
  "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  return lst if\
    \ lst.empty?\n  lst.sort!\n  result = []\n  until lst.empty?\n    result << lst.shift\n\
    \    result << lst.pop\n  end\n  result\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while lst.size\
    \ > 1\n    result << lst.shift\n    result << lst.pop\n  end\n  result << lst.pop\n\
    \  result\nend", "  return lst if lst.empty?\n  lst.sort!\n  result = []\n  while\
    \ lst.size > 1\n    result << lst.shift\n    result << lst.pop\n  end\n  result\
    \ << lst.shift\n  result\nend", "  return lst if lst.empty?\n  lst.sort!\n  result\
    \ = []\n  while lst.size > 1\n    result << lst.shift\n    result << lst.pop\n\
    \  end\n  result << lst.shift\n  result\nend", "  return lst if lst.empty?\n \
    \ result = []\n  result << lst.min\n  lst.delete(lst.min)\n  while !lst.empty?\n\
    \    result << lst.max\n    lst.delete(lst.max)\n    result << lst.min\n    lst.delete(lst.min)\n\
    \  end\n  result\nend", "  lst.sort.each_slice(2).to_a.flatten.reverse\nend",
  "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\n\
    end", "  lst.sort.each_slice(2).to_a.transpose.flatten.compact\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end", "  lst.sort.each_slice(2).to_a.reverse.flatten\nend", "  lst.sort.each_slice(2).to_a.reverse.flatten\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
