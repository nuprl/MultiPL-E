language: rb
name: HumanEval_60_sum_to_n
results:
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  # Your code here\n  if n\
    \ == 1\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplwmwrazg

    Started

    .

    Finished in 0.001024976 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    975.63 tests/s, 4878.16 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n\
    \  else\n    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpanq07j5k

    Started

    .

    Finished in 0.000416887 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2398.73 tests/s, 11993.66 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpoc4p2ubj

    Started

    .

    Finished in 0.000407094 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2456.44 tests/s, 12282.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).inject(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkp6hd33a

    Started

    .

    Finished in 0.000801981 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1246.91 tests/s, 6234.56 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbdh880tu

    Started

    .

    Finished in 0.000375551 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2662.75 tests/s, 13313.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).inject(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkp6hd33a

    Started

    .

    Finished in 0.000801981 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1246.91 tests/s, 6234.56 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n\
    \  else\n    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpanq07j5k

    Started

    .

    Finished in 0.000416887 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2398.73 tests/s, 11993.66 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).inject(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkp6hd33a

    Started

    .

    Finished in 0.000801981 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1246.91 tests/s, 6234.56 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n\
    \  else\n    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpanq07j5k

    Started

    .

    Finished in 0.000416887 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2398.73 tests/s, 11993.66 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n <= 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvv0igojq

    Started

    .

    Finished in 0.000683321 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1463.44 tests/s, 7317.21 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbdh880tu

    Started

    .

    Finished in 0.000375551 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2662.75 tests/s, 13313.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  return sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo5u8re2y

    Started

    .

    Finished in 0.000386202 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2589.32 tests/s, 12946.59 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).inject(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkp6hd33a

    Started

    .

    Finished in 0.000801981 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1246.91 tests/s, 6234.56 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbdh880tu

    Started

    .

    Finished in 0.000375551 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2662.75 tests/s, 13313.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbdh880tu

    Started

    .

    Finished in 0.000375551 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2662.75 tests/s, 13313.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbdh880tu

    Started

    .

    Finished in 0.000375551 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2662.75 tests/s, 13313.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n\
    \  else\n    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpanq07j5k

    Started

    .

    Finished in 0.000416887 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2398.73 tests/s, 11993.66 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbdh880tu

    Started

    .

    Finished in 0.000375551 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2662.75 tests/s, 13313.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbdh880tu

    Started

    .

    Finished in 0.000375551 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2662.75 tests/s, 13313.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpoc4p2ubj

    Started

    .

    Finished in 0.000407094 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2456.44 tests/s, 12282.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbdh880tu

    Started

    .

    Finished in 0.000375551 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2662.75 tests/s, 13313.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n\
    \  else\n    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpanq07j5k

    Started

    .

    Finished in 0.000416887 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2398.73 tests/s, 11993.66 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n\
    \  else\n    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpanq07j5k

    Started

    .

    Finished in 0.000416887 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2398.73 tests/s, 11993.66 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).inject(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkp6hd33a

    Started

    .

    Finished in 0.000801981 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1246.91 tests/s, 6234.56 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).inject(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkp6hd33a

    Started

    .

    Finished in 0.000801981 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1246.91 tests/s, 6234.56 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbdh880tu

    Started

    .

    Finished in 0.000375551 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2662.75 tests/s, 13313.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbdh880tu

    Started

    .

    Finished in 0.000375551 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2662.75 tests/s, 13313.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbdh880tu

    Started

    .

    Finished in 0.000375551 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2662.75 tests/s, 13313.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbdh880tu

    Started

    .

    Finished in 0.000375551 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2662.75 tests/s, 13313.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).inject(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkp6hd33a

    Started

    .

    Finished in 0.000801981 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1246.91 tests/s, 6234.56 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n\
    \  else\n    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpanq07j5k

    Started

    .

    Finished in 0.000416887 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2398.73 tests/s, 11993.66 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbdh880tu

    Started

    .

    Finished in 0.000375551 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2662.75 tests/s, 13313.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpoc4p2ubj

    Started

    .

    Finished in 0.000407094 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2456.44 tests/s, 12282.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbdh880tu

    Started

    .

    Finished in 0.000375551 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2662.75 tests/s, 13313.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).inject(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkp6hd33a

    Started

    .

    Finished in 0.000801981 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1246.91 tests/s, 6234.56 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbdh880tu

    Started

    .

    Finished in 0.000375551 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2662.75 tests/s, 13313.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n\
    \  else\n    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpanq07j5k

    Started

    .

    Finished in 0.000416887 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2398.73 tests/s, 11993.66 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbdh880tu

    Started

    .

    Finished in 0.000375551 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2662.75 tests/s, 13313.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).inject(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkp6hd33a

    Started

    .

    Finished in 0.000801981 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1246.91 tests/s, 6234.56 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n\
    \  else\n    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpanq07j5k

    Started

    .

    Finished in 0.000416887 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2398.73 tests/s, 11993.66 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).inject(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkp6hd33a

    Started

    .

    Finished in 0.000801981 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1246.91 tests/s, 6234.56 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).inject(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkp6hd33a

    Started

    .

    Finished in 0.000801981 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1246.91 tests/s, 6234.56 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbdh880tu

    Started

    .

    Finished in 0.000375551 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2662.75 tests/s, 13313.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbdh880tu

    Started

    .

    Finished in 0.000375551 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2662.75 tests/s, 13313.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n\
    \  else\n    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpanq07j5k

    Started

    .

    Finished in 0.000416887 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2398.73 tests/s, 11993.66 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).inject(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkp6hd33a

    Started

    .

    Finished in 0.000801981 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1246.91 tests/s, 6234.56 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n\
    \  else\n    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpanq07j5k

    Started

    .

    Finished in 0.000416887 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2398.73 tests/s, 11993.66 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n\
    \  else\n    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpanq07j5k

    Started

    .

    Finished in 0.000416887 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2398.73 tests/s, 11993.66 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n\
    \  else\n    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpanq07j5k

    Started

    .

    Finished in 0.000416887 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2398.73 tests/s, 11993.66 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n\
    \  else\n    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpanq07j5k

    Started

    .

    Finished in 0.000416887 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2398.73 tests/s, 11993.66 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbdh880tu

    Started

    .

    Finished in 0.000375551 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2662.75 tests/s, 13313.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbdh880tu

    Started

    .

    Finished in 0.000375551 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2662.75 tests/s, 13313.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbdh880tu

    Started

    .

    Finished in 0.000375551 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2662.75 tests/s, 13313.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  (1..n).each do\
    \ |i|\n    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpb2e3eja3

    Started

    .

    Finished in 0.000399929 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2500.44 tests/s, 12502.22 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  if n == 1\n    return 1\n\
    \  else\n    return n + sum_to_n(n-1)\n  end\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n    candidate = method(:sum_to_n)\n\
    \    assert_equal(1, candidate.call(1))\n    assert_equal(21, candidate.call(6))\n\
    \    assert_equal(66, candidate.call(11))\n    assert_equal(465, candidate.call(30))\n\
    \    assert_equal(5050, candidate.call(100))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpanq07j5k

    Started

    .

    Finished in 0.000416887 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2398.73 tests/s, 11993.66 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).inject(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkp6hd33a

    Started

    .

    Finished in 0.000801981 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1246.91 tests/s, 6234.56 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  n * (n + 1) / 2\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmploxur8mp

    Started

    .

    Finished in 0.000530987 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1883.29 tests/s, 9416.43 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpoc4p2ubj

    Started

    .

    Finished in 0.000407094 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2456.44 tests/s, 12282.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  n * (n + 1) / 2\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmploxur8mp

    Started

    .

    Finished in 0.000530987 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1883.29 tests/s, 9416.43 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n\treturn n if n == 1\n\tn\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz8l7lrgv

    Started

    .

    Finished in 0.000434187 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2303.16 tests/s, 11515.78 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbdh880tu

    Started

    .

    Finished in 0.000375551 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2662.75 tests/s, 13313.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).inject(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkp6hd33a

    Started

    .

    Finished in 0.000801981 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1246.91 tests/s, 6234.56 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 1
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  # your code here\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpblcnn4eo\nStarted\nF\n===============================================================================\n\
    Failure: test_sum_to_n(TestHumanEval)\n/tmp/tmpblcnn4eo.rb:19:in `test_sum_to_n'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_sum_to_n\n\
    \     18:     candidate = method(:sum_to_n)\n  => 19:     assert_equal(1, candidate.call(1))\n\
    \     20:     assert_equal(21, candidate.call(6))\n     21:     assert_equal(66,\
    \ candidate.call(11))\n     22:     assert_equal(465, candidate.call(30))\n<1>\
    \ expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014651338 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    68.25 tests/s, 68.25 assertions/s\n"
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbdh880tu

    Started

    .

    Finished in 0.000375551 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2662.75 tests/s, 13313.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).inject(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkp6hd33a

    Started

    .

    Finished in 0.000801981 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1246.91 tests/s, 6234.56 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbdh880tu

    Started

    .

    Finished in 0.000375551 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2662.75 tests/s, 13313.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return 1 if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpku_kkuej

    Started

    .

    Finished in 0.000426563 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2344.32 tests/s, 11721.60 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  n * (n + 1) / 2\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmploxur8mp

    Started

    .

    Finished in 0.000530987 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1883.29 tests/s, 9416.43 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n == 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpg0fhzlqp

    Started

    .

    Finished in 0.000425182 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2351.93 tests/s, 11759.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  (1..n).inject(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
    \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n \
    \   assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpkp6hd33a

    Started

    .

    Finished in 0.000801981 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1246.91 tests/s, 6234.56 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
- exit_code: 0
  program: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
    # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
    # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  return n if n <= 1\n  n\
    \ + sum_to_n(n-1)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sum_to_n\n    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n\
    \    assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
    \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
    \  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvv0igojq

    Started

    .

    Finished in 0.000683321 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1463.44 tests/s, 7317.21 assertions/s

    '
  stdout: ''
  timestamp: 1659792973
