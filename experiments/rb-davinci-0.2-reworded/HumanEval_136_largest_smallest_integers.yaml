name: HumanEval_136_largest_smallest_integers
language: rb
prompt: "# Create a function that returns an array (a, b), where 'a' is\n# the largest\
  \ of negative integers, and 'b' is the smallest\n# of positive integers in an array.\n\
  # If there is no negative or positive integers, return them as nil.\n# Examples:\n\
  # >>> largest_smallest_integers.call([2, 4, 1, 3, 5, 7])\n# [nil, 1]\n# >>> largest_smallest_integers.call([])\n\
  # [nil, nil]\n# >>> largest_smallest_integers.call([0])\n# [nil, nil]\ndef largest_smallest_integers(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_smallest_integers\n\
  \    candidate = method(:largest_smallest_integers)\n    assert_equal([nil, 1],\
  \ candidate.call([2, 4, 1, 3, 5, 7]))\n    assert_equal([nil, 1], candidate.call([2,\
  \ 4, 1, 3, 5, 7, 0]))\n    assert_equal([-2, 1], candidate.call([1, 3, 2, 4, 5,\
  \ 6, -2]))\n    assert_equal([-7, 2], candidate.call([4, 5, 3, 6, 2, 7, -7]))\n\
  \    assert_equal([-9, 2], candidate.call([7, 3, 8, 4, 9, 2, 5, -9]))\n    assert_equal([nil,\
  \ nil], candidate.call([]))\n    assert_equal([nil, nil], candidate.call([0]))\n\
  \    assert_equal([-1, nil], candidate.call([-1, -3, -5, -6]))\n    assert_equal([-1,\
  \ nil], candidate.call([-1, -3, -5, -6, 0]))\n    assert_equal([-3, 1], candidate.call([-6,\
  \ -4, -4, -3, 1]))\n    assert_equal([-3, 1], candidate.call([-6, -4, -4, -3, -100,\
  \ 1]))\n  end\nend\n"
completions: ["  # TODO: implement this method\nend", "  lst.select! { |x| x.is_a?(Integer)\
    \ }\n  lst.select! { |x| x != 0 }\n  return [nil, nil] if lst.empty?\n  [lst.select\
    \ { |x| x < 0 }.max, lst.select { |x| x > 0 }.min]\nend", "  # TODO: implement\
    \ this method\nend", "  # TODO: implement this method\nend", "  lst.select! {\
    \ |x| x < 0 || x > 0 }\n  return [nil, nil] if lst.empty?\n  [lst.max, lst.min]\n\
    end", "  lst.select! { |x| x < 0 || x > 0 }\n  return [nil, nil] if lst.empty?\n\
    \  [lst.max, lst.min]\nend", "  negatives = lst.select { |x| x < 0 }\n  positives\
    \ = lst.select { |x| x > 0 }\n  [negatives.max, positives.min]\nend", "  # TODO:\
    \ implement this method\nend", "  # TODO: Implement this method\nend", "  # TODO:\
    \ implement this method\nend", "  # Your code here\nend", "  return [nil, nil]\
    \ if lst.empty?\n  return [nil, nil] if lst.all?(&:zero?)\n  [lst.select(&:negative?).max,\
    \ lst.select(&:positive?).min]\nend", "  # TODO: implement this method\nend",
  "  lst.select! { |i| i < 0 || i > 0 }\n  [lst.max, lst.min]\nend", "  a = lst.select\
    \ { |x| x < 0 }.max\n  b = lst.select { |x| x > 0 }.min\n  [a, b]\nend", "  lst.select!\
    \ { |x| x.is_a? Integer }\n  lst.select! { |x| x != 0 }\n  if lst.empty?\n   \
    \ [nil, nil]\n  else\n    [lst.min, lst.max]\n  end\nend", "  a = lst.select {\
    \ |x| x < 0 }.max\n  b = lst.select { |x| x > 0 }.min\n  [a, b]\nend", "  positives\
    \ = lst.select { |x| x > 0 }\n  negatives = lst.select { |x| x < 0 }\n  [negatives.max,\
    \ positives.min]\nend", "  return [nil, nil] if lst.empty?\n  return [nil, nil]\
    \ if lst.all?(&:zero?)\n  return [nil, lst.min] if lst.all?(&:positive?)\n  return\
    \ [lst.max, nil] if lst.all?(&:negative?)\n  [lst.select(&:negative?).max, lst.select(&:positive?).min]\n\
    end", "  positives = lst.select { |num| num > 0 }\n  negatives = lst.select {\
    \ |num| num < 0 }\n  [negatives.max, positives.min]\nend", "  # your code here\n\
    end", "  # TODO: implement this method\nend", "  a = lst.select { |i| i < 0 }.max\n\
    \  b = lst.select { |i| i > 0 }.min\n  [a, b]\nend", "  # TODO: implement this\
    \ method\nend", "  lst.sort!\n  if lst.length == 0\n    return [nil, nil]\n  elsif\
    \ lst.length == 1\n    return [nil, nil]\n  elsif lst[0] > 0\n    return [nil,\
    \ lst[0]]\n  elsif lst[lst.length - 1] < 0\n    return [lst[lst.length - 1], nil]\n\
    \  else\n    return [lst[0], lst[lst.length - 1]]\n  end\nend", "  result = []\n\
    \  result << lst.select{|x| x < 0}.max\n  result << lst.select{|x| x > 0}.min\n\
    \  result\nend", "  # TODO: implement this method\nend", "  positive_numbers =\
    \ lst.select { |num| num > 0 }\n  negative_numbers = lst.select { |num| num <\
    \ 0 }\n  [negative_numbers.max, positive_numbers.min]\nend", "  # TODO: implement\
    \ this method\nend", "  lst.select! { |x| x < 0 || x > 0 }\n  return [nil, nil]\
    \ if lst.empty?\n  [lst.max, lst.min]\nend", "  a = lst.select { |x| x < 0 }.max\n\
    \  b = lst.select { |x| x > 0 }.min\n  [a, b]\nend", "  # your code here\nend",
  "  a = nil\n  b = nil\n  lst.each do |x|\n    if x > 0\n      if b == nil\n    \
    \    b = x\n      elsif x < b\n        b = x\n      end\n    elsif x < 0\n   \
    \   if a == nil\n        a = x\n      elsif x > a\n        a = x\n      end\n\
    \    end\n  end\n  return [a, b]\nend", "  # TODO: implement this method\nend",
  "  # TODO: implement this method\nend", "  positive = lst.select { |num| num > 0\
    \ }\n  negative = lst.select { |num| num < 0 }\n  [negative.max, positive.min]\n\
    end", "  # TODO: Implement this method\nend", "  # TODO: implement this method\n\
    end", "  # TODO: implement this method\nend", "  # TODO: implement this function\n\
    end", "  # TODO: implement this method\nend", "  lst.select! { |num| num < 0 ||\
    \ num > 0 }\n  return [nil, nil] if lst.empty?\n  [lst.max, lst.min]\nend", " \
    \ lst.select! { |x| x < 0 }\n  a = lst.max\n  lst.select! { |x| x > 0 }\n  b =\
    \ lst.min\n  [a, b]\nend", "  # TODO: implement this method\nend", "  return [nil,\
    \ nil] if lst.empty?\n  return [nil, nil] if lst.all?(&:zero?)\n  [lst.select(&:negative?).max,\
    \ lst.select(&:positive?).min]\nend", "  # Your code here\nend", "  if lst.empty?\n\
    \    [nil, nil]\n  else\n    negatives = lst.select { |num| num < 0 }\n    positives\
    \ = lst.select { |num| num > 0 }\n    [negatives.max, positives.min]\n  end\n\
    end", "  # TODO: Implement this method\nend", "  negatives = lst.select { |num|\
    \ num < 0 }\n  positives = lst.select { |num| num > 0 }\n  [negatives.max, positives.min]\n\
    end", "  a = lst.select { |x| x < 0 }.max\n  b = lst.select { |x| x > 0 }.min\n\
    \  [a, b]\nend", "  a = lst.select { |x| x < 0 }.max\n  b = lst.select { |x| x\
    \ > 0 }.min\n  [a, b]\nend", "  lst.select! { |i| i.is_a? Integer }\n  return\
    \ [nil, nil] if lst.empty?\n  lst.sort!\n  lst.select! { |i| i > 0 }\n  return\
    \ [nil, lst.first] if lst.empty?\n  lst.select! { |i| i < 0 }\n  return [lst.last,\
    \ nil] if lst.empty?\n  [lst.last, lst.first]\nend", "  # TODO: implement this\
    \ method\nend", "  # TODO: implement this method\nend", "  # TODO: implement this\
    \ method\nend", "  a = lst.select { |x| x < 0 }.max\n  b = lst.select { |x| x\
    \ > 0 }.min\n  [a, b]\nend", "  # TODO: implement this method\nend", "  # TODO:\
    \ implement this method\nend", "  # TODO: implement this method\nend", "  # TODO:\
    \ implement this method\nend", "  # TODO: implement this method\nend", "  a =\
    \ lst.select { |x| x < 0 }.max\n  b = lst.select { |x| x > 0 }.min\n  [a, b]\n\
    end", "  # your code here\nend", "  # Your code here\nend", "  # TODO: implement\
    \ this method\nend", "  # TODO: Implement this function\nend", "  a = lst.select\
    \ { |x| x < 0 }.max\n  b = lst.select { |x| x > 0 }.min\n  [a, b]\nend", "  #\
    \ TODO: Implement this method\nend", "  # TODO: implement this method\nend", " \
    \ # your code here\nend", "  # TODO: Implement this method\nend", "  return [nil,\
    \ nil] if lst.empty?\n  return [nil, nil] if lst.all?(&:zero?)\n  lst.partition(&:negative?).map\
    \ { |l| l.empty? ? nil : l.max }\nend", "  # TODO: implement this method\nend",
  "  # TODO: implement this function\nend", "  # TODO: implement this method\nend",
  "  # TODO: implement this method\nend", "  # your code here\nend", "  # TODO: Implement\
    \ this function\nend", "  lst.select! { |x| x < 0 || x > 0 }\n  return [nil, nil]\
    \ if lst.empty?\n  [lst.max, lst.min]\nend", "  lst.select { |x| x < 0 }.max,\
    \ lst.select { |x| x > 0 }.min\nend", "  lst.select { |x| x < 0 }.max || nil\n\
    \  lst.select { |x| x > 0 }.min || nil\nend", "  # TODO: implement this method\n\
    end", "  # TODO: implement this method\nend", "  # your code here\nend", "  #\
    \ TODO: implement this method\nend", "  # TODO: implement this method\nend", " \
    \ lst.select! { |x| x < 0 }\n  a = lst.max\n  lst.select! { |x| x > 0 }\n  b =\
    \ lst.min\n  [a, b]\nend", "  # TODO: implement this method\nend", "  # TODO:\
    \ Implement this method\nend", "  # TODO: Implement this method\nend", "  # TODO:\
    \ implement this method\nend", "  lst.sort!\n  if lst.empty?\n    [nil, nil]\n\
    \  elsif lst.first > 0\n    [nil, lst.first]\n  elsif lst.last < 0\n    [lst.last,\
    \ nil]\n  else\n    [lst.first, lst.last]\n  end\nend", "  # TODO: implement this\
    \ method\nend", "  # TODO: implement this method\nend", "  # TODO: Implement this\
    \ method\nend", "  # TODO: implement this method\nend", "  # Your code here\n\
    end", "  # TODO: implement this method\nend", "  # TODO: implement this method\n\
    end", "  if lst.empty?\n    [nil, nil]\n  else\n    negatives = lst.select { |num|\
    \ num < 0 }\n    positives = lst.select { |num| num > 0 }\n    [negatives.max,\
    \ positives.min]\n  end\nend", "  # your code here\nend", "  # TODO: implement\
    \ this function\nend", "  lst.select! { |x| x.is_a? Integer }\n  lst.select! {\
    \ |x| x != 0 }\n  if lst.empty?\n    return [nil, nil]\n  end\n  lst.sort!\n \
    \ if lst.first > 0\n    return [nil, lst.first]\n  elsif lst.last < 0\n    return\
    \ [lst.last, nil]\n  else\n    return [lst.last, lst.first]\n  end\nend", "  lst.sort!\n\
    \  return [nil, nil] if lst.empty?\n  return [nil, nil] if lst.all? { |num| num\
    \ == 0 }\n  return [nil, lst.first] if lst.first > 0\n  return [lst.last, nil]\
    \ if lst.last < 0\n  [lst.last, lst.first]\nend", "  lst.select! { |x| x.is_a?(Integer)\
    \ }\n  lst.select! { |x| x != 0 }\n  if lst.empty?\n    [nil, nil]\n  else\n \
    \   [lst.select { |x| x < 0 }.max, lst.select { |x| x > 0 }.min]\n  end\nend",
  "  lst.select! { |num| num.is_a?(Integer) }\n  lst.sort!\n  lst.delete_if { |num|\
    \ num == 0 }\n  if lst.empty?\n    [nil, nil]\n  elsif lst.length == 1\n    [nil,\
    \ lst[0]]\n  else\n    [lst[0], lst[-1]]\n  end\nend", "  # TODO: implement this\
    \ method\nend", "  # TODO: Implement this method\nend", "  # TODO: Implement this\
    \ method\nend", "  # TODO: implement this method\nend", "  # TODO: implement this\
    \ method\nend", "  # your code here\nend", "  # TODO: implement this method\n\
    end", "  # TODO: implement this method\nend", "  a = lst.select { |x| x < 0 }.max\n\
    \  b = lst.select { |x| x > 0 }.min\n  [a, b]\nend", "  lst.select { |x| x < 0\
    \ }.max || nil\n  lst.select { |x| x > 0 }.min || nil\nend", "  # TODO: implement\
    \ this method\nend", "  # TODO: Implement this method\nend", "  # TODO: implement\
    \ this method\nend", "  negatives = lst.select { |n| n < 0 }\n  positives = lst.select\
    \ { |n| n > 0 }\n  [negatives.max, positives.min]\nend", "  return [nil, nil]\
    \ if lst.empty?\n  return [nil, nil] if lst.all? { |x| x == 0 }\n  return [nil,\
    \ nil] if lst.all? { |x| x > 0 }\n  return [nil, nil] if lst.all? { |x| x < 0\
    \ }\n  max_negative = lst.select { |x| x < 0 }.max\n  min_positive = lst.select\
    \ { |x| x > 0 }.min\n  [max_negative, min_positive]\nend", "  # TODO: implement\
    \ this method\nend", "  max_neg = lst.select { |n| n < 0 }.max\n  min_pos = lst.select\
    \ { |n| n > 0 }.min\n  [max_neg, min_pos]\nend", "  # TODO: Implement this method\n\
    end", "  # TODO: implement this function\nend", "  # TODO: implement this method\n\
    end", "  a = lst.select { |x| x < 0 }.max\n  b = lst.select { |x| x > 0 }.min\n\
    \  [a, b]\nend", "  # TODO: implement this method\nend", "  negatives = lst.select\
    \ { |num| num < 0 }\n  positives = lst.select { |num| num > 0 }\n  [negatives.max,\
    \ positives.min]\nend", "  # Your code here\nend", "  # TODO: Implement this method\n\
    end", "  # TODO: implement this method\nend", "  # TODO: implement this method\n\
    end", "  # TODO: implement this method\nend", "  return [nil, nil] if lst.empty?\n\
    \  return [nil, nil] if lst.all?(&:zero?)\n  [lst.select(&:negative?).max, lst.select(&:positive?).min]\n\
    end", "  # TODO: implement this method\nend", "  # TODO: implement this method\n\
    end", "  lst.sort!\n  a = nil\n  b = nil\n  lst.each do |x|\n    if x > 0\n  \
    \    b = x\n      break\n    end\n  end\n  lst.reverse.each do |x|\n    if x <\
    \ 0\n      a = x\n      break\n    end\n  end\n  [a, b]\nend", "  # TODO: implement\
    \ this method\nend", "  # TODO: implement this method\nend", "  # TODO: implement\
    \ this method\nend", "  negatives = lst.select { |num| num < 0 }\n  positives\
    \ = lst.select { |num| num > 0 }\n  [negatives.max, positives.min]\nend", "  #\
    \ TODO: implement this method\nend", "  a = lst.select { |x| x < 0 }.max\n  b\
    \ = lst.select { |x| x > 0 }.min\n  [a, b]\nend", "  return [nil, nil] if lst.empty?\n\
    \  return [nil, nil] if lst.all?(&:zero?)\n  lst.sort!\n  [lst.first, lst.last]\n\
    end", "  # TODO: implement this method\nend", "  # TODO: implement this method\n\
    end", "  # TODO: implement this method\nend", "  neg = lst.select { |n| n < 0\
    \ }.max\n  pos = lst.select { |n| n > 0 }.min\n  [neg, pos]\nend", "  # TODO:\
    \ Implement this method\nend", "  # TODO: implement this method\nend", "  # your\
    \ code here\nend", "  # TODO: implement this method\nend", "  return [nil, nil]\
    \ if lst.empty?\n  return [nil, nil] if lst.all? { |num| num == 0 }\n  return\
    \ [nil, nil] if lst.all? { |num| num > 0 }\n  return [nil, nil] if lst.all? {\
    \ |num| num < 0 }", "  a, b = nil, nil\n  lst.each do |x|\n    if x < 0\n    \
    \  a = x if a.nil? || x > a\n    elsif x > 0\n      b = x if b.nil? || x < b\n\
    \    end\n  end\n  [a, b]\nend", "  # TODO: implement this method\nend", "  #\
    \ TODO: implement this method\nend", "  # TODO: implement this method\nend", " \
    \ # TODO: implement this method\nend", "  # your code here\nend", "  # TODO: Implement\
    \ this method\nend", "  # TODO: implement this method\nend", "  a = lst.select\
    \ { |x| x < 0 }.max\n  b = lst.select { |x| x > 0 }.min\n  [a, b]\nend", "  #\
    \ TODO: implement this method\nend", "  # TODO: Implement this function\nend",
  "  # your code here\nend", "  a = lst.select { |x| x < 0 }.max\n  b = lst.select\
    \ { |x| x > 0 }.min\n  [a, b]\nend", "  negatives = lst.select { |n| n < 0 }\n\
    \  positives = lst.select { |n| n > 0 }\n  [negatives.max, positives.min]\nend",
  "  # TODO: implement this method\nend", "  # TODO: implement this method\nend",
  "  lst.select! { |n| n.is_a? Integer }\n  lst.select! { |n| n != 0 }\n  if lst.empty?\n\
    \    [nil, nil]\n  else\n    [lst.select { |n| n < 0 }.max, lst.select { |n| n\
    \ > 0 }.min]\n  end\nend", "  # TODO: implement this method\nend", "  # TODO:\
    \ implement this method\nend", "  a = lst.select { |x| x < 0 }.max\n  b = lst.select\
    \ { |x| x > 0 }.min\n  [a, b]\nend", "  # TODO: Implement this method\nend", " \
    \ # TODO: implement this method\nend", "  # TODO: implement this method\nend",
  "  # Your code goes here\nend", "  positive = lst.select { |x| x > 0 }.min\n  negative\
    \ = lst.select { |x| x < 0 }.max\n  [negative, positive]\nend", "  # TODO: implement\
    \ this method\nend", "  # TODO: implement this method\nend", "  return [nil, nil]\
    \ if lst.empty?\n  return [nil, nil] if lst.all?(&:zero?)\n  [lst.select(&:negative?).max,\
    \ lst.select(&:positive?).min]\nend", "  # TODO: implement this method\nend",
  "  # TODO: implement this method\nend", "  # your code here\nend", "  # TODO: implement\
    \ this method\nend", "  a = lst.select { |i| i < 0 }.max\n  b = lst.select { |i|\
    \ i > 0 }.min\n  [a, b]\nend", "  max_neg = nil\n  min_pos = nil\n  lst.each do\
    \ |num|\n    if num < 0\n      max_neg = num if max_neg.nil? || num > max_neg\n\
    \    elsif num > 0\n      min_pos = num if min_pos.nil? || num < min_pos\n   \
    \ end\n  end\n  [max_neg, min_pos]\nend", "  # TODO: implement this method\nend",
  "  # TODO: implement this function\nend", "  # TODO: implement this method\nend",
  "  # TODO: implement this method\nend", "  # Your code here\nend", "  pos = lst.select\
    \ { |x| x > 0 }.min\n  neg = lst.select { |x| x < 0 }.max\n  [neg, pos]\nend",
  "  # TODO: implement this method\nend", "  # TODO: implement this method\nend",
  "  # TODO: Implement this method\nend", "  # TODO: implement this method\nend",
  "  lst.partition { |x| x < 0 }.map { |x| x.empty? ? nil : x.max }\nend", "  # your\
    \ code here\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
