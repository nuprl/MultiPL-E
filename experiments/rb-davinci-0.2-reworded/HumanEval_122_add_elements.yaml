name: HumanEval_122_add_elements
language: rb
prompt: "# Given a non-empty array of integers arr and an integer k, return\n# the\
  \ sum of the elements with at most two digits from the first k elements of arr.\n\
  # Example:\n# >>> add_elements.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n# 24\n\
  # Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\ndef add_elements(arr,\
  \ k)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
  \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
  \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
  \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
  \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5,\
  \ 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
completions: ["  arr.select { |num| num.to_s.length <= 2 }.first(k).sum\nend", " \
    \ arr.take(k).select { |num| num < 100 }.sum\nend", "  arr.first(k).select { |num|\
    \ num.to_s.length <= 2 }.sum\nend", "  arr.first(k).select { |num| num.to_s.length\
    \ <= 2 }.sum\nend", "  arr.select { |num| num < 100 }.first(k).sum\nend", "  arr.select\
    \ { |num| num < 100 }.first(k).sum\nend", "  # Write your code here\nend", " \
    \ sum = 0\n  arr.each do |num|\n    sum += num if num < 100\n    break if k ==\
    \ 0\n    k -= 1\n  end\n  sum\nend", "  arr.take(k).select { |e| e < 100 }.reduce(:+)\n\
    end", "  # your code here\nend", "  arr.take(k).select { |num| num.to_s.length\
    \ <= 2 }.sum\nend", "  arr.take(k).select { |n| n < 100 }.reduce(:+)\nend", " \
    \ arr.take(k).select { |num| num < 100 }.reduce(:+)\nend", "  # Your code here\n\
    end", "  # your code here\nend", "  arr.take(k).select { |num| num.digits.size\
    \ <= 2 }.sum\nend", "  arr.map { |x| x.to_s.length <= 2 ? x : 0 }.sum\nend", " \
    \ arr.first(k).select { |num| num.to_s.length <= 2 }.sum\nend", "  sum = 0\n \
    \ arr.each do |num|\n    if num.to_s.length <= 2\n      sum += num\n    end\n\
    \  end\n  sum\nend", "  arr.take(k).select { |num| num < 100 }.reduce(:+)\nend",
  "  sum = 0\n  arr.each do |num|\n    if num.to_s.length <= 2\n      sum += num\n\
    \    end\n  end\n  sum\nend", "  arr.take(k).select { |x| x < 100 }.sum\nend",
  "  arr.take(k).select { |num| num < 100 }.reduce(:+)\nend", "  # your code here\n\
    end", "  arr.take(k).select { |n| n < 100 }.sum\nend", "  arr.take(k).select {\
    \ |num| num < 100 }.reduce(:+)\nend", "  arr.select { |num| num.digits.size <=\
    \ 2 }.first(k).sum\nend", "  # your code here\nend", "  arr[0..k-1].select { |x|\
    \ x.to_s.length <= 2 }.sum\nend", "  arr.take(k).select { |num| num.to_s.length\
    \ <= 2 }.reduce(:+)\nend", "  arr.take(k).select { |num| num < 100 }.sum\nend",
  "  arr.take(k).select { |e| e < 100 }.reduce(:+)\nend", "  arr.take(k).select {\
    \ |num| num < 100 }.sum\nend", "  sum = 0\n  arr.each do |num|\n    sum += num\
    \ if num < 100\n    break if sum >= k\n  end\n  sum\nend", "  arr.take(k).select\
    \ { |num| num < 100 }.sum\nend", "  arr.take(k).select { |num| num < 100 }.reduce(:+)\n\
    end", "  arr.take(k).select { |num| num < 100 }.sum\nend", "  arr.take(k).select\
    \ { |num| num < 100 }.sum\nend", "  arr.slice(0, k).select { |num| num.to_s.length\
    \ <= 2 }.sum\nend", "  arr.take(k).select { |e| e < 100 }.sum\nend", "  arr.take(k).select\
    \ { |num| num < 100 }.reduce(:+)\nend", "  arr.select { |num| num < 100 }.first(k).sum\n\
    end", "  arr.take(k).select { |num| num.to_s.length <= 2 }.sum\nend", "  arr.take(k).select\
    \ { |num| num.to_s.length <= 2 }.sum\nend", "  arr.take(k).select { |num| num\
    \ < 100 }.sum\nend", "  arr.take(k).select { |num| num < 100 }.sum\nend", "  sum\
    \ = 0\n  arr.each_with_index do |num, index|\n    break if index == k\n    sum\
    \ += num if num < 100\n  end\n  sum\nend", "  # your code here\nend", "  arr[0...k].select\
    \ { |n| n < 100 }.reduce(:+)\nend", "  arr.select { |num| num.to_s.length <= 2\
    \ }.first(k).sum\nend", "  arr.take(k).select { |num| num < 100 }.sum\nend", " \
    \ arr.take(k).select { |num| num < 100 }.sum\nend", "  arr.slice(0, k).select\
    \ { |num| num < 100 }.reduce(:+)\nend", "  arr.take(k).select { |num| num < 100\
    \ }.reduce(:+)\nend", "  arr.take(k).select { |e| e < 100 }.sum\nend", "  arr.select\
    \ { |num| num < 100 }.take(k).sum\nend", "  arr.take(k).select { |num| num < 100\
    \ }.reduce(:+)\nend", "  arr.select { |num| num < 100 }.first(k).sum\nend", " \
    \ arr.take(k).select { |num| num < 100 }.sum\nend", "  arr.take(k).select { |num|\
    \ num < 100 }.reduce(:+)\nend", "  arr.take(k).select { |num| num.to_s.length\
    \ <= 2 }.sum\nend", "  # TODO: implement me\nend", "  arr.select { |x| x.to_s.length\
    \ <= 2 }.first(k).sum\nend", "  sum = 0\n  arr.each_with_index do |num, index|\n\
    \    break if index == k\n    sum += num if num.to_s.length <= 2\n  end\n  sum\n\
    end", "  arr.take(k).select { |n| n < 100 }.sum\nend", "  arr.take(k).select {\
    \ |num| num < 100 }.sum\nend", "  arr.take(k).select { |num| num < 100 }.sum\n\
    end", "  arr.take(k).select { |num| num < 100 }.reduce(:+)\nend", "  arr.take(k).select\
    \ { |num| num < 100 }.sum\nend", "  # Your code here\nend", "  arr.take(k).select\
    \ { |e| e < 100 }.sum\nend", "  arr.take(k).select { |num| num < 100 }.sum\nend",
  "  arr[0..k-1].select { |x| x < 100 }.reduce(:+)\nend", "  arr.select { |num| num\
    \ < 100 }.first(k).sum\nend", "  arr.take(k).select { |num| num < 100 }.reduce(:+)\n\
    end", "  arr.take(k).select { |num| num < 100 }.sum\nend", "  arr.take(k).select\
    \ { |num| num < 100 }.sum\nend", "  arr.take(k).select { |num| num < 100 }.reduce(:+)\n\
    end", "  # your code here\nend", "  arr.take(k).select { |num| num < 100 }.sum\n\
    end", "  arr.take(k).select { |num| num.digits.size <= 2 }.sum\nend", "  arr.take(k).select\
    \ { |num| num < 100 }.sum\nend", "  # TODO: Implement\nend", "  arr.take(k).select\
    \ { |n| n < 100 }.sum\nend", "  arr.take(k).select { |num| num < 100 }.sum\nend",
  "  arr.take(k).select { |num| num < 100 }.sum\nend", "  arr.slice(0, k).select {\
    \ |num| num < 100 }.sum\nend", "  arr.take(k).select { |num| num < 100 }.sum\n\
    end", "  arr[0...k].select { |num| num < 100 }.reduce(:+)\nend", "  arr.take(k).select\
    \ { |num| num.digits.length <= 2 }.sum\nend", "  arr.take(k).select { |num| num\
    \ < 100 }.sum\nend", "  arr.select { |num| num < 100 }.first(k).sum\nend", " \
    \ arr.take(k).select { |num| num < 100 }.sum\nend", "  arr[0...k].select { |num|\
    \ num < 100 }.reduce(:+)\nend", "  arr.first(k).select { |num| num.to_s.length\
    \ <= 2 }.sum\nend", "  # Your code here\nend", "  arr.take(k).select { |num| num\
    \ < 100 }.sum\nend", "  arr.take(k).select { |num| num.digits.size <= 2 }.sum\n\
    end", "  arr.select { |num| num.to_s.length <= 2 }.first(k).sum\nend", "  arr.first(k).select\
    \ { |num| num < 100 }.reduce(:+)\nend", "  arr.take(k).select { |num| num < 100\
    \ }.sum\nend", "  arr.select { |x| x.to_s.length <= 2 }.first(k).sum\nend", " \
    \ arr.take(k).select { |num| num < 100 }.sum\nend", "  # TODO: Implement this\
    \ method\nend", "  arr.take(k).select { |num| num < 100 }.reduce(:+)\nend", " \
    \ arr.take(k).select { |num| num < 100 }.sum\nend", "  sum = 0\n  arr.each do\
    \ |num|\n    if num.to_s.length <= 2\n      sum += num\n    end\n  end\n  sum\n\
    end", "  arr.take(k).select { |num| num < 100 }.sum\nend", "  arr.take(k).select\
    \ { |num| num < 100 }.sum\nend", "  arr.take(k).select { |num| num < 100 }.sum\n\
    end", "  arr.take(k).select { |num| num.digits.size <= 2 }.sum\nend", "  sum =\
    \ 0\n  arr.each do |element|\n    if element.to_s.length <= 2\n      sum += element\n\
    \    end\n  end\n  sum\nend", "  arr.take(k).select { |n| n < 100 }.sum\nend",
  "  arr.take(k).select { |num| num < 100 }.sum\nend", "  arr.take(k).select { |num|\
    \ num < 100 }.sum\nend", "  arr.select { |e| e.to_s.length <= 2 }.first(k).sum\n\
    end", "  arr[0...k].select { |num| num < 100 }.sum\nend", "  arr.take(k).select\
    \ { |n| n < 100 }.reduce(:+)\nend", "  arr.take(k).select { |n| n.to_s.length\
    \ <= 2 }.sum\nend", "  arr.select { |num| num.to_s.length <= 2 }.first(k).sum\n\
    end", "  arr.take(k).select { |num| num.to_s.length <= 2 }.reduce(:+)\nend", " \
    \ arr.take(k).select { |num| num < 100 }.sum\nend", "  arr.select { |num| num\
    \ < 100 }.first(k).sum\nend", "  arr.take(k).select { |n| n < 100 }.reduce(:+)\n\
    end", "  arr.take(k).select { |num| num < 100 }.sum\nend", "  arr.take(k).select\
    \ { |n| n < 100 }.reduce(:+)\nend", "  arr.take(k).select { |num| num < 100 }.sum\n\
    end", "  arr[0...k].select { |num| num < 100 }.sum\nend", "  arr.first(k).select\
    \ { |num| num < 100 }.sum\nend", "  arr.take(k).select { |num| num < 100 }.reduce(:+)\n\
    end", "  arr.select { |num| num.to_s.length <= 2 }.first(k).sum\nend", "  arr.take(k).select\
    \ { |num| num.digits.size <= 2 }.sum\nend", "  arr.take(k).select { |num| num\
    \ < 100 }.sum\nend", "  arr.take(k).select { |n| n < 100 }.reduce(:+)\nend", " \
    \ arr.first(k).select { |num| num.digits.count <= 2 }.sum\nend", "  arr.take(k).select\
    \ { |num| num.digits.length <= 2 }.sum\nend", "  # your code here\nend", "  arr.first(k).select\
    \ { |num| num < 100 }.sum\nend", "  arr.take(k).select { |num| num < 100 }.reduce(:+)\n\
    end", "  arr.slice(0, k).select { |x| x.to_s.length <= 2 }.sum\nend", "  # your\
    \ code here\nend", "  arr[0...k].select { |n| n < 100 }.sum\nend", "  arr.take(k).select\
    \ { |num| num < 100 }.reduce(:+)\nend", "  arr.take(k).select { |num| num < 100\
    \ }.sum\nend", "  arr.take(k).select { |num| num < 100 }.reduce(:+)\nend", " \
    \ arr.take(k).select { |num| num < 100 }.sum\nend", "  # your code here\nend",
  "  sum = 0\n  arr.each do |num|\n    sum += num if num < 100\n    break if sum >=\
    \ k\n  end\n  sum\nend", "  arr.take(k).select { |num| num < 100 }.reduce(:+)\n\
    end", "  arr.take(k).select { |num| num < 100 }.sum\nend", "  arr.take(k).select\
    \ { |num| num < 100 }.reduce(:+)\nend", "  sum = 0\n  arr.each do |num|\n    sum\
    \ += num if num.to_s.length <= 2\n    break if sum >= k\n  end\n  sum\nend", " \
    \ arr.first(k).select { |num| num < 100 }.sum\nend", "  arr.take(k).select { |num|\
    \ num < 100 }.reduce(:+)\nend", "  arr.take(k).select { |num| num < 100 }.sum\n\
    end", "  arr.take(k).select { |num| num < 100 }.sum\nend", "  arr.take(k).select\
    \ { |num| num < 100 }.sum\nend", "  arr.slice(0, k).select { |num| num < 100 }.sum\n\
    end", "  # your code here\nend", "  arr.select { |num| num < 100 }.first(k).sum\n\
    end", "  sum = 0\n  arr.each do |num|\n    if num.to_s.length <= 2\n      sum\
    \ += num\n    end\n  end\n  sum\nend", "  arr.select { |num| num.to_s.length <=\
    \ 2 }.first(k).sum\nend", "  sum = 0\n  arr.each do |num|\n    if num < 100\n\
    \      sum += num\n    end\n  end\n  sum\nend", "  # your code here\nend", " \
    \ arr.take(k).select { |num| num < 100 }.reduce(:+)\nend", "  arr.take(k).select\
    \ { |num| num < 100 }.sum\nend", "  # TODO: Implement\nend", "  # Your code here\n\
    end", "  arr.take(k).select { |num| num < 100 }.reduce(:+)\nend", "  arr.first(k).select\
    \ { |num| num < 100 }.sum\nend", "  arr.take(k).select { |n| n.to_s.length <=\
    \ 2 }.sum\nend", "  # Your code here\nend", "  arr.take(k).select { |num| num\
    \ < 100 }.sum\nend", "  arr.take(k).select { |num| num < 100 }.sum\nend", "  arr[0...k].select\
    \ { |num| num < 100 }.sum\nend", "  arr.take(k).select { |num| num.to_s.length\
    \ <= 2 }.sum\nend", "  arr[0..k-1].select { |n| n < 100 }.reduce(:+)\nend", " \
    \ arr.select { |num| num < 100 }.first(k).sum\nend", "  arr[0...k].select { |x|\
    \ x.to_s.length <= 2 }.reduce(:+)\nend", "  arr[0...k].select { |num| num.to_s.length\
    \ <= 2 }.sum\nend", "  arr.slice(0, k).select { |num| num < 100 }.sum\nend", " \
    \ sum = 0\n  arr.each do |num|\n    if num < 100\n      sum += num\n    end\n\
    \  end\n  sum\nend", "  arr.take(k).select { |n| n < 100 }.reduce(:+)\nend", " \
    \ arr.take(k).select { |n| n < 100 }.reduce(:+)\nend", "  arr.take(k).select {\
    \ |num| num < 100 }.sum\nend", "  arr[0...k].select { |n| n < 100 }.sum\nend",
  "  arr.take(k).select { |n| n < 100 }.sum\nend", "  arr.take(k).select { |num| num.to_s.length\
    \ <= 2 }.sum\nend", "  arr.select { |num| num.to_s.length <= 2 }.first(k).sum\n\
    end", "  sum = 0\n  arr.each do |num|\n    if num < 100\n      sum += num\n  \
    \  end\n  end\n  sum\nend", "  # your code here\nend", "  arr.take(k).select {\
    \ |num| num < 100 }.sum\nend", "  arr[0..k-1].select { |n| n < 100 }.reduce(:+)\n\
    end", "  arr.take(k).select { |num| num < 100 }.sum\nend", "  arr.select { |num|\
    \ num < 100 }.first(k).reduce(:+)\nend", "  arr.take(k).select { |num| num < 100\
    \ }.sum\nend", "  # TODO: implement me\nend", "  arr.take(k).select { |num| num\
    \ < 100 }.sum\nend", "  arr.take(k).select { |num| num < 100 }.sum\nend", "  sum\
    \ = 0\n  arr.each do |num|\n    if num < 100\n      sum += num\n    end\n  end\n\
    \  sum\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
