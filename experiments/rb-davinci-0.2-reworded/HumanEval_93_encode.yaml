name: HumanEval_93_encode
language: rb
prompt: "# Write a function that takes a message, and encodes in such a \n# way that\
  \ it swaps case of all letters, replaces all vowels in \n# the message with the\
  \ letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
  \ \n# Assume only letters. \n# Examples:\n# >>> encode.call(\"test\")\n# \"TGST\"\
  \n# >>> encode.call(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\ndef encode(message)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
  \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"\
  ))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
  ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
  This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
  I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
completions: ["  message.split(\"\").map do |char|\n    if char.match(/[a-z]/i)\n\
    \      if char.match(/[aeiou]/i)\n        char = char.next.next\n      end\n \
    \     char.swapcase\n    else\n      char\n    end\n  end.join(\"\")\nend", " \
    \ # your code here\nend", "  message.downcase.tr('aeiou', 'cdfgjkl')\nend", " \
    \ result = \"\"\n  message.each_char do |char|\n    if char.match(/[a-z]/i)\n\
    \      if char.match(/[aeiou]/i)\n        result << (char.ord + 2).chr\n     \
    \ else\n        result << char.swapcase\n      end\n    else\n      result <<\
    \ char\n    end\n  end\n  result\nend", "  vowels = \"aeiou\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    else\n\
    \      encoded_message += char\n    end\n  end\n  encoded_message.swapcase\nend",
  "  vowels = \"aeiou\"\n  message.split(\"\").map do |letter|\n    if vowels.include?(letter.downcase)\n\
    \      index = vowels.index(letter.downcase)\n      if index == 4\n        vowels[0].upcase\n\
    \      else\n        vowels[index + 2].upcase\n      end\n    else\n      letter.swapcase\n\
    \    end\n  end.join(\"\")\nend", "  message.split(\"\").map do |letter|\n   \
    \ if letter.match(/[a-z]/i)\n      if letter.match(/[aeiou]/i)\n        letter\
    \ = letter.next.next\n      end\n      letter.swapcase\n    else\n      letter\n\
    \    end\n  end.join\nend", "  message.downcase.tr('aeiou', 'eioua')\nend", " \
    \ message.downcase.tr(\"aeiou\", \"eioua\")\nend", "  # your code here\nend",
  "  vowels = \"aeiou\"\n  new_message = \"\"\n  message.each_char do |char|\n   \
    \ if vowels.include?(char.downcase)\n      new_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    else\n      new_message += char\n    end\n  end\n  new_message.swapcase\n\
    end", "  # TODO: implement this method\nend", "  vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n  encoded_message = \"\"\n  message.each_char do |char|\n   \
    \ if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5].upcase\n    else\n      encoded_message += char.upcase\n    end\n\
    \  end\n  encoded_message\nend", "  message.downcase!\n  vowels = \"aeiou\"\n\
    \  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char)\n\
    \      encoded_message += vowels[(vowels.index(char) + 2) % 5]\n    else\n   \
    \   encoded_message += char\n    end\n  end\n  encoded_message.upcase\nend", " \
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5].upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  vowels = \"aeiou\"\n  message.downcase.chars.map\
    \ do |char|\n    if vowels.include?(char)\n      index = vowels.index(char)\n\
    \      vowels[(index + 2) % 5]\n    else\n      char.swapcase\n    end\n  end.join\n\
    end", "  # your code here\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n  encoded_message = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    else\n      encoded_message += char\n    end\n  end\n  encoded_message.swapcase\n\
    end", "  message.chars.map do |char|\n    if char =~ /[aeiou]/i\n      char =\
    \ char.next.next\n    else\n      char\n    end\n  end.join\nend", "  message.split(\"\
    \").map do |char|\n    if char.match(/[aeiou]/i)\n      if char.match(/[aeiou]/i).to_s\
    \ == \"u\"\n        char = \"a\"\n      else\n        char = char.next.next\n\
    \      end\n    elsif char.match(/[A-Z]/)\n      char = char.downcase\n    elsif\
    \ char.match(/[a-z]/)\n      char = char.upcase\n    end\n  end.join(\"\")\nend",
  "  message.downcase.tr(\"aeiou\", \"eioua\")\nend", "  vowels = ['a', 'e', 'i',\
    \ 'o', 'u']\n  message.downcase!\n  message.each_char.with_index do |char, index|\n\
    \    if vowels.include?(char)\n      message[index] = vowels[(vowels.index(char)\
    \ + 2) % 5]\n    end\n  end\n  message.upcase!\nend", "  message.downcase.tr(\"\
    aeiou\", \"eioua\")\nend", "  message.downcase.tr('aeiou', 'cdfghjklmnpqrstvwxyzab')\n\
    end", "  message.chars.map do |char|\n    if char.match(/[aeiou]/i)\n      char\
    \ = char.ord + 2\n      char = char - 26 if char > 122\n      char = char.chr\n\
    \    else\n      char.swapcase\n    end\n  end.join\nend", "  message.downcase.tr('a-z',\
    \ 'cdefghijklmnopqrstuvwxyzab')\nend", "  message.upcase.gsub(/[AEIOU]/, 'A' =>\
    \ 'C', 'E' => 'G', 'I' => 'K', 'O' => 'S', 'U' => 'Y')\nend", "  message.downcase.tr(\"\
    aeiou\", \"eioua\")\nend", "  # TODO: Implement this function\nend", "  # your\
    \ code here\nend", "  message.chars.map do |char|\n    if char =~ /[aeiou]/i\n\
    \      char.next.next\n    else\n      char.swapcase\n    end\n  end.join\nend",
  "  # TODO: implement this method\nend", "  vowels = \"aeiou\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end", "  # your code here\nend", "  message.downcase.tr('aeiou', 'cdfghjklmnpqrstvwxyzab')\n\
    end", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\
    \n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n     \
    \ encoded_message += encode_vowel(char)\n    else\n      encoded_message += encode_consonant(char)\n\
    \    end\n  end\n  encoded_message\nend", "  message.downcase.tr('aeiou', 'cdfghjklmnpqrstvwxyzab')\n\
    end", "  message.downcase.tr(\"aeiou\", \"eioau\")\nend", "  vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n  new_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      new_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      new_message += char.downcase\n\
    \    else\n      new_message += char.upcase\n    end\n  end\n  new_message\nend",
  "  message.chars.map do |char|\n    if char =~ /[aeiou]/i\n      char.next.next\n\
    \    else\n      char.swapcase\n    end\n  end.join\nend", "  vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5].upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  message.downcase.tr(\"aeiou\", \"eioua\")\n\
    end", "  message.downcase.tr('aeiou', 'eioua')\nend", "  message.downcase.tr(\"\
    aeiou\", \"eioau\")\nend", "  message.downcase.tr('a-z', 'c-za-b')\nend", "  message.split(\"\
    \").map do |letter|\n    if letter.match(/[aeiou]/i)\n      letter = letter.next.next\n\
    \    else\n      letter = letter.swapcase\n    end\n  end.join\nend", "  vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      encoded_message += char.downcase\n\
    \    else\n      encoded_message += char.upcase\n    end\n  end\n  encoded_message\n\
    end", "  message.downcase.tr('aeiou', 'eioua')\nend", "  vowels = \"aeiou\"\n\
    \  message.split(\"\").map do |letter|\n    if vowels.include?(letter.downcase)\n\
    \      index = vowels.index(letter.downcase)\n      if index == 4\n        vowels[0].upcase\n\
    \      else\n        vowels[index + 2].upcase\n      end\n    else\n      letter.swapcase\n\
    \    end\n  end.join(\"\")\nend", "  message.downcase.tr(\"aeiou\", \"eioau\"\
    )\nend", "  message = message.downcase\n  vowels = \"aeiou\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char)\n      encoded_message\
    \ += vowels[(vowels.index(char) + 2) % 5]\n    else\n      encoded_message +=\
    \ char\n    end\n  end\n  encoded_message.upcase\nend", "  message.downcase.tr('aeiou',\
    \ 'eioua')\nend", "  message.downcase.tr('aeiou', 'eioua')\nend", "  message.gsub(/[aeiou]/i)\
    \ { |match| match.next.next }.swapcase\nend", "  vowels = \"aeiou\"\n  message.downcase.each_char.map\
    \ do |char|\n    if vowels.include?(char)\n      vowels[(vowels.index(char) +\
    \ 2) % 5]\n    else\n      char\n    end\n  end.join.upcase\nend", "  vowels =\
    \ \"aeiou\"\n  message.split(\"\").map { |char|\n    if vowels.include?(char.downcase)\n\
    \      index = vowels.index(char.downcase)\n      char = vowels[(index + 2) %\
    \ 5]\n    end\n    char == char.upcase ? char.downcase : char.upcase\n  }.join(\"\
    \")\nend", "  message.downcase.tr(\"aeiou\", \"eioau\")\nend", "  # TODO: Your\
    \ code here\nend", "  message.downcase.tr('aeiou', 'cdfghjklmnpqrstvwxyzab')\n\
    end", "  message.downcase.tr(\"aeiou\", \"eioua\")\nend", "  vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5].upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  message.downcase.tr('aeiou', 'cdfghjklmnpqrstvwxyzab')\n\
    end", "  message.downcase.tr('aeiou', 'cdfghj')\nend", "  # TODO\nend", "  message.downcase.tr('aeiou',\
    \ 'cdfghjklmnpqrstvwxyzab')\nend", "  vowels = %w(a e i o u)\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message << vowels[(vowels.index(char.downcase) + 2) % 5].upcase\n\
    \    else\n      encoded_message << char.swapcase\n    end\n  end\n  encoded_message\n\
    end", "  message.downcase.tr('aeiou', 'cdfghjklmnpqrstvwxyzab')\nend", "  vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5].upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  message = message.split(\"\")\n  message.map!\
    \ do |letter|\n    if letter == letter.upcase\n      letter = letter.downcase\n\
    \    else\n      letter = letter.upcase\n    end\n  end\n  message.map! do |letter|\n\
    \    if letter == \"a\"\n      letter = \"c\"\n    elsif letter == \"e\"\n   \
    \   letter = \"g\"\n    elsif letter == \"i\"\n      letter = \"k\"\n    elsif\
    \ letter == \"o\"\n      letter = \"q\"\n    elsif letter == \"u\"\n      letter\
    \ = \"y\"\n    else\n      letter\n    end\n  end\n  message.join(\"\")\nend",
  "  message.downcase.tr('aeiou', 'eioua')\nend", "  message.downcase.tr(\"aeiou\"\
    , \"eioua\")\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    else\n      encoded_message += char\n    end\n  end\n  encoded_message.upcase\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    else\n      encoded_message += char\n    end\n  end\n  encoded_message.swapcase\n\
    end", "  # your code here\nend", "  message.downcase.tr(\"aeiou\", \"eioau\")\n\
    end", "  message.downcase.tr(\"aeiou\", \"eioua\")\nend", "  message.split(\"\"\
    ).map do |letter|\n    if letter.match(/[a-z]/i)\n      if letter.match(/[aeiou]/i)\n\
    \        letter.next.next\n      else\n        letter.next\n      end\n    else\n\
    \      letter\n    end\n  end.join(\"\")\nend", "  message.split('').map do |char|\n\
    \    if char.match(/[a-z]/i)\n      if char.match(/[aeiou]/i)\n        char =\
    \ char.next.next\n      else\n        char = char.next\n      end\n    end\n \
    \   char.swapcase\n  end.join\nend", "  vowels = \"aeiou\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    else\n\
    \      encoded_message += char\n    end\n  end\n  encoded_message.swapcase\nend",
  "  encoded_message = \"\"\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (char.ord\
    \ + 2).chr\n    else\n      encoded_message += char\n    end\n  end\n  encoded_message.swapcase\n\
    end", "  # Your code here\nend", "\talphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \tvowels = \"aeiou\"\n\tmessage.each_char do |char|\n\t\tif vowels.include?(char)\n\
    \t\t\tindex = alphabet.index(char)\n\t\t\tmessage[message.index(char)] = alphabet[index\
    \ + 2]\n\t\telsif alphabet.include?(char)\n\t\t\tindex = alphabet.index(char)\n\
    \t\t\tif index == 25\n\t\t\t\tmessage[message.index(char)] = alphabet[0]\n\t\t\
    \telse\n\t\t\t\tmessage[message.index(char)] = alphabet[index + 1]\n\t\t\tend\n\
    \t\tend\n\tend\n\tmessage.swapcase\nend", "  vowels = \"aeiou\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += (vowels[(vowels.index(char.downcase) + 2) % 5]).upcase\n\
    \    else\n      encoded_message += char.swapcase\n    end\n  end\n  encoded_message\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    else\n      encoded_message += char\n    end\n  end\n  encoded_message.swapcase\n\
    end", "  vowels = \"aeiou\"\n  result = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      result += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      result += char.swapcase\n    end\n  end\n\
    \  result\nend", "  message.downcase.tr(\"aeiou\", \"eioua\")\nend", "  message.downcase.gsub(/[aeiou]/)\
    \ { |vowel| (vowel.ord + 2).chr }.upcase\nend", "  message.downcase.gsub(/[aeiou]/)\
    \ { |vowel| vowel.next.next }.upcase\nend", "  # your code here\nend", "  vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5].upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  message.split('').map do |letter|\n    if\
    \ letter.match(/[aeiou]/i)\n      letter = letter.next.next\n    else\n      letter\n\
    \    end\n  end.join('')\nend", "  message.downcase.gsub(/[aeiou]/) { |vowel|\
    \ (vowel.ord + 2).chr }.upcase\nend", "  message.downcase.tr('aeiou', 'eioau')\n\
    end", "  # TODO: implement this method\nend", "  alphabet = ('a'..'z').to_a\n\
    \  vowels = %w(a e i o u)\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message << alphabet[(alphabet.index(char.downcase)\
    \ + 2) % 26]\n    else\n      encoded_message << char\n    end\n  end\n  encoded_message.swapcase\n\
    end", "  vowels = \"aeiou\"\n  message.downcase.each_char.map do |char|\n    if\
    \ vowels.include?(char)\n      vowels[(vowels.index(char) + 2) % 5]\n    else\n\
    \      char\n    end\n  end.join.upcase\nend", "  message.split(\"\").map do |char|\n\
    \    if char.match(/[aeiou]/i)\n      char = char.next.next\n    else\n      char\
    \ = char.swapcase\n    end\n  end.join\nend", "  # TODO: Implement this method.\n\
    end", "  # TODO: Implement this method\nend", "  # your code here\nend", "  vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  message.downcase.chars.map do |char|\n\
    \    if vowels.include?(char)\n      vowels[(vowels.index(char) + 2) % 5]\n  \
    \  else\n      char.upcase\n    end\n  end.join\nend", "  message.split('').map\
    \ do |letter|\n    if letter.match(/[aeiou]/i)\n      if letter.match(/[aeiou]/i).to_s\
    \ == 'u'\n        letter = 'a'\n      else\n        letter = letter.next.next\n\
    \      end\n    end\n    letter.swapcase\n  end.join\nend", "\tvowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n\tencoded_message = \"\"\n\tmessage.each_char do\
    \ |char|\n\t\tif vowels.include?(char.downcase)\n\t\t\tif char.downcase == \"\
    u\"\n\t\t\t\tencoded_message += \"a\"\n\t\t\telse\n\t\t\t\tencoded_message +=\
    \ vowels[vowels.index(char.downcase) + 1]\n\t\t\tend\n\t\telsif char == char.upcase\n\
    \t\t\tencoded_message += char.downcase\n\t\telse\n\t\t\tencoded_message += char.upcase\n\
    \t\tend\n\tend\n\tencoded_message\nend", "  # TODO: your code here\nend", "  vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += encode_vowel(char)\n\
    \    else\n      encoded_message += encode_consonant(char)\n    end\n  end\n \
    \ encoded_message\nend", "  # TODO: Implement this method\nend", "  vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5].upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  vowels = %w(a e i o u)\n  message.downcase.chars.map\
    \ do |char|\n    if vowels.include?(char)\n      vowels[(vowels.index(char) +\
    \ 2) % 5]\n    else\n      char.upcase\n    end\n  end.join\nend", "  vowels =\
    \ \"aeiou\"\n  message.downcase.chars.map do |char|\n    if vowels.include?(char)\n\
    \      index = vowels.index(char)\n      vowels[(index + 2) % 5]\n    else\n \
    \     char\n    end\n  end.join.upcase\nend", "  message.upcase.tr(\"AEIOU\",\
    \ \"EIOUA\")\nend", "  message.downcase.tr(\"aeiou\", \"eioau\")\nend", "  message.chars.map\
    \ do |char|\n    if char.match(/[aeiou]/i)\n      if char.match(/[aeiou]/i).to_s\
    \ == \"u\"\n        char = \"a\"\n      else\n        char = char.next.next\n\
    \      end\n    else\n      char\n    end\n  end.join.swapcase\nend", "  vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n  message.downcase.split('').map do |char|\n  \
    \  if vowels.include?(char)\n      vowels[(vowels.index(char) + 2) % 5]\n    else\n\
    \      char\n    end\n  end.join('').upcase\nend", "  vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  message.downcase.tr('aeiou', 'cdfghjklmnpqrstvwxyzab')\n\
    end", "  # your code here\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\
    \"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n   \
    \   encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    else\n\
    \      encoded_message += char\n    end\n  end\n  encoded_message.swapcase\nend",
  "  message.chars.map { |char| encode_char(char) }.join\nend", "  vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n  alphabet = (\"a\"..\"z\").to_a\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message << alphabet[alphabet.index(char.downcase) + 2]\n    else\n\
    \      encoded_message << char\n    end\n  end\n  encoded_message.swapcase\nend",
  "  message.chars.map do |char|\n    if char =~ /[a-z]/\n      char.upcase!\n   \
    \   char.next!\n      char.next!\n      char.next!\n    elsif char =~ /[A-Z]/\n\
    \      char.downcase!\n      char.next!\n      char.next!\n      char.next!\n\
    \    else\n      char\n    end\n  end.join\nend", "  message.downcase.tr('aeiou',\
    \ 'eioua')\nend", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  message.split('').map\
    \ do |letter|\n    if vowels.include?(letter.downcase)\n      index = vowels.index(letter.downcase)\n\
    \      if index == 4\n        letter.downcase == letter ? 'a' : 'A'\n      else\n\
    \        letter.downcase == letter ? vowels[index + 2] : vowels[index + 2].upcase\n\
    \      end\n    else\n      letter.downcase == letter ? letter.upcase : letter.downcase\n\
    \    end\n  end.join('')\nend", "  vowels = \"aeiou\"\n  encoded_message = \"\"\
    \n  message.each_char do |letter|\n    if vowels.include?(letter.downcase)\n \
    \     encoded_message += vowels[(vowels.index(letter.downcase) + 2) % 5]\n   \
    \ else\n      encoded_message += letter\n    end\n  end\n  encoded_message.swapcase\n\
    end", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  vowels = \"aeiou\"\n  encoded_message\
    \ = \"\"\n  message.each_char do |char|\n    if char == char.upcase\n      encoded_message\
    \ += alphabet[alphabet.index(char.downcase) + 2].upcase\n    elsif vowels.include?(char)\n\
    \      encoded_message += alphabet[alphabet.index(char) + 2]\n    else\n     \
    \ encoded_message += char\n    end\n  end\n  encoded_message\nend", "  vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  new_message = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      new_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    elsif char == char.upcase\n      new_message += char.downcase\n\
    \    else\n      new_message += char.upcase\n    end\n  end\n  new_message\nend",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  message.downcase.split(\"\").map\
    \ do |char|\n    if vowels.include?(char)\n      vowels[(vowels.index(char) +\
    \ 2) % 5]\n    else\n      char\n    end\n  end.join(\"\").upcase\nend", "  message.downcase.tr('aeiou',\
    \ 'cdfghjklmnpqrstvwxyzab')\nend", "  message.chars.map do |char|\n    if char.match(/[aeiou]/i)\n\
    \      char.next.next\n    else\n      char.swapcase\n    end\n  end.join\nend",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  message.downcase.split(\"\").map\
    \ do |char|\n    if vowels.include?(char)\n      if char == \"u\"\n        \"\
    a\"\n      else\n        vowels[vowels.index(char) + 1]\n      end\n    else\n\
    \      char\n    end\n  end.join(\"\").upcase\nend", "  message.chars.map do |char|\n\
    \    if char.match(/[aeiou]/i)\n      char.next.next\n    else\n      char.swapcase\n\
    \    end\n  end.join\nend", "  message.downcase.tr('aeiou', 'cdfghjklmnpqrstvwxyzab')\n\
    end", "  # TODO: implement this function\nend", "  vowels = \"aeiou\"\n  message.each_char.map\
    \ do |char|\n    if vowels.include?(char.downcase)\n      index = vowels.index(char.downcase)\n\
    \      char = vowels[(index + 2) % 5]\n    end\n    char.upcase == char ? char.downcase\
    \ : char.upcase\n  end.join\nend", "  # your code here\nend", "  message.split(\"\
    \").map do |letter|\n    if letter.match(/[aeiou]/i)\n      letter = letter.next.next\n\
    \    else\n      letter\n    end\n  end.join\nend", "  message.each_char.map {\
    \ |char| encode_char(char) }.join\nend", "  message.split(\"\").map do |letter|\n\
    \    if letter.match(/[a-z]/i)\n      letter.upcase!\n      letter = letter.next.next\n\
    \      letter.downcase!\n    else\n      letter\n    end\n  end.join(\"\")\nend",
  "  message.downcase.tr('aeiou', 'eioua')\nend", "  message.tr('a-zA-Z', 'c-za-bC-ZA-B')\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  # your code here\nend", "  message.downcase.tr('aeiou',\
    \ 'cdfhjlnprtvxz')\nend", "  message.downcase.tr('aeiou', 'cdfghjklmnpqrstvwxyzab')\n\
    end", "  vowels = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do\
    \ |char|\n    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]\n    else\n      encoded_message += char\n    end\n  end\n  encoded_message.swapcase\n\
    end", "  # TODO: Implement\nend", "  message.downcase.tr('aeiou', 'cdfghjklmnpqrstvwxyzab')\n\
    end", "  message.downcase.tr(\"aeiou\", \"eioua\")\nend", "  message.downcase.tr('aeiou',\
    \ 'cdfghjklmnpqrstvwxyzab')\nend", "\tvowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n\tmessage.downcase!\n\tmessage.each_char do |char|\n\t\tif vowels.include?(char)\n\
    \t\t\tvowels.each_with_index do |vowel, index|\n\t\t\t\tif char == vowel\n\t\t\
    \t\t\tif index == 4\n\t\t\t\t\t\tmessage.gsub!(char, vowels[0])\n\t\t\t\t\telse\n\
    \t\t\t\t\t\tmessage.gsub!(char, vowels[index + 2])\n\t\t\t\t\tend\n\t\t\t\tend\n\
    \t\t\tend\n\t\tend\n\tend\n\tmessage.swapcase!\n\tmessage\nend", "  vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n  message.downcase.split(\"\").map do |letter|\n\
    \    if vowels.include?(letter)\n      vowels[(vowels.index(letter) + 2) % 5]\n\
    \    else\n      letter\n    end\n  end.join(\"\").upcase\nend", "  message.downcase.tr('aeiou',\
    \ 'cdfghjklmnpqrstvwxyzab')\nend", "  message.chars.map { |char| encode_char(char)\
    \ }.join\nend", "  message.downcase.tr(\"aeiou\", \"eioua\")\nend", "  message.downcase.tr('aeiou',\
    \ 'cdfghjklmnpqrstvwxyzab')\nend", "  # TODO: implement\nend", "  message.chars.map\
    \ do |char|\n    if char =~ /[aeiou]/i\n      char.next.next\n    else\n     \
    \ char.swapcase\n    end\n  end.join\nend", "  message.split(\"\").map do |letter|\n\
    \    if letter.match(/[a-z]/i)\n      if letter.match(/[aeiou]/i)\n        letter\
    \ = letter.next.next\n      end\n      letter.match(/[A-Z]/) ? letter.downcase\
    \ : letter.upcase\n    else\n      letter\n    end\n  end.join(\"\")\nend", " \
    \ message.upcase.tr('A-Z', 'C-ZA-B')\nend", "  message.downcase.tr(\"aeiou\",\
    \ \"eioua\")\nend", "  message.split(\"\").map do |letter|\n    if letter.match(/[aeiou]/i)\n\
    \      letter = letter.next.next\n    else\n      letter = letter.swapcase\n \
    \   end\n  end.join(\"\")\nend", "  message.chars.map do |char|\n    if char =~\
    \ /[aeiou]/i\n      char.next.next\n    else\n      char.swapcase\n    end\n \
    \ end.join\nend", "  message.downcase.tr('aeiou', 'cdfghjklmnpqrstvwxyzab')\n\
    end", "  # TODO\nend", "  vowels = %w(a e i o u)\n  message.chars.map do |char|\n\
    \    if vowels.include?(char.downcase)\n      char = char.next.next\n    else\n\
    \      char = char.swapcase\n    end\n  end.join\nend", "  message.downcase.tr('aeiou',\
    \ 'cdfghjklmnpqrstvwxyzab')\nend", "  vowels = \"aeiou\"\n  encoded_message =\
    \ \"\"\n  message.each_char do |char|\n    if vowels.include?(char.downcase)\n\
    \      encoded_message += vowels[(vowels.index(char.downcase) + 2) % 5]\n    else\n\
    \      encoded_message += char\n    end\n  end\n  encoded_message.swapcase\nend",
  "  message.downcase.tr(\"aeiou\", \"eioua\")\nend", "  vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n  encoded_message = \"\"\n  message.each_char do |char|\n\
    \    if vowels.include?(char.downcase)\n      encoded_message += vowels[(vowels.index(char.downcase)\
    \ + 2) % 5].upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  # your code here\nend", "  message.downcase.tr('aeiou',\
    \ 'eioau')\nend", "  message.downcase.tr(\"aeiou\", \"eioua\")\nend", "  vowels\
    \ = \"aeiou\"\n  message.split(\"\").map do |char|\n    if vowels.include?(char.downcase)\n\
    \      index = vowels.index(char.downcase)\n      if index == 4\n        char\
    \ = vowels[0].upcase\n      else\n        char = vowels[index + 2].upcase\n  \
    \    end\n    elsif char == char.upcase\n      char = char.downcase\n    else\n\
    \      char = char.upcase\n    end\n  end.join(\"\")\nend", "  # TODO: implement\
    \ me\nend", "  # TODO: your code here\nend", "  message.split(\"\").map do |letter|\n\
    \    if letter.match(/[aeiou]/i)\n      letter = letter.next.next\n    else\n\
    \      letter = letter.next\n    end\n  end.join(\"\")\nend", "  alphabet = (\"\
    a\"..\"z\").to_a\n  vowels = %w(a e i o u)\n  result = \"\"\n  message.each_char\
    \ do |char|\n    if vowels.include?(char.downcase)\n      old_idx = alphabet.find_index(char.downcase)\n\
    \      new_idx = old_idx + 2\n      result += alphabet[new_idx % 26].upcase\n\
    \    else\n      result += char.swapcase\n    end\n  end\n  result\nend", "  message.downcase.tr(\"\
    aeiou\", \"eioua\")\nend", "  vowels = ['a', 'e', 'i', 'o', 'u']\n  message.downcase.split('').map\
    \ do |letter|\n    if vowels.include?(letter)\n      vowels[(vowels.index(letter)\
    \ + 2) % 5]\n    else\n      letter\n    end\n  end.join.upcase\nend", "  message.chars.map\
    \ do |char|\n    if char.match(/[a-z]/i)\n      if char.match(/[aeiou]/i)\n  \
    \      char = char.next.next\n      end\n      char.match(/[A-Z]/) ? char.downcase\
    \ : char.upcase\n    else\n      char\n    end\n  end.join\nend", "\tmessage.downcase!\n\
    \tvowels = \"aeiou\"\n\tencoded_message = \"\"\n\tmessage.each_char do |char|\n\
    \t\tif vowels.include?(char)\n\t\t\tencoded_message << vowels[(vowels.index(char)\
    \ + 2) % 5]\n\t\telse\n\t\t\tencoded_message << char\n\t\tend\n\tend\n\tencoded_message.upcase\n\
    end", "  message.downcase.tr(\"aeiou\", \"eioau\")\nend", "  message.downcase.tr('aeiou',\
    \ 'eioua')\nend", "  message.split(\"\").map do |char|\n    if char.match(/[a-z]/i)\n\
    \      if char.match(/[aeiou]/i)\n        if char.match(/[aeiou]/i).to_s == \"\
    u\"\n          char = \"a\"\n        else\n          char = char.next.next\n \
    \       end\n      end\n      char.match(/[a-z]/i).to_s == char ? char.upcase\
    \ : char.downcase\n    else\n      char\n    end\n  end.join(\"\")\nend", "  message.downcase.tr('aeiou',\
    \ 'cdfghjklmnpqrstvwxyzab')\nend", "  message.downcase.gsub(/[aeiou]/, 'a' =>\
    \ 'c', 'e' => 'g', 'i' => 'k', 'o' => 'q', 'u' => 's').upcase\nend", "  message.downcase.tr('a-z',\
    \ 'cdefghijklmnopqrstuvwxyzab')\nend", "  message.downcase.tr(\"aeiou\", \"eioua\"\
    )\nend", "  message.chars.map do |char|\n    if char.match(/[aeiou]/i)\n     \
    \ char = char.next.next\n    else\n      char = char.swapcase\n    end\n  end.join\n\
    end", "  message.downcase.tr(\"aeiou\", \"eouai\")\nend", "  message.split(\"\"\
    ).map do |char|\n    if char.match(/[aeiou]/i)\n      char = char.next.next\n\
    \    else\n      char = char.swapcase\n    end\n  end.join\nend", "  # your code\
    \ here\nend", "  message.chars.map do |char|\n    if char.match(/[aeiou]/i)\n\
    \      char = char.next.next\n    else\n      char = char.swapcase\n    end\n\
    \  end.join\nend", "  message.downcase.tr('aeiou', 'eioau')\nend", "  message.downcase.tr(\"\
    aeiou\", \"eioua\")\nend", "  message.downcase.tr('aeiou', 'eioua')\nend", " \
    \ message.split(\"\").map do |char|\n    if char =~ /[a-z]/\n      char.upcase!\n\
    \      char.next.next\n    elsif char =~ /[A-Z]/\n      char.downcase!\n     \
    \ char.next.next\n    else\n      char\n    end\n  end.join(\"\")\nend", "  vowels\
    \ = \"aeiou\"\n  encoded_message = \"\"\n  message.each_char do |char|\n    if\
    \ vowels.include?(char.downcase)\n      encoded_message += (vowels[(vowels.index(char.downcase)\
    \ + 2) % 5]).upcase\n    else\n      encoded_message += char.swapcase\n    end\n\
    \  end\n  encoded_message\nend", "  message.downcase.tr(\"aeiou\", \"eioau\")\n\
    end", "  vowels = \"aeiou\"\n  message.downcase.tr(vowels, vowels[2..-1] + vowels[0..1]).tr(\"\
    a-z\", \"A-Z\")\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
