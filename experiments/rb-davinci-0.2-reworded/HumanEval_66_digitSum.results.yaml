language: rb
name: HumanEval_66_digitSum
results:
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |char| char.ord }.select { |ord| ord >= 65 && ord <= 90 }.reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp43adzcfu\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp43adzcfu.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008919236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.12 tests/s, 112.12 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0_s4opp0

    Started

    .

    Finished in 0.000476444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2098.88 tests/s, 16791.06 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select\
    \ { |x| x.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpp0zw0o3j\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpp0zw0o3j.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008864379 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    112.81 tests/s, 112.81 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0_s4opp0

    Started

    .

    Finished in 0.000476444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2098.88 tests/s, 16791.06 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.map\
    \ { |c| c.ord }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpte6janyy\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpte6janyy.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008093423 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.56 tests/s, 123.56 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |i| i.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1dvo87bc\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp1dvo87bc.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008444859 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.42 tests/s, 118.42 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.map\
    \ { |c| c.ord }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpq0fgi_g5\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpq0fgi_g5.rb:25:in `test_digitSum'\n\
    \     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  \
    \   24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\
    \nFinished in 0.008306931 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    120.38 tests/s, 240.76 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyaccq10d\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpyaccq10d.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008446511 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.39 tests/s, 118.39 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.split('').map\
    \ { |x| x.ord }.select { |x| x >= 65 && x <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpfreutwz2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpfreutwz2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008264611 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    121.00 tests/s, 121.00 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0_s4opp0

    Started

    .

    Finished in 0.000476444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2098.88 tests/s, 16791.06 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select\
    \ { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8nat7ox

    Started

    .

    Finished in 0.000477873 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2092.61 tests/s, 16740.85 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.split('').map{|x|\
    \ x.ord}.select{|x| x >= 65 && x <= 90}.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprc308nvu\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmprc308nvu.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00833046 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    120.04 tests/s, 120.04 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.select\
    \ { |char| char.upcase == char }.map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpolayfqtw\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpolayfqtw.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007609573 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.41 tests/s, 131.41 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |i| i >= 65 && i <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpndg6yv8d\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpndg6yv8d.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009207807 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.60 tests/s, 108.60 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.map\
    \ { |c| c.ord }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpte6janyy\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpte6janyy.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008093423 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.56 tests/s, 123.56 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c > 64 && c < 91 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyu1sv6ti\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpyu1sv6ti.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007931434 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.08 tests/s, 126.08 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0_s4opp0

    Started

    .

    Finished in 0.000476444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2098.88 tests/s, 16791.06 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c > 64 && c < 91 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0msuqm98

    Started

    .

    Finished in 0.00044843 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2230.00 tests/s, 17840.02 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |x| x.ord }.select { |x| x.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplinwgfn6\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmplinwgfn6.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009326363 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.22 tests/s, 107.22 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpoq05i53n

    Started

    .

    Finished in 0.000462532 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2162.01 tests/s, 17296.10 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c > 64 && c < 91 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyu1sv6ti\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpyu1sv6ti.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007931434 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.08 tests/s, 126.08 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map{|x|\
    \ x.ord}.inject(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5lhom_b5\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp5lhom_b5.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.012516856 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    79.89 tests/s, 79.89 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select\
    \ { |c| c.between?(65, 90) }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpoqm7omx0

    Started

    .

    Finished in 0.000452767 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2208.64 tests/s, 17669.13 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select\
    \ { |e| e >= 65 && e <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpmaha47g9

    Started

    .

    Finished in 0.000452433 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2210.27 tests/s, 17682.18 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.map\
    \ { |c| c.ord }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpte6janyy\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpte6janyy.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008093423 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.56 tests/s, 123.56 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select\
    \ { |n| n >= 65 && n <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5127ej20\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp5127ej20.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008999238 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    111.12 tests/s, 111.12 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select\
    \ { |i| i >= 65 && i <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpa8mplhmc\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpa8mplhmc.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014375918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.56 tests/s, 69.56 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.inject(0)\
    \ { |sum, c| c.ord.between?(65, 90) ? sum + c.ord : sum }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptqi9wpyz

    Started

    .

    Finished in 0.000483183 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2069.61 tests/s, 16556.87 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0_s4opp0

    Started

    .

    Finished in 0.000476444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2098.88 tests/s, 16791.06 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |n| n >= 65 && n <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpym4ia19v\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpym4ia19v.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00677417 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.62 tests/s, 147.62 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|x|\
    \ x.ord}.select{|x| x >= 65 && x <= 90}.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgmi1yymj\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpgmi1yymj.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006389164 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.51 tests/s, 156.51 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0_s4opp0

    Started

    .

    Finished in 0.000476444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2098.88 tests/s, 16791.06 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |x| x.ord }.select { |x| x >= 65 && x <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqt9ngob2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpqt9ngob2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006329139 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.00 tests/s, 158.00 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|c|\
    \ c.ord}.select{|c| c >= 65 && c <= 90}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbtdszz91

    Started

    .

    Finished in 0.000496146 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2015.54 tests/s, 16124.29 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0_s4opp0

    Started

    .

    Finished in 0.000476444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2098.88 tests/s, 16791.06 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select\
    \ { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp87pcgvh0\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp87pcgvh0.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006920841 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.49 tests/s, 144.49 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c > 64 && c < 91 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyu1sv6ti\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpyu1sv6ti.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007931434 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.08 tests/s, 126.08 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpoq05i53n

    Started

    .

    Finished in 0.000462532 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2162.01 tests/s, 17296.10 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0_s4opp0

    Started

    .

    Finished in 0.000476444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2098.88 tests/s, 16791.06 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcjiwe3rx\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpcjiwe3rx.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006741761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.33 tests/s, 148.33 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |i| i >= 65 && i <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpndg6yv8d\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpndg6yv8d.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009207807 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.60 tests/s, 108.60 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |i| i >= 65 && i <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpndg6yv8d\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpndg6yv8d.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009207807 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.60 tests/s, 108.60 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select\
    \ { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp87pcgvh0\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp87pcgvh0.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006920841 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.49 tests/s, 144.49 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyaccq10d\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpyaccq10d.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008446511 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.39 tests/s, 118.39 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0_s4opp0

    Started

    .

    Finished in 0.000476444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2098.88 tests/s, 16791.06 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|x|\
    \ x.ord}.select{|x| x > 64 && x < 91}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpu3dtq_aw

    Started

    .

    Finished in 0.000472526 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2116.29 tests/s, 16930.29 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|x|\
    \ x.ord}.select{|x| x >= 65 && x <= 90}.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgmi1yymj\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpgmi1yymj.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006389164 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.51 tests/s, 156.51 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcjiwe3rx\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpcjiwe3rx.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006741761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.33 tests/s, 148.33 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select\
    \ { |x| x >= 65 && x <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpkfferqfp\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpkfferqfp.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007325171 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.52 tests/s, 136.52 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |n| n >= 65 && n <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpym4ia19v\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpym4ia19v.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00677417 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.62 tests/s, 147.62 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyaccq10d\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpyaccq10d.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008446511 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.39 tests/s, 118.39 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcjiwe3rx\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpcjiwe3rx.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006741761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.33 tests/s, 148.33 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c > 64 && c < 91 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyu1sv6ti\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpyu1sv6ti.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007931434 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.08 tests/s, 126.08 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map{|x|\
    \ x.ord}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgsc1is3n\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpgsc1is3n.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006512278 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.56 tests/s, 153.56 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^A-Z]/,\
    \ '').chars.map(&:ord).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqq_hxons

    Started

    .

    Finished in 0.000470392 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2125.89 tests/s, 17007.09 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|x|\
    \ x.ord}.select{|x| x > 64 && x < 91}.reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_bdk4vb7\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp_bdk4vb7.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006314323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.37 tests/s, 158.37 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |char|\n    sum += char.ord if char.ord >= 65 && char.ord <=\
    \ 90\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprt545zdu

    Started

    .

    Finished in 0.000437802 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2284.14 tests/s, 18273.10 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyaccq10d\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpyaccq10d.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008446511 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.39 tests/s, 118.39 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select\
    \ { |i| i >= 65 && i <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpazp1xhx3

    Started

    .

    Finished in 0.000492056 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2032.29 tests/s, 16258.31 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |n| n >= 65 && n <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpym4ia19v\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpym4ia19v.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00677417 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.62 tests/s, 147.62 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select\
    \ { |i| i >= 65 && i <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpa8mplhmc\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpa8mplhmc.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014375918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.56 tests/s, 69.56 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.map\
    \ { |c| c.ord }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpq0fgi_g5\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpq0fgi_g5.rb:25:in `test_digitSum'\n\
    \     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  \
    \   24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\
    \nFinished in 0.008306931 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    120.38 tests/s, 240.76 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0_s4opp0

    Started

    .

    Finished in 0.000476444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2098.88 tests/s, 16791.06 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |i| i >= 65 && i <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpndg6yv8d\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpndg6yv8d.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009207807 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.60 tests/s, 108.60 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^A-Z]/,\
    \ '').chars.map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp22imvp6j\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp22imvp6j.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006313052 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.40 tests/s, 158.40 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map{|i|\
    \ i.ord}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7nmf8f80\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp7nmf8f80.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00642104 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    155.74 tests/s, 155.74 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyaccq10d\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpyaccq10d.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008446511 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.39 tests/s, 118.39 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.sum {\
    \ |char| char.ord if char.ord.between?(65, 90) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpg167lj6o\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpg167lj6o.rb:25:in `test_digitSum'\n\
    \     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  \
    \   24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<326>\n\ndiff:\n? 131\
    \ \n?   26\n? - ?\n===============================================================================\n\
    \nFinished in 0.006643323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    150.53 tests/s, 301.05 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^A-Z]/,\
    \ '').chars.map { |c| c.ord }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpkj9oqvi3\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpkj9oqvi3.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00617118 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    162.04 tests/s, 162.04 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|c|\
    \ c.ord}.select{|c| c >= 65 && c <= 90}.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpbtdszz91

    Started

    .

    Finished in 0.000496146 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2015.54 tests/s, 16124.29 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select\
    \ { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8nat7ox

    Started

    .

    Finished in 0.000477873 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2092.61 tests/s, 16740.85 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyaccq10d\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpyaccq10d.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008446511 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.39 tests/s, 118.39 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |i| i >= 65 && i <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpndg6yv8d\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpndg6yv8d.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009207807 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.60 tests/s, 108.60 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.map\
    \ { |c| c.ord }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpq0fgi_g5\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpq0fgi_g5.rb:25:in `test_digitSum'\n\
    \     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  \
    \   24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\
    \nFinished in 0.008306931 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    120.38 tests/s, 240.76 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.map\
    \ { |c| c.ord }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpte6janyy\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpte6janyy.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008093423 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.56 tests/s, 123.56 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0_s4opp0

    Started

    .

    Finished in 0.000476444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2098.88 tests/s, 16791.06 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c > 64 && c < 91 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyu1sv6ti\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpyu1sv6ti.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007931434 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.08 tests/s, 126.08 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |x| x.ord }.select { |x| x >= 65 && x <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpu3egj539

    Started

    .

    Finished in 0.000477697 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2093.38 tests/s, 16747.02 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0_s4opp0

    Started

    .

    Finished in 0.000476444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2098.88 tests/s, 16791.06 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.map(&:ord).select\
    \ { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprdffkr5o\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmprdffkr5o.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00628977 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.99 tests/s, 158.99 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^A-Z]/,\
    \ '').chars.map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp22imvp6j\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp22imvp6j.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006313052 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.40 tests/s, 158.40 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map{|x|\
    \ x.ord}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgsc1is3n\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpgsc1is3n.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006512278 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.56 tests/s, 153.56 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyaccq10d\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpyaccq10d.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008446511 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.39 tests/s, 118.39 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^A-Z]/,\
    \ '').chars.map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp22imvp6j\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp22imvp6j.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006313052 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.40 tests/s, 158.40 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0_s4opp0

    Started

    .

    Finished in 0.000476444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2098.88 tests/s, 16791.06 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |char| char.ord }.select { |num| num > 64 && num < 91 }.sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpwml5l67o

    Started

    .

    Finished in 0.000455856 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2193.68 tests/s, 17549.40 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select\
    \ { |x| x >= 65 && x <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpkfferqfp\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpkfferqfp.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007325171 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.52 tests/s, 136.52 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.reduce(0)\
    \ { |sum, c| sum + c.ord }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpht30p5id\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpht30p5id.rb:25:in `test_digitSum'\n\
    \     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  \
    \   24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<326>\n\ndiff:\n? 131\
    \ \n?   26\n? - ?\n===============================================================================\n\
    \nFinished in 0.006396527 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.33 tests/s, 312.67 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.inject(0)\
    \ { |sum, c| c.ord.between?(65, 90) ? sum + c.ord : sum }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptqi9wpyz

    Started

    .

    Finished in 0.000483183 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2069.61 tests/s, 16556.87 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcjiwe3rx\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpcjiwe3rx.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006741761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.33 tests/s, 148.33 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpoq05i53n

    Started

    .

    Finished in 0.000462532 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2162.01 tests/s, 17296.10 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map{|x|\
    \ x.ord}.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgsc1is3n\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpgsc1is3n.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006512278 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    153.56 tests/s, 153.56 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |i| i >= 65 && i <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpndg6yv8d\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpndg6yv8d.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009207807 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.60 tests/s, 108.60 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |i| i >= 65 && i <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjzk0goad

    Started

    .

    Finished in 0.000474056 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2109.46 tests/s, 16875.64 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select\
    \ { |i| i >= 65 && i <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpazp1xhx3

    Started

    .

    Finished in 0.000492056 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2032.29 tests/s, 16258.31 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^A-Z]/,\
    \ '').chars.map(&:ord).reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp22imvp6j\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp22imvp6j.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006313052 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.40 tests/s, 158.40 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |char|\n    sum += char.ord if char.ord >= 65 && char.ord <=\
    \ 90\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprt545zdu

    Started

    .

    Finished in 0.000437802 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2284.14 tests/s, 18273.10 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcjiwe3rx\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpcjiwe3rx.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006741761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.33 tests/s, 148.33 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |i| i >= 65 && i <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpndg6yv8d\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpndg6yv8d.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009207807 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.60 tests/s, 108.60 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.map\
    \ { |x| x.ord }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzc05tqun\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpzc05tqun.rb:25:in `test_digitSum'\n\
    \     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  \
    \   24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<262>\n===============================================================================\n\
    \nFinished in 0.009003078 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    111.07 tests/s, 222.15 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.reduce(0)\
    \ { |sum, c| sum + c.ord if c =~ /[A-Z]/ }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7fjesgar\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval):\n  NoMethodError: undefined method `+' for\
    \ nil:NilClass\n  \n    s.chars.reduce(0) { |sum, c| sum + c.ord if c =~ /[A-Z]/\
    \ }\n                                     ^\n/tmp/tmp7fjesgar.rb:18:in `block\
    \ in digitSum'\n/tmp/tmp7fjesgar.rb:18:in `each'\n/tmp/tmp7fjesgar.rb:18:in `reduce'\n\
    /tmp/tmp7fjesgar.rb:18:in `digitSum'\n/tmp/tmp7fjesgar.rb:25:in `call'\n/tmp/tmp7fjesgar.rb:25:in\
    \ `test_digitSum'\n     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n\
    \     24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.001727935 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    578.73 tests/s, 578.73 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select\
    \ { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp87pcgvh0\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp87pcgvh0.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006920841 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.49 tests/s, 144.49 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c > 64 && c < 91 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyu1sv6ti\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpyu1sv6ti.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.007931434 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    126.08 tests/s, 126.08 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select\
    \ { |i| i >= 65 && i <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpa8mplhmc\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpa8mplhmc.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.014375918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.56 tests/s, 69.56 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |i| i.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1dvo87bc\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp1dvo87bc.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008444859 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.42 tests/s, 118.42 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select\
    \ { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpm8nat7ox

    Started

    .

    Finished in 0.000477873 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2092.61 tests/s, 16740.85 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0_s4opp0

    Started

    .

    Finished in 0.000476444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2098.88 tests/s, 16791.06 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0_s4opp0

    Started

    .

    Finished in 0.000476444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2098.88 tests/s, 16791.06 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.map\
    \ { |c| c.ord }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpte6janyy\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpte6janyy.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008093423 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.56 tests/s, 123.56 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).reduce(:+)\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyaccq10d\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpyaccq10d.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008446511 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    118.39 tests/s, 118.39 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |n| n >= 65 && n <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpym4ia19v\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpym4ia19v.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.00677417 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    147.62 tests/s, 147.62 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|x|\
    \ x.ord}.select{|x| x >= 65 && x <= 90}.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgmi1yymj\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpgmi1yymj.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006389164 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.51 tests/s, 156.51 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0_s4opp0

    Started

    .

    Finished in 0.000476444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2098.88 tests/s, 16791.06 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |x| x.ord }.select { |x| x >= 65 && x <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqt9ngob2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpqt9ngob2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006329139 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.00 tests/s, 158.00 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c.between?(65, 90) }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpoq05i53n

    Started

    .

    Finished in 0.000462532 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2162.01 tests/s, 17296.10 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|x|\
    \ x.ord}.select{|x| x >= 65 && x <= 90}.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpgmi1yymj\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpgmi1yymj.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006389164 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    156.51 tests/s, 156.51 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0_s4opp0

    Started

    .

    Finished in 0.000476444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2098.88 tests/s, 16791.06 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpcjiwe3rx\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpcjiwe3rx.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006741761 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    148.33 tests/s, 148.33 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.gsub(/[^A-Z]/,\
    \ '').chars.map(&:ord).sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqq_hxons

    Started

    .

    Finished in 0.000470392 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2125.89 tests/s, 17007.09 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |i| i >= 65 && i <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpndg6yv8d\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpndg6yv8d.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009207807 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.60 tests/s, 108.60 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |x| x.ord }.select { |x| x.between?(65, 90) }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplinwgfn6\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmplinwgfn6.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009326363 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.22 tests/s, 107.22 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0_s4opp0

    Started

    .

    Finished in 0.000476444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2098.88 tests/s, 16791.06 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.map\
    \ { |c| c.ord }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpte6janyy\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpte6janyy.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008093423 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    123.56 tests/s, 123.56 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.upcase.chars.map(&:ord).select\
    \ { |i| i >= 65 && i <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmplm4u49wy\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmplm4u49wy.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006009191 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    166.41 tests/s, 166.41 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.scan(/[A-Z]/).map(&:ord).sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpz35_q5wv

    Started

    .

    Finished in 0.000529322 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1889.21 tests/s, 15113.67 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map{|x|\
    \ x.ord}.select{|x| x > 64 && x < 91}.reduce(:+)\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp_bdk4vb7\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp_bdk4vb7.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006314323 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    158.37 tests/s, 158.37 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.inject(0)\
    \ { |sum, c| sum + c.ord }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp158tf52v\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp158tf52v.rb:25:in `test_digitSum'\n\
    \     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  \
    \   24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<326>\n\ndiff:\n? 131\
    \ \n?   26\n? - ?\n===============================================================================\n\
    \nFinished in 0.005970659 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    167.49 tests/s, 334.97 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |i| i >= 65 && i <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpndg6yv8d\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpndg6yv8d.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.009207807 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.60 tests/s, 108.60 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte { |c| sum += c if c >= 65 && c <= 90 }\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvl1evoo_

    Started

    .

    Finished in 0.000374873 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2667.57 tests/s, 21340.56 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |char| char.ord }.select { |num| num.between?(65, 90) }.reduce(:+)\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp11ewhmx0\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp11ewhmx0.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005848562 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    170.98 tests/s, 170.98 assertions/s\n"
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map(&:ord).select\
    \ { |i| i >= 65 && i <= 90 }.sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpazp1xhx3

    Started

    .

    Finished in 0.000492056 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2032.29 tests/s, 16258.31 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 0
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0_s4opp0

    Started

    .

    Finished in 0.000476444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2098.88 tests/s, 16791.06 assertions/s

    '
  stdout: ''
  timestamp: 1659794892
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.map\
    \ { |c| c.ord }.select { |c| c >= 65 && c <= 90 }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpisdxg0w2\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpisdxg0w2.rb:24:in `test_digitSum'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_digitSum\n\
    \     23:     candidate = method(:digitSum)\n  => 24:     assert_equal(0, candidate.call(\"\
    \"))\n     25:     assert_equal(131, candidate.call(\"abAB\"))\n     26:     assert_equal(67,\
    \ candidate.call(\"abcCd\"))\n     27:     assert_equal(69, candidate.call(\"\
    helloE\"))\n<0> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008625236 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.94 tests/s, 115.94 assertions/s\n"
  timestamp: 1659794892
