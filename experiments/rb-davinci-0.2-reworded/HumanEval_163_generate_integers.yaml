name: HumanEval_163_generate_integers
language: rb
prompt: "# Given two positive integers a and b, return the even digits between a\n\
  # and b, in ascending order.\n# For example:\n# >>> generate_integers.call(2, 8)\n\
  # [2, 4, 6, 8]\n# >>> generate_integers.call(8, 2)\n# [2, 4, 6, 8]\n# >>> generate_integers.call(10,\
  \ 14)\n# []\ndef generate_integers(a, b)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_generate_integers\n\
  \    candidate = method(:generate_integers)\n    assert_equal([2, 4, 6, 8], candidate.call(2,\
  \ 10))\n    assert_equal([2, 4, 6, 8], candidate.call(10, 2))\n    assert_equal([2,\
  \ 4, 6, 8], candidate.call(132, 2))\n    assert_equal([], candidate.call(17, 89))\n\
  \  end\nend\n"
completions: ["  (a..b).select { |n| n.even? }\nend", "  (a..b).select { |num| num.even?\
    \ }\nend", "  (a..b).select { |num| num.even? }\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select { |num| num.even? }\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select { |num| num.even? }\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select { |n| n.even? }\nend",
  "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select\
    \ { |n| n.even? }\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select { |num| num.even? }\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select\
    \ { |num| num.even? }\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select { |n| n.even? }\nend", "  (a..b).select(&:even?)\nend",
  "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select\
    \ { |n| n.even? }\nend", "  (a..b).select { |num| num.even? }\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select { |num| num.even? }\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select { |num| num.even? }\n\
    end", "  (a..b).select { |num| num.even? }\nend", "  (a..b).select { |i| i.even?\
    \ }\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select { |num| num.even?\
    \ }\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", " \
    \ (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select\
    \ { |num| num.even? }\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  return [] if a > b\n  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select { |num| num.even? }\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select { |num| num.even? }\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select { |i| i.even? }\nend",
  "  (a..b).select { |num| num.even? }\nend", "  (a..b).select { |num| num.even? }\n\
    end", "  (a..b).select { |i| i.even? }\nend", "  (a..b).select(&:even?)\nend",
  "  (a..b).select { |num| num.even? }\nend", "  (a..b).select(&:even?)\nend", " \
    \ (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select\
    \ { |n| n.even? }\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select { |num|\
    \ num.even? }\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select { |num| num.even? }\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select { |n| n.even? }\nend", "  (a..b).select(&:even?)\nend",
  "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select { |num| num.even? }\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select { |i| i.even? }\nend",
  "  (a..b).select(&:even?)\nend", "  (a..b).select { |num| num.even? }\nend", " \
    \ (a..b).select(&:even?)\nend", "  (a..b).select { |n| n.even? }\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select { |num| num.even? }\n\
    end", "  (a..b).select { |num| num.even? }\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select { |n| n.even? }\nend",
  "  (a..b).select { |n| n.even? }\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select { |num| num.even? }\nend", "  (a..b).select { |num| num.even?\
    \ }\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", " \
    \ (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select { |num| num.even? }\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select { |i| i.even? }\nend", "  (a..b).select(&:even?)\nend",
  "  (a..b).select { |n| n.even? }\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select\
    \ { |num| num.even? }\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select\
    \ { |n| n.even? }\nend", "  (a..b).select { |num| num.even? }\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select { |num| num.even? }\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select { |i| i.even? }\nend", "  (a..b).select(&:even?)\nend",
  "  (a..b).select(&:even?)\nend", "  (a..b).select { |num| num.even? }\nend", " \
    \ (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select { |num| num.even? }\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select { |num| num.even? }\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select { |x| x.even? }\nend",
  "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select { |num| num.even? }\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select { |i| i.even? }\nend",
  "  (a..b).select(&:even?)\nend", "  (a..b).select { |num| num.even? }\nend", " \
    \ (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select { |num| num.even? }\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select\
    \ { |num| num.even? }\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select { |num| num.even? }\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select\
    \ { |num| num.even? }\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select(&:even?)\n\
    end", "  (a..b).select { |num| num.even? }\nend", "  (a..b).select { |n| n.even?\
    \ }\nend", "  (a..b).select(&:even?)\nend", "  (a..b).select { |n| n.even? }\n\
    end", "  (a..b).select(&:even?)\nend", "  (a..b).select { |num| num.even? }\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
