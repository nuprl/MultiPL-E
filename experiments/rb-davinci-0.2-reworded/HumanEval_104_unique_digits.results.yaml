language: rb
name: HumanEval_104_unique_digits
results:
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdu6ddv4a

    Started

    .

    Finished in 0.000569888 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1754.73 tests/s, 7018.92 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprv6nyki1

    Started

    .

    Finished in 0.000763754 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1309.32 tests/s, 5237.29 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprv6nyki1

    Started

    .

    Finished in 0.000763754 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1309.32 tests/s, 5237.29 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.map(&:to_i).all? { |i| i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplzy4cbvm

    Started

    .

    Finished in 0.000568612 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1758.67 tests/s, 7034.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select{|i| i.to_s.split('').map(&:to_i).select{|j| j.even?}.empty?}.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpb1j_otlr

    Started

    .

    Finished in 0.000932048 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1072.91 tests/s, 4291.62 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n\tx.select { |i| i.to_s.split('').map(&:to_i).all? { |i| i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpphe7xtjh

    Started

    .

    Finished in 0.000559302 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1787.94 tests/s, 7151.77 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnd1usis5

    Started

    .

    Finished in 0.000530014 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1886.74 tests/s, 7546.97 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqi5opqm7

    Started

    .

    Finished in 0.00054361 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1839.55 tests/s, 7358.22 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp_wm8vtf6

    Started

    .

    Finished in 0.000402011 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2487.49 tests/s, 9949.98 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpop2gdlj5

    Started

    .

    Finished in 0.000576586 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1734.35 tests/s, 6937.39 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdu6ddv4a

    Started

    .

    Finished in 0.000569888 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1754.73 tests/s, 7018.92 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.split('').all? { |d| d.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdz5i_ww1

    Started

    .

    Finished in 0.000580175 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1723.62 tests/s, 6894.47 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.map(&:to_i).all?(&:odd?) }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjzt81_jp

    Started

    .

    Finished in 0.001123236 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    890.28 tests/s, 3561.14 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |n| n.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpj9ns0j8f

    Started

    .

    Finished in 0.00055962 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1786.93 tests/s, 7147.71 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.map(&:to_i).all?(&:odd?) }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnxnxe_1k

    Started

    .

    Finished in 0.000544021 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1838.16 tests/s, 7352.66 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.map(&:to_i).all? { |n| n.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpe4q1n4zd

    Started

    .

    Finished in 0.000543092 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1841.31 tests/s, 7365.23 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqi5opqm7

    Started

    .

    Finished in 0.00054361 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1839.55 tests/s, 7358.22 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqi5opqm7

    Started

    .

    Finished in 0.00054361 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1839.55 tests/s, 7358.22 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprv6nyki1

    Started

    .

    Finished in 0.000763754 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1309.32 tests/s, 5237.29 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.map(&:to_i).all?(&:odd?) }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjzt81_jp

    Started

    .

    Finished in 0.001123236 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    890.28 tests/s, 3561.14 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqi5opqm7

    Started

    .

    Finished in 0.00054361 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1839.55 tests/s, 7358.22 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprv6nyki1

    Started

    .

    Finished in 0.000763754 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1309.32 tests/s, 5237.29 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.map(&:to_i).all? { |i| i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplzy4cbvm

    Started

    .

    Finished in 0.000568612 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1758.67 tests/s, 7034.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqi5opqm7

    Started

    .

    Finished in 0.00054361 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1839.55 tests/s, 7358.22 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.split('').all? { |d| d.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdz5i_ww1

    Started

    .

    Finished in 0.000580175 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1723.62 tests/s, 6894.47 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnd1usis5

    Started

    .

    Finished in 0.000530014 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1886.74 tests/s, 7546.97 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdu6ddv4a

    Started

    .

    Finished in 0.000569888 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1754.73 tests/s, 7018.92 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.map(&:to_i).all?(&:odd?) }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjzt81_jp

    Started

    .

    Finished in 0.001123236 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    890.28 tests/s, 3561.14 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqi5opqm7

    Started

    .

    Finished in 0.00054361 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1839.55 tests/s, 7358.22 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.map(&:to_i).all?(&:odd?) }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnxnxe_1k

    Started

    .

    Finished in 0.000544021 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1838.16 tests/s, 7352.66 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |i| i.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpefhruvsr

    Started

    .

    Finished in 0.000601464 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1662.61 tests/s, 6650.44 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqi5opqm7

    Started

    .

    Finished in 0.00054361 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1839.55 tests/s, 7358.22 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprv6nyki1

    Started

    .

    Finished in 0.000763754 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1309.32 tests/s, 5237.29 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpop2gdlj5

    Started

    .

    Finished in 0.000576586 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1734.35 tests/s, 6937.39 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpipu4nxpv

    Started

    .

    Finished in 0.000535216 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1868.40 tests/s, 7473.62 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdu6ddv4a

    Started

    .

    Finished in 0.000569888 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1754.73 tests/s, 7018.92 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.map(&:to_i).all? { |digit|\
    \ digit.odd? } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpghrrjy78

    Started

    .

    Finished in 0.000434124 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2303.49 tests/s, 9213.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpop2gdlj5

    Started

    .

    Finished in 0.000576586 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1734.35 tests/s, 6937.39 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdu6ddv4a

    Started

    .

    Finished in 0.000569888 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1754.73 tests/s, 7018.92 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdu6ddv4a

    Started

    .

    Finished in 0.000569888 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1754.73 tests/s, 7018.92 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprv6nyki1

    Started

    .

    Finished in 0.000763754 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1309.32 tests/s, 5237.29 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpop2gdlj5

    Started

    .

    Finished in 0.000576586 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1734.35 tests/s, 6937.39 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnd1usis5

    Started

    .

    Finished in 0.000530014 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1886.74 tests/s, 7546.97 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqi5opqm7

    Started

    .

    Finished in 0.00054361 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1839.55 tests/s, 7358.22 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo_d2z3l2

    Started

    .

    Finished in 0.000571822 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1748.80 tests/s, 6995.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo_d2z3l2

    Started

    .

    Finished in 0.000571822 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1748.80 tests/s, 6995.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo_d2z3l2

    Started

    .

    Finished in 0.000571822 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1748.80 tests/s, 6995.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnd1usis5

    Started

    .

    Finished in 0.000530014 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1886.74 tests/s, 7546.97 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo_d2z3l2

    Started

    .

    Finished in 0.000571822 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1748.80 tests/s, 6995.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo_d2z3l2

    Started

    .

    Finished in 0.000571822 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1748.80 tests/s, 6995.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprv6nyki1

    Started

    .

    Finished in 0.000763754 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1309.32 tests/s, 5237.29 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpop2gdlj5

    Started

    .

    Finished in 0.000576586 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1734.35 tests/s, 6937.39 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo_d2z3l2

    Started

    .

    Finished in 0.000571822 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1748.80 tests/s, 6995.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdu6ddv4a

    Started

    .

    Finished in 0.000569888 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1754.73 tests/s, 7018.92 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdu6ddv4a

    Started

    .

    Finished in 0.000569888 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1754.73 tests/s, 7018.92 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |i| i.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpefhruvsr

    Started

    .

    Finished in 0.000601464 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1662.61 tests/s, 6650.44 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnd1usis5

    Started

    .

    Finished in 0.000530014 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1886.74 tests/s, 7546.97 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp_wm8vtf6

    Started

    .

    Finished in 0.000402011 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2487.49 tests/s, 9949.98 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqi5opqm7

    Started

    .

    Finished in 0.00054361 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1839.55 tests/s, 7358.22 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnd1usis5

    Started

    .

    Finished in 0.000530014 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1886.74 tests/s, 7546.97 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp_wm8vtf6

    Started

    .

    Finished in 0.000402011 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2487.49 tests/s, 9949.98 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo_d2z3l2

    Started

    .

    Finished in 0.000571822 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1748.80 tests/s, 6995.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select{|i| i.to_s.split('').map(&:to_i).all?{|j| j.odd?}}.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjku0ltxk

    Started

    .

    Finished in 0.001021968 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    978.50 tests/s, 3914.02 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdu6ddv4a

    Started

    .

    Finished in 0.000569888 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1754.73 tests/s, 7018.92 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdu6ddv4a

    Started

    .

    Finished in 0.000569888 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1754.73 tests/s, 7018.92 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqi5opqm7

    Started

    .

    Finished in 0.00054361 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1839.55 tests/s, 7358.22 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpop2gdlj5

    Started

    .

    Finished in 0.000576586 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1734.35 tests/s, 6937.39 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').map(&:to_i).all? { |digit|\
    \ digit.odd? } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplyjqezhp

    Started

    .

    Finished in 0.000425031 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2352.77 tests/s, 9411.08 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdu6ddv4a

    Started

    .

    Finished in 0.000569888 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1754.73 tests/s, 7018.92 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdu6ddv4a

    Started

    .

    Finished in 0.000569888 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1754.73 tests/s, 7018.92 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.split('').all? { |d| d.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdz5i_ww1

    Started

    .

    Finished in 0.000580175 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1723.62 tests/s, 6894.47 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo_d2z3l2

    Started

    .

    Finished in 0.000571822 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1748.80 tests/s, 6995.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpop2gdlj5

    Started

    .

    Finished in 0.000576586 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1734.35 tests/s, 6937.39 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqi5opqm7

    Started

    .

    Finished in 0.00054361 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1839.55 tests/s, 7358.22 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdu6ddv4a

    Started

    .

    Finished in 0.000569888 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1754.73 tests/s, 7018.92 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprv6nyki1

    Started

    .

    Finished in 0.000763754 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1309.32 tests/s, 5237.29 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.split('').all? { |d| d.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdz5i_ww1

    Started

    .

    Finished in 0.000580175 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1723.62 tests/s, 6894.47 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnd1usis5

    Started

    .

    Finished in 0.000530014 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1886.74 tests/s, 7546.97 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqi5opqm7

    Started

    .

    Finished in 0.00054361 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1839.55 tests/s, 7358.22 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo_d2z3l2

    Started

    .

    Finished in 0.000571822 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1748.80 tests/s, 6995.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').map(&:to_i).all? { |digit|\
    \ digit.odd? } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplyjqezhp

    Started

    .

    Finished in 0.000425031 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2352.77 tests/s, 9411.08 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo_d2z3l2

    Started

    .

    Finished in 0.000571822 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1748.80 tests/s, 6995.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprv6nyki1

    Started

    .

    Finished in 0.000763754 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1309.32 tests/s, 5237.29 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqi5opqm7

    Started

    .

    Finished in 0.00054361 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1839.55 tests/s, 7358.22 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprv6nyki1

    Started

    .

    Finished in 0.000763754 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1309.32 tests/s, 5237.29 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.split('').all? { |d| d.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdz5i_ww1

    Started

    .

    Finished in 0.000580175 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1723.62 tests/s, 6894.47 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdu6ddv4a

    Started

    .

    Finished in 0.000569888 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1754.73 tests/s, 7018.92 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnd1usis5

    Started

    .

    Finished in 0.000530014 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1886.74 tests/s, 7546.97 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnd1usis5

    Started

    .

    Finished in 0.000530014 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1886.74 tests/s, 7546.97 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdu6ddv4a

    Started

    .

    Finished in 0.000569888 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1754.73 tests/s, 7018.92 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.split('').all? { |d| d.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdz5i_ww1

    Started

    .

    Finished in 0.000580175 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1723.62 tests/s, 6894.47 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqi5opqm7

    Started

    .

    Finished in 0.00054361 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1839.55 tests/s, 7358.22 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.map(&:to_i).all? { |i| i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplzy4cbvm

    Started

    .

    Finished in 0.000568612 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1758.67 tests/s, 7034.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.map(&:to_i).all? { |digit|\
    \ digit.odd? } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpghrrjy78

    Started

    .

    Finished in 0.000434124 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2303.49 tests/s, 9213.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.any? { |j| j.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphrp2uh_e\nStarted\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/tmp/tmphrp2uh_e.rb:16:in `test_unique_digits'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_unique_digits\n\
    \     15:     candidate = method(:unique_digits)\n  => 16:     assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n     17:     assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n     18:     assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n     19:     assert_equal([31, 135], candidate.call([135,\
    \ 103, 31]))\n<[1, 15, 33]> expected but was\n<[1, 15, 33, 1422]>\n\ndiff:\n?\
    \ [1, 15, 33, 1422]\n===============================================================================\n\
    \nFinished in 0.008701453 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    114.92 tests/s, 114.92 assertions/s\n"
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').map(&:to_i).all? { |n|\
    \ n.odd? } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpi_wcvqpg

    Started

    .

    Finished in 0.000334637 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2988.31 tests/s, 11953.25 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprv6nyki1

    Started

    .

    Finished in 0.000763754 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1309.32 tests/s, 5237.29 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.split('').all? { |d| d.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdz5i_ww1

    Started

    .

    Finished in 0.000580175 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1723.62 tests/s, 6894.47 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprv6nyki1

    Started

    .

    Finished in 0.000763754 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1309.32 tests/s, 5237.29 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqi5opqm7

    Started

    .

    Finished in 0.00054361 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1839.55 tests/s, 7358.22 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.map(&:to_i).all? { |i| i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplzy4cbvm

    Started

    .

    Finished in 0.000568612 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1758.67 tests/s, 7034.67 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpipu4nxpv

    Started

    .

    Finished in 0.000535216 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1868.40 tests/s, 7473.62 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprv6nyki1

    Started

    .

    Finished in 0.000763754 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1309.32 tests/s, 5237.29 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.map(&:to_i).all?(&:odd?) }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjzt81_jp

    Started

    .

    Finished in 0.001123236 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    890.28 tests/s, 3561.14 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp_wm8vtf6

    Started

    .

    Finished in 0.000402011 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2487.49 tests/s, 9949.98 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  # TODO: implement this method\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n    candidate\
    \ = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmxsk409w\nStarted\nF\n===============================================================================\n\
    Failure: test_unique_digits(TestHumanEval)\n/tmp/tmpmxsk409w.rb:16:in `test_unique_digits'\n\
    \     13: class TestHumanEval < Test::Unit::TestCase\n     14:   def test_unique_digits\n\
    \     15:     candidate = method(:unique_digits)\n  => 16:     assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n     17:     assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n     18:     assert_equal([111, 151], candidate.call([12345,\
    \ 2033, 111, 151]))\n     19:     assert_equal([31, 135], candidate.call([135,\
    \ 103, 31]))\n<[1, 15, 33]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.005218482 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    191.63 tests/s, 191.63 assertions/s\n"
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnd1usis5

    Started

    .

    Finished in 0.000530014 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1886.74 tests/s, 7546.97 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').map(&:to_i).all? { |i| i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpgclj4u22

    Started

    .

    Finished in 0.000418802 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2387.76 tests/s, 9551.05 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo_d2z3l2

    Started

    .

    Finished in 0.000571822 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1748.80 tests/s, 6995.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnd1usis5

    Started

    .

    Finished in 0.000530014 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1886.74 tests/s, 7546.97 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpop2gdlj5

    Started

    .

    Finished in 0.000576586 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1734.35 tests/s, 6937.39 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpop2gdlj5

    Started

    .

    Finished in 0.000576586 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1734.35 tests/s, 6937.39 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpop2gdlj5

    Started

    .

    Finished in 0.000576586 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1734.35 tests/s, 6937.39 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.map(&:to_i).all? { |digit|\
    \ digit.odd? } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpghrrjy78

    Started

    .

    Finished in 0.000434124 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2303.49 tests/s, 9213.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdu6ddv4a

    Started

    .

    Finished in 0.000569888 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1754.73 tests/s, 7018.92 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp_wm8vtf6

    Started

    .

    Finished in 0.000402011 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2487.49 tests/s, 9949.98 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.map(&:to_i).all? { |n| n.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpe4q1n4zd

    Started

    .

    Finished in 0.000543092 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1841.31 tests/s, 7365.23 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdu6ddv4a

    Started

    .

    Finished in 0.000569888 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1754.73 tests/s, 7018.92 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp_wm8vtf6

    Started

    .

    Finished in 0.000402011 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2487.49 tests/s, 9949.98 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqi5opqm7

    Started

    .

    Finished in 0.00054361 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1839.55 tests/s, 7358.22 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpipu4nxpv

    Started

    .

    Finished in 0.000535216 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1868.40 tests/s, 7473.62 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |i| i.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpefhruvsr

    Started

    .

    Finished in 0.000601464 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1662.61 tests/s, 6650.44 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqi5opqm7

    Started

    .

    Finished in 0.00054361 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1839.55 tests/s, 7358.22 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp_wm8vtf6

    Started

    .

    Finished in 0.000402011 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2487.49 tests/s, 9949.98 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.map(&:to_i).all?(&:odd?) }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpjzt81_jp

    Started

    .

    Finished in 0.001123236 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    890.28 tests/s, 3561.14 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpop2gdlj5

    Started

    .

    Finished in 0.000576586 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1734.35 tests/s, 6937.39 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |i| i.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpefhruvsr

    Started

    .

    Finished in 0.000601464 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1662.61 tests/s, 6650.44 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpop2gdlj5

    Started

    .

    Finished in 0.000576586 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1734.35 tests/s, 6937.39 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').map(&:to_i).all? { |i| i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpgclj4u22

    Started

    .

    Finished in 0.000418802 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2387.76 tests/s, 9551.05 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo_d2z3l2

    Started

    .

    Finished in 0.000571822 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1748.80 tests/s, 6995.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpop2gdlj5

    Started

    .

    Finished in 0.000576586 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1734.35 tests/s, 6937.39 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpipu4nxpv

    Started

    .

    Finished in 0.000535216 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1868.40 tests/s, 7473.62 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.split('').all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnd1usis5

    Started

    .

    Finished in 0.000530014 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1886.74 tests/s, 7546.97 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo_d2z3l2

    Started

    .

    Finished in 0.000571822 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1748.80 tests/s, 6995.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqi5opqm7

    Started

    .

    Finished in 0.00054361 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1839.55 tests/s, 7358.22 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmprv6nyki1

    Started

    .

    Finished in 0.000763754 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1309.32 tests/s, 5237.29 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo_d2z3l2

    Started

    .

    Finished in 0.000571822 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1748.80 tests/s, 6995.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |digit| digit.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9s5xq9se

    Started

    .

    Finished in 0.000781818 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1279.07 tests/s, 5116.28 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |j| j.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdu6ddv4a

    Started

    .

    Finished in 0.000569888 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1754.73 tests/s, 7018.92 assertions/s

    '
  stdout: ''
  timestamp: 1659792871
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqi5opqm7

    Started

    .

    Finished in 0.00054361 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1839.55 tests/s, 7358.22 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |n| n.to_s.chars.all? { |d| d.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpo_d2z3l2

    Started

    .

    Finished in 0.000571822 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1748.80 tests/s, 6995.18 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.map(&:to_i).all?(&:odd?) }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnxnxe_1k

    Started

    .

    Finished in 0.000544021 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1838.16 tests/s, 7352.66 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.chars.all? { |c| c.to_i.odd? } }.sort\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_unique_digits\n\
    \    candidate = method(:unique_digits)\n    assert_equal([1, 15, 33], candidate.call([15,\
    \ 33, 1422, 1]))\n    assert_equal([], candidate.call([152, 323, 1422, 10]))\n\
    \    assert_equal([111, 151], candidate.call([12345, 2033, 111, 151]))\n    assert_equal([31,\
    \ 135], candidate.call([135, 103, 31]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpqi5opqm7

    Started

    .

    Finished in 0.00054361 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1839.55 tests/s, 7358.22 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').map(&:to_i).all? { |j| j.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp_wm8vtf6

    Started

    .

    Finished in 0.000402011 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2487.49 tests/s, 9949.98 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |i| i.to_s.split('').all? { |j| j.to_i.odd? }\
    \ }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpop2gdlj5

    Started

    .

    Finished in 0.000576586 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1734.35 tests/s, 6937.39 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
- exit_code: 0
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422,\
    \ 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef\
    \ unique_digits(x)\n  x.select { |num| num.to_s.chars.all? { |char| char.to_i.odd?\
    \ } }.sort\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_unique_digits\n    candidate = method(:unique_digits)\n    assert_equal([1,\
    \ 15, 33], candidate.call([15, 33, 1422, 1]))\n    assert_equal([], candidate.call([152,\
    \ 323, 1422, 10]))\n    assert_equal([111, 151], candidate.call([12345, 2033,\
    \ 111, 151]))\n    assert_equal([31, 135], candidate.call([135, 103, 31]))\n \
    \ end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpza_nvpbl

    Started

    .

    Finished in 0.000989619 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1010.49 tests/s, 4041.96 assertions/s

    '
  stdout: ''
  timestamp: 1659792872
