name: HumanEval_68_pluck
language: rb
prompt: "# \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
  \ plucked node should be the node with the smallest even value.\n# If multiple nodes\
  \ with the same smallest even value are found return the node that has smallest\
  \ index.\n# The plucked node should be returned in an array, [ smalest_value, its\
  \ index ],\n# If there are no even values or the given array is empty, return [].\n\
  # Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n# Example 2:\n# >>> pluck.call([1,\
  \ 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example 4:\n# >>>\
  \ pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the smallest value,\
  \ but  there are two zeros,\n# so we will choose the first zero, which has the smallest\
  \ index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n\
  def pluck(arr)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_pluck\n\
  \    candidate = method(:pluck)\n    assert_equal([2, 1], candidate.call([4, 2,\
  \ 3]))\n    assert_equal([2, 1], candidate.call([1, 2, 3]))\n    assert_equal([],\
  \ candidate.call([]))\n    assert_equal([0, 1], candidate.call([5, 0, 3, 0, 4, 2]))\n\
  \    assert_equal([0, 3], candidate.call([1, 2, 3, 0, 5, 3]))\n    assert_equal([4,\
  \ 1], candidate.call([5, 4, 8, 4, 8]))\n    assert_equal([6, 1], candidate.call([7,\
  \ 6, 7, 1]))\n    assert_equal([], candidate.call([7, 9, 7, 1]))\n  end\nend\n"
completions: ["  return [] if arr.empty?\n  even_nums = arr.select { |num| num.even?\
    \ }\n  return [] if even_nums.empty?\n  even_nums.min\nend", "  return [] if arr.empty?\n\
    \  even_nums = arr.select { |num| num.even? }\n  return [] if even_nums.empty?\n\
    \  even_nums.min == even_nums.max ? [even_nums.min, arr.index(even_nums.min)]\
    \ : [even_nums.min, arr.index(even_nums.min)]\nend", "  arr.each_with_index.select\
    \ { |e, _i| e.even? }.min_by { |e, i| [e, i] }\nend", "  even_numbers = arr.select\
    \ { |num| num.even? }\n  even_numbers.empty? ? [] : [even_numbers.min, arr.index(even_numbers.min)]\n\
    end", "  evens = arr.select { |x| x.even? }\n  evens.empty? ? [] : [evens.min,\
    \ arr.index(evens.min)]\nend", "  evens = arr.select { |x| x.even? }\n  evens.empty?\
    \ ? [] : [evens.min, arr.index(evens.min)]\nend", "  return [] if arr.empty?\n\
    \  even_nums = arr.select { |num| num.even? }\n  return [] if even_nums.empty?\n\
    \  even_nums.sort!\n  smallest_even = even_nums.first\n  index = arr.index(smallest_even)\n\
    \  [smallest_even, index]\nend", "  evens = arr.select { |num| num.even? }\n \
    \ evens.empty? ? [] : [evens.min, arr.index(evens.min)]\nend", "  # write your\
    \ code here\n  return [] if arr.empty?\n  even_nums = arr.select { |num| num.even?\
    \ }\n  return [] if even_nums.empty?\n  even_nums.min\n  [even_nums.min, arr.index(even_nums.min)]\n\
    end", "  return [] if arr.empty?\n  evens = arr.select(&:even?)\n  return [] if\
    \ evens.empty?\n  evens.sort!\n  [evens.first, arr.index(evens.first)]\nend",
  "  even_arr = arr.select { |x| x.even? }\n  return [] if even_arr.empty?\n  even_arr.sort!\n\
    \  [even_arr[0], arr.index(even_arr[0])]\nend", "  return [] if arr.empty?\n \
    \ evens = arr.select(&:even?)\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  evens = arr.select { |num| num.even? }\n  evens.empty? ? [] : [evens.min,\
    \ arr.index(evens.min)]\nend", "  return [] if arr.empty?\n  even_arr = arr.select\
    \ { |num| num.even? }\n  return [] if even_arr.empty?\n  even_arr.sort!\n  [even_arr[0],\
    \ arr.index(even_arr[0])]\nend", "  evens = arr.select { |x| x.even? }\n  return\
    \ [] if evens.empty?\n  evens.min\n  [evens.min, arr.index(evens.min)]\nend",
  "  evens = arr.select { |num| num.even? }\n  evens.empty? ? [] : [evens.min, arr.index(evens.min)]\n\
    end", "  evens = arr.select { |n| n.even? }\n  evens.empty? ? [] : [evens.min,\
    \ arr.index(evens.min)]\nend", "  even_nums = arr.select { |num| num.even? }\n\
    \  even_nums.empty? ? [] : [even_nums.min, arr.index(even_nums.min)]\nend", " \
    \ arr.each_with_index do |item, index|\n    return [item, index] if item.even?\n\
    \  end\n  []\nend", "  arr.each_with_index do |num, index|\n    if num.even?\n\
    \      return [num, index]\n    end\n  end\n  []\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
