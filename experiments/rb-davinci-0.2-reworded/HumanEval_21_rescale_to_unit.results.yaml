language: rb
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n\
    \ - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7p8ju6zx

    Started

    .

    Finished in 0.000525391 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1903.34 tests/s, 9516.72 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n\
    \ - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7p8ju6zx

    Started

    .

    Finished in 0.000525391 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1903.34 tests/s, 9516.72 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n\
    \ - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7p8ju6zx

    Started

    .

    Finished in 0.000525391 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1903.34 tests/s, 9516.72 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n\
    \ - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7p8ju6zx

    Started

    .

    Finished in 0.000525391 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1903.34 tests/s, 9516.72 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n\
    \ - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7p8ju6zx

    Started

    .

    Finished in 0.000525391 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1903.34 tests/s, 9516.72 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |number|\
    \ (number - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzchnflen

    Started

    .

    Finished in 0.000416681 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2399.92 tests/s, 11999.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |number|\
    \ (number - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzchnflen

    Started

    .

    Finished in 0.000416681 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2399.92 tests/s, 11999.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n\
    \ - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7p8ju6zx

    Started

    .

    Finished in 0.000525391 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1903.34 tests/s, 9516.72 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n\
    \ - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7p8ju6zx

    Started

    .

    Finished in 0.000525391 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1903.34 tests/s, 9516.72 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n\
    \ - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7p8ju6zx

    Started

    .

    Finished in 0.000525391 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1903.34 tests/s, 9516.72 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |number|\
    \ (number - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzchnflen

    Started

    .

    Finished in 0.000416681 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2399.92 tests/s, 11999.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |number|\
    \ (number - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzchnflen

    Started

    .

    Finished in 0.000416681 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2399.92 tests/s, 11999.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |number|\
    \ (number - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzchnflen

    Started

    .

    Finished in 0.000416681 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2399.92 tests/s, 11999.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |number|\
    \ (number - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzchnflen

    Started

    .

    Finished in 0.000416681 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2399.92 tests/s, 11999.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min, max = numbers.minmax\n\
    \  numbers.map { |number| (number - min) / (max - min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp2076lj40

    Started

    .

    Finished in 0.000403068 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.97 tests/s, 12404.85 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |number|\
    \ (number - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzchnflen

    Started

    .

    Finished in 0.000416681 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2399.92 tests/s, 11999.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  max = numbers.max\n \
    \ min = numbers.min\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3x69l_1c

    Started

    .

    Finished in 0.000777721 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1285.81 tests/s, 6429.04 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n\
    \ - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7p8ju6zx

    Started

    .

    Finished in 0.000525391 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1903.34 tests/s, 9516.72 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n\
    \ - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7p8ju6zx

    Started

    .

    Finished in 0.000525391 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1903.34 tests/s, 9516.72 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n\
    \ - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7p8ju6zx

    Started

    .

    Finished in 0.000525391 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1903.34 tests/s, 9516.72 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |x| (x - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk7dsnemo

    Started

    .

    Finished in 0.000508614 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1966.13 tests/s, 9830.64 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n\
    \ - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7p8ju6zx

    Started

    .

    Finished in 0.000525391 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1903.34 tests/s, 9516.72 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |number|\
    \ (number - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzchnflen

    Started

    .

    Finished in 0.000416681 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2399.92 tests/s, 11999.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min, max = numbers.minmax\n\
    \  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpt6k9r7b4

    Started

    .

    Finished in 0.000391596 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2553.65 tests/s, 12768.26 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n\
    \ - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7p8ju6zx

    Started

    .

    Finished in 0.000525391 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1903.34 tests/s, 9516.72 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |number|\
    \ (number - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzchnflen

    Started

    .

    Finished in 0.000416681 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2399.92 tests/s, 11999.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n\
    \ - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7p8ju6zx

    Started

    .

    Finished in 0.000525391 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1903.34 tests/s, 9516.72 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 1
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.minmax.map {\
    \ |n| (n - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyojr_759\nStarted\nF\n===============================================================================\n\
    Failure: test_rescale_to_unit(TestHumanEval)\n/tmp/tmpyojr_759.rb:13:in `test_rescale_to_unit'\n\
    \     10:   def test_rescale_to_unit\n     11:     candidate = method(:rescale_to_unit)\n\
    \     12:     assert_equal([0.0, 1.0], candidate.call([2.0, 49.9]))\n  => 13:\
    \     assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n     14:     assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n     15:\
    \     assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0,\
    \ 3.0, 4.0]))\n     16:     assert_equal([0.25, 0.0, 1.0, 0.5, 0.75], candidate.call([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]))\n<[1.0, 0.0]> expected but was\n<[0.0, 1.0]>\n\ndiff:\n\
    ? [0.0, 1.0, 0.0]\n===============================================================================\n\
    \nFinished in 0.013335973 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.99 tests/s, 149.97 assertions/s\n"
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |x| (x\
    \ - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp5e3jljrl

    Started

    .

    Finished in 0.000524672 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1905.95 tests/s, 9529.76 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |number|\
    \ (number - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzchnflen

    Started

    .

    Finished in 0.000416681 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2399.92 tests/s, 11999.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n\
    \ - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7p8ju6zx

    Started

    .

    Finished in 0.000525391 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1903.34 tests/s, 9516.72 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n\
    \ - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7p8ju6zx

    Started

    .

    Finished in 0.000525391 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1903.34 tests/s, 9516.72 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |x| (x - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpk7dsnemo

    Started

    .

    Finished in 0.000508614 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1966.13 tests/s, 9830.64 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  max = numbers.max\n \
    \ min = numbers.min\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3x69l_1c

    Started

    .

    Finished in 0.000777721 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1285.81 tests/s, 6429.04 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |number|\
    \ (number - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzchnflen

    Started

    .

    Finished in 0.000416681 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2399.92 tests/s, 11999.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |number|\
    \ (number - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzchnflen

    Started

    .

    Finished in 0.000416681 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2399.92 tests/s, 11999.59 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |n| (n - min) / (max - min) }\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp0ambmc8f

    Started

    .

    Finished in 0.000573577 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1743.45 tests/s, 8717.23 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |n| (n\
    \ - numbers.min) / (numbers.max - numbers.min) }\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7p8ju6zx

    Started

    .

    Finished in 0.000525391 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1903.34 tests/s, 9516.72 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min, max = numbers.minmax\n\
    \  numbers.map { |number| (number - min) / (max - min) }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n    candidate\
    \ = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp2076lj40

    Started

    .

    Finished in 0.000403068 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.97 tests/s, 12404.85 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  min = numbers.min\n \
    \ max = numbers.max\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp4_roz3l0

    Started

    .

    Finished in 0.00041723 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2396.76 tests/s, 11983.80 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
- exit_code: 0
  program: "# Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n# such that the smallest number will become 0 and the largest\
    \ will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  max = numbers.max\n \
    \ min = numbers.min\n  numbers.map { |number| (number - min) / (max - min) }\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rescale_to_unit\n\
    \    candidate = method(:rescale_to_unit)\n    assert_equal([0.0, 1.0], candidate.call([2.0,\
    \ 49.9]))\n    assert_equal([1.0, 0.0], candidate.call([100.0, 49.9]))\n    assert_equal([0.0,\
    \ 0.25, 0.5, 0.75, 1.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([2.0, 1.0, 5.0, 3.0, 4.0]))\n    assert_equal([0.25,\
    \ 0.0, 1.0, 0.5, 0.75], candidate.call([12.0, 11.0, 15.0, 13.0, 14.0]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp772wqqqk

    Started

    .

    Finished in 0.000410776 seconds.

    -------------------------------------------------------------------------------

    1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2434.42 tests/s, 12172.08 assertions/s

    '
  stdout: ''
  timestamp: 1659799124
