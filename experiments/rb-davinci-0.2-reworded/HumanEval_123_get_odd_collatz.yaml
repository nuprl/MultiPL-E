name: HumanEval_123_get_odd_collatz
language: rb
prompt: "# Given a positive integer n, return a sorted array that has the odd numbers\
  \ in collatz sequence.\n# The Collatz conjecture is a conjecture in mathematics\
  \ that concerns a sequence defined\n# as follows: start with any positive integer\
  \ n. Then each term is obtained from the \n# previous term as follows: if the previous\
  \ term is even, the next term is one half of \n# the previous term. If the previous\
  \ term is odd, the next term is 3 times the previous\n# term plus 1. The conjecture\
  \ is that no matter what value of n, the sequence will always reach 1.\n# Note:\
  \ \n# 1. Collatz(1) is [1].\n# 2. returned array sorted in increasing order.\n#\
  \ For example:\n# get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5\
  \ is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n# >>> get_odd_collatz.call(5)\n\
  # [1, 5]\ndef get_odd_collatz(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_odd_collatz\n\
  \    candidate = method(:get_odd_collatz)\n    assert_equal([1, 5, 7, 11, 13, 17],\
  \ candidate.call(14))\n    assert_equal([1, 5], candidate.call(5))\n    assert_equal([1,\
  \ 3, 5], candidate.call(12))\n    assert_equal([1], candidate.call(1))\n  end\n\
  end\n"
completions: ["  # your code here\nend", "  # your code here\nend", "  # your code\
    \ here\nend", "  collatz = [n]\n  while n != 1\n    n = n.even? ? n / 2 : 3 *\
    \ n + 1\n    collatz << n\n  end\n  collatz.select { |num| num.odd? }\nend", " \
    \ # TODO: Implement\nend", "  # TODO: implement this method\nend", "  # TODO:\
    \ Implement this method\nend", "  return [1] if n == 1\n  collatz = [n]\n  while\
    \ n != 1\n    n = n.even? ? n / 2 : 3 * n + 1\n    collatz << n\n  end\n  collatz.select\
    \ { |x| x.odd? }\nend", "  collatz_sequence = []\n  while n > 1\n    collatz_sequence\
    \ << n\n    n = n.even? ? n / 2 : 3 * n + 1\n  end\n  collatz_sequence << 1\n\
    \  collatz_sequence.select { |num| num.odd? }\nend", "  # your code here\nend",
  "  # TODO: implement this method\nend", "  # Your code here\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  # TODO: Implement the method\n  # Hint: Use the collatz_sequence\
    \ method from the previous exercise\n  collatz_sequence(n).select { |i| i.odd?\
    \ }\nend", "  collatz = [n]\n  while n != 1\n    if n % 2 == 0\n      n = n /\
    \ 2\n    else\n      n = 3 * n + 1\n    end\n    collatz << n\n  end\n  collatz.select\
    \ { |num| num.odd? }\nend", "  collatz = [n]\n  while n != 1\n    n = n.even?\
    \ ? n/2 : 3*n + 1\n    collatz << n\n  end\n  collatz.select { |num| num.odd?\
    \ }\nend", "  # TODO: Implement this method\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
