name: HumanEval_78_hex_key
language: rb
prompt: "# You have been tasked to write a function that receives \n# a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n# digits that are primes\
  \ (prime number, or a prime, is a natural number \n# greater than 1 that is not\
  \ a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2,\
  \ 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13,\
  \ 17,...\n# So you have to determine a number of the following digits: 2, 3, 5,\
  \ 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is\
  \ always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n\
  # Examples:\n# >>> hex_key.call(\"AB\")\n# 1\n# >>> hex_key.call(\"1077E\")\n# 2\n\
  # >>> hex_key.call(\"ABED1A33\")\n# 4\n# >>> hex_key.call(\"123456789ABCDEF0\")\n\
  # 6\n# >>> hex_key.call(\"2020\")\n# 2\ndef hex_key(num)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_hex_key\n\
  \    candidate = method(:hex_key)\n    assert_equal(1, candidate.call(\"AB\"))\n\
  \    assert_equal(2, candidate.call(\"1077E\"))\n    assert_equal(4, candidate.call(\"\
  ABED1A33\"))\n    assert_equal(2, candidate.call(\"2020\"))\n    assert_equal(6,\
  \ candidate.call(\"123456789ABCDEF0\"))\n    assert_equal(12, candidate.call(\"\
  112233445566778899AABBCCDDEEFF00\"))\n    assert_equal(0, candidate.call([]))\n\
  \  end\nend\n"
completions: ["  num.chars.map { |x| x.to_i(16) }.select { |x| [2, 3, 5, 7, 11, 13].include?(x)\
    \ }.size\nend", "  num.count(\"2357BD\")\nend", "  num.count(\"2357BD\")\nend",
  "  num.chars.count { |char| \"2357BD\".include?(char) }\nend", "  num.scan(/[2357BD]/).count\n\
    end", "  num.scan(/[2357BD]/).count\nend", "  num.count(\"2357BD\")\nend", " \
    \ num.upcase.chars.count { |c| '2357BD'.include?(c) }\nend", "  primes = [2, 3,\
    \ 5, 7, 11, 13]\n  num.chars.map { |x| x.to_i(16) }.select { |x| primes.include?(x)\
    \ }.count\nend", "  num.count(\"2357BD\")\nend", "  num.scan(/[2357BD]/).count\n\
    end", "  primes = [2, 3, 5, 7, 11, 13]\n  num.chars.map { |n| n.to_i(16) }.select\
    \ { |n| primes.include?(n) }.count\nend", "  num.scan(/[2357BD]/).count\nend",
  "  num.count('2357BD')\nend", "  num.scan(/[2357BD]/).size\nend", "  num.chars.count\
    \ { |x| \"2357BD\".include?(x) }\nend", "  primes = [2, 3, 5, 7, 11, 13]\n  num.chars.map(&:hex).select\
    \ { |x| primes.include?(x) }.count\nend", "  num.scan(/[2357BD]/).count\nend",
  "  num.count(\"2357BD\")\nend", "  hex = {\n    '0' => 0,\n    '1' => 1,\n    '2'\
    \ => 2,\n    '3' => 3,\n    '4' => 4,\n    '5' => 5,\n    '6' => 6,\n    '7' =>\
    \ 7,\n    '8' => 8,\n    '9' => 9,\n    'A' => 10,\n    'B' => 11,\n    'C' =>\
    \ 12,\n    'D' => 13,\n    'E' => 14,\n    'F' => 15\n  }\n  primes = [2, 3, 5,\
    \ 7, 11, 13]\n  count = 0\n  num.each_char do |char|\n    if primes.include?(hex[char])\n\
    \      count += 1\n    end\n  end\n  count\nend", "  num.count(\"2357BD\")\nend",
  "  num.scan(/[2357BD]/).count\nend", "  # your code here\nend", "  num.scan(/[2357BD]/).count\n\
    end", "  num.gsub(/[^2-7B-DF]/, '').size\nend", "  num.count(\"2357BD\")\nend",
  "  num.count(\"2357BD\")\nend", "  num.chars.count { |i| %w(2 3 5 7 B D).include?(i)\
    \ }\nend", "  num.scan(/[2357BD]/).count\nend", "  num.count(\"2357BD\")\nend",
  "  num.scan(/[2357BD]/).size\nend", "  # your code here\nend", "  num = num.split('')\n\
    \  num.select! { |x| x.match(/[2357BD]/) }\n  num.length\nend", "  # your code\
    \ here\nend", "  num.gsub(/[^2-7B-DF]/, '').size\nend", "  primes = [2, 3, 5,\
    \ 7, 11, 13]\n  num.chars.map(&:to_i).select { |n| primes.include?(n) }.count\n\
    end", "  hex = {\n    \"0\" => 0,\n    \"1\" => 1,\n    \"2\" => 2,\n    \"3\"\
    \ => 3,\n    \"4\" => 4,\n    \"5\" => 5,\n    \"6\" => 6,\n    \"7\" => 7,\n\
    \    \"8\" => 8,\n    \"9\" => 9,\n    \"A\" => 10,\n    \"B\" => 11,\n    \"\
    C\" => 12,\n    \"D\" => 13,\n    \"E\" => 14,\n    \"F\" => 15\n  }\n  count\
    \ = 0\n  num.split(\"\").each do |n|\n    count += 1 if [2, 3, 5, 7, 11, 13].include?(hex[n])\n\
    \  end\n  count\nend", "  num.count(\"2357BD\")\nend", "  num.scan(/[2357BD]/).count\n\
    end", "  num.gsub(/[^0-9ABD]/, '').size\nend", "  num.count('2357BD')\nend", " \
    \ primes = [2, 3, 5, 7, 11, 13]\n  num.chars.count { |n| primes.include?(n.to_i(16))\
    \ }\nend", "  num.count(\"2357BD\")\nend", "  num.count(\"2357BD\")\nend", " \
    \ num.gsub(/[^2-7B-DF]/, '').size\nend", "  num.scan(/[2357BD]/).size\nend", " \
    \ num.count(\"2357BD\")\nend", "  num.scan(/[2357BD]/).size\nend", "  num.count(\"\
    2357BD\")\nend", "  num.chars.count { |n| [2, 3, 5, 7, 11, 13].include?(n.to_i(16))\
    \ }\nend", "  num.scan(/[2357BD]/).count\nend", "  num.scan(/[2357BD]/).count\n\
    end", "  num.count(\"2357BD\")\nend", "  num.scan(/[2357BD]/).count\nend", " \
    \ num.scan(/[2357BD]/).size\nend", "  num.gsub(/[^2-7B-DF]/, '').size\nend", " \
    \ num.gsub(/[^2357BD]/, '').length\nend", "  num.count('2357BD')\nend", "  num.scan(/[2357BD]/).count\n\
    end", "  num.count(\"2357BD\")\nend", "  num.scan(/[2357BD]/).size\nend", "  num.count(\"\
    2357BD\")\nend", "  num.scan(/[2357BD]/).count\nend", "  num.scan(/[2357BD]/).count\n\
    end", "  num.count(\"2357BD\")\nend", "  primes = [2, 3, 5, 7, 11, 13]\n  num.chars.map\
    \ { |n| n.to_i(16) }.select { |n| primes.include?(n) }.size\nend", "  num.count(\"\
    2357BD\")\nend", "  # your code here\nend", "  # your code here\nend", "  num.scan(/[2357BD]/).count\n\
    end", "  num = num.to_i(16)\n  primes = [2, 3, 5, 7, 11, 13]\n  count = 0\n  while\
    \ num > 0\n    if primes.include?(num % 10)\n      count += 1\n    end\n    num\
    \ /= 10\n  end\n  count\nend", "  num.scan(/[2357BD]/).size\nend", "  # your code\
    \ here\nend", "  num.scan(/[2357BD]/).count\nend", "  num.chars.count { |c| %w(2\
    \ 3 5 7 B D).include?(c) }\nend", "  num.scan(/[2357BD]/).count\nend", "  num.scan(/[2357BD]/).count\n\
    end", "  num.count(\"2357BD\")\nend", "  num.gsub(/[^0-9ABD]/, '').size\nend",
  "  num.scan(/[2357BD]/).count\nend", "  num.gsub(/[^2-7B-DF]/, '').size\nend", " \
    \ num.count(\"2357BD\")\nend", "  num.scan(/[2357BD]/).size\nend", "  num.count(\"\
    2357BD\")\nend", "  hex_primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n\
    \  num.chars.count { |char| hex_primes.include?(char) }\nend", "  num.count(\"\
    2357BD\")\nend", "  num.scan(/[2357BD]/).count\nend", "  num.upcase.chars.select\
    \ { |c| \"2357BD\".include?(c) }.size\nend", "  num.count('2357BD')\nend", " \
    \ hex_primes = [2, 3, 5, 7, 11, 13]\n  num.chars.count { |char| hex_primes.include?(char.to_i(16))\
    \ }\nend", "  num.chars.count { |c| %w(2 3 5 7 B D).include?(c) }\nend", "  num.upcase.chars.count\
    \ { |c| \"2357BD\".include?(c) }\nend", "  num.count(\"2357BD\")\nend", "  num.scan(/[2357BD]/).size\n\
    end", "  num.scan(/[2357BD]/).count\nend", "  num.count(\"2357BD\")\nend", " \
    \ num.scan(/[2357BD]/).count\nend", "  num.gsub(/[^2357BD]/, '').size\nend", " \
    \ primes = [2, 3, 5, 7, 11, 13]\n  num.chars.map { |char| char.to_i(16) }.select\
    \ { |digit| primes.include?(digit) }.size\nend", "  num = num.split('')\n  count\
    \ = 0\n  num.each do |i|\n    if i == '2' || i == '3' || i == '5' || i == '7'\
    \ || i == 'B' || i == 'D'\n      count += 1\n    end\n  end\n  count\nend", " \
    \ num.count(\"2357BD\")\nend", "  num.count(\"2357BD\")\nend", "  num.scan(/[2357BD]/).count\n\
    end", "  num.count(\"2357BD\")\nend", "  num.scan(/[2357BD]/).size\nend", "  num.scan(/[2357BD]/).count\n\
    end", "  num.scan(/[2357BD]/).size\nend", "  hex_primes = [2, 3, 5, 7, 11, 13]\n\
    \  num.chars.count { |char| hex_primes.include?(char.to_i(16)) }\nend", "  num.scan(/[2357BD]/).size\n\
    end", "  num.count(\"2357BD\")\nend", "  num.count(\"2357BD\")\nend", "  primes\
    \ = [2, 3, 5, 7, 11, 13]\n  num.chars.count { |c| primes.include?(c.to_i(16))\
    \ }\nend", "  num.upcase.scan(/[2357BD]/).count\nend", "  primes = [2, 3, 5, 7,\
    \ 11, 13]\n  num.chars.map { |x| x.to_i(16) }.select { |x| primes.include?(x)\
    \ }.size\nend", "  # your code here\nend", "  num.upcase.chars.select { |c| c\
    \ =~ /[2357BD]/ }.size\nend", "  # your code here\nend", "  num.to_i(16).to_s(2).count('1')\n\
    end", "  num.count('2357BD')\nend", "  num.count(\"2357BD\")\nend", "  primes\
    \ = [2, 3, 5, 7, 11, 13]\n  num.chars.map { |x| x.to_i(16) }.select { |x| primes.include?(x)\
    \ }.count\nend", "  num.scan(/[2357BD]/).size\nend", "  # your code here\nend",
  "  primes = [2, 3, 5, 7, 11, 13]\n  num.chars.map(&:hex).count { |n| primes.include?(n)\
    \ }\nend", "  # your code here\nend", "  num.gsub(/[^2-7B-D]/, '').size\nend",
  "  # your code here\nend", "  num.scan(/[2357BD]/).count\nend", "  num.count(\"\
    2357BD\")\nend", "  num.scan(/[2357BD]/).count\nend", "  num.count(\"2357BD\"\
    )\nend", "  num.scan(/[2357BD]/).count\nend", "  num.count(\"2357BD\")\nend",
  "  num.count('2357BD')\nend", "  num.count('2357BD')\nend", "  # your code here\n\
    end", "  hex_digits = {\n    '0' => 0,\n    '1' => 1,\n    '2' => 2,\n    '3'\
    \ => 3,\n    '4' => 4,\n    '5' => 5,\n    '6' => 6,\n    '7' => 7,\n    '8' =>\
    \ 8,\n    '9' => 9,\n    'A' => 10,\n    'B' => 11,\n    'C' => 12,\n    'D' =>\
    \ 13,\n    'E' => 14,\n    'F' => 15\n  }\n  primes = [2, 3, 5, 7, 11, 13]\n \
    \ num.chars.map { |digit| hex_digits[digit] }.select { |digit| primes.include?(digit)\
    \ }.count\nend", "  primes = [2, 3, 5, 7, 11, 13]\n  num.chars.map { |char| primes.include?(char.to_i(16))\
    \ ? 1 : 0 }.sum\nend", "  num.count(\"2357BD\")\nend", "  num.gsub(/[^2357BD]/,\
    \ '').size\nend", "  num.count(\"2357BD\")\nend", "  # your code here\nend", " \
    \ # your code here\nend", "  num.chars.count { |char| \"2357BD\".include?(char)\
    \ }\nend", "  primes = [2, 3, 5, 7, 11, 13]\n  num.chars.map(&:to_i).select {\
    \ |n| primes.include?(n) }.size\nend", "  hex_primes = [2, 3, 5, 7, 11, 13]\n\
    \  num.chars.map { |char| char.to_i(16) }.select { |num| hex_primes.include?(num)\
    \ }.count\nend", "  # your code here\nend", "  hex_primes = [2, 3, 5, 7, 11, 13]\n\
    \  num.chars.map { |char| char.to_i(16) }.select { |digit| hex_primes.include?(digit)\
    \ }.count\nend", "  num.count(\"2357BD\")\nend", "  num.scan(/[2357BD]/).size\n\
    end", "  primes = [2, 3, 5, 7, 11, 13]\n  num.chars.count { |char| primes.include?(char.to_i(16))\
    \ }\nend", "  # your code here\nend", "  num.gsub(/[^0-9A-F]/, '').chars.select\
    \ { |x| x =~ /[2357BD]/ }.size\nend", "  num.chars.count { |char| \"2357BD\".include?(char)\
    \ }\nend", "  hex_primes = [2, 3, 5, 7, 11, 13]\n  num.chars.count { |n| hex_primes.include?(n.to_i(16))\
    \ }\nend", "  # your code here\nend", "  num.scan(/[2357BD]/).size\nend", "  primes\
    \ = [2, 3, 5, 7, 11, 13]\n  num.chars.map { |n| n.to_i(16) }.select { |n| primes.include?(n)\
    \ }.size\nend", "  num.count(\"2357BD\")\nend", "  # your code here\nend", " \
    \ # your code here\nend", "  num.scan(/[2357BD]/).count\nend", "  num.count(\"\
    2357BD\")\nend", "  primes = [2, 3, 5, 7, 11, 13]\n  num.chars.count { |char|\
    \ primes.include?(char.to_i(16)) }\nend", "  # your code here\nend", "  hex =\
    \ {\n    \"0\" => 0,\n    \"1\" => 1,\n    \"2\" => 2,\n    \"3\" => 3,\n    \"\
    4\" => 4,\n    \"5\" => 5,\n    \"6\" => 6,\n    \"7\" => 7,\n    \"8\" => 8,\n\
    \    \"9\" => 9,\n    \"A\" => 10,\n    \"B\" => 11,\n    \"C\" => 12,\n    \"\
    D\" => 13,\n    \"E\" => 14,\n    \"F\" => 15\n  }\n  primes = [2, 3, 5, 7, 11,\
    \ 13]\n  count = 0\n  num.split(\"\").each do |n|\n    if primes.include?(hex[n])\n\
    \      count += 1\n    end\n  end\n  count\nend", "  num.scan(/[2357BD]/).size\n\
    end", "  num.count(\"2357BD\")\nend", "  # your code here\nend", "  primes = [2,\
    \ 3, 5, 7, 11, 13]\n  num.chars.count { |char| primes.include?(char.to_i(16))\
    \ }\nend", "  primes = [2, 3, 5, 7, 11, 13]\n  num.chars.map { |x| x.to_i(16)\
    \ }.select { |x| primes.include?(x) }.count\nend", "  num.to_i(16).to_s(2).count('1')\n\
    end", "  num.scan(/[2357BD]/).count\nend", "  primes = [2, 3, 5, 7, 11, 13]\n\
    \  num.chars.map { |c| c.to_i(16) }.select { |n| primes.include?(n) }.size\nend",
  "  num.count(\"2357BD\")\nend", "  num.gsub(/[^2-7B-DF]/, '').size\nend", "  # your\
    \ code here\nend", "  num.count('2357BD')\nend", "  primes = [2, 3, 5, 7, 11,\
    \ 13]\n  num.chars.count { |char| primes.include?(char.to_i(16)) }\nend", "  num.chars.count\
    \ { |c| %w(2 3 5 7 B D).include?(c) }\nend", "  primes = [2, 3, 5, 7, 11, 13]\n\
    \  num.chars.select { |i| primes.include?(i.to_i(16)) }.count\nend", "  num.count(\"\
    2357BD\")\nend", "  num.count('2357BD')\nend", "  # your code here\nend", "  primes\
    \ = [2, 3, 5, 7, 11, 13]\n  num.chars.map { |x| x.to_i(16) }.select { |x| primes.include?(x)\
    \ }.size\nend", "  num.gsub(/[^2-7B-DF]/, '').size\nend", "  num.count(\"2357BD\"\
    )\nend", "  num.count(\"2357BD\")\nend", "  num.count(\"2357BD\")\nend", "  num\
    \ = num.upcase.split('')\n  num.select { |x| x =~ /[2357BD]/ }.length\nend", " \
    \ num.scan(/[2357BD]/).count\nend", "  num.count(\"2357BD\")\nend", "  # your\
    \ code here\nend", "  num.scan(/[2357BD]/).size\nend", "  num.scan(/[2357BD]/).count\n\
    end", "  num.scan(/[2357BD]/).count\nend", "  num.count(\"2357BD\")\nend", " \
    \ num.count(\"2357BD\")\nend", "  num.count(\"2357BD\")\nend", "  primes = [2,\
    \ 3, 5, 7, 11, 13]\n  num.chars.count { |char| primes.include?(char.to_i(16))\
    \ }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
