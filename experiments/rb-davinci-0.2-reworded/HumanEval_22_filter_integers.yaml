name: HumanEval_22_filter_integers
language: rb
prompt: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
  a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
  # [1, 2, 3]\ndef filter_integers(values)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_filter_integers\n\
  \    candidate = method(:filter_integers)\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([4, 9], candidate.call([4, {}, [], 23.2, 9, \"adasd\"]))\n   \
  \ assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3, \"a\", \"b\"]))\n  end\n\
  end\n"
completions: ["  values.select { |v| v.is_a?(Integer) }\nend", "  values.select {\
    \ |value| value.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |v| v.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |v| v.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |v| v.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |v| v.is_a?(Integer) }\nend", "  values.select {\
    \ |v| v.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |value| value.is_a?(Integer) }\nend", "  values.select\
    \ { |value| value.is_a?(Integer) }\nend", "  values.select { |value| value.is_a?(Integer)\
    \ }\nend", "  values.select { |v| v.is_a?(Integer) }\nend", "  values.select {\
    \ |value| value.is_a?(Integer) }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
