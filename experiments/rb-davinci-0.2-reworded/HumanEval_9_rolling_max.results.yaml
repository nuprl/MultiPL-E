language: rb
name: HumanEval_9_rolling_max
results:
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ { |n, i| numbers[0..i].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpovrt13lu

    Started

    .

    Finished in 0.000592444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1687.92 tests/s, 6751.69 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpc3ihllbm

    Started

    .

    Finished in 0.000571205 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1750.68 tests/s, 7002.74 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplj9t0nht

    Started

    .

    Finished in 0.000429715 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2327.12 tests/s, 9308.50 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplj9t0nht

    Started

    .

    Finished in 0.000429715 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2327.12 tests/s, 9308.50 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result\
    \ = []\n  max = 0\n  numbers.each do |number|\n    max = number if number > max\n\
    \    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpc3ud4r10

    Started

    .

    Finished in 0.001235962 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    809.09 tests/s, 3236.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result\
    \ = []\n  max = numbers[0]\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuuq2l5cp

    Started

    .

    Finished in 0.000582874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1715.64 tests/s, 6862.55 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpns3wt0ba

    Started

    .

    Finished in 0.000765042 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1307.12 tests/s, 5228.47 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers[0]\n  numbers.each do |number|\n    max_number\
    \ = number if number > max_number\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpi7w8h73y

    Started

    .

    Finished in 0.000408393 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2448.62 tests/s, 9794.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpgrxndh3w

    Started

    .

    Finished in 0.000641235 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1559.49 tests/s, 6237.96 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplj9t0nht

    Started

    .

    Finished in 0.000429715 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2327.12 tests/s, 9308.50 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplj9t0nht

    Started

    .

    Finished in 0.000429715 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2327.12 tests/s, 9308.50 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplj9t0nht

    Started

    .

    Finished in 0.000429715 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2327.12 tests/s, 9308.50 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpgrxndh3w

    Started

    .

    Finished in 0.000641235 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1559.49 tests/s, 6237.96 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  numbers.each_with_index do |number, index|\n    max_numbers << numbers[0..index].max\n\
    \  end\n  max_numbers\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpcu3flwmp

    Started

    .

    Finished in 0.000569332 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1756.44 tests/s, 7025.78 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |n, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp9z3qxi0e

    Started

    .

    Finished in 0.000561273 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1781.66 tests/s, 7126.66 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpgrxndh3w

    Started

    .

    Finished in 0.000641235 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1559.49 tests/s, 6237.96 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ { |n, i| numbers[0..i].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpovrt13lu

    Started

    .

    Finished in 0.000592444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1687.92 tests/s, 6751.69 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = 0\n  numbers.each do |number|\n    max_number = number\
    \ if number > max_number\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7t4_0qac

    Started

    .

    Finished in 0.000580983 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1721.22 tests/s, 6884.88 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ { |n, i| numbers[0..i].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpovrt13lu

    Started

    .

    Finished in 0.000592444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1687.92 tests/s, 6751.69 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = nil\n  numbers.each do |number|\n    max_number = number\
    \ if max_number.nil? || number > max_number\n    max_numbers << max_number\n \
    \ end\n  max_numbers\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdkiikzbo

    Started

    .

    Finished in 0.000574683 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1740.09 tests/s, 6960.36 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplj9t0nht

    Started

    .

    Finished in 0.000429715 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2327.12 tests/s, 9308.50 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = 0\n  numbers.each do |number|\n    max_number = number\
    \ if number > max_number\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7t4_0qac

    Started

    .

    Finished in 0.000580983 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1721.22 tests/s, 6884.88 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpgrxndh3w

    Started

    .

    Finished in 0.000641235 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1559.49 tests/s, 6237.96 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result\
    \ = []\n  numbers.each_with_index do |number, index|\n    result << numbers[0..index].max\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy3pfn252

    Started

    .

    Finished in 0.000555682 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1799.59 tests/s, 7198.36 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result\
    \ = []\n  max = 0\n  numbers.each do |number|\n    max = number if number > max\n\
    \    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpc3ud4r10

    Started

    .

    Finished in 0.001235962 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    809.09 tests/s, 3236.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpgrxndh3w

    Started

    .

    Finished in 0.000641235 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1559.49 tests/s, 6237.96 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result\
    \ = []\n  max = 0\n  numbers.each do |number|\n    max = number if number > max\n\
    \    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpc3ud4r10

    Started

    .

    Finished in 0.001235962 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    809.09 tests/s, 3236.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 1
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  # TODO:\
    \ implement me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpolwsw_df\nStarted\nF\n===============================================================================\n\
    Failure: test_rolling_max(TestHumanEval)\n/tmp/tmpolwsw_df.rb:12:in `test_rolling_max'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_rolling_max\n\
    \     11:     candidate = method(:rolling_max)\n  => 12:     assert_equal([],\
    \ candidate.call([]))\n     13:     assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n     14:     assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2,\
    \ 1]))\n     15:     assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3,\
    \ 100, 3]))\n<[]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006915997 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.59 tests/s, 144.59 assertions/s\n"
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result\
    \ = []\n  max = numbers[0]\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuuq2l5cp

    Started

    .

    Finished in 0.000582874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1715.64 tests/s, 6862.55 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result\
    \ = []\n  max = nil\n  numbers.each do |number|\n    if max.nil? || number > max\n\
    \      max = number\n    end\n    result << max\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3nkboav9

    Started

    .

    Finished in 0.000599157 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1669.01 tests/s, 6676.05 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplj9t0nht

    Started

    .

    Finished in 0.000429715 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2327.12 tests/s, 9308.50 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result\
    \ = []\n  max = numbers[0]\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuuq2l5cp

    Started

    .

    Finished in 0.000582874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1715.64 tests/s, 6862.55 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpc3ihllbm

    Started

    .

    Finished in 0.000571205 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1750.68 tests/s, 7002.74 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers[0]\n  numbers.each do |number|\n    max_number\
    \ = number if number > max_number\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpi7w8h73y

    Started

    .

    Finished in 0.000408393 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2448.62 tests/s, 9794.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = 0\n  numbers.each do |number|\n    max_number = number\
    \ if number > max_number\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7t4_0qac

    Started

    .

    Finished in 0.000580983 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1721.22 tests/s, 6884.88 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ { |n, i| numbers[0..i].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpovrt13lu

    Started

    .

    Finished in 0.000592444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1687.92 tests/s, 6751.69 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpc3ihllbm

    Started

    .

    Finished in 0.000571205 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1750.68 tests/s, 7002.74 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result\
    \ = []\n  max = numbers[0]\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuuq2l5cp

    Started

    .

    Finished in 0.000582874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1715.64 tests/s, 6862.55 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplj9t0nht

    Started

    .

    Finished in 0.000429715 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2327.12 tests/s, 9308.50 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpc3ihllbm

    Started

    .

    Finished in 0.000571205 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1750.68 tests/s, 7002.74 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplj9t0nht

    Started

    .

    Finished in 0.000429715 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2327.12 tests/s, 9308.50 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpc3ihllbm

    Started

    .

    Finished in 0.000571205 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1750.68 tests/s, 7002.74 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result\
    \ = []\n  numbers.each_with_index do |number, index|\n    result << numbers[0..index].max\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy3pfn252

    Started

    .

    Finished in 0.000555682 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1799.59 tests/s, 7198.36 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpc3ihllbm

    Started

    .

    Finished in 0.000571205 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1750.68 tests/s, 7002.74 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 1
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  # TODO:\
    \ implement me\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpolwsw_df\nStarted\nF\n===============================================================================\n\
    Failure: test_rolling_max(TestHumanEval)\n/tmp/tmpolwsw_df.rb:12:in `test_rolling_max'\n\
    \      9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_rolling_max\n\
    \     11:     candidate = method(:rolling_max)\n  => 12:     assert_equal([],\
    \ candidate.call([]))\n     13:     assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n     14:     assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2,\
    \ 1]))\n     15:     assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3,\
    \ 100, 3]))\n<[]> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.006915997 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    144.59 tests/s, 144.59 assertions/s\n"
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplj9t0nht

    Started

    .

    Finished in 0.000429715 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2327.12 tests/s, 9308.50 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |n, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmptbzbo5da

    Started

    .

    Finished in 0.000599741 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1667.39 tests/s, 6669.55 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplj9t0nht

    Started

    .

    Finished in 0.000429715 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2327.12 tests/s, 9308.50 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplj9t0nht

    Started

    .

    Finished in 0.000429715 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2327.12 tests/s, 9308.50 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = 0\n  numbers.each do |number|\n    max_number = number\
    \ if number > max_number\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7t4_0qac

    Started

    .

    Finished in 0.000580983 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1721.22 tests/s, 6884.88 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplj9t0nht

    Started

    .

    Finished in 0.000429715 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2327.12 tests/s, 9308.50 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = [max, number].max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvg97cxzw

    Started

    .

    Finished in 0.000569222 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1756.78 tests/s, 7027.14 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpc3ihllbm

    Started

    .

    Finished in 0.000571205 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1750.68 tests/s, 7002.74 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplj9t0nht

    Started

    .

    Finished in 0.000429715 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2327.12 tests/s, 9308.50 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplj9t0nht

    Started

    .

    Finished in 0.000429715 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2327.12 tests/s, 9308.50 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpns3wt0ba

    Started

    .

    Finished in 0.000765042 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1307.12 tests/s, 5228.47 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |_, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfsjuxwn2

    Started

    .

    Finished in 0.000580509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1722.63 tests/s, 6890.50 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ { |number, index| numbers[0..index].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphf2j9siq

    Started

    .

    Finished in 0.000598488 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1670.88 tests/s, 6683.51 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |num|\n    max = num if num > max\n    max\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpu7rz6668

    Started

    .

    Finished in 0.000552824 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1808.89 tests/s, 7235.58 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ { |n, i| numbers[0..i].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpovrt13lu

    Started

    .

    Finished in 0.000592444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1687.92 tests/s, 6751.69 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplj9t0nht

    Started

    .

    Finished in 0.000429715 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2327.12 tests/s, 9308.50 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplj9t0nht

    Started

    .

    Finished in 0.000429715 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2327.12 tests/s, 9308.50 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpc3ihllbm

    Started

    .

    Finished in 0.000571205 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1750.68 tests/s, 7002.74 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result\
    \ = []\n  max = numbers[0]\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuuq2l5cp

    Started

    .

    Finished in 0.000582874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1715.64 tests/s, 6862.55 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = [max, number].max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvg97cxzw

    Started

    .

    Finished in 0.000569222 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1756.78 tests/s, 7027.14 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplj9t0nht

    Started

    .

    Finished in 0.000429715 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2327.12 tests/s, 9308.50 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplj9t0nht

    Started

    .

    Finished in 0.000429715 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2327.12 tests/s, 9308.50 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |num|\n    max = num if num > max\n    max\n\
    \  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpu7rz6668

    Started

    .

    Finished in 0.000552824 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1808.89 tests/s, 7235.58 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ { |n, i| numbers[0..i].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpovrt13lu

    Started

    .

    Finished in 0.000592444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1687.92 tests/s, 6751.69 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result\
    \ = []\n  numbers.each_with_index do |number, index|\n    result << numbers[0..index].max\n\
    \  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpy3pfn252

    Started

    .

    Finished in 0.000555682 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1799.59 tests/s, 7198.36 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = 0\n  numbers.each do |number|\n    max_number = number\
    \ if number > max_number\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp7t4_0qac

    Started

    .

    Finished in 0.000580983 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1721.22 tests/s, 6884.88 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = [max, number].max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvg97cxzw

    Started

    .

    Finished in 0.000569222 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1756.78 tests/s, 7027.14 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ { |n, i| numbers[0..i].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpovrt13lu

    Started

    .

    Finished in 0.000592444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1687.92 tests/s, 6751.69 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result\
    \ = []\n  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n\
    \      max = number\n    end\n    result << max\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6zhcme41

    Started

    .

    Finished in 0.000556651 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1796.46 tests/s, 7185.83 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpc3ihllbm

    Started

    .

    Finished in 0.000571205 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1750.68 tests/s, 7002.74 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = [max, number].max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvg97cxzw

    Started

    .

    Finished in 0.000569222 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1756.78 tests/s, 7027.14 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    if number > max\n      max =\
    \ number\n    end\n    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp3yy8cnqj

    Started

    .

    Finished in 0.000433482 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2306.90 tests/s, 9227.60 assertions/s

    '
  stdout: ''
  timestamp: 1659795073
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = [max, number].max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvg97cxzw

    Started

    .

    Finished in 0.000569222 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1756.78 tests/s, 7027.14 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpgrxndh3w

    Started

    .

    Finished in 0.000641235 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1559.49 tests/s, 6237.96 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result\
    \ = []\n  max = numbers[0]\n  numbers.each do |number|\n    max = number if number\
    \ > max\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpuuq2l5cp

    Started

    .

    Finished in 0.000582874 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1715.64 tests/s, 6862.55 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |_, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpfsjuxwn2

    Started

    .

    Finished in 0.000580509 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1722.63 tests/s, 6890.50 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result\
    \ = []\n  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n\
    \      max = number\n    end\n    result << max\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6zhcme41

    Started

    .

    Finished in 0.000556651 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1796.46 tests/s, 7185.83 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max_numbers\
    \ = []\n  max_number = numbers[0]\n  numbers.each do |number|\n    max_number\
    \ = number if number > max_number\n    max_numbers << max_number\n  end\n  max_numbers\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpi7w8h73y

    Started

    .

    Finished in 0.000408393 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2448.62 tests/s, 9794.49 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |_, i|\n    numbers[0..i].max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpgrxndh3w

    Started

    .

    Finished in 0.000641235 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1559.49 tests/s, 6237.96 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result\
    \ = []\n  max = numbers[0]\n  numbers.each do |number|\n    if number > max\n\
    \      max = number\n    end\n    result << max\n  end\n  result\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6zhcme41

    Started

    .

    Finished in 0.000556651 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1796.46 tests/s, 7185.83 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = [max, number].max\n  end\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
    \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
    \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
    \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpvg97cxzw

    Started

    .

    Finished in 0.000569222 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1756.78 tests/s, 7027.14 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  result\
    \ = []\n  max = 0\n  numbers.each do |number|\n    if number > max\n      max\
    \ = number\n    end\n    result << max\n  end\n  result\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpgelfzfrr

    Started

    .

    Finished in 0.001285227 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    778.07 tests/s, 3112.29 assertions/s

    '
  stdout: ''
  timestamp: 1659795073
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  max\
    \ = numbers.first\n  numbers.map do |number|\n    max = number if number > max\n\
    \    max\n  end\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_rolling_max\n    candidate = method(:rolling_max)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3,\
    \ 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3,\
    \ 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpui1iz9xg

    Started

    .

    Finished in 0.000562547 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1777.63 tests/s, 7110.52 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ { |n, i| numbers[0..i].max }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_rolling_max\n    candidate = method(:rolling_max)\n\
    \    assert_equal([], candidate.call([]))\n    assert_equal([1, 2, 3, 4], candidate.call([1,\
    \ 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4, 3, 2, 1]))\n \
    \   assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100, 3]))\n  end\n\
    end\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpovrt13lu

    Started

    .

    Finished in 0.000592444 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1687.92 tests/s, 6751.69 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.map.with_index\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplj9t0nht

    Started

    .

    Finished in 0.000429715 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2327.12 tests/s, 9308.50 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
- exit_code: 0
  program: "# From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1,\
    \ 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_index.map\
    \ do |number, index|\n    numbers[0..index].max\n  end\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n    candidate\
    \ = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n    assert_equal([1,\
    \ 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4, 4, 4, 4], candidate.call([4,\
    \ 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100], candidate.call([3, 2, 3, 100,\
    \ 3]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp49s0y5jf

    Started

    .

    Finished in 0.000585253 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1708.66 tests/s, 6834.65 assertions/s

    '
  stdout: ''
  timestamp: 1659795072
