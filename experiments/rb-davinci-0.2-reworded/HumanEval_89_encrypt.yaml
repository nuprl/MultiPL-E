name: HumanEval_89_encrypt
language: rb
prompt: "# Create a function encrypt that takes a string as an argument and\n# returns\
  \ a string encrypted with the alphabet being rotated. \n# The alphabet should be\
  \ rotated in a manner such that the letters \n# shift down by two multiplied to\
  \ two places.\n# For example:\n# >>> encrypt.call(\"hi\")\n# \"lm\"\n# >>> encrypt.call(\"\
  asdfghjkl\")\n# \"ewhjklnop\"\n# >>> encrypt.call(\"gf\")\n# \"kj\"\n# >>> encrypt.call(\"\
  et\")\n# \"ix\"\ndef encrypt(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encrypt\n\
  \    candidate = method(:encrypt)\n    assert_equal(\"lm\", candidate.call(\"hi\"\
  ))\n    assert_equal(\"ewhjklnop\", candidate.call(\"asdfghjkl\"))\n    assert_equal(\"\
  kj\", candidate.call(\"gf\"))\n    assert_equal(\"ix\", candidate.call(\"et\"))\n\
  \    assert_equal(\"jeiajeaijeiak\", candidate.call(\"faewfawefaewg\"))\n    assert_equal(\"\
  lippsqcjvmirh\", candidate.call(\"hellomyfriend\"))\n    assert_equal(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
  , candidate.call(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"))\n    assert_equal(\"\
  e\", candidate.call(\"a\"))\n  end\nend\n"
completions: ["  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char\
    \ do |char|\n    if alphabet.include?(char)\n      encrypted << alphabet[(alphabet.index(char)\
    \ + 2) % 26]\n    else\n      encrypted << char\n    end\n  end\n  encrypted\n\
    end", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  encrypted = \"\"\n  s.each_char\
    \ do |char|\n    if char == \" \"\n      encrypted += \" \"\n    else\n      encrypted\
    \ += alphabet[(alphabet.index(char) + 2) * 2]\n    end\n  end\n  encrypted\nend",
  "  s.chars.map { |c| c.ord + 2 * 2 }.map { |c| c.chr }.join\nend", "  s.chars.map\
    \ { |char| char.next.next }.join\nend", "  s.tr(\"a-z\",\"c-za-b\")\nend", " \
    \ s.split(\"\").map { |c| c.ord + 2 * 2 }.map { |c| c.chr }.join(\"\")\nend",
  "\talphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\tencrypt = \"\"\n\ts.each_char do\
    \ |c|\n\t\tif alphabet.include?(c)\n\t\t\tencrypt += alphabet[(alphabet.index(c)\
    \ + 2) % 26]\n\t\telse\n\t\t\tencrypt += c\n\t\tend\n\tend\n\tencrypt\nend", " \
    \ alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n\
    \    old_index = alphabet.find_index(char)\n    new_index = old_index + 2 * 2\n\
    \    encrypted += alphabet[new_index]\n  end\n  encrypted\nend", "  s.chars.map\
    \ { |c| c.ord + 2 * 2 }.map { |c| c.chr }.join\nend", "  s.tr(\"a-z\", \"c-za-b\"\
    )\nend", "\t# s.each_char do |c|\n\t# \tif c == \"z\"\n\t# \t\tc = \"b\"\n\t#\
    \ \telsif c == \"y\"\n\t# \t\tc = \"a\"\n\t# \telse\n\t# \t\tc = c.next\n\t# \t\
    end\n\t# end\n\t# s.each_char do |c|\n\t# \tif c == \"z\"\n\t# \t\tc = \"b\"\n\
    \t# \telsif c == \"y\"\n\t# \t\tc = \"a\"\n\t# \telse\n\t# \t\tc = c.next\n\t\
    # \tend\n\t# end\n\t# s.each_char do |c|\n\t# \tif c == \"z\"\n\t# \t\tc = \"\
    b\"\n\t# \telsif c == \"y\"\n\t# \t\tc = \"a\"\n\t# \telse\n\t# \t\tc = c.next\n\
    \t# \tend\n\t# end\n\t# s.each_char do |c|\n\t# \tif c == \"z\"\n\t# \t\tc = \"\
    b\"\n\t# \telsif c == \"y\"\n\t# \t\tc = \"a\"\n\t# \telse\n\t# \t\tc = c.next\n\
    \t# \tend\n\t# end\n\t# s.each_char do |c|\n\t# \tif c == \"z\"\n\t# \t\tc = \"\
    b\"\n\t# \telsif c == \"y\"\n\t# \t\tc = \"a\"\n\t# \telse\n\t# \t\tc = c.next\n\
    \t# \tend\n\t# end\n\t# s.each_char do |c|\n\t# \tif c == \"z\"\n\t# \t\tc = \"\
    b\"\n\t# \telsif c == \"y\"\n\t# \t\tc = \"a\"\n\t# \telse\n\t# \t\tc = c.next\n\
    \t# \tend\n\t# end\n\t# s.each_char", "  alphabet = ('a'..'z').to_a\n  encrypted\
    \ = ''\n  s.each_char do |char|\n    old_idx = alphabet.find_index(char)\n   \
    \ new_idx = old_idx + (2 * 2)\n    encrypted += alphabet[new_idx % 26]\n  end\n\
    \  encrypted\nend", "  # your code here\nend", "  s.tr(\"a-z\", \"c-za-b\")\n\
    end", "  alphabet = ('a'..'z').to_a\n  encrypted = ''\n  s.each_char do |char|\n\
    \    if alphabet.include?(char)\n      encrypted += alphabet[alphabet.index(char)\
    \ + 2]\n    else\n      encrypted += char\n    end\n  end\n  encrypted\nend",
  "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  encrypted = \"\"\n  s.each_char\
    \ do |char|\n    if alphabet.include?(char)\n      encrypted += alphabet[alphabet.index(char)\
    \ + 2 * 2]\n    else\n      encrypted += char\n    end\n  end\n  encrypted\nend",
  "  s.chars.map { |c| c.ord + 2 * 2 }.map { |c| c.chr }.join\nend", "  s.tr(\"a-z\"\
    , \"c-za-b\")\nend", "\talphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\tnew_string\
    \ = \"\"\n\ts.each_char do |char|\n\t\tnew_string += alphabet[alphabet.index(char)\
    \ + 2]\n\tend\n\tnew_string\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted << alphabet[alphabet.index(char) + 2 * 2]\n    else\n      encrypted\
    \ << char\n    end\n  end\n  encrypted\nend", "  alphabet = ('a'..'z').to_a\n\
    \  encrypted = \"\"\n  s.each_char do |char|\n    if char == \" \"\n      encrypted\
    \ << \" \"\n    else\n      old_index = alphabet.index(char)\n      new_index\
    \ = old_index + 2 * 2\n      encrypted << alphabet[new_index]\n    end\n  end\n\
    \  encrypted\nend", "\talphabet = (\"a\"..\"z\").to_a\n\tencrypted = \"\"\n\t\
    s.each_char do |c|\n\t\tif alphabet.include?(c)\n\t\t\tencrypted += alphabet[(alphabet.index(c)\
    \ + 2) % 26]\n\t\telse\n\t\t\tencrypted += c\n\t\tend\n\tend\n\tencrypted\nend",
  "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n\
    \    if alphabet.include?(char)\n      encrypted += alphabet[alphabet.index(char)\
    \ + 2]\n    else\n      encrypted += char\n    end\n  end\n  encrypted\nend",
  "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  s.split(\"\").map { |letter| alphabet[(alphabet.index(letter)\
    \ + 2) * 2] }.join(\"\")\nend", "\talphabet = (\"a\"..\"z\").to_a\n\tencrypted\
    \ = \"\"\n\ts.each_char do |char|\n\t\tif alphabet.include?(char)\n\t\t\tencrypted\
    \ += alphabet[(alphabet.index(char) + 2) % 26]\n\t\telse\n\t\t\tencrypted += char\n\
    \t\tend\n\tend\n\tencrypted\nend", "  s.chars.map { |c| c.ord + 2 * 2 }.map {\
    \ |c| c.chr }.join\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\
    \n  s.each_char do |char|\n    if alphabet.include?(char)\n      encrypted <<\
    \ alphabet[(alphabet.index(char) + 2) % 26]\n    else\n      encrypted << char\n\
    \    end\n  end\n  encrypted\nend", "\ts.chars.map { |c| c.ord + 2 * 2 }.map {\
    \ |c| c.chr }.join\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\
    \n  s.each_char do |char|\n    if alphabet.include?(char)\n      encrypted <<\
    \ alphabet[alphabet.index(char) + 2 * 2]\n    else\n      encrypted << char\n\
    \    end\n  end\n  encrypted\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |c|\n    if alphabet.include?(c)\n      encrypted <<\
    \ alphabet[(alphabet.index(c) + 2) % 26]\n    else\n      encrypted << c\n   \
    \ end\n  end\n  encrypted\nend", "\ts.split(\"\").map {|x| x.ord + 2*2}.map {|x|\
    \ x.chr}.join(\"\")\nend", "  s.chars.map { |char| char.next.next }.join\nend",
  "  s.split(\"\").map { |letter| letter.next.next }.join(\"\")\nend", "  alphabet\
    \ = ('a'..'z').to_a\n  encrypted = []\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted << alphabet[alphabet.index(char) + 2]\n    else\n      encrypted\
    \ << char\n    end\n  end\n  encrypted.join\nend", "  s.split(\"\").map { |x|\
    \ x.ord + 2 * 2 }.map { |x| x.chr }.join(\"\")\nend", "  s.tr(\"a-z\", \"c-za-b\"\
    )\nend", "  # your code here\nend", "\ts.tr(\"a-z\", \"c-za-b\")\nend", "  alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n  new_string = \"\"\n  s.each_char do |char|\n\
    \    new_string += alphabet[alphabet.index(char) + 2 * 2]\n  end\n  new_string\n\
    end", "  s.chars.map { |c| c.ord + 2 * 2 }.map { |c| c.chr }.join\nend", "  alphabet\
    \ = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    if char\
    \ == \" \"\n      encrypted << \" \"\n    else\n      encrypted << alphabet[alphabet.index(char)\
    \ + 2 * 2]\n    end\n  end\n  encrypted\nend", "  alphabet = ('a'..'z').to_a\n\
    \  encrypted = []\n  s.each_char do |char|\n    index = alphabet.index(char)\n\
    \    encrypted << alphabet[index + 2]\n  end\n  encrypted.join\nend", "  s.split(\"\
    \").map { |c| c.ord + 2 * 2 }.map { |c| c.chr }.join(\"\")\nend", "  alphabet\
    \ = ('a'..'z').to_a\n  encrypted = ''\n  s.each_char do |char|\n    index = alphabet.index(char)\n\
    \    encrypted << alphabet[index + 2]\n  end\n  encrypted\nend", "  s.split(\"\
    \").map { |char| char.next.next }.join\nend", "  # your code here\nend", "\talphabet\
    \ = ('a'..'z').to_a\n\tencrypted = \"\"\n\ts.each_char do |char|\n\t\tif alphabet.include?(char)\n\
    \t\t\tencrypted << alphabet[alphabet.index(char) + 2 * 2]\n\t\telse\n\t\t\tencrypted\
    \ << char\n\t\tend\n\tend\n\tencrypted\nend", "  alphabet = (\"a\"..\"z\").to_a\n\
    \  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted += alphabet[alphabet.index(char) + 2 * 2]\n    else\n      encrypted\
    \ += char\n    end\n  end\n  encrypted\nend", "  s.split(\"\").map { |char| char.next.next\
    \ }.join(\"\")\nend", "\talphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\tnew_string\
    \ = \"\"\n\ts.each_char do |char|\n\t\tnew_string += alphabet[alphabet.index(char)\
    \ + 2 * 2]\n\tend\n\tnew_string\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n      encrypted\
    \ << alphabet[(alphabet.index(char) + 2) % 26]\n    else\n      encrypted << char\n\
    \    end\n  end\n  encrypted\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    if char == \" \"\n      encrypted << \"\
    \ \"\n    else\n      index = alphabet.index(char)\n      encrypted << alphabet[index\
    \ + 2]\n    end\n  end\n  encrypted\nend", "  alphabet = ('a'..'z').to_a\n  encrypted\
    \ = []\n  s.each_char do |char|\n    index = alphabet.index(char)\n    encrypted\
    \ << alphabet[index + 2]\n  end\n  encrypted.join\nend", "  alpha = (\"a\"..\"\
    z\").to_a\n  s.split(\"\").map { |char| alpha[alpha.index(char) + 2 * 2] }.join(\"\
    \")\nend", "  alphabet = ('a'..'z').to_a\n  encrypted = \"\"\n  s.each_char do\
    \ |char|\n    if alphabet.include?(char)\n      encrypted += alphabet[alphabet.index(char)\
    \ + 2]\n    else\n      encrypted += char\n    end\n  end\n  encrypted\nend",
  "  s.chars.map do |c|\n    if c == \"z\"\n      \"b\"\n    elsif c == \"y\"\n  \
    \    \"a\"\n    else\n      (c.ord + 2).chr\n    end\n  end.join\nend", "  s.downcase!\n\
    \  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n\
    \    if alphabet.include?(char)\n      encrypted << alphabet[(alphabet.index(char)\
    \ + 2) % 26]\n    else\n      encrypted << char\n    end\n  end\n  encrypted\n\
    end", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do\
    \ |char|\n    if alphabet.include?(char)\n      encrypted += alphabet[alphabet.index(char)\
    \ + 2]\n    else\n      encrypted += char\n    end\n  end\n  encrypted\nend",
  "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n\
    \    old_index = alphabet.find_index(char)\n    new_index = old_index + 2\n  \
    \  encrypted += alphabet[new_index]\n  end\n  encrypted\nend", "  alphabet = (\"\
    a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      old_index = alphabet.find_index(char)\n      new_index = old_index + 2\
    \ * 2\n      encrypted += alphabet[new_index % 26]\n    else\n      encrypted\
    \ += char\n    end\n  end\n  encrypted\nend", "  s.tr(\"a-z\", \"c-za-b\")\nend",
  "  s.tr(\"a-z\", \"c-za-b\")\nend", "  s.chars.map { |c| c.ord + 2 * 2 }.map { |c|\
    \ c.chr }.join\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  encrypted\
    \ = \"\"\n  s.each_char do |c|\n    index = alphabet.index(c)\n    encrypted +=\
    \ alphabet[(index + 2) % 26]\n  end\n  encrypted\nend", "  s.chars.map { |c| (c.ord\
    \ + 2 * 2).chr }.join\nend", "  s.split(\"\").map { |c| c.ord + 2 * 2 }.map {\
    \ |c| c.chr }.join(\"\")\nend", "  # your code here\nend", "  alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  s.split(\"\").map { |c| alpha[(alpha.index(c) + 2) * 2] }.join\nend", "  s.tr(\"\
    a-z\", \"c-za-b\")\nend", "  s.chars.map { |c| c.ord + 2 * 2 }.map { |c| c.chr\
    \ }.join\nend", "  s.split(\"\").map { |x| x.ord + 2 * 2 }.map { |x| x.chr }.join(\"\
    \")\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = []\n  s.split(\"\"\
    ).each do |letter|\n    if alphabet.include?(letter)\n      encrypted << alphabet[alphabet.index(letter)\
    \ + 2]\n    else\n      encrypted << letter\n    end\n  end\n  encrypted.join(\"\
    \")\nend", "  s.chars.map { |c| (c.ord + 2 * 2).chr }.join\nend", "  alphabet\
    \ = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |c|\n    if alphabet.include?(c)\n\
    \      encrypted += alphabet[(alphabet.index(c) + 2) * 2]\n    else\n      encrypted\
    \ += c\n    end\n  end\n  encrypted\nend", "  s.chars.map { |c| c.ord + 2 * 2\
    \ }.map { |c| c.chr }.join\nend", "  s.chars.map { |c| (c.ord + 2 * 2).chr }.join\n\
    end", "  alphabet = ('a'..'z').to_a\n  encrypted = \"\"\n  s.each_char do |char|\n\
    \    if alphabet.include?(char)\n      encrypted += alphabet[alphabet.index(char)\
    \ + 2]\n    else\n      encrypted += char\n    end\n  end\n  encrypted\nend",
  "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n\
    \    if alphabet.include?(char)\n      old_index = alphabet.find_index(char)\n\
    \      new_index = old_index + 2\n      encrypted += alphabet[new_index]\n   \
    \ else\n      encrypted += char\n    end\n  end\n  encrypted\nend", "  s.chars.map\
    \ { |c| c.ord + 2 * 2 }.map { |c| c.chr }.join\nend", "  s.tr('a-z', 'c-za-b')\n\
    end", "  s.chars.map { |c| (c.ord + 2 * 2).chr }.join\nend", "  s.chars.map {\
    \ |c| c.ord + 2 * 2 }.map { |c| c.chr }.join\nend", "  alphabet = ('a'..'z').to_a\n\
    \  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted << alphabet[alphabet.index(char) + 2 * 2]\n    else\n      encrypted\
    \ << char\n    end\n  end\n  encrypted\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  encrypted = \"\"\n  s.each_char do |c|\n    index = alphabet.index(c)\n  \
    \  encrypted += alphabet[(index + 2) % 26]\n  end\n  encrypted\nend", "  s.split(\"\
    \").map { |x| x.next.next }.join(\"\")\nend", "\talphabet = (\"a\"..\"z\").to_a\n\
    \ts.each_char.map { |c| alphabet[(alphabet.index(c) + 2 * 2) % 26] }.join\nend",
  "  s.tr(\"a-z\", \"c-za-b\")\nend", "  alphabet = ('a'..'z').to_a\n  encrypted =\
    \ []\n  s.each_char do |char|\n    if alphabet.include?(char)\n      encrypted\
    \ << alphabet[alphabet.index(char) + 2 * 2]\n    else\n      encrypted << char\n\
    \    end\n  end\n  encrypted.join\nend", "  alphabet = (\"a\"..\"z\").to_a\n \
    \ encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted += alphabet[alphabet.index(char) + 2 * 2]\n    else\n      encrypted\
    \ += char\n    end\n  end\n  encrypted\nend", "  s.chars.map { |c| c.ord + 2 *\
    \ 2 }.map { |c| c.chr }.join\nend", "  s.split(\"\").map { |c| c.ord + 2 * 2 }.map\
    \ { |c| c.chr }.join(\"\")\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n      encrypted\
    \ += alphabet[(alphabet.index(char) + 2) % 26]\n    else\n      encrypted += char\n\
    \    end\n  end\n  encrypted\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n      encrypted\
    \ << alphabet[(alphabet.index(char) + 2) % 26]\n    else\n      encrypted << char\n\
    \    end\n  end\n  encrypted\nend", "  s.split(\"\").map { |x| x.ord + 2 * 2 }.map\
    \ { |x| x.chr }.join(\"\")\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |c|\n    if alphabet.include?(c)\n      encrypted <<\
    \ alphabet[(alphabet.index(c) + 2) % 26]\n    else\n      encrypted << c\n   \
    \ end\n  end\n  encrypted\nend", "  s.chars.map { |char| char.next.next }.join\n\
    end", "  # create an array of the alphabet\n  alphabet = (\"a\"..\"z\").to_a\n\
    \  # create an array of the alphabet shifted by two multiplied by two places\n\
    \  shifted_alphabet = alphabet.rotate(2 * 2)\n  # create a hash with the alphabet\
    \ as the keys and the shifted alphabet as the values\n  alphabet_hash = Hash[alphabet.zip(shifted_alphabet)]\n\
    \  # create an empty array to store the encrypted letters\n  encrypted_letters\
    \ = []\n  # iterate through the string and push the encrypted letters to the empty\
    \ array\n  s.each_char do |letter|\n    encrypted_letters << alphabet_hash[letter]\n\
    \  end\n  # join the encrypted letters into a string\n  encrypted_letters.join\n\
    end", "  # your code here\nend", "\talphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \ts.split(\"\").map { |x| alphabet[alphabet.index(x) + 2 * 2] }.join(\"\")\nend",
  "  s.chars.map { |c| c.ord + 2 * 2 }.map { |c| c.chr }.join\nend", "  s.chars.map\
    \ { |c| c.ord + 2 * 2 }.map { |c| c.chr }.join\nend", "  alphabet = (\"a\"..\"\
    z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted << alphabet[alphabet.index(char) + 2 * 2]\n    else\n      encrypted\
    \ << char\n    end\n  end\n  encrypted\nend", "  alphabet = (\"a\"..\"z\").to_a\n\
    \  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted += alphabet[alphabet.index(char) + 2]\n    else\n      encrypted\
    \ += char\n    end\n  end\n  encrypted\nend", "  s.split(\"\").map { |c| c.ord\
    \ + 2 * 2 }.map { |c| c.chr }.join(\"\")\nend", "  alphabet = (\"a\"..\"z\").to_a\n\
    \  encrypted = \"\"\n  s.each_char do |char|\n    if char == \" \"\n      encrypted\
    \ << \" \"\n    else\n      encrypted << alphabet[alphabet.index(char) + 2 * 2]\n\
    \    end\n  end\n  encrypted\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    index = alphabet.index(char)\n    encrypted\
    \ += alphabet[(index + 2) % 26]\n  end\n  encrypted\nend", "  alphabet = (\"a\"\
    ..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted << alphabet[alphabet.index(char) + 2]\n    else\n      encrypted\
    \ << char\n    end\n  end\n  encrypted\nend", "  s.chars.map { |c| (c.ord + 2\
    \ * 2).chr }.join\nend", "  s.tr(\"a-z\", \"c-za-b\")\nend", "  # your code here\n\
    end", "  s.split(\"\").map { |char| char.next.next }.join\nend", "  s.chars.map\
    \ { |c| c.ord + 2 * 2 }.map { |c| c.chr }.join\nend", "  s.split(\"\").map { |letter|\
    \ letter.next.next }.join(\"\")\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n      encrypted\
    \ += alphabet[alphabet.index(char) + 2 * 2]\n    else\n      encrypted += char\n\
    \    end\n  end\n  encrypted\nend", "  s.chars.map { |c| c.ord + 2 * 2 }.map {\
    \ |c| c.chr }.join\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\
    \n  s.each_char do |char|\n    if alphabet.include?(char)\n      encrypted <<\
    \ alphabet[(alphabet.index(char) + 2) * 2]\n    else\n      encrypted << char\n\
    \    end\n  end\n  encrypted\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    index = alphabet.index(char)\n    encrypted\
    \ += alphabet[(index + 2) % 26]\n  end\n  encrypted\nend", "\talphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n\ts.split(\"\").map { |letter| alphabet[alphabet.index(letter) + 2 * 2] }.join(\"\
    \")\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  s.split(\"\").map {\
    \ |letter| alphabet[(alphabet.index(letter) + 2) * 2] }.join(\"\")\nend", "  alphabet\
    \ = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    encrypted\
    \ << alphabet[(alphabet.index(char) + 2) * 2]\n  end\n  encrypted\nend", "  alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n  encrypted = \"\"\n  s.each_char do |char|\n\
    \    index = alphabet.index(char)\n    encrypted += alphabet[index + 2 * 2]\n\
    \  end\n  encrypted\nend", "  s.split(\"\").map { |x| x.next.next }.join(\"\"\
    )\nend", "  s.chars.map { |char| char.next.next }.join\nend", "  s.chars.map {\
    \ |c| c.ord + 2 * 2 }.map { |c| c.chr }.join\nend", "  s.chars.map { |char| char.next.next\
    \ }.join\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char\
    \ do |char|\n    if alphabet.include?(char)\n      encrypted += alphabet[(alphabet.index(char)\
    \ + 2) % 26]\n    else\n      encrypted += char\n    end\n  end\n  encrypted\n\
    end", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do\
    \ |char|\n    if alphabet.include?(char)\n      encrypted += alphabet[(alphabet.index(char)\
    \ + 2) % 26]\n    else\n      encrypted += char\n    end\n  end\n  encrypted\n\
    end", "  s.chars.map { |c| c.ord + 2 * 2 }.map { |c| c.chr }.join\nend", "  s.tr('a-z',\
    \ 'c-za-b')\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char\
    \ do |char|\n    index = alphabet.index(char)\n    encrypted += alphabet[(index\
    \ + 2) % 26]\n  end\n  encrypted\nend", "  s.chars.map { |c| c.ord + 2 * 2 }.map\
    \ { |c| c.chr }.join\nend", "  s.chars.map { |c| c.ord + 2 * 2 }.map { |c| c.chr\
    \ }.join\nend", "\ts.tr(\"a-z\", \"c-za-b\")\nend", "  alphabet = (\"a\"..\"z\"\
    ).to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted += alphabet[(alphabet.index(char) + 2) % 26]\n    else\n    \
    \  encrypted += char\n    end\n  end\n  encrypted\nend", "\ts.split(\"\").map\
    \ {|x| x.next.next}.join\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \  encrypted = \"\"\n  s.each_char do |char|\n    idx = alphabet.index(char)\n\
    \    encrypted << alphabet[idx + 2]\n  end\n  encrypted\nend", "  alphabet = (\"\
    a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted << alphabet[(alphabet.index(char) + 2 * 2) % 26]\n    else\n\
    \      encrypted << char\n    end\n  end\n  encrypted\nend", "  alphabet = (\"\
    a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      old_index = alphabet.index(char)\n      new_index = old_index + 2\n   \
    \   encrypted += alphabet[new_index]\n    else\n      encrypted += char\n    end\n\
    \  end\n  encrypted\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    if char == \" \"\n      encrypted += \"\
    \ \"\n    else\n      encrypted += alphabet[alphabet.index(char) + 2 * 2]\n  \
    \  end\n  end\n  encrypted\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n      encrypted\
    \ << alphabet[alphabet.index(char) + 2]\n    else\n      encrypted << char\n \
    \   end\n  end\n  encrypted\nend", "  s.chars.map { |c| c.ord + 2 * 2 }.map {\
    \ |c| c.chr }.join\nend", "  s.chars.map { |char| char.ord + 2 * 2 }.map { |num|\
    \ num.chr }.join\nend", "  s.chars.map { |char| char.ord + 2 }.map { |num| num.chr\
    \ }.join\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char\
    \ do |char|\n    if char == \" \"\n      encrypted << \" \"\n    else\n      encrypted\
    \ << alphabet[(alphabet.index(char) + 2) % 26]\n    end\n  end\n  encrypted\n\
    end", "  s.chars.map { |c| c.ord + 2 * 2 }.map { |c| c.chr }.join\nend", "  s.chars.map\
    \ { |char| char.next.next }.join\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    if char == \" \"\n      encrypted << \"\
    \ \"\n    else\n      encrypted << alphabet[(alphabet.index(char) + 2) * 2]\n\
    \    end\n  end\n  encrypted\nend", "  s.split(\"\").map { |letter| letter.next.next\
    \ }.join(\"\")\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n\
    \  s.each_char do |char|\n    index = alphabet.index(char)\n    encrypted += alphabet[(index\
    \ + 2) % 26]\n  end\n  encrypted\nend", "  s.chars.map { |c| c.ord + 2 * 2 }.map\
    \ { |c| c.chr }.join\nend", "\ts.chars.map { |c| c.ord + 2 * 2 }.map { |c| c.chr\
    \ }.join\nend", "  s.split(\"\").map { |c| c.ord + 2 * 2 }.map { |c| c.chr }.join(\"\
    \")\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char\
    \ do |char|\n    old_index = alphabet.find_index(char)\n    new_index = old_index\
    \ + 2 * 2\n    encrypted += alphabet[new_index]\n  end\n  encrypted\nend", " \
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  encrypted = \"\"\n  s.each_char\
    \ do |char|\n    index = alphabet.index(char)\n    encrypted += alphabet[index\
    \ + 2]\n  end\n  encrypted\nend", "  # your code here\nend", "  alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n  encrypted = \"\"\n  s.each_char do |char|\n  \
    \  if alphabet.include?(char)\n      encrypted += alphabet[(alphabet.index(char)\
    \ + 2) * 2]\n    else\n      encrypted += char\n    end\n  end\n  encrypted\n\
    end", "  alphabet = (\"a\"..\"z\").to_a\n  s.split(\"\").map { |letter| alphabet[(alphabet.index(letter)\
    \ * 2) % 26] }.join(\"\")\nend", "  s.chars.map { |c| c.ord + 2 * 2 }.map { |c|\
    \ c.chr }.join\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n\
    \  s.each_char do |char|\n    old_idx = alphabet.find_index(char)\n    new_idx\
    \ = old_idx + 2 * 2\n    encrypted += alphabet[new_idx]\n  end\n  encrypted\n\
    end", "  s.tr(\"a-z\", \"c-za-b\")\nend", "  s.chars.map { |c| c.ord + 2 * 2 }.map\
    \ { |c| c.chr }.join\nend", "  s.split(\"\").map { |c| c.ord + 2 * 2 }.map { |c|\
    \ c.chr }.join(\"\")\nend", "  s.tr(\"a-z\", \"c-za-b\")\nend", "  alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\"\n  encrypted = \"\"\n  s.each_char do |char|\n\
    \    index = alphabet.index(char)\n    encrypted += alphabet[index + 2]\n  end\n\
    \  encrypted\nend", "\talphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\tnew_string\
    \ = \"\"\n\ts.each_char do |c|\n\t\tnew_string += alphabet[(alphabet.index(c)\
    \ + 2) * 2]\n\tend\n\tnew_string\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  encrypted = \"\"\n  s.each_char do |c|\n    index = alphabet.index(c)\n  \
    \  encrypted += alphabet[(index + 2) % 26]\n  end\n  encrypted\nend", "  alphabet\
    \ = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    old_index\
    \ = alphabet.find_index(char)\n    new_index = old_index + 2 * 2\n    encrypted\
    \ += alphabet[new_index]\n  end\n  encrypted\nend", "  alphabet = (\"a\"..\"z\"\
    ).to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted += alphabet[(alphabet.index(char) + 2) % 26]\n    else\n    \
    \  encrypted += char\n    end\n  end\n  encrypted\nend", "\talphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n\tnew_string = \"\"\n\ts.each_char do |c|\n\t\tnew_string += alphabet[alphabet.index(c)\
    \ + 2]\n\tend\n\tnew_string\nend", "  s.tr(\"a-z\", \"c-za-b\")\nend", "\talphabet\
    \ = (\"a\"..\"z\").to_a\n\ts.split(\"\").map { |letter| alphabet[alphabet.index(letter)\
    \ + 2 * 2] }.join(\"\")\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n      encrypted\
    \ << alphabet[alphabet.index(char) + 2]\n    else\n      encrypted << char\n \
    \   end\n  end\n  encrypted\nend", "  s.split(\"\").map { |letter| letter.next.next\
    \ }.join(\"\")\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n\
    \  s.each_char do |char|\n    if alphabet.include?(char)\n      encrypted += alphabet[alphabet.index(char)\
    \ + 2]\n    else\n      encrypted += char\n    end\n  end\n  encrypted\nend",
  "  s.chars.map { |c| (c.ord + 2 * 2).chr }.join\nend", "\talphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n\tnew_string = \"\"\n\ts.each_char do |c|\n\t\tnew_string += alphabet[alphabet.index(c)\
    \ + 2 * 2]\n\tend\n\tnew_string\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n      encrypted\
    \ += alphabet[(alphabet.index(char) + 2) * 2]\n    else\n      encrypted += char\n\
    \    end\n  end\n  encrypted\nend", "\talphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n\tnew_string = \"\"\n\ts.each_char do |char|\n\t\tnew_string += alphabet[alphabet.index(char)\
    \ + 2]\n\tend\n\tnew_string\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    encrypted << alphabet[(alphabet.index(char)\
    \ + 2 * 2) % 26]\n  end\n  encrypted\nend", "  s.split(\"\").map { |x| x.ord +\
    \ 2 * 2 }.map { |x| x.chr }.join(\"\")\nend", "  s.split(\"\").map { |x| x.ord\
    \ + 2 * 2 }.map { |x| x.chr }.join\nend", "  alphabet = (\"a\"..\"z\").to_a\n\
    \  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      old_index = alphabet.index(char)\n      new_index = old_index + 2 * 2\n\
    \      encrypted += alphabet[new_index % 26]\n    else\n      encrypted += char\n\
    \    end\n  end\n  encrypted\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n      encrypted\
    \ += alphabet[(alphabet.index(char) + 2) % 26]\n    else\n      encrypted += char\n\
    \    end\n  end\n  encrypted\nend", "  alphabet = ('a'..'z').to_a\n  encrypted\
    \ = ''\n  s.each_char do |char|\n    encrypted << alphabet[alphabet.index(char)\
    \ + 2 * 2]\n  end\n  encrypted\nend", "  alphabet = ('a'..'z').to_a\n  encrypted\
    \ = []\n  s.each_char do |char|\n    encrypted << alphabet[alphabet.index(char)\
    \ + 2 * 2]\n  end\n  encrypted.join\nend", "  alphabet = (\"a\"..\"z\").to_a\n\
    \  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted << alphabet[(alphabet.index(char) + 2) % 26]\n    else\n    \
    \  encrypted << char\n    end\n  end\n  encrypted\nend", "  s.each_char.map {\
    \ |c| c.ord + 2 * 2 }.map(&:chr).join\nend", "  alphabet = (\"a\"..\"z\").to_a\n\
    \  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted += alphabet[(alphabet.index(char) + 2) % 26]\n    else\n    \
    \  encrypted += char\n    end\n  end\n  encrypted\nend", "  s.split(\"\").map\
    \ { |x| x.ord + 2 * 2 }.map { |x| x.chr }.join(\"\")\nend", "  alphabet = (\"\
    a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n    if alphabet.include?(char)\n\
    \      encrypted << alphabet[alphabet.index(char) + 2 * 2]\n    else\n      encrypted\
    \ << char\n    end\n  end\n  encrypted\nend", "  s.tr(\"a-z\", \"c-za-b\")\nend",
  "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |char|\n\
    \    index = alphabet.index(char)\n    encrypted += alphabet[(index + 2) % 26]\n\
    \  end\n  encrypted\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted = \"\
    \"\n  s.each_char do |char|\n    if alphabet.include?(char)\n      old_index =\
    \ alphabet.index(char)\n      new_index = old_index + 2\n      encrypted += alphabet[new_index]\n\
    \    else\n      encrypted += char\n    end\n  end\n  encrypted\nend", "  alphabet\
    \ = (\"a\"..\"z\").to_a\n  encrypted = \"\"\n  s.each_char do |c|\n    if alphabet.include?(c)\n\
    \      encrypted += alphabet[(alphabet.index(c) + 2) % 26]\n    else\n      encrypted\
    \ += c\n    end\n  end\n  encrypted\nend", "  s.chars.map { |c| c.ord + 2 * 2\
    \ }.map { |c| c.chr }.join\nend", "  s.chars.map { |c| (c.ord + 2 * 2).chr }.join\n\
    end", "  s.chars.map { |c| c.ord + 2 * 2 }.map { |c| c.chr }.join\nend", "\ts.split(\"\
    \").map {|x| x.next.next}.join\nend", "  alphabet = (\"a\"..\"z\").to_a\n  encrypted\
    \ = \"\"\n  s.each_char do |char|\n    if char == \" \"\n      encrypted += \"\
    \ \"\n    else\n      encrypted += alphabet[alphabet.index(char) + 2 * 2]\n  \
    \  end\n  end\n  encrypted\nend", "\talphabet = (\"a\"..\"z\").to_a\n\tencrypted\
    \ = \"\"\n\ts.each_char do |char|\n\t\tif alphabet.include?(char)\n\t\t\tencrypted\
    \ << alphabet[alphabet.index(char) + 2 * 2]\n\t\telse\n\t\t\tencrypted << char\n\
    \t\tend\n\tend\n\tencrypted\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
