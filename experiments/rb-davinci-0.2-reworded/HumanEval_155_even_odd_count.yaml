name: HumanEval_155_even_odd_count
language: rb
prompt: "# Given an integer. return an array that has the number of even and odd digits\
  \ respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n# >>> even_odd_count.call(123)\n\
  # [1, 2]\ndef even_odd_count(num)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_even_odd_count\n\
  \    candidate = method(:even_odd_count)\n    assert_equal([0, 1], candidate.call(7))\n\
  \    assert_equal([1, 1], candidate.call(-78))\n    assert_equal([2, 2], candidate.call(3452))\n\
  \    assert_equal([3, 3], candidate.call(346211))\n    assert_equal([3, 3], candidate.call(-345821))\n\
  \    assert_equal([1, 0], candidate.call(-2))\n    assert_equal([2, 3], candidate.call(-45347))\n\
  \    assert_equal([1, 0], candidate.call(0))\n  end\nend\n"
completions: ["  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |digit|\n\
    \    if digit.to_i.even?\n      even_count += 1\n    else\n      odd_count +=\
    \ 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.abs.to_s.split('').each do |digit|\n    digit.to_i.even? ? even_count\
    \ += 1 : odd_count += 1\n  end\n  [even_count, odd_count]\nend", "  even = 0\n\
    \  odd = 0\n  num.to_s.split('').each do |digit|\n    if digit.to_i.even?\n  \
    \    even += 1\n    else\n      odd += 1\n    end\n  end\n  [even, odd]\nend",
  "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |digit|\n    digit.to_i.even?\
    \ ? even_count += 1 : odd_count += 1\n  end\n  [even_count, odd_count]\nend",
  "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even = 0\n  odd = 0\n  num.to_s.split('').each do |i|\n\
    \    if i.to_i.even?\n      even += 1\n    else\n      odd += 1\n    end\n  end\n\
    \  [even, odd]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |digit|\n    if digit.to_i.even?\n      even_count += 1\n    else\n     \
    \ odd_count += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count\
    \ = 0\n  odd_count = 0\n  num.to_s.split('').each do |digit|\n    if digit.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |digit|\n    if digit.to_i.even?\n      even_count += 1\n    else\n     \
    \ odd_count += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count\
    \ = 0\n  odd_count = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even = 0\n  odd = 0\n  num.to_s.split('').each do |n|\n\
    \    if n.to_i.even?\n      even += 1\n    else\n      odd += 1\n    end\n  end\n\
    \  [even, odd]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n \
    \ odd_count = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n     \
    \ even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  num.to_s.chars.map(&:to_i).partition(&:even?).map(&:size)\n\
    end", "  even = 0\n  odd = 0\n  num.to_s.split('').each do |x|\n    if x.to_i\
    \ % 2 == 0\n      even += 1\n    else\n      odd += 1\n    end\n  end\n  [even,\
    \ odd]\nend", "  even_count = 0\n  odd_count = 0\n  num.abs.to_s.each_char do\
    \ |char|\n    if char.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n \
    \ odd_count = 0\n  num.to_s.split('').each do |digit|\n    if digit.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even = 0\n  odd = 0\n  num.to_s.split('').each do |n|\n\
    \    if n.to_i.even?\n      even += 1\n    else\n      odd += 1\n    end\n  end\n\
    \  [even, odd]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |digit|\n    digit.to_i.even? ? even_count += 1 : odd_count += 1\n  end\n\
    \  [even_count, odd_count]\nend", "  even = 0\n  odd = 0\n  num.abs.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even += 1\n    else\n      odd += 1\n   \
    \ end\n  end\n  [even, odd]\nend", "  even_count = 0\n  odd_count = 0\n  num.abs.to_s.split('').each\
    \ do |num|\n    if num.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n \
    \ odd_count = 0\n  num.abs.to_s.split('').each do |n|\n    if n.to_i.even?\n \
    \     even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n \
    \ odd_count = 0\n  num.to_s.split('').each do |digit|\n    if digit.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  num.abs.to_s.chars.map(&:to_i).partition(&:even?).map(&:size)\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |digit|\n\
    \    if digit.to_i.even?\n      even_count += 1\n    else\n      odd_count +=\
    \ 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |n|\n \
    \   if n.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n \
    \   end\n  end\n  [even_count, odd_count]\nend", "  num.abs.to_s.chars.map(&:to_i).partition(&:even?).map(&:size)\n\
    end", "  num.to_s.chars.map(&:to_i).partition(&:even?).map(&:size)\nend", "  even_count\
    \ = 0\n  odd_count = 0\n  num.to_s.split('').each do |digit|\n    if digit.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.abs.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n \
    \ odd_count = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n     \
    \ even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.each_char do\
    \ |char|\n    if char.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even = 0\n  odd =\
    \ 0\n  num.abs.to_s.each_char do |char|\n    if char.to_i.even?\n      even +=\
    \ 1\n    else\n      odd += 1\n    end\n  end\n  [even, odd]\nend", "  even_count\
    \ = 0\n  odd_count = 0\n  num.to_s.split('').each do |digit|\n    if digit.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n \
    \ odd_count = 0\n  num.to_s.each_char do |char|\n    if char.to_i.even?\n    \
    \  even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.abs.to_s.each_char\
    \ do |char|\n    if char.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  num.to_s.chars.map(&:to_i).partition(&:even?).map(&:size)\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |n|\n \
    \   n.to_i.even? ? even_count += 1 : odd_count += 1\n  end\n  [even_count, odd_count]\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |digit|\n\
    \    if digit.to_i.even?\n      even_count += 1\n    else\n      odd_count +=\
    \ 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even = 0\n  odd = 0\n\
    \  num.to_s.split('').each do |n|\n    if n.to_i.even?\n      even += 1\n    else\n\
    \      odd += 1\n    end\n  end\n  [even, odd]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.to_s.split('').each do |digit|\n    if digit.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |n|\n \
    \   if n.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n \
    \   end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.abs.to_s.split('').each do |digit|\n    if digit.to_i.even?\n   \
    \   even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.abs.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  # TODO: implement\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |n|\n \
    \   if n.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n \
    \   end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |digit|\n\
    \    if digit.to_i.even?\n      even_count += 1\n    else\n      odd_count +=\
    \ 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |n|\n \
    \   n.to_i.even? ? even_count += 1 : odd_count += 1\n  end\n  [even_count, odd_count]\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |n|\n \
    \   if n.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n \
    \   end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |digit|\n\
    \    if digit.to_i.even?\n      even_count += 1\n    else\n      odd_count +=\
    \ 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even = 0\n  odd = 0\n\
    \  num.to_s.split('').each do |n|\n    if n.to_i.even?\n      even += 1\n    else\n\
    \      odd += 1\n    end\n  end\n  [even, odd]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.to_s.each_char do |char|\n    if char.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.abs.to_s.each_char do |char|\n\
    \    if char.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n\
    \    end\n  end\n  [even_count, odd_count]\nend", "  even = 0\n  odd = 0\n  num.abs.to_s.each_char\
    \ do |char|\n    if char.to_i.even?\n      even += 1\n    else\n      odd += 1\n\
    \    end\n  end\n  [even, odd]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |digit|\n    if digit.to_i.even?\n      even_count += 1\n    else\n     \
    \ odd_count += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count\
    \ = 0\n  odd_count = 0\n  num.abs.to_s.each_char do |char|\n    if char.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.abs.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even = 0\n  odd =\
    \ 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n      even += 1\n\
    \    else\n      odd += 1\n    end\n  end\n  [even, odd]\nend", "  even = 0\n\
    \  odd = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n      even\
    \ += 1\n    else\n      odd += 1\n    end\n  end\n  [even, odd]\nend", "  even_count\
    \ = 0\n  odd_count = 0\n  num.abs.to_s.each_char do |char|\n    if char.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |digit|\n    if digit.to_i.even?\n      even_count += 1\n    else\n     \
    \ odd_count += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count\
    \ = 0\n  odd_count = 0\n  num.to_s.split('').each do |num|\n    if num.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even = 0\n  odd = 0\n  num.abs.to_s.split('').each do |n|\n\
    \    if n.to_i.even?\n      even += 1\n    else\n      odd += 1\n    end\n  end\n\
    \  [even, odd]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n \
    \ odd_count = 0\n  num.abs.to_s.split('').each do |n|\n    if n.to_i.even?\n \
    \     even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even = 0\n  odd = 0\n  num.to_s.each_char do |char|\n \
    \   if char.to_i.even?\n      even += 1\n    else\n      odd += 1\n    end\n \
    \ end\n  [even, odd]\nend", "  even = 0\n  odd = 0\n  num.abs.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even += 1\n    else\n      odd += 1\n   \
    \ end\n  end\n  [even, odd]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n \
    \ odd_count = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n     \
    \ even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |num|\n    if num.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n \
    \ odd_count = 0\n  num.to_s.split('').each do |digit|\n    if digit.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n \
    \ odd_count = 0\n  num.to_s.each_char do |char|\n    if char.to_i.even?\n    \
    \  even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n \
    \ odd_count = 0\n  num.to_s.each_char do |char|\n    if char.to_i.even?\n    \
    \  even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even = 0\n  odd = 0\n  num.to_s.split('').each do |n|\n\
    \    if n.to_i.even?\n      even += 1\n    else\n      odd += 1\n    end\n  end\n\
    \  [even, odd]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |digit|\n    if digit.to_i.even?\n      even_count += 1\n    else\n     \
    \ odd_count += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count\
    \ = 0\n  odd_count = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even = 0\n  odd = 0\n  num.to_s.split('').each do |n|\n\
    \    if n.to_i.even?\n      even += 1\n    else\n      odd += 1\n    end\n  end\n\
    \  [even, odd]\nend", "  num.to_s.chars.map(&:to_i).partition(&:even?).map(&:size)\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |digit|\n\
    \    if digit.to_i.even?\n      even_count += 1\n    else\n      odd_count +=\
    \ 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.to_s.split('').each do |num|\n    if num.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |n|\n \
    \   if n.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n \
    \   end\n  end\n  [even_count, odd_count]\nend", "  even = 0\n  odd = 0\n  num.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even += 1\n    else\n      odd += 1\n   \
    \ end\n  end\n  [even, odd]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n \
    \ odd_count = 0\n  num.to_s.split('').each do |digit|\n    digit.to_i.even? ?\
    \ even_count += 1 : odd_count += 1\n  end\n  [even_count, odd_count]\nend", " \
    \ num.abs.to_s.chars.map(&:to_i).partition(&:even?).map(&:size)\nend", "  even_count\
    \ = 0\n  odd_count = 0\n  num.to_s.split('').each do |digit|\n    if digit.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |digit|\n    if digit.to_i.even?\n      even_count += 1\n    else\n     \
    \ odd_count += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count\
    \ = 0\n  odd_count = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  num.to_s.chars.map(&:to_i).partition { |n| n.even? }.map(&:size)\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |n|\n \
    \   if n.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n \
    \   end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.abs.to_s.split('').each do |digit|\n\
    \    if digit.to_i.even?\n      even_count += 1\n    else\n      odd_count +=\
    \ 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.to_s.each_char do |char|\n    if char.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |digit|\n\
    \    if digit.to_i.even?\n      even_count += 1\n    else\n      odd_count +=\
    \ 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.to_s.split('').each do |digit|\n    if digit.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  num.to_s.chars.map(&:to_i).partition(&:even?).map(&:size)\nend", "  even_count\
    \ = 0\n  odd_count = 0\n  num.to_s.each_char do |digit|\n    if digit.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n \
    \ odd_count = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n     \
    \ even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |digit|\n    if digit.to_i.even?\n      even_count += 1\n    else\n     \
    \ odd_count += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even = 0\n\
    \  odd = 0\n  num.to_s.split('').each do |x|\n    if x.to_i.even?\n      even\
    \ += 1\n    else\n      odd += 1\n    end\n  end\n  [even, odd]\nend", "  num.to_s.chars.map(&:to_i).partition(&:even?).map(&:size)\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.abs.to_s.split('').each do |n|\n\
    \    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n\
    \    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |digit|\n\
    \    if digit.to_i.even?\n      even_count += 1\n    else\n      odd_count +=\
    \ 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  num.to_s.chars.map(&:to_i).partition(&:even?).map(&:size)\nend", "  even\
    \ = 0\n  odd = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n    \
    \  even += 1\n    else\n      odd += 1\n    end\n  end\n  [even, odd]\nend", " \
    \ num.abs.to_s.chars.map(&:to_i).partition(&:even?).map(&:size)\nend", "  even_count\
    \ = 0\n  odd_count = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.each_char do\
    \ |char|\n    if char.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n \
    \ odd_count = 0\n  num.to_s.split('').each do |digit|\n    if digit.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n \
    \ odd_count = 0\n  num.to_s.split('').each do |digit|\n    if digit.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even = 0\n  odd = 0\n  num.to_s.split('').each do |n|\n\
    \    if n.to_i.even?\n      even += 1\n    else\n      odd += 1\n    end\n  end\n\
    \  [even, odd]\nend", "  num.to_s.chars.map(&:to_i).partition { |i| i.even? }.map(&:size)\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |n|\n \
    \   if n.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n \
    \   end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.to_s.each_char do |char|\n    if char.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  even = 0\n  odd = 0\n  num.to_s.each_char do |char|\n    if char.to_i.even?\n\
    \      even += 1\n    else\n      odd += 1\n    end\n  end\n  [even, odd]\nend",
  "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even = 0\n  odd = 0\n  num.to_s.split('').each do |n|\n\
    \    if n.to_i.even?\n      even += 1\n    else\n      odd += 1\n    end\n  end\n\
    \  [even, odd]\nend", "  even = 0\n  odd = 0\n  num.to_s.split('').each do |n|\n\
    \    if n.to_i.even?\n      even += 1\n    else\n      odd += 1\n    end\n  end\n\
    \  [even, odd]\nend", "  even_count = 0\n  odd_count = 0\n  num.abs.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n \
    \ odd_count = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n     \
    \ even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_odd_count = [0,\
    \ 0]\n  num.to_s.split('').each do |digit|\n    even_odd_count[0] += 1 if digit.to_i.even?\n\
    \    even_odd_count[1] += 1 if digit.to_i.odd?\n  end\n  even_odd_count\nend",
  "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |digit|\n    if\
    \ digit.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n  \
    \  end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.abs.to_s.each_char do |char|\n    if char.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  num.abs.to_s.chars.map(&:to_i).partition(&:even?).map(&:size)\nend",
  "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |num|\n    if num.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.abs.to_s.split('').each\
    \ do |digit|\n    if digit.to_i.even?\n      even_count += 1\n    else\n     \
    \ odd_count += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  num.abs.to_s.chars.map(&:to_i).partition(&:even?).map(&:size)\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |n|\n \
    \   if n.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n \
    \   end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.to_s.each_char do |char|\n    if char.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.abs.to_s.each_char do |digit|\n\
    \    digit.to_i.even? ? even_count += 1 : odd_count += 1\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.abs.to_s.split('').each\
    \ do |digit|\n    digit.to_i.even? ? even_count += 1 : odd_count += 1\n  end\n\
    \  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n \
    \ odd_count = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n     \
    \ even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n \
    \ odd_count = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n     \
    \ even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  num.to_s.chars.map(&:to_i).partition(&:even?).map(&:size)\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |digit|\n\
    \    if digit.to_i.even?\n      even_count += 1\n    else\n      odd_count +=\
    \ 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.to_s.split('').each do |digit|\n    if digit.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |n|\n \
    \   if n.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n \
    \   end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |n|\n \
    \   if n.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n \
    \   end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.to_s.each_char do |char|\n    if char.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.abs.to_s.split('').each do |n|\n\
    \    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n\
    \    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.to_s.split('').each do |digit|\n    if digit.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |i|\n \
    \   if i.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n \
    \   end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  num.abs.to_s.chars.map(&:to_i).partition(&:even?).map(&:size)\nend",
  "  even_odd_count = [0, 0]\n  num.abs.to_s.split('').each do |digit|\n    if digit.to_i.even?\n\
    \      even_odd_count[0] += 1\n    else\n      even_odd_count[1] += 1\n    end\n\
    \  end\n  even_odd_count\nend", "  even_count = 0\n  odd_count = 0\n  num.abs.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even = 0\n  odd =\
    \ 0\n  num.to_s.each_char do |char|\n    if char.to_i.even?\n      even += 1\n\
    \    else\n      odd += 1\n    end\n  end\n  [even, odd]\nend", "  even_count\
    \ = 0\n  odd_count = 0\n  num.to_s.split('').each do |digit|\n    if digit.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |digit|\n    if digit.to_i.even?\n      even_count += 1\n    else\n     \
    \ odd_count += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count\
    \ = 0\n  odd_count = 0\n  num.abs.to_s.split('').each do |digit|\n    if digit.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  num.to_s.chars.map(&:to_i).partition(&:even?).map(&:size)\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.each_char do |char|\n   \
    \ if char.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n\
    \    end\n  end\n  [even_count, odd_count]\nend", "  even = 0\n  odd = 0\n  num.to_s.split('').each\
    \ do |digit|\n    if digit.to_i.even?\n      even += 1\n    else\n      odd +=\
    \ 1\n    end\n  end\n  [even, odd]\nend", "  even = 0\n  odd = 0\n  num.to_s.split('').each\
    \ do |x|\n    if x.to_i.even?\n      even += 1\n    else\n      odd += 1\n   \
    \ end\n  end\n  [even, odd]\nend", "  num.to_s.split('').map(&:to_i).partition\
    \ { |num| num.even? }.map(&:count)\nend", "  even_count = 0\n  odd_count = 0\n\
    \  num.to_s.split('').each do |char|\n    if char.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |n|\n \
    \   if n.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n \
    \   end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.abs.to_s.split('').each do |digit|\n    if digit.to_i.even?\n   \
    \   even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |digit|\n    if digit.to_i.even?\n      even_count += 1\n    else\n     \
    \ odd_count += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count\
    \ = 0\n  odd_count = 0\n  num.abs.to_s.split('').each do |digit|\n    if digit.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  evens = 0\n  odds = 0\n  num.to_s.split('').each do |digit|\n\
    \    if digit.to_i.even?\n      evens += 1\n    else\n      odds += 1\n    end\n\
    \  end\n  [evens, odds]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |digit|\n    if digit.to_i.even?\n      even_count += 1\n    else\n     \
    \ odd_count += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count\
    \ = 0\n  odd_count = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even = 0\n  odd = 0\n  num.abs.to_s.split('').each do |n|\n\
    \    if n.to_i.even?\n      even += 1\n    else\n      odd += 1\n    end\n  end\n\
    \  [even, odd]\nend", "  even = 0\n  odd = 0\n  num.abs.to_s.split('').each do\
    \ |n|\n    if n.to_i.even?\n      even += 1\n    else\n      odd += 1\n    end\n\
    \  end\n  [even, odd]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n \
    \ odd_count = 0\n  num.abs.to_s.split('').each do |digit|\n    digit.to_i.even?\
    \ ? even_count += 1 : odd_count += 1\n  end\n  [even_count, odd_count]\nend",
  "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |digit|\n    if\
    \ digit.to_i.even?\n      even_count += 1\n    else\n      odd_count += 1\n  \
    \  end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count\
    \ = 0\n  num.to_s.each_char do |char|\n    if char.to_i.even?\n      even_count\
    \ += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count, odd_count]\n\
    end", "  num.abs.to_s.chars.map(&:to_i).partition(&:even?).map(&:size)\nend",
  "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n \
    \ odd_count = 0\n  num.abs.to_s.split('').each do |digit|\n    if digit.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |digit|\n    if digit.to_i.even?\n      even_count += 1\n    else\n     \
    \ odd_count += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even = 0\n\
    \  odd = 0\n  num.abs.to_s.split('').each do |n|\n    if n.to_i.even?\n      even\
    \ += 1\n    else\n      odd += 1\n    end\n  end\n  [even, odd]\nend", "  even_count\
    \ = 0\n  odd_count = 0\n  num.to_s.each_char do |char|\n    if char.to_i.even?\n\
    \      even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |digit|\n    digit.to_i.even? ? even_count += 1 : odd_count += 1\n  end\n\
    \  [even_count, odd_count]\nend", "  even_count = 0\n  odd_count = 0\n  num.abs.to_s.split('').each\
    \ do |digit|\n    digit.to_i.even? ? even_count += 1 : odd_count += 1\n  end\n\
    \  [even_count, odd_count]\nend", "  even = 0\n  odd = 0\n  num.abs.to_s.each_char\
    \ do |char|\n    if char.to_i.even?\n      even += 1\n    else\n      odd += 1\n\
    \    end\n  end\n  [even, odd]\nend", "  even_count = 0\n  odd_count = 0\n  num.to_s.split('').each\
    \ do |n|\n    if n.to_i.even?\n      even_count += 1\n    else\n      odd_count\
    \ += 1\n    end\n  end\n  [even_count, odd_count]\nend", "  even_count = 0\n \
    \ odd_count = 0\n  num.to_s.split('').each do |n|\n    if n.to_i.even?\n     \
    \ even_count += 1\n    else\n      odd_count += 1\n    end\n  end\n  [even_count,\
    \ odd_count]\nend", "  even = 0\n  odd = 0\n  num.to_s.split('').each do |n|\n\
    \    if n.to_i.even?\n      even += 1\n    else\n      odd += 1\n    end\n  end\n\
    \  [even, odd]\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
