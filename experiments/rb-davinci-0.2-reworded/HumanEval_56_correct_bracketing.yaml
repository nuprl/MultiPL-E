name: HumanEval_56_correct_bracketing
language: rb
prompt: "# brackets is a string of \"<\" and \">\".\n# return true if every opening\
  \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
  <\")\n# false\n# >>> correct_bracketing.call(\"<>\")\n# true\n# >>> correct_bracketing.call(\"\
  <<><>>\")\n# true\n# >>> correct_bracketing.call(\"><<>\")\n# false\ndef correct_bracketing(brackets)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
  \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
  <>\"))\n    assert_equal(true, candidate.call(\"<<><>>\"))\n    assert_equal(true,\
  \ candidate.call(\"<><><<><>><>\"))\n    assert_equal(true, candidate.call(\"<><><<<><><>><>><<><><<>>>\"\
  ))\n    assert_equal(false, candidate.call(\"<<<><>>>>\"))\n    assert_equal(false,\
  \ candidate.call(\"><<>\"))\n    assert_equal(false, candidate.call(\"<\"))\n  \
  \  assert_equal(false, candidate.call(\"<<<<\"))\n    assert_equal(false, candidate.call(\"\
  >\"))\n    assert_equal(false, candidate.call(\"<<>\"))\n    assert_equal(false,\
  \ candidate.call(\"<><><<><>><>><<>\"))\n    assert_equal(false, candidate.call(\"\
  <><><<><>><>>><>\"))\n  end\nend\n"
completions: ["  # TODO: implement this method\nend", "  return false if brackets.length.odd?\n\
    \  brackets.chars.each_with_index do |char, index|\n    if char == \"<\"\n   \
    \   return false if brackets[index + 1] == \"<\"\n    end\n  end\n  true\nend",
  "  # TODO: implement this method\nend", "  return false if brackets.length.odd?\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    else\n      return false if stack.empty?\n      stack.pop\n    end\n  end\n\
    \  stack.empty?\nend", "  # TODO: implement me\nend", "  # TODO: implement this\
    \ method\nend", "  # TODO: implement this method\nend", "  # TODO: implement this\
    \ method\nend", "  stack = []\n  brackets.each_char do |char|\n    if char ==\
    \ \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # your code here\nend", "  # TODO: implement this method\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      return false if stack.empty?\n\
    \      stack.pop\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  return true if brackets.empty?\n\
    \  return false if brackets.length.odd?\n  return false if brackets[0] == \">\"\
    \n  return false if brackets[-1] == \"<\"\n  return false if brackets.count(\"\
    <\") != brackets.count(\">\")\n  return false if brackets.include?(\">>\")\n \
    \ return false if brackets.include?(\"<<\")\n  return false if brackets.include?(\"\
    <>\")\n  return false if brackets.include?(\"<><\")\n  return false if brackets.include?(\"\
    <><><\")\n  return false if brackets.include?(\"<><><><\")\n  return false if\
    \ brackets.include?(\"<><><><><\")\n  return false if brackets.include?(\"<><><><><><\"\
    )\n  return false if brackets.include?(\"<><><><><><><\")\n  return false if brackets.include?(\"\
    <><><><><><><><\")\n  return false if brackets.include?(\"<><><><><><><><><\"\
    )\n  return false if brackets.include?(\"<><><><><><><><><><\")\n  return false\
    \ if brackets.include?(\"<><><><><><><><><><><\")\n  return false if brackets.include?(\"\
    <><><><><><><><><><><><\")\n  return false if brackets.include?(\"<><><><><><><><><><><><><\"\
    )\n  return false if brackets.include?(\"<><><><><><><><><><><><><><\")\n  return\
    \ false if brackets.include?(\"<><><><><><><><><><><><><><><\")\n  return false\
    \ if brackets.include?(\"<><><><><><><><><><><><><><><><\")\n  return false if\
    \ brackets.include?(\"<><><><><><><><><><><><><><><><><\")\n  return false if\
    \ brackets.include?(\"<><><><><><><><><><><><><><><><><><\")\n  return false if\
    \ brackets.include?(\"<><><><><><><><><><><><><><><><><><><\")\n  return false\
    \ if brackets.include?(\"<><><><><><><><><><><><><><><", "  brackets.count(\"\
    <\") == brackets.count(\">\")\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  # TODO\nend", "  # TODO: implement\
    \ this method\nend", "  # TODO: implement this method\nend", "  stack = []\n \
    \ brackets.chars.each do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # your\
    \ code here\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # TODO: implement this method\nend", "  # TODO: implement\
    \ this method\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  return false if brackets.length\
    \ % 2 != 0\n  return false if brackets[0] == \">\"\n  return false if brackets[-1]\
    \ == \"<\"\n  return false if brackets.count(\"<\") != brackets.count(\">\")\n\
    \  return true\nend", "  # TODO: implement this method\nend", "  stack = []\n\
    \  brackets.each_char do |bracket|\n    if bracket == \"<\"\n      stack.push(bracket)\n\
    \    else\n      return false if stack.empty?\n      stack.pop\n    end\n  end\n\
    \  stack.empty?\nend", "  # TODO: implement this method\nend", "  stack = []\n\
    \  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # your\
    \ code here\nend", "  count = 0\n  brackets.each_char do |char|\n    count +=\
    \ 1 if char == \"<\"\n    count -= 1 if char == \">\"\n    return false if count\
    \ < 0\n  end\n  count == 0\nend", "  stack = []\n  brackets.each_char do |bracket|\n\
    \    if bracket == \"<\"\n      stack.push(bracket)\n    else\n      stack.pop\n\
    \    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.chars.each do\
    \ |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\
    \n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  return true if brackets.length\
    \ == 0\n  return false if brackets.length.odd?\n  return false if brackets[0]\
    \ == \">\"\n  return false if brackets[-1] == \"<\"\n  return false if brackets.count(\"\
    <\") != brackets.count(\">\")\n  return true\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # TODO: implement this method\n\
    end", "  # TODO: implement this method\nend", "  return false if brackets.length.odd?\n\
    \  return false if brackets[0] == \">\"\n  return false if brackets[-1] == \"\
    <\"\n  return false if brackets.count(\"<\") != brackets.count(\">\")\n  return\
    \ true\nend", "  stack = []\n  brackets.each_char do |char|\n    if char == \"\
    <\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  return stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # TODO: implement this method\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  return\
    \ stack.empty?\nend", "  count = 0\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      count += 1\n    elsif char == \">\"\n      count -= 1\n    end\n\
    \    return false if count < 0\n  end\n  count == 0\nend", "  # TODO: implement\
    \ this method\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  return false if brackets.length.odd?\n  stack = []\n\
    \  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    else\n      return false if stack.empty?\n      stack.pop\n    end\n  end\n\
    \  stack.empty?\nend", "  # TODO: implement this method\nend", "  # TODO: implement\
    \ this method\nend", "  # TODO: implement this method\nend", "  return false if\
    \ brackets.length.odd?\n  return false if brackets[0] == \">\"\n  return false\
    \ if brackets[-1] == \"<\"\n  return false if brackets.count(\"<\") != brackets.count(\"\
    >\")\n  return true\nend", "  # your code here\nend", "  # TODO: implement this\
    \ method\nend", "  stack = []\n  brackets.each_char do |char|\n    if char ==\
    \ \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # your code here\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      return false if stack.empty?\n      stack.pop\n    end\n  end\n  stack.empty?\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      stack.pop\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      stack.pop\n\
    \    end\n  end\n  stack.empty?\nend", "  # TODO: implement this method\nend",
  "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # TODO:\
    \ implement this method\nend", "  brackets.count(\"<\") == brackets.count(\">\"\
    )\nend", "  return false if brackets.length.odd?\n  stack = []\n  brackets.chars.each\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    else\n      return\
    \ false if stack.empty?\n      stack.pop\n    end\n  end\n  stack.empty?\nend",
  "  # TODO: implement this method\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  # TODO\nend", "  return false\
    \ if brackets.length.odd?\n  stack = []\n  brackets.chars.each do |char|\n   \
    \ if char == \"<\"\n      stack.push(char)\n    else\n      return false if stack.empty?\n\
    \      stack.pop\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.chars.each\
    \ do |bracket|\n    if bracket == \"<\"\n      stack.push(bracket)\n    else\n\
    \      return false if stack.empty?\n      stack.pop\n    end\n  end\n  stack.empty?\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  return\
    \ stack.empty?\nend", "  # TODO: implement this method\nend", "  # TODO: implement\n\
    end", "  # TODO: implement this method\nend", "  return false if brackets.length.odd?\n\
    \  return false if brackets[0] == \">\"\n  return false if brackets[-1] == \"\
    <\"\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n    \
    \  stack.push(char)\n    else\n      stack.pop\n    end\n  end\n  stack.empty?\n\
    end", "  open = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n    \
    \  open += 1\n    elsif char == \">\"\n      open -= 1\n    end\n    return false\
    \ if open < 0\n  end\n  open == 0\nend", "  stack = []\n  brackets.each_char do\
    \ |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\
    \n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  return false if brackets.length.odd?\n\
    \  return false if brackets[0] == \">\"\n  return false if brackets[-1] == \"\
    <\"\n  return false if brackets.count(\"<\") != brackets.count(\">\")\n  true\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      stack.pop\n    end\n  end\n\
    \  stack.empty?\nend", "  # TODO: implement this method\nend", "  return false\
    \ if brackets.length.odd?\n  return false if brackets[0] == \">\"\n  return false\
    \ if brackets[-1] == \"<\"\n  return false if brackets.count(\"<\") != brackets.count(\"\
    >\")\n  true\nend", "  # your code here\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # TODO: implement this method\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  # your code here\nend", "  # your code here\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      stack.pop\n    end\n  end\n  stack.empty?\nend", "  return true if\
    \ brackets.length == 0\n  return false if brackets.length.odd?\n  return false\
    \ if brackets[0] == \">\"\n  return false if brackets[-1] == \"<\"\n  return false\
    \ if brackets.count(\"<\") != brackets.count(\">\")\n  return false if brackets.include?(\"\
    <>\")\n  return false if brackets.include?(\"<><\")\n  return false if brackets.include?(\"\
    >>\")\n  return false if brackets.include?(\"<<\")\n  return false if brackets.include?(\"\
    <><><\")\n  return false if brackets.include?(\"<><><><\")\n  return false if\
    \ brackets.include?(\"<><><><><\")\n  return false if brackets.include?(\"<><><><><><\"\
    )\n  return false if brackets.include?(\"<><><><><><><\")\n  return false if brackets.include?(\"\
    <><><><><><><><\")\n  return false if brackets.include?(\"<><><><><><><><><\"\
    )\n  return false if brackets.include?(\"<><><><><><><><><><\")\n  return false\
    \ if brackets.include?(\"<><><><><><><><><><><\")\n  return false if brackets.include?(\"\
    <><><><><><><><><><><><\")\n  return false if brackets.include?(\"<><><><><><><><><><><><><\"\
    )\n  return false if brackets.include?(\"<><><><><><><><><><><><><><\")\n  return\
    \ false if brackets.include?(\"<><><><><><><><><><><><><><><\")\n  return false\
    \ if brackets.include?(\"<><><><><><><><><><><><><><><><\")\n  return false if\
    \ brackets.include?(\"<><><><><><><><><><><><><><><><><\")\n  return false if\
    \ brackets.include?(\"<><><><><><><><><><><><><><><><><><\")\n  return false if\
    \ brackets.include?(\"<><><><><><><><><><><><><><><><><><><\")\n  return false\
    \ if brackets.include?(\"<><><><><><><><><><><><><><", "  brackets.count(\"<\"\
    ) == brackets.count(\">\")\nend", "  # TODO: implement this method\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # TODO:\
    \ implement this method\nend", "  # your code here\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  return false if brackets.length.odd?\n\
    \  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    else\n      return false if stack.empty?\n      stack.pop\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # TODO: implement this method\nend", "  # TODO: implement\
    \ this method\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.chars.each do |bracket|\n   \
    \ if bracket == \"<\"\n      stack.push(bracket)\n    else\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # TODO: implement this method\nend", "  return false\
    \ if brackets.length.odd?\n  stack = []\n  brackets.each_char do |char|\n    if\
    \ char == \"<\"\n      stack.push(char)\n    else\n      return false if stack.empty?\n\
    \      stack.pop\n    end\n  end\n  stack.empty?\nend", "  return false if brackets.length.odd?\n\
    \  return false if brackets[0] == \">\"\n  return false if brackets[-1] == \"\
    <\"\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n    \
    \  stack.push(char)\n    else\n      stack.pop\n    end\n  end\n  stack.empty?\n\
    end", "  # TODO\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # TODO: implement this method\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  # TODO: implement this method\nend",
  "  # TODO: implement this method\nend", "  # TODO: implement this method\nend",
  "  open_brackets = 0\n  brackets.each_char do |char|\n    if char == \"<\"\n   \
    \   open_brackets += 1\n    elsif char == \">\"\n      open_brackets -= 1\n  \
    \  end\n    return false if open_brackets < 0\n  end\n  open_brackets == 0\nend",
  "  # TODO: implement this method\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ return false if stack.empty?\n      stack.pop\n    end\n  end\n  stack.empty?\n\
    end", "  # TODO: implement this method\nend", "  # TODO: implement this method\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      return false if stack.empty?\n\
    \      stack.pop\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  return false if brackets.length.odd?\n\
    \  return false if brackets[0] == \">\"\n  return false if brackets[-1] == \"\
    <\"\n  return false if brackets.count(\"<\") != brackets.count(\">\")\n  return\
    \ true\nend", "  stack = []\n  brackets.each_char do |char|\n    if char == \"\
    <\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  return false if brackets.length.odd?\n  return false\
    \ if brackets[0] == \">\"\n  return false if brackets[-1] == \"<\"\n  return false\
    \ if brackets.count(\"<\") != brackets.count(\">\")\n  true\nend", "  return false\
    \ if brackets.length.odd?\n  stack = []\n  brackets.chars.each do |char|\n   \
    \ if char == \"<\"\n      stack.push(char)\n    else\n      return false if stack.empty?\n\
    \      stack.pop\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  return false if brackets.length.odd?\n\
    \  return false if brackets[0] == \">\"\n  return false if brackets[-1] == \"\
    <\"\n  return false if brackets.count(\"<\") != brackets.count(\">\")\n  true\n\
    end", "  # TODO: implement this method\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.chars.each\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # your code here\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  return stack.empty?\nend", " \
    \ # TODO: implement me\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  # TODO: implement this method\n\
    end", "  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n  \
    \    stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n      \
    \  return false\n      else\n        stack.pop\n      end\n    end\n  end\n  stack.empty?\n\
    end", "  stack = []\n  brackets.chars.each do |char|\n    if char == \"<\"\n \
    \     stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n     \
    \   return false\n      else\n        stack.pop\n      end\n    end\n  end\n \
    \ stack.empty?\nend", "  return false if brackets.length.odd?\n  brackets.count(\"\
    <\") == brackets.count(\">\")\nend", "  return true if brackets.empty?\n  return\
    \ false if brackets.length.odd?\n  return false if brackets[0] == \">\"\n  return\
    \ false if brackets[-1] == \"<\"\n  return false if brackets.count(\"<\") != brackets.count(\"\
    >\")\n  return false if brackets.include?(\"<>\")\n  return false if brackets.include?(\"\
    <><\")\n  return false if brackets.include?(\">>\")\n  return false if brackets.include?(\"\
    <<\")\n  return false if brackets.include?(\"<><>\")\n  return false if brackets.include?(\"\
    <><><\")\n  return false if brackets.include?(\"<><><>\")\n  return false if brackets.include?(\"\
    <><><><\")\n  return false if brackets.include?(\"<><><><>\")\n  return false\
    \ if brackets.include?(\"<><><><><\")\n  return false if brackets.include?(\"\
    <><><><><>\")\n  return false if brackets.include?(\"<><><><><><\")\n  return\
    \ false if brackets.include?(\"<><><><><><>\")\n  return false if brackets.include?(\"\
    <><><><><><><\")\n  return false if brackets.include?(\"<><><><><><><>\")\n  return\
    \ false if brackets.include?(\"<><><><><><><><\")\n  return false if brackets.include?(\"\
    <><><><><><><><>\")\n  return false if brackets.include?(\"<><><><><><><><><\"\
    )\n  return false if brackets.include?(\"<><><><><><><><><>\")\n  return false\
    \ if brackets.include?(\"<><><><><><><><><><\")\n  return false if brackets.include?(\"\
    <><><><><><><><><><>\")\n  return false if brackets.include?(\"<><><><><><><><><><><\"\
    )\n  return false if brackets.include?(\"<><><><><><><><><><><>\")\n  return false\
    \ if brackets.include?(\"<><><><><><><><><><><><\")\n  return false if brackets.include?(\"\
    <><><><><><><><><><><><>\")\n  return false if", "  # TODO: implement this method\n\
    end", "  return false if brackets.length.odd?\n  return false if brackets[0] ==\
    \ \">\"\n  return false if brackets[-1] == \"<\"\n  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    else\n      stack.pop\n\
    \    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char do\
    \ |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\
    \n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  return stack.empty?\nend", "  # TODO: implement\
    \ this method\nend", "  # TODO: implement this method\nend", "  # TODO: implement\
    \ this method\nend", "  # TODO: implement this method\nend", "  stack = []\n \
    \ brackets.chars.each do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # your\
    \ code here\nend", "  # TODO: implement this method\nend", "  return false if\
    \ brackets.length.odd?\n  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    else\n      return false if stack.empty?\n\
    \      stack.pop\n    end\n  end\n  stack.empty?\nend", "  return false if brackets.length.odd?\n\
    \  return false if brackets[0] == \">\"\n  return false if brackets[-1] == \"\
    <\"\n  stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n    \
    \  stack.push(char)\n    else\n      stack.pop\n    end\n  end\n  stack.empty?\n\
    end", "  # TODO: implement this\nend", "  # TODO: implement this\nend", "  stack\
    \ = []\n  brackets.each_char do |bracket|\n    if bracket == \"<\"\n      stack.push(bracket)\n\
    \    else\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # your code here\nend", " \
    \ # your code here\nend", "  # TODO: implement this method\nend", "  # TODO: implement\
    \ this method\nend", "  return false if brackets.length.odd?\n  stack = []\n \
    \ brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    else\n      return false if stack.empty?\n      stack.pop\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # TODO: implement this method\nend", "  # TODO: implement\
    \ this method\nend", "  # TODO: implement this method\nend", "  stack = []\n \
    \ brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # TODO:\
    \ implement this method\nend", "  # TODO: implement this method\nend", "  # TODO:\
    \ implement this method\nend", "  stack = []\n  brackets.each_char do |char|\n\
    \    if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n     \
    \ if stack.empty?\n        return false\n      else\n        stack.pop\n     \
    \ end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  stack = []\n  brackets.each_char\
    \ do |char|\n    if char == \"<\"\n      stack.push(char)\n    elsif char == \"\
    >\"\n      if stack.empty?\n        return false\n      else\n        stack.pop\n\
    \      end\n    end\n  end\n  stack.empty?\nend", "  # your code here\nend", " \
    \ stack = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # TODO:\
    \ implement me\nend", "  stack = []\n  brackets.each_char do |char|\n    if char\
    \ == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  stack = []\n  brackets.chars.each do |char|\n    if\
    \ char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      if stack.empty?\n\
    \        return false\n      else\n        stack.pop\n      end\n    end\n  end\n\
    \  stack.empty?\nend", "  # TODO: implement this method\nend", "  return false\
    \ if brackets.length.odd?\n  return false if brackets[0] == \">\"\n  return false\
    \ if brackets[-1] == \"<\"\n  return false if brackets.count(\"<\") != brackets.count(\"\
    >\")\n  return true\nend", "  stack = []\n  brackets.each_char do |char|\n   \
    \ if char == \"<\"\n      stack.push(char)\n    elsif char == \">\"\n      return\
    \ false if stack.empty?\n      stack.pop\n    end\n  end\n  stack.empty?\nend",
  "  stack = []\n  brackets.chars.each do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      if stack.empty?\n        return false\n      else\n\
    \        stack.pop\n      end\n    end\n  end\n  stack.empty?\nend", "  # TODO:\
    \ implement this method\nend", "  # TODO: implement this method\nend", "  stack\
    \ = []\n  brackets.each_char do |char|\n    if char == \"<\"\n      stack.push(char)\n\
    \    elsif char == \">\"\n      stack.pop\n    end\n  end\n  stack.empty?\nend",
  "  # TODO: implement me\nend", "  # TODO: implement this method\nend", "  return\
    \ false if brackets.length.odd?\n  return false if brackets[0] == \">\"\n  return\
    \ false if brackets[-1] == \"<\"\n  return false if brackets.count(\"<\") != brackets.count(\"\
    >\")\n  return true\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
