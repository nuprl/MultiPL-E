name: HumanEval_95_check_dict_case
language: rb
prompt: "# Given a hash, return true if all keys are strings in lower \n# case or\
  \ all keys are strings in upper case, else return false.\n# The function should\
  \ return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
  a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
  a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
  a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
  \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\ndef\
  \ check_dict_case(dict)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
  \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
  p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
  p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
  \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
  }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"\
  36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"STATE\"\
  \ => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
  fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
  \  end\nend\n"
completions: ["  dict.keys.all? { |key| key.is_a?(String) && key.downcase == key }\
    \ ||\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase == key }\nend",
  "  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.class != String\n      return false\n    end\n  end\n  if dict.keys.all?\
    \ { |key| key == key.downcase }\n    return true\n  elsif dict.keys.all? { |key|\
    \ key == key.upcase }\n    return true\n  else\n    return false\n  end\nend",
  "  if dict.empty?\n    return false\n  end\n  dict.each do |key, value|\n    if\
    \ key.is_a?(String)\n      if key == key.upcase\n        return true\n      elsif\
    \ key == key.downcase\n        return true\n      else\n        return false\n\
    \      end\n    else\n      return false\n    end\n  end\nend", "  return false\
    \ if dict.empty?\n  dict.keys.all? { |key| key.is_a?(String) && key.upcase ==\
    \ key } ||\n  dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend", "  if dict.empty?\n    return false\n  end\n  dict.keys.each do |key|\n\
    \    if key.is_a?(String)\n      if key.upcase == key\n        return true\n \
    \     elsif key.downcase == key\n        return true\n      else\n        return\
    \ false\n      end\n    else\n      return false\n    end\n  end\nend", "  dict.keys.all?\
    \ { |k| k.is_a?(String) && k.upcase == k } ||\n  dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend", "  return false if dict.empty?\n  dict.keys.all?\
    \ { |k| k.is_a?(String) && k.upcase == k } || dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\nend", "  dict.keys.all? { |key| key.is_a?(String) && key.upcase\
    \ == key } ||\n  dict.keys.all? { |key| key.is_a?(String) && key.downcase == key\
    \ }\nend", "  return false if dict.empty?\n  dict.keys.all? { |key| key.is_a?(String)\
    \ && key.upcase == key } || dict.keys.all? { |key| key.is_a?(String) && key.downcase\
    \ == key }\nend", "  dict.keys.all? { |k| k.is_a?(String) && k.upcase == k } ||\
    \ dict.keys.all? { |k| k.is_a?(String) && k.downcase == k }\nend", "  dict.keys.each\
    \ do |key|\n    return false if key.class != String\n  end\n  dict.keys.each do\
    \ |key|\n    return false if key.downcase != key && key.upcase != key\n  end\n\
    \  return true\nend", "  dict.keys.all? { |k| k.is_a?(String) && k.upcase == k\
    \ } ||\n  dict.keys.all? { |k| k.is_a?(String) && k.downcase == k }\nend", " \
    \ return false if dict.empty?\n  dict.each do |k, v|\n    return false if k.class\
    \ != String\n  end\n  dict.each do |k, v|\n    return false if k.downcase != k\
    \ && k.upcase != k\n  end\n  true\nend", "  if dict.empty?\n    return false\n\
    \  end\n  dict.each do |key, value|\n    if key.is_a?(String)\n      if key ==\
    \ key.upcase\n        return true\n      else\n        return false\n      end\n\
    \    else\n      return false\n    end\n  end\nend", "  return false if dict.empty?\n\
    \  dict.keys.all? { |key| key.is_a?(String) && key.upcase == key } ||\n  dict.keys.all?\
    \ { |key| key.is_a?(String) && key.downcase == key }\nend", "  return false if\
    \ dict.empty?\n  dict.keys.map(&:class).uniq.count == 1 && dict.keys.map(&:class).uniq.first\
    \ == String\nend", "  if dict.empty?\n    return false\n  end\n  dict.each do\
    \ |key, value|\n    if key.is_a?(String)\n      if key.downcase != key && key.upcase\
    \ != key\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\n  return true\nend", "  return false if dict.empty?\n  dict.keys.all?\
    \ { |key| key.is_a?(String) && key.upcase == key } ||\n  dict.keys.all? { |key|\
    \ key.is_a?(String) && key.downcase == key }\nend", "  if dict.empty?\n    return\
    \ false\n  else\n    dict.each do |key, value|\n      if key.is_a? String\n  \
    \      if key == key.upcase\n          return true\n        elsif key == key.downcase\n\
    \          return true\n        else\n          return false\n        end\n  \
    \    else\n        return false\n      end\n    end\n  end\nend", "  if dict.empty?\n\
    \    return false\n  end\n  dict.each do |key, value|\n    if key.is_a? String\n\
    \      if key.downcase == key || key.upcase == key\n        return true\n    \
    \  else\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
