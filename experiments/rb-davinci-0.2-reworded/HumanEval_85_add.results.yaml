language: rb
name: HumanEval_85_add
results:
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc4xhuz0s\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpc4xhuz0s.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008673756 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.29 tests/s, 230.58 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |e, i| e.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpazt810a_

    Started

    .

    Finished in 0.000605371 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1651.88 tests/s, 6607.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc4xhuz0s\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpc4xhuz0s.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008673756 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.29 tests/s, 230.58 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpijzwcpi4

    Started

    .

    Finished in 0.000682517 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1465.16 tests/s, 5860.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpijzwcpi4

    Started

    .

    Finished in 0.000682517 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1465.16 tests/s, 5860.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpijzwcpi4

    Started

    .

    Finished in 0.000682517 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1465.16 tests/s, 5860.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpliy7ub0n\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpliy7ub0n.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.009230776 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.33 tests/s, 216.67 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc4xhuz0s\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpc4xhuz0s.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008673756 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.29 tests/s, 230.58 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc4xhuz0s\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpc4xhuz0s.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008673756 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.29 tests/s, 230.58 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpijzwcpi4

    Started

    .

    Finished in 0.000682517 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1465.16 tests/s, 5860.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.values_at(* lst.each_index.select {|i| i.even?}).inject(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7xs_cy6e\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp7xs_cy6e.rb:12:in `test_add'\n     \
    \ 9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_add\n   \
    \  11:     candidate = method(:add)\n  => 12:     assert_equal(88, candidate.call([4,\
    \ 88]))\n     13:     assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n\
    \     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n     15:     assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n<88> expected but was\n<4>\n===============================================================================\n\
    \nFinished in 0.008539955 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.10 tests/s, 117.10 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzlj36jme

    Started

    .

    Finished in 0.000604188 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1655.11 tests/s, 6620.46 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |e, i| e.even? && i.odd? }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmplylqo4db

    Started

    .

    Finished in 0.000653604 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1529.98 tests/s, 6119.91 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc4xhuz0s\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpc4xhuz0s.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008673756 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.29 tests/s, 230.58 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc4xhuz0s\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpc4xhuz0s.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008673756 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.29 tests/s, 230.58 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpliy7ub0n\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpliy7ub0n.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.009230776 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.33 tests/s, 216.67 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpijzwcpi4

    Started

    .

    Finished in 0.000682517 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1465.16 tests/s, 5860.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpijzwcpi4

    Started

    .

    Finished in 0.000682517 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1465.16 tests/s, 5860.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpijzwcpi4

    Started

    .

    Finished in 0.000682517 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1465.16 tests/s, 5860.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc4xhuz0s\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpc4xhuz0s.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008673756 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.29 tests/s, 230.58 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpijzwcpi4

    Started

    .

    Finished in 0.000682517 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1465.16 tests/s, 5860.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpijzwcpi4

    Started

    .

    Finished in 0.000682517 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1465.16 tests/s, 5860.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc4xhuz0s\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpc4xhuz0s.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008673756 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.29 tests/s, 230.58 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpijzwcpi4

    Started

    .

    Finished in 0.000682517 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1465.16 tests/s, 5860.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  sum = 0\n  lst.each_with_index do |num, index|\n    sum += num if num.even?\
    \ && index.odd?\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval <\
    \ Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpa6xbhhk2

    Started

    .

    Finished in 0.00062922 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1589.27 tests/s, 6357.08 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpzlj36jme

    Started

    .

    Finished in 0.000604188 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1655.11 tests/s, 6620.46 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpliy7ub0n\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpliy7ub0n.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.009230776 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.33 tests/s, 216.67 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpijzwcpi4

    Started

    .

    Finished in 0.000682517 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1465.16 tests/s, 5860.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpiyaaexrj

    Started

    .

    Finished in 0.000683794 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1462.43 tests/s, 5849.71 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpijzwcpi4

    Started

    .

    Finished in 0.000682517 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1465.16 tests/s, 5860.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpiyaaexrj

    Started

    .

    Finished in 0.000683794 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1462.43 tests/s, 5849.71 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpijzwcpi4

    Started

    .

    Finished in 0.000682517 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1465.16 tests/s, 5860.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.values_at(* lst.each_index.select {|i| i.even?}).inject(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7xs_cy6e\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmp7xs_cy6e.rb:12:in `test_add'\n     \
    \ 9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_add\n   \
    \  11:     candidate = method(:add)\n  => 12:     assert_equal(88, candidate.call([4,\
    \ 88]))\n     13:     assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n\
    \     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n     15:     assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n<88> expected but was\n<4>\n===============================================================================\n\
    \nFinished in 0.008539955 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.10 tests/s, 117.10 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpijzwcpi4

    Started

    .

    Finished in 0.000682517 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1465.16 tests/s, 5860.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.inject(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc4xhuz0s\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpc4xhuz0s.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008673756 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    115.29 tests/s, 230.58 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpijzwcpi4

    Started

    .

    Finished in 0.000682517 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1465.16 tests/s, 5860.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.select(&:even?).reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs_kiow1

    Started

    .

    Finished in 0.00044687 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2237.79 tests/s, 8951.15 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpijzwcpi4

    Started

    .

    Finished in 0.000682517 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1465.16 tests/s, 5860.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  sum = 0\n  lst.each_with_index do |item, index|\n    if index.odd? && item.even?\n\
    \      sum += item\n    end\n  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n    assert_equal(88,\
    \ candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7,\
    \ 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpx_e_wffd

    Started

    .

    Finished in 0.000580331 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1723.15 tests/s, 6892.62 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  # your code here\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc8nsgsws\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpc8nsgsws.rb:12:in `test_add'\n     \
    \ 9: class TestHumanEval < Test::Unit::TestCase\n     10:   def test_add\n   \
    \  11:     candidate = method(:add)\n  => 12:     assert_equal(88, candidate.call([4,\
    \ 88]))\n     13:     assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n\
    \     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n     15:     assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n<88> expected but was\n<nil>\n===============================================================================\n\
    \nFinished in 0.008552387 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    116.93 tests/s, 116.93 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpijzwcpi4

    Started

    .

    Finished in 0.000682517 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1465.16 tests/s, 5860.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.each_with_index.inject(0) { |sum, (v, i)| i.odd? && v.even? ? sum + v :\
    \ sum }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_add\n    candidate = method(:add)\n    assert_equal(88, candidate.call([4,\
    \ 88]))\n    assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphkqrjnct

    Started

    .

    Finished in 0.000622957 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1605.25 tests/s, 6420.99 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpijzwcpi4

    Started

    .

    Finished in 0.000682517 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1465.16 tests/s, 5860.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpiyaaexrj

    Started

    .

    Finished in 0.000683794 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1462.43 tests/s, 5849.71 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpijzwcpi4

    Started

    .

    Finished in 0.000682517 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1465.16 tests/s, 5860.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |e, i| e.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpazt810a_

    Started

    .

    Finished in 0.000605371 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1651.88 tests/s, 6607.52 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 0
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |x, i| x.even? && i.odd? }.reduce(:+)\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n  \
    \  candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
    \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
    \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6,\
    \ 8]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpijzwcpi4

    Started

    .

    Finished in 0.000682517 seconds.

    -------------------------------------------------------------------------------

    1 tests, 4 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1465.16 tests/s, 5860.66 assertions/s

    '
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.sum\nend\nrequire 'test/unit'\nclass\
    \ TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpliy7ub0n\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpliy7ub0n.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.009230776 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    108.33 tests/s, 216.67 assertions/s\n"
  timestamp: 1659800029
- exit_code: 1
  program: "# Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n\
    \  lst.select.with_index { |_, i| i.odd? }.reduce(:+)\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_add\n    candidate = method(:add)\n\
    \    assert_equal(88, candidate.call([4, 88]))\n    assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n    assert_equal(0, candidate.call([4, 0, 6, 7]))\n    assert_equal(12,\
    \ candidate.call([4, 4, 6, 8]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqr4r8zes\nStarted\nF\n===============================================================================\n\
    Failure: test_add(TestHumanEval)\n/tmp/tmpqr4r8zes.rb:13:in `test_add'\n     10:\
    \   def test_add\n     11:     candidate = method(:add)\n     12:     assert_equal(88,\
    \ candidate.call([4, 88]))\n  => 13:     assert_equal(122, candidate.call([4,\
    \ 5, 6, 7, 2, 122]))\n     14:     assert_equal(0, candidate.call([4, 0, 6, 7]))\n\
    \     15:     assert_equal(12, candidate.call([4, 4, 6, 8]))\n     16:   end\n\
    <122> expected but was\n<134>\n\ndiff:\n? 122\n?  34\n?  ??\n===============================================================================\n\
    \nFinished in 0.008517827 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    117.40 tests/s, 234.80 assertions/s\n"
  timestamp: 1659800029
