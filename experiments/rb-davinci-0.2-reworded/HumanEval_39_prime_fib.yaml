name: HumanEval_39_prime_fib
language: rb
prompt: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n# >>> prime_fib.call(1)\n# 2\n# >>> prime_fib.call(2)\n# 3\n# >>> prime_fib.call(3)\n\
  # 5\n# >>> prime_fib.call(4)\n# 13\n# >>> prime_fib.call(5)\n# 89\ndef prime_fib(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_prime_fib\n\
  \    candidate = method(:prime_fib)\n    assert_equal(2, candidate.call(1))\n  \
  \  assert_equal(3, candidate.call(2))\n    assert_equal(5, candidate.call(3))\n\
  \    assert_equal(13, candidate.call(4))\n    assert_equal(89, candidate.call(5))\n\
  \    assert_equal(233, candidate.call(6))\n    assert_equal(1597, candidate.call(7))\n\
  \    assert_equal(28657, candidate.call(8))\n    assert_equal(514229, candidate.call(9))\n\
  \    assert_equal(433494437, candidate.call(10))\n  end\nend\n"
completions: ["  fib = fibonacci\n  fib.select { |num| prime?(num) }[n - 1]\nend",
  "  fibonacci(n).select { |x| prime?(x) }.last\nend", "  fib = Fibonacci.new\n  fib.find\
    \ { |x| x.prime? }\nend", "  fib = Fibonacci.new\n  fib.take_while { |f| f.prime?\
    \ }[n - 1]\nend", "  fib = Enumerator.new do |y|\n    a = b = 1\n    loop do\n\
    \      y << a\n      a, b = b, a + b\n    end\n  end", "  fib = fibonacci\n  fib.select\
    \ { |num| prime?(num) }[n - 1]\nend", "  fib = fibonacci(n)\n  fib.select { |num|\
    \ prime?(num) }[n - 1]\nend", "  fib = Fibonacci.new\n  prime = Prime.new\n  fib.call(prime.call(n))\n\
    end", "  fib = fibonacci\n  fib.select! { |x| x.prime? }\n  fib[n - 1]\nend",
  "  fib = Fibonacci.new\n  fib.call(n)\nend", "  fib = Fibonacci.new\n  fib.call(n)\n\
    end", "  fib = fibonacci\n  fib.select { |x| prime?(x) }[n - 1]\nend", "  fib\
    \ = Fibonacci.new\n  fib.call(n)\nend", "  fib = Fibonacci.new\n  fib.take_while\
    \ { |x| x.prime? }[n - 1]\nend", "  fib = Fibonacci.new\n  fib.find { |f| f.prime?\
    \ }\nend", "  fib_num = fib(n)\n  while !is_prime?(fib_num)\n    n += 1\n    fib_num\
    \ = fib(n)\n  end\n  fib_num\nend", "  fib = fibonacci(n)\n  fib.select { |num|\
    \ prime?(num) }[n - 1]\nend", "  fib = fibonacci\n  prime = prime_numbers\n  fib.select\
    \ { |num| prime.include?(num) }[n - 1]\nend", "  fib = Fibonacci.new\n  prime\
    \ = Prime.new\n  fib.call(n)\nend", "  fib(n).select { |num| prime?(num) }.last\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
