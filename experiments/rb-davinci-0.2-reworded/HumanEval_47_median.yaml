name: HumanEval_47_median
language: rb
prompt: "# Return median of elements in the array l.\n# >>> median.call([3, 1, 2,\
  \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
  \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4,\
  \ 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5,\
  \ candidate.call([5]))\n    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7,\
  \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
completions: ["  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] + l[l.length/2\
    \ - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", "  sorted = l.sort\n\
    \  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len / 2]) / 2.0\nend",
  "  l.sort!\n  if l.length % 2 == 0\n    (l[l.length/2-1] + l[l.length/2]) / 2.0\n\
    \  else\n    l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n\
    \    (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    l[l.length/2]\n  end\n\
    end", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] + l[l.length/2\
    \ - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", "  l.sort!\n  if\
    \ l.length % 2 == 0\n    return (l[l.length/2 - 1] + l[l.length/2]) / 2.0\n  else\n\
    \    return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n \
    \   return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1) /\
    \ 2] + sorted[len / 2]) / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n    (l[l.length/2]\
    \ + l[l.length/2 - 1]) / 2.0\n  else\n    l[l.length/2]\n  end\nend", "  l.sort!\n\
    \  if l.length % 2 == 0\n    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n\
    \  else\n    return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2\
    \ == 0\n    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return\
    \ l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2]\
    \ + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", " \
    \ l.sort!\n  if l.length % 2 == 0\n    (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n\
    \  else\n    l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n\
    \    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] +\
    \ l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", " \
    \ l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] + l[l.length/2 -\
    \ 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length\
    \ % 2 == 0\n    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n   \
    \ return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return\
    \ (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1) /\
    \ 2] + sorted[len / 2]) / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n    return\
    \ (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1) /\
    \ 2] + sorted[len / 2]) / 2.0\nend", "  sorted = l.sort\n  len = sorted.length\n\
    \  (sorted[(len - 1) / 2] + sorted[len / 2]) / 2.0\nend", "  sorted = l.sort\n\
    \  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len / 2]) / 2.0\nend",
  "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] + l[l.length/2 - 1])\
    \ / 2.0\n  else\n    return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length\
    \ % 2 == 0\n    (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    l[l.length/2]\n\
    \  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] +\
    \ l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", " \
    \ sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len\
    \ / 2]) / 2.0\nend", "  sorted = l.sort\n  len = sorted.length\n  (sorted[(len\
    \ - 1) / 2] + sorted[len / 2]) / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n\
    \    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1) /\
    \ 2] + sorted[len / 2]) / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n    return\
    \ (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] +\
    \ l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", " \
    \ sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len\
    \ / 2]) / 2.0\nend", "  sorted = l.sort\n  len = sorted.length\n  (sorted[(len\
    \ - 1) / 2] + sorted[len / 2]) / 2.0\nend", "  sorted = l.sort\n  len = sorted.length\n\
    \  (sorted[(len - 1) / 2] + sorted[len / 2]) / 2.0\nend", "  l.sort!\n  if l.length\
    \ % 2 == 0\n    (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    l[l.length/2]\n\
    \  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] +\
    \ l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", " \
    \ l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] + l[l.length/2 -\
    \ 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length\
    \ % 2 == 0\n    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n   \
    \ return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return\
    \ (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    (l[l.length/2] + l[l.length/2\
    \ - 1]) / 2.0\n  else\n    l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length\
    \ % 2 == 0\n    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n   \
    \ return l[l.length/2]\n  end\nend", "  sorted = l.sort\n  len = sorted.length\n\
    \  (sorted[(len - 1) / 2] + sorted[len / 2]) / 2.0\nend", "  l.sort!\n  if l.length\
    \ % 2 == 0\n    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n   \
    \ return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return\
    \ (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1) /\
    \ 2] + sorted[len / 2]) / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n    (l[l.length/2]\
    \ + l[l.length/2 - 1]) / 2.0\n  else\n    l[l.length/2]\n  end\nend", "  sorted\
    \ = l.sort\n  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len / 2])\
    \ / 2.0\nend", "  sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1)\
    \ / 2] + sorted[len / 2]) / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n  \
    \  return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    (l[l.length/2] + l[l.length/2\
    \ - 1]) / 2.0\n  else\n    l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length\
    \ % 2 == 0\n    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n   \
    \ return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return\
    \ (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1) /\
    \ 2] + sorted[len / 2]) / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n    return\
    \ (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] +\
    \ l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", " \
    \ l.sort!\n  len = l.length\n  if len % 2 == 0\n    (l[len/2] + l[len/2 - 1])\
    \ / 2.0\n  else\n    l[len/2]\n  end\nend", "  sorted = l.sort\n  len = sorted.length\n\
    \  (sorted[(len - 1) / 2] + sorted[len / 2]) / 2.0\nend", "  sorted = l.sort\n\
    \  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len / 2]) / 2.0\nend",
  "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] + l[l.length/2 - 1])\
    \ / 2.0\n  else\n    return l[l.length/2]\n  end\nend", "  sorted = l.sort\n \
    \ len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len / 2]) / 2.0\nend",
  "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] + l[l.length/2 - 1])\
    \ / 2.0\n  else\n    return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length\
    \ % 2 == 0\n    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n   \
    \ return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return\
    \ (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] +\
    \ l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", " \
    \ l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] + l[l.length/2 -\
    \ 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length\
    \ % 2 == 0\n    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n   \
    \ return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return\
    \ (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  l.sort!\n  if l.length.odd?\n    return l[l.length/2]\n  else\n\
    \    return (l[l.length/2] + l[l.length/2 - 1])/2.0\n  end\nend", "  sorted =\
    \ l.sort\n  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len / 2]) /\
    \ 2.0\nend", "  l.sort!\n  len = l.length\n  if len % 2 == 0\n    return (l[len/2]\
    \ + l[len/2 - 1]) / 2.0\n  else\n    return l[len/2]\n  end\nend", "  l.sort!\n\
    \  if l.length % 2 == 0\n    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n\
    \  else\n    return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2\
    \ == 0\n    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return\
    \ l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2]\
    \ + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", " \
    \ l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] + l[l.length/2 -\
    \ 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length\
    \ % 2 == 0\n    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n   \
    \ return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return\
    \ (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] +\
    \ l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", " \
    \ l.sort!\n  if l.length % 2 == 0\n    (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n\
    \  else\n    l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n\
    \    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  # TODO: Return the median of the elements in l.\n  # Hint: sort\
    \ the array first.\n  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2]\
    \ + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", " \
    \ l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] + l[l.length/2 -\
    \ 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", "  # your code here\n\
    end", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2-1] + l[l.length/2])/2.0\n\
    \  else\n    return l[l.length/2]\n  end\nend", "  sorted = l.sort\n  len = sorted.length\n\
    \  (sorted[(len - 1) / 2] + sorted[len / 2]) / 2.0\nend", "  l.sort!\n  if l.length\
    \ % 2 == 0\n    (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    l[l.length/2]\n\
    \  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] +\
    \ l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", " \
    \ l.sort!\n  len = l.length\n  if len % 2 == 0\n    (l[len/2 - 1] + l[len/2])\
    \ / 2.0\n  else\n    l[len/2]\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n\
    \    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] +\
    \ l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", " \
    \ l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] + l[l.length/2 -\
    \ 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length\
    \ % 2 == 0\n    (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    l[l.length/2]\n\
    \  end\nend", "  sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1) /\
    \ 2] + sorted[len / 2]) / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n    return\
    \ (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] +\
    \ l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", " \
    \ sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len\
    \ / 2]) / 2.0\nend", "  sorted = l.sort\n  len = sorted.length\n  (sorted[(len\
    \ - 1) / 2] + sorted[len / 2]) / 2.0\nend", "  # YOUR CODE HERE\nend", "  sorted\
    \ = l.sort\n  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len / 2])\
    \ / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n    (l[l.length/2] + l[l.length/2\
    \ - 1]) / 2.0\n  else\n    l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length\
    \ % 2 == 0\n    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n   \
    \ return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return\
    \ (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2 - 1]\
    \ + l[l.length/2]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", "  sorted\
    \ = l.sort\n  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len / 2])\
    \ / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] +\
    \ l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", " \
    \ sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len\
    \ / 2]) / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2-1]\
    \ + l[l.length/2])/2.0\n  else\n    return l[l.length/2]\n  end\nend", "  sorted\
    \ = l.sort\n  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len / 2])\
    \ / 2.0\nend", "  sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1)\
    \ / 2] + sorted[len / 2]) / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n  \
    \  (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    l[l.length/2]\n  end\n\
    end", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] + l[l.length/2\
    \ - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", "  l.sort!\n  len\
    \ = l.length\n  if len % 2 == 0\n    (l[len/2] + l[len/2 - 1]) / 2.0\n  else\n\
    \    l[len/2]\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2]\
    \ + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", " \
    \ l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] + l[l.length/2 -\
    \ 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", "  sorted = l.sort\n\
    \  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len / 2]) / 2.0\nend",
  "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2 - 1] + l[l.length/2])\
    \ / 2.0\n  else\n    return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length\
    \ % 2 == 0\n    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n   \
    \ return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return\
    \ (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    (l[l.length/2 - 1] + l[l.length/2])\
    \ / 2.0\n  else\n    l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2\
    \ == 0\n    (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    l[l.length/2]\n\
    \  end\nend", "  sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1) /\
    \ 2] + sorted[len / 2]) / 2.0\nend", "  sorted = l.sort\n  len = sorted.length\n\
    \  (sorted[(len - 1) / 2] + sorted[len / 2]) / 2.0\nend", "  sorted = l.sort\n\
    \  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len / 2]) / 2.0\nend",
  "  l.sort!\n  if l.length % 2 == 0\n    (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n\
    \  else\n    l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n\
    \    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    (l[l.length/2] + l[l.length/2\
    \ - 1]) / 2.0\n  else\n    l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length\
    \ % 2 == 0\n    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n   \
    \ return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return\
    \ (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1) /\
    \ 2] + sorted[len / 2]) / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n    return\
    \ (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1) /\
    \ 2] + sorted[len / 2]) / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n    return\
    \ (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  l.sort!\n  if l.length.odd?\n    l[l.length/2]\n  else\n    (l[l.length/2\
    \ - 1] + l[l.length/2]) / 2.0\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n\
    \    (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    l[l.length/2]\n  end\n\
    end", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] + l[l.length/2\
    \ - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", "  l.sort!\n  if\
    \ l.length % 2 == 0\n    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n\
    \    return l[l.length/2]\n  end\nend", "  sorted = l.sort\n  len = sorted.length\n\
    \  (sorted[(len - 1) / 2] + sorted[len / 2]) / 2.0\nend", "  l.sort!\n  if l.length\
    \ % 2 == 0\n    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n   \
    \ return l[l.length/2]\n  end\nend", "  sorted = l.sort\n  len = sorted.length\n\
    \  (sorted[(len - 1) / 2] + sorted[len / 2]) / 2.0\nend", "  sorted = l.sort\n\
    \  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len / 2]) / 2.0\nend",
  "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2-1] + l[l.length/2])/2.0\n\
    \  else\n    return l[l.length/2]\n  end\nend", "  sorted = l.sort\n  len = sorted.length\n\
    \  (sorted[(len - 1) / 2] + sorted[len / 2]) / 2.0\nend", "  l.sort!\n  if l.length\
    \ % 2 == 0\n    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n   \
    \ return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return\
    \ (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1) /\
    \ 2] + sorted[len / 2]) / 2.0\nend", "  sorted = l.sort\n  len = sorted.length\n\
    \  (sorted[(len - 1) / 2] + sorted[len / 2]) / 2.0\nend", "  sorted = l.sort\n\
    \  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len / 2]) / 2.0\nend",
  "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] + l[l.length/2 - 1])\
    \ / 2.0\n  else\n    return l[l.length/2]\n  end\nend", "  sorted = l.sort\n \
    \ len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len / 2]) / 2.0\nend",
  "  sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len\
    \ / 2]) / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n    (l[l.length/2] +\
    \ l[l.length/2 - 1]) / 2.0\n  else\n    l[l.length/2]\n  end\nend", "  l.sort!\n\
    \  if l.length % 2 == 0\n    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n\
    \  else\n    return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2\
    \ == 0\n    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return\
    \ l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2]\
    \ + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", " \
    \ l.sort!\n  if l.length % 2 == 0\n    (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n\
    \  else\n    l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n\
    \    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  l.sort!\n  if l.length.odd?\n    return l[l.length/2]\n  else\n\
    \    return (l[l.length/2] + l[l.length/2 - 1])/2.0\n  end\nend", "  l.sort!\n\
    \  if l.length % 2 == 0\n    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n\
    \  else\n    return l[l.length/2]\n  end\nend", "  sorted = l.sort\n  len = sorted.length\n\
    \  (sorted[(len - 1) / 2] + sorted[len / 2]) / 2.0\nend", "  l.sort!\n  return\
    \ (l[l.length/2] + l[(l.length/2)-1])/2.0 if l.length % 2 == 0\n  l[l.length/2]\n\
    end", "  sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len\
    \ / 2]) / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2-1]\
    \ + l[l.length/2])/2.0\n  else\n    return l[l.length/2]\n  end\nend", "  l.sort!\n\
    \  if l.length % 2 == 0\n    return (l[l.length/2 - 1] + l[l.length/2]) / 2.0\n\
    \  else\n    return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2\
    \ == 0\n    (l[l.length/2-1] + l[l.length/2]) / 2.0\n  else\n    l[l.length/2]\n\
    \  end\nend", "  sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1) /\
    \ 2] + sorted[len / 2]) / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n    return\
    \ (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] +\
    \ l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", " \
    \ l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] + l[l.length/2 -\
    \ 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", "  # TODO: Return\
    \ the median of the elements in l.\n  # Hint: Use the sort method.\n  # Hint:\
    \ Use the length method.\n  # Hint: Use the floor method.\n  # Hint: Use the []\
    \ method.\n  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] + l[l.length/2\
    \ - 1])/2.0\n  else\n    return l[l.length/2]\n  end\nend", "  l.sort!\n  len\
    \ = l.length\n  if len % 2 == 0\n    (l[len/2] + l[len/2 - 1]) / 2.0\n  else\n\
    \    l[len/2]\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2]\
    \ + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", " \
    \ sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len\
    \ / 2]) / 2.0\nend", "  sorted = l.sort\n  len = sorted.length\n  (sorted[(len\
    \ - 1) / 2] + sorted[len / 2]) / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n\
    \    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1) /\
    \ 2] + sorted[len / 2]) / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n    return\
    \ (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] +\
    \ l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", " \
    \ sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len\
    \ / 2]) / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2]\
    \ + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", " \
    \ sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len\
    \ / 2]) / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2]\
    \ + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", " \
    \ sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len\
    \ / 2]) / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n    (l[l.length/2] +\
    \ l[l.length/2 - 1]) / 2.0\n  else\n    l[l.length/2]\n  end\nend", "  sorted\
    \ = l.sort\n  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len / 2])\
    \ / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] +\
    \ l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", " \
    \ sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len\
    \ / 2]) / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2]\
    \ + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", " \
    \ l.sort!\n  if l.length % 2 == 0\n    return (l[l.length/2] + l[l.length/2 -\
    \ 1]) / 2.0\n  else\n    return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length\
    \ % 2 == 0\n    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n   \
    \ return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    (l[l.length/2]\
    \ + l[l.length/2 - 1]) / 2.0\n  else\n    l[l.length/2]\n  end\nend", "  l.sort!\n\
    \  if l.length % 2 == 0\n    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n\
    \  else\n    return l[l.length/2]\n  end\nend", "  sorted = l.sort\n  len = sorted.length\n\
    \  (sorted[(len - 1) / 2] + sorted[len / 2]) / 2.0\nend", "  l.sort!\n  if l.length\
    \ % 2 == 0\n    return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n   \
    \ return l[l.length/2]\n  end\nend", "  l.sort!\n  if l.length % 2 == 0\n    return\
    \ (l[l.length/2 - 1] + l[l.length/2]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1) /\
    \ 2] + sorted[len / 2]) / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n    (l[l.length/2]\
    \ + l[l.length/2 - 1]) / 2.0\n  else\n    l[l.length/2]\n  end\nend", "  sorted\
    \ = l.sort\n  len = sorted.length\n  (sorted[(len - 1) / 2] + sorted[len / 2])\
    \ / 2.0\nend", "  sorted = l.sort\n  len = sorted.length\n  (sorted[(len - 1)\
    \ / 2] + sorted[len / 2]) / 2.0\nend", "  l.sort!\n  if l.length % 2 == 0\n  \
    \  return (l[l.length/2] + l[l.length/2 - 1]) / 2.0\n  else\n    return l[l.length/2]\n\
    \  end\nend", "  l.sort!\n  len = l.length\n  if len % 2 == 0\n    (l[len/2] +\
    \ l[len/2 - 1]) / 2.0\n  else\n    l[len/2]\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
