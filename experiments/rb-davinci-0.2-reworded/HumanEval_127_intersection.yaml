name: HumanEval_127_intersection
language: rb
prompt: "# You are given two intervals,\n# where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n# The given intervals are closed\
  \ which means that the interval (start, end)\n# includes both start and end.\n#\
  \ For each given interval, it is assumed that its start is less or equal its end.\n\
  # Your task is to determine whether the length of intersection of these two \n#\
  \ intervals is a prime number.\n# Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If\
  \ the length of the intersection is a prime number, return \"YES\",\n# otherwise,\
  \ return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output]\
  \ samples:\n# >>> intersection.call([1, 2], [2, 3])\n# \"NO\"\n# >>> intersection.call([-1,\
  \ 1], [0, 4])\n# \"NO\"\n# >>> intersection.call([-3, -1], [-5, 5])\n# \"YES\"\n\
  def intersection(interval1, interval2)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_intersection\n\
  \    candidate = method(:intersection)\n    assert_equal(\"NO\", candidate.call([1,\
  \ 2], [2, 3]))\n    assert_equal(\"NO\", candidate.call([-1, 1], [0, 4]))\n    assert_equal(\"\
  YES\", candidate.call([-3, -1], [-5, 5]))\n    assert_equal(\"YES\", candidate.call([-2,\
  \ 2], [-4, 0]))\n    assert_equal(\"NO\", candidate.call([-11, 2], [-1, -1]))\n\
  \    assert_equal(\"NO\", candidate.call([1, 2], [3, 5]))\n    assert_equal(\"NO\"\
  , candidate.call([1, 2], [1, 2]))\n    assert_equal(\"NO\", candidate.call([-2,\
  \ -2], [-3, -2]))\n  end\nend\n"
completions: ["  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if start\
    \ == ending\n  return \"NO\" if (start..ending).to_a.size.prime?\nend", "  start\
    \ = [interval1[0], interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if ending < start\n  return \"YES\" if prime?(ending - start\
    \ + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n  return\
    \ \"YES\" if start == finish\n  return \"NO\" if start == finish - 1\n  return\
    \ \"YES\" if (start..finish).to_a.size == 3\n  return \"NO\" if (start..finish).to_a.size\
    \ == 4\n  return \"YES\" if (start..finish).to_a.size == 5\n  return \"NO\" if\
    \ (start..finish).to_a.size == 6\n  return \"YES\" if (start..finish).to_a.size\
    \ == 7\n  return \"NO\" if (start..finish).to_a.size == 8\n  return \"YES\" if\
    \ (start..finish).to_a.size == 9\n  return \"NO\" if (start..finish).to_a.size\
    \ == 10\n  return \"YES\" if (start..finish).to_a.size == 11\n  return \"NO\"\
    \ if (start..finish).to_a.size == 12\n  return \"YES\" if (start..finish).to_a.size\
    \ == 13\n  return \"NO\" if (start..finish).to_a.size == 14\n  return \"YES\"\
    \ if (start..finish).to_a.size == 15\n  return \"NO\" if (start..finish).to_a.size\
    \ == 16\n  return \"YES\" if (start..finish).to_a.size == 17\n  return \"NO\"\
    \ if (start..finish).to_a.size == 18\n  return \"YES\" if (start..finish).to_a.size\
    \ == 19\n  return \"NO\" if (start..finish).to_a.size == 20\n  return \"YES\"\
    \ if (start..finish).to_a.size == 21\n  return \"NO\" if (start..finish).to_a.size\
    \ == 22\n  return \"YES\" if (start..finish).to_a.size == 23\n  return \"NO\"\
    \ if (start..finish).to_a.size == 24\n  return \"", "  start = [interval1[0],\
    \ interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > ending\n  return \"YES\" if prime?(ending - start + 1)\n  \"NO\"\
    \nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  if start > finish\n    return \"NO\"\n  end\n  if start\
    \ == finish\n    return \"YES\"\n  end\n  if start == finish - 1\n    return \"\
    YES\"\n  end\n  if start == finish - 2\n    return \"YES\"\n  end\n  if start\
    \ == finish - 3\n    return \"YES\"\n  end\n  if start == finish - 5\n    return\
    \ \"YES\"\n  end\n  if start == finish - 7\n    return \"YES\"\n  end\n  if start\
    \ == finish - 11\n    return \"YES\"\n  end\n  if start == finish - 13\n    return\
    \ \"YES\"\n  end\n  if start == finish - 17\n    return \"YES\"\n  end\n  if start\
    \ == finish - 19\n    return \"YES\"\n  end\n  if start == finish - 23\n    return\
    \ \"YES\"\n  end\n  if start == finish - 29\n    return \"YES\"\n  end\n  if start\
    \ == finish - 31\n    return \"YES\"\n  end\n  if start == finish - 37\n    return\
    \ \"YES\"\n  end\n  if start == finish - 41\n    return \"YES\"\n  end\n  if start\
    \ == finish - 43\n    return \"YES\"\n  end\n  if start == finish - 47\n    return\
    \ \"YES\"\n  end\n  if start == finish - 53\n    return \"YES\"\n  end\n  if start\
    \ == finish - 59\n    return \"YES\"\n  end\n  if start == finish - 61\n    return\
    \ \"YES\"\n  end\n  if start == finish - 67\n    return \"YES\"\n  end\n  if start\
    \ == finish - 71\n    return \"YES\"\n  end\n  if start == finish - 73\n    return\
    \ \"YES\"\n  end\n  if start == finish - 79\n    return \"YES\"\n  end\n  if start\
    \ == finish - 83\n    return \"YES\"\n  end\n  if start == finish - 89\n    return\
    \ \"YES\"\n  end\n  if start == finish - 97\n    return \"YES\"\n  end\n  return\
    \ \"", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  # your code here\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  start1, end1 = interval1\n  start2, end2 = interval2\n  return\
    \ \"NO\" if end1 < start2 || end2 < start1\n  start = [start1, start2].max\n \
    \ finish = [end1, end2].min\n  return \"NO\" if start == finish\n  return \"YES\"\
    \ if prime?(finish - start)\n  \"NO\"\nend", "  # your code here\nend", "  start\
    \ = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  return \"NO\" if (start..finish).to_a.length == 1\n  return \"\
    YES\" if (start..finish).to_a.length == 2\n  return \"NO\" if (start..finish).to_a.length\
    \ == 3\n  return \"YES\" if (start..finish).to_a.length == 4\n  return \"NO\"\
    \ if (start..finish).to_a.length == 5\n  return \"YES\" if (start..finish).to_a.length\
    \ == 6\n  return \"NO\" if (start..finish).to_a.length == 7\n  return \"YES\"\
    \ if (start..finish).to_a.length == 8\n  return \"NO\" if (start..finish).to_a.length\
    \ == 9\n  return \"YES\" if (start..finish).to_a.length == 10\n  return \"NO\"\
    \ if (start..finish).to_a.length == 11\n  return \"YES\" if (start..finish).to_a.length\
    \ == 12\n  return \"NO\" if (start..finish).to_a.length == 13\n  return \"YES\"\
    \ if (start..finish).to_a.length == 14\n  return \"NO\" if (start..finish).to_a.length\
    \ == 15\n  return \"YES\" if (start..finish).to_a.length == 16\n  return \"NO\"\
    \ if (start..finish).to_a.length == 17\n  return \"YES\" if (start..finish).to_a.length\
    \ == 18\n  return \"NO\" if (start..finish).to_a.length == 19\n  return \"YES\"\
    \ if (start..finish).to_a.length == 20\n  return \"NO\" if (start..finish).to_a.length\
    \ == 21\n  return \"YES\" if (start..finish).to_a.length == 22\n  return \"NO\"\
    \ if (start..finish).to_a", "  # your code here\nend", "  interval1_start, interval1_end\
    \ = interval1\n  interval2_start, interval2_end = interval2\n  intersection_start\
    \ = [interval1_start, interval2_start].max\n  intersection_end = [interval1_end,\
    \ interval2_end].min\n  intersection_length = intersection_end - intersection_start\
    \ + 1\n  intersection_length > 0 && is_prime?(intersection_length) ? \"YES\" :\
    \ \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  return \"NO\" if start + 1 == finish\n  return \"YES\" if start\
    \ + 2 == finish\n  return \"NO\" if start + 3 == finish\n  return \"YES\" if start\
    \ + 4 == finish\n  return \"NO\" if start + 5 == finish\n  return \"YES\" if start\
    \ + 6 == finish\n  return \"NO\" if start + 7 == finish\n  return \"YES\" if start\
    \ + 8 == finish\n  return \"NO\" if start + 9 == finish\n  return \"YES\" if start\
    \ + 10 == finish\n  return \"NO\" if start + 11 == finish\n  return \"YES\" if\
    \ start + 12 == finish\n  return \"NO\" if start + 13 == finish\n  return \"YES\"\
    \ if start + 14 == finish\n  return \"NO\" if start + 15 == finish\n  return \"\
    YES\" if start + 16 == finish\n  return \"NO\" if start + 17 == finish\n  return\
    \ \"YES\" if start + 18 == finish\n  return \"NO\" if start + 19 == finish\n \
    \ return \"YES\" if start + 20 == finish\n  return \"NO\" if start + 21 == finish\n\
    \  return \"YES\" if start + 22 == finish\n  return \"NO\" if start + 23 == finish\n\
    \  return \"YES\" if start + 24 == finish\n  return \"NO\" if start + 25 == finish\n\
    \  return \"YES\" if start + 26 == finish\n  return \"NO\" if start + 27 == finish\n\
    \  return \"YES\" if start + 28 == finish\n  return \"NO\" if start + 29 == finish\n\
    \  return \"YES\" if start + 30 == finish\n  return \"NO\" if start + 31 == finish\n\
    \  return \"YES\" if start + 32 == finish\n  return \"NO\" if start + 33 == finish\n\
    \  return \"YES\" if start + 34 == finish\n  return \"NO\" if start + 35 == finish\n\
    \  return \"YES\" if start + 36 == finish\n  return \"NO\" if start + 37 == finish\n\
    \  return \"YES\" if start + 38 == finish", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).to_a.length.prime?\n  \"NO\"\nend", "  start\
    \ = [interval1[0], interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if start == finish && prime?(start)\n  return \"NO\" if start\
    \ == finish && !prime?(start)\n  prime?(finish - start) ? \"YES\" : \"NO\"\nend",
  "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n  return\
    \ \"YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n  \"\
    NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  return \"NO\" if finish - start == 1\n  (2..(finish - start - 1)).each\
    \ do |i|\n    return \"NO\" if (finish - start) % i == 0\n  end\n  \"YES\"\nend",
  "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n  return\
    \ \"YES\" if start == finish\n  return \"NO\" if (start..finish).to_a.size.prime?\n\
    end", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  start1, end1 = interval1\n  start2, end2 = interval2\n  return\
    \ \"NO\" if start1 > end2 || start2 > end1\n  start = [start1, start2].max\n \
    \ ending = [end1, end2].min\n  return \"NO\" if ending - start < 1\n  return \"\
    YES\" if (ending - start).prime?\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if start == finish\n  return\
    \ \"NO\" if (start..finish).count.prime?\nend", "  # your code here\nend", " \
    \ start = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return 'NO' if start > finish\n  return 'YES' if (start..finish).to_a.size\
    \ == 2\n  (start..finish).to_a.size.prime? ? 'YES' : 'NO'\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n  \"\
    NO\"\nend", "  # your code here\nend", "  # your code here\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if ending < start\n  return \"YES\" if prime?(ending - start + 1)\n  \"NO\"\
    \nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  # Your code here\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if start == finish\n  return \"NO\" if\
    \ start == 1\n  (2..Math.sqrt(start)).each do |i|\n    return \"NO\" if start\
    \ % i == 0\n  end\n  \"YES\"\nend", "  # your code here\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  ending = [interval1[1], interval2[1]].min\n  return \"NO\" if start > ending\n\
    \  return \"YES\" if prime?(ending - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n  \"\
    NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  if interval1[0] > interval2[1] || interval2[0] > interval1[1]\n\
    \    return \"NO\"\n  end\n  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  length = finish - start + 1\n  if length\
    \ <= 1\n    return \"NO\"\n  end\n  if length == 2\n    return \"YES\"\n  end\n\
    \  if length % 2 == 0\n    return \"NO\"\n  end\n  (3..Math.sqrt(length)).each\
    \ do |i|\n    if length % i == 0\n      return \"NO\"\n    end\n  end\n  return\
    \ \"YES\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  return \"NO\" if finish - start == 1\n  (2..Math.sqrt(finish -\
    \ start)).each do |i|\n    return \"NO\" if (finish - start) % i == 0\n  end\n\
    \  \"YES\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  ending = [interval1[1], interval2[1]].min\n  return \"NO\" if start > ending\n\
    \  return \"YES\" if (start..ending).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  ending = [interval1[1], interval2[1]].min\n  if start > ending\n    return\
    \ \"NO\"\n  end\n  if is_prime(ending - start + 1)\n    return \"YES\"\n  else\n\
    \    return \"NO\"\n  end\nend", "  # your code here\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  (start..finish).count.prime? ? \"YES\" : \"NO\"\nend",
  "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n  return\
    \ \"YES\" if start == finish\n  return \"NO\" if (start..finish).to_a.length ==\
    \ 1\n  return \"YES\" if (start..finish).to_a.length == 2\n  return \"NO\" if\
    \ (start..finish).to_a.length == 3\n  return \"YES\" if (start..finish).to_a.length\
    \ == 4\n  return \"NO\" if (start..finish).to_a.length == 5\n  return \"YES\"\
    \ if (start..finish).to_a.length == 6\n  return \"NO\" if (start..finish).to_a.length\
    \ == 7\n  return \"YES\" if (start..finish).to_a.length == 8\n  return \"NO\"\
    \ if (start..finish).to_a.length == 9\n  return \"YES\" if (start..finish).to_a.length\
    \ == 10\n  return \"NO\" if (start..finish).to_a.length == 11\n  return \"YES\"\
    \ if (start..finish).to_a.length == 12\n  return \"NO\" if (start..finish).to_a.length\
    \ == 13\n  return \"YES\" if (start..finish).to_a.length == 14\n  return \"NO\"\
    \ if (start..finish).to_a.length == 15\n  return \"YES\" if (start..finish).to_a.length\
    \ == 16\n  return \"NO\" if (start..finish).to_a.length == 17\n  return \"YES\"\
    \ if (start..finish).to_a.length == 18\n  return \"NO\" if (start..finish).to_a.length\
    \ == 19\n  return \"YES\" if (start..finish).to_a.length == 20\n  return \"NO\"\
    \ if (start..finish).to_a.length == 21\n  return \"YES\" if (start..finish).to_a.length\
    \ == 22\n  return \"NO\" if (start..finish).to_a", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if start == finish\n  return \"NO\" if (start..finish).to_a.size.prime?\n\
    \  \"YES\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if ending\
    \ - start == 1\n  return \"NO\" if (2..ending-1).any? { |n| (ending - start) %\
    \ n == 0 }\n  \"YES\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n  return\
    \ \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n  \"\
    NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if prime?(ending\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  ending = [interval1[1], interval2[1]].min\n  return \"NO\" if ending < start\n\
    \  return \"YES\" if prime?(ending - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if ending < start\n  return \"YES\" if (ending - start + 1).prime?\n  \"\
    NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if prime?(ending\
    \ - start + 1)\n  \"NO\"\nend", "  return \"NO\" if interval1[1] < interval2[0]\
    \ || interval2[1] < interval1[0]\n  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > ending\n  return \"YES\" if is_prime?(ending - start + 1)\n  \"\
    NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  # Your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  # your code\
    \ here\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if ending < start\n  return \"YES\" if prime?(ending\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if finish < start\n\
    \  length = finish - start + 1\n  return \"YES\" if length == 2\n  return \"NO\"\
    \ if length % 2 == 0\n  (3..Math.sqrt(length)).each do |i|\n    return \"NO\"\
    \ if length % i == 0\n  end\n  \"YES\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n  \"\
    NO\"\nend", "  # your code here\nend", "  # your code here\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if start == finish\n  return \"NO\" if\
    \ (start..finish).count.prime?\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  if start > finish\n    return\
    \ \"NO\"\n  end\n  if (start..finish).count.prime?\n    return \"YES\"\n  else\n\
    \    return \"NO\"\n  end\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if start == finish && prime?(start)\n  return \"NO\" if prime?(start)\
    \ && prime?(finish)\n  \"YES\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if start == finish\n  return\
    \ \"NO\" if (start..finish).count.prime?\nend", "  # your code here\nend", " \
    \ start = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish - start\
    \ + 1)\n  \"NO\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  # your code\
    \ here\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (ending\
    \ - start + 1).prime?\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if start == finish\n  return \"NO\" if (start..finish).count.prime?\n\
    end", "  intersection = (interval1[0]..interval1[1]).to_a & (interval2[0]..interval2[1]).to_a\n\
    \  intersection.length.prime? ? \"YES\" : \"NO\"\nend", "  # your code here\n\
    end", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish - start\
    \ + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if start > ending\n  return\
    \ \"YES\" if (start..ending).count.prime?\n  \"NO\"\nend", "  start1, end1 = interval1\n\
    \  start2, end2 = interval2\n  return \"NO\" if end1 < start2 || end2 < start1\n\
    \  start = [start1, start2].max\n  ending = [end1, end2].min\n  return \"NO\"\
    \ if start > ending\n  return \"YES\" if (ending - start + 1).prime?\n  \"NO\"\
    \nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  ending = [interval1[1], interval2[1]].min\n  return \"NO\" if start > ending\n\
    \  return \"YES\" if (start..ending).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if start == finish\n  return\
    \ \"NO\" if (start..finish).to_a.size == 1\n  return \"YES\" if (start..finish).to_a.size\
    \ == 2\n  return \"NO\" if (start..finish).to_a.size == 3\n  return \"YES\" if\
    \ (start..finish).to_a.size == 4\n  return \"NO\" if (start..finish).to_a.size\
    \ == 5\n  return \"YES\" if (start..finish).to_a.size == 6\n  return \"NO\" if\
    \ (start..finish).to_a.size == 7\n  return \"YES\" if (start..finish).to_a.size\
    \ == 8\n  return \"NO\" if (start..finish).to_a.size == 9\n  return \"YES\" if\
    \ (start..finish).to_a.size == 10\n  return \"NO\" if (start..finish).to_a.size\
    \ == 11\n  return \"YES\" if (start..finish).to_a.size == 12\n  return \"NO\"\
    \ if (start..finish).to_a.size == 13\n  return \"YES\" if (start..finish).to_a.size\
    \ == 14\n  return \"NO\" if (start..finish).to_a.size == 15\n  return \"YES\"\
    \ if (start..finish).to_a.size == 16\n  return \"NO\" if (start..finish).to_a.size\
    \ == 17\n  return \"YES\" if (start..finish).to_a.size == 18\n  return \"NO\"\
    \ if (start..finish).to_a.size == 19\n  return \"YES\" if (start..finish).to_a.size\
    \ == 20\n  return \"NO\" if (start..finish).to_a.size == 21\n  return \"YES\"\
    \ if (start..finish).to_a.size == 22\n  return \"NO\" if (start..finish).to_a",
  "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).size.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if ending < start\n  return \"YES\" if prime?(ending\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).size.prime?\n  \"\
    NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if is_prime?(ending\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  ending = [interval1[1], interval2[1]].min\n  return \"NO\" if start > ending\n\
    \  return \"YES\" if (start..ending).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish - start\
    \ + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n  return\
    \ \"YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > ending\n  return \"YES\" if (ending - start + 1).prime?\n  \"\
    NO\"\nend", "  # your code here\nend", "  if interval1[0] > interval2[1] || interval2[0]\
    \ > interval1[1]\n    return \"NO\"\n  end\n  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  if start == finish\n    return\
    \ \"NO\"\n  end\n  (start..finish).count.prime? ? \"YES\" : \"NO\"\nend", "  #\
    \ your code here\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  ending = [interval1[1], interval2[1]].min\n  return \"NO\" if start > ending\n\
    \  return \"YES\" if (start..ending).count.prime?\n  \"NO\"\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish - start\
    \ + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n  return\
    \ \"YES\" if (start..finish).count.prime?\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if start == finish\n  return \"NO\" if\
    \ (start..finish).to_a.length.prime?\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  ending = [interval1[1], interval2[1]].min\n  return \"NO\" if start > ending\n\
    \  return \"YES\" if prime?(ending - start + 1)\n  \"NO\"\nend", "  # your code\
    \ here\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if finish < start\n  return \"YES\" if start\
    \ == finish && start.prime?\n  return \"NO\" if (finish - start).prime?\n  \"\
    YES\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  # your code here\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if (start..finish).size.prime?\n  \"\
    NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  return \"NO\" if (start..finish).count.prime?\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count\
    \ == 1\n  return \"NO\" if (start..finish).count == 0\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  return \"NO\" if (start..finish).to_a.size.prime?\n  \"YES\"\n\
    end", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if start == finish && prime?(start)\n\
    \  return \"NO\" if start == finish && !prime?(start)\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if start == finish\n  return \"NO\" if (start..finish).to_a.length\
    \ == 1\n  return \"YES\" if (start..finish).to_a.length == 2\n  return \"NO\"\
    \ if (start..finish).to_a.length == 3\n  return \"YES\" if (start..finish).to_a.length\
    \ == 4\n  return \"NO\" if (start..finish).to_a.length == 5\n  return \"YES\"\
    \ if (start..finish).to_a.length == 6\n  return \"NO\" if (start..finish).to_a.length\
    \ == 7\n  return \"YES\" if (start..finish).to_a.length == 8\n  return \"NO\"\
    \ if (start..finish).to_a.length == 9\n  return \"YES\" if (start..finish).to_a.length\
    \ == 10\n  return \"NO\" if (start..finish).to_a.length == 11\n  return \"YES\"\
    \ if (start..finish).to_a.length == 12\n  return \"NO\" if (start..finish).to_a.length\
    \ == 13\n  return \"YES\" if (start..finish).to_a.length == 14\n  return \"NO\"\
    \ if (start..finish).to_a.length == 15\n  return \"YES\" if (start..finish).to_a.length\
    \ == 16\n  return \"NO\" if (start..finish).to_a.length == 17\n  return \"YES\"\
    \ if (start..finish).to_a.length == 18\n  return \"NO\" if (start..finish).to_a.length\
    \ == 19\n  return \"YES\" if (start..finish).to_a.length == 20\n  return \"NO\"\
    \ if (start..finish).to_a.length == 21\n  return \"YES\" if (start..finish).to_a.length\
    \ == 22\n  return \"NO\" if (start..finish).to_a", "  start1, end1 = interval1\n\
    \  start2, end2 = interval2\n  start = [start1, start2].max\n  finish = [end1,\
    \ end2].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  # your code here\nend", "  # your code here\nend", "  # your\
    \ code here\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if start == finish\n  return \"NO\" if finish - start == 1\n\
    \  (start + 1...finish).each do |num|\n    return \"NO\" if num.prime?\n  end\n\
    \  \"YES\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish\
    \ - start + 1)\n  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > finish\n  return \"YES\" if start == finish\n  return \"NO\" if\
    \ start == finish - 1\n  return \"YES\" if (2..Math.sqrt(finish - start)).none?\
    \ { |i| (start..finish).step(i).count == 2 }\n  \"NO\"\nend", "  # your code here\n\
    end", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish - start\
    \ + 1)\n  \"NO\"\nend", "  # your code here\nend", "  # Your code here\nend",
  "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n  return\
    \ \"YES\" if start == finish\n  return \"NO\" if finish - start == 1\n  (2..Math.sqrt(finish\
    \ - start)).each do |i|\n    return \"NO\" if (finish - start) % i == 0\n  end\n\
    \  \"YES\"\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  ending = [interval1[1], interval2[1]].min\n  return \"NO\" if ending < start\n\
    \  return \"YES\" if (start..ending).count.prime?\n  \"NO\"\nend", "  # your code\
    \ here\nend", "  # your code here\nend", "  start = [interval1[0], interval2[0]].max\n\
    \  finish = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n\
    \  return \"YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  start1, end1\
    \ = interval1\n  start2, end2 = interval2\n  if start1 > end2 || start2 > end1\n\
    \    \"NO\"\n  else\n    start = [start1, start2].max\n    finish = [end1, end2].min\n\
    \    length = finish - start + 1\n    length.prime? ? \"YES\" : \"NO\"\n  end\n\
    end", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  (start..finish).count.prime? ? \"YES\" : \"NO\"\nend", "  intersection\
    \ = [interval1[0], interval2[0]].max..[interval1[1], interval2[1]].min\n  intersection.size\
    \ > 1 && prime?(interval_length(intersection)) ? \"YES\" : \"NO\"\nend", "  start\
    \ = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).to_a.length.prime?\n\
    \  \"NO\"\nend", "  return \"NO\" if interval1[1] < interval2[0] || interval2[1]\
    \ < interval1[0]\n  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  (start..finish).count.prime? ? \"YES\" : \"NO\"\nend",
  "  start1, end1 = interval1\n  start2, end2 = interval2\n  return \"NO\" if start1\
    \ > end2 || start2 > end1\n  start = [start1, start2].max\n  ending = [end1, end2].min\n\
    \  return \"NO\" if start > ending\n  return \"YES\" if (ending - start + 1).prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  return \"NO\" if (start..finish).count.prime?\nend", "  start =\
    \ [interval1[0], interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if ending < start\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if ending < start\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  if interval1[0] > interval2[1] || interval2[0] > interval1[1]\n\
    \    return \"NO\"\n  end\n  if interval1[0] < interval2[0]\n    start = interval2[0]\n\
    \  else\n    start = interval1[0]\n  end\n  if interval1[1] < interval2[1]\n \
    \   end_ = interval1[1]\n  else\n    end_ = interval2[1]\n  end\n  if is_prime(end_\
    \ - start + 1)\n    return \"YES\"\n  else\n    return \"NO\"\n  end\nend", " \
    \ start = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if prime?(finish - start\
    \ + 1)\n  \"NO\"\nend", "  # your code here\nend", "  # your code here\nend",
  "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1], interval2[1]].min\n\
    \  return \"NO\" if start > finish\n  return \"YES\" if (start..finish).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  ending = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n\
    \  \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish = [interval1[1],\
    \ interval2[1]].min\n  return \"NO\" if start > finish\n  return \"YES\" if start\
    \ == finish\n  return \"NO\" if (start..finish).to_a.size == 1\n  (start..finish).to_a.size.prime?\
    \ ? \"YES\" : \"NO\"\nend", "  start = [interval1[0], interval2[0]].max\n  finish\
    \ = [interval1[1], interval2[1]].min\n  return \"NO\" if start > finish\n  return\
    \ \"YES\" if prime?(finish - start + 1)\n  \"NO\"\nend", "  start = [interval1[0],\
    \ interval2[0]].max\n  ending = [interval1[1], interval2[1]].min\n  return \"\
    NO\" if start > ending\n  return \"YES\" if (start..ending).count.prime?\n  \"\
    NO\"\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
