name: HumanEval_18_how_many_times
language: rb
prompt: "# Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n# >>> how_many_times.call(\"\", \"a\")\n# 0\n# >>> how_many_times.call(\"\
  aaa\", \"a\")\n# 3\n# >>> how_many_times.call(\"aaaa\", \"aa\")\n# 3\ndef how_many_times(string,\
  \ substring)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n\
  \    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\"\
  , \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
  \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
  john doe\", \"john\"))\n  end\nend\n"
completions: ["  string.scan(substring).length\nend", "  string.scan(substring).length\n\
    end", "  string.scan(substring).count\nend", "  string.scan(/(?=#{substring})/).count\n\
    end", "  return 0 if string.empty? || substring.empty?\n  string.scan(substring).count\n\
    end", "  string.scan(substring).length\nend", "  return 0 if string.empty? ||\
    \ substring.empty?\n  string.scan(/#{substring}/).count\nend", "  return 0 if\
    \ string.empty? || substring.empty?\n  string.scan(/(?=#{substring})/).count\n\
    end", "  string.scan(substring).count\nend", "  string.scan(/(?=#{substring})/).count\n\
    end", "  return 0 if string.empty? || substring.empty?\n  return string.scan(substring).count\n\
    end", "  string.scan(substring).count\nend", "  string.scan(substring).length\n\
    end", "  string.scan(substring).count\nend", "  string.scan(substring).length\n\
    end", "  string.scan(substring).count\nend", "  return 0 if string.empty? || substring.empty?\n\
    \  string.scan(/(?=#{substring})/).count\nend", "  string.scan(substring).count\n\
    end", "  string.scan(substring).count\nend", "  string.scan(substring).count\n\
    end", "  string.scan(substring).length\nend", "  string.scan(substring).count\n\
    end", "  string.scan(substring).count\nend", "  string.scan(substring).count\n\
    end", "  string.scan(substring).count\nend", "  string.scan(substring).count\n\
    end", "  return 0 if string.empty? || substring.empty?\n  string.scan(substring).count\n\
    end", "  return 0 if string.size < substring.size\n  return 1 if string == substring\n\
    \  return how_many_times(string[1..-1], substring) + how_many_times(string[0..-2],\
    \ substring)\nend", "  string.scan(substring).length\nend", "  string.scan(/(?=#{substring})/).count\n\
    end", "  return 0 if string.empty? || substring.empty?\n  string.scan(/(?=#{substring})/).count\n\
    end", "  count = 0\n  string.length.times do |i|\n    if string[i..i+substring.length-1]\
    \ == substring\n      count += 1\n    end\n  end\n  count\nend", "  string.scan(/(?=#{substring})/).count\n\
    end", "  string.scan(/(?=#{substring})/).count\nend", "  return 0 if string.empty?\
    \ || substring.empty?\n  string.scan(substring).count\nend", "  string.scan(substring).length\n\
    end", "  string.scan(substring).length\nend", "  return 0 if string.empty? ||\
    \ substring.empty?\n  string.scan(substring).count\nend", "  string.scan(substring).length\n\
    end", "  string.scan(/(?=#{substring})/).count\nend", "  string.scan(/(?=#{substring})/).count\n\
    end", "  string.scan(substring).count\nend", "  string.scan(substring).length\n\
    end", "  string.scan(/(?=#{substring})/).count\nend", "  return 0 if string.empty?\
    \ || substring.empty?\n  return string.length if substring.length == 1\n  return\
    \ 1 if string.length == substring.length", "  string.scan(substring).count\nend",
  "  string.scan(substring).length\nend", "  string.scan(substring).count\nend", " \
    \ string.scan(substring).count\nend", "  string.scan(substring).length\nend",
  "  string.scan(substring).length\nend", "  string.scan(substring).count\nend", " \
    \ string.scan(substring).count\nend", "  count = 0\n  string.length.times do |i|\n\
    \    if string[i..(i + substring.length - 1)] == substring\n      count += 1\n\
    \    end\n  end\n  count\nend", "  string.scan(/(?=#{substring})/).count\nend",
  "  string.scan(substring).length\nend", "  return 0 if string.empty? || substring.empty?\n\
    \  string.scan(substring).count\nend", "  string.scan(substring).count\nend",
  "  string.scan(substring).length\nend", "  string.scan(substring).length\nend",
  "  string.scan(substring).length\nend", "  string.scan(substring).count\nend", " \
    \ string.scan(substring).length\nend", "  string.scan(substring).length\nend",
  "  return 0 if string.empty? || substring.empty?\n  string.scan(substring).size\n\
    end", "  string.scan(substring).count\nend", "  string.scan(substring).count\n\
    end", "  string.scan(substring).length\nend", "  string.scan(substring).length\n\
    end", "  # TODO: implement this method\nend", "  string.scan(substring).length\n\
    end", "  string.scan(substring).count\nend", "  count = 0\n  string.scan(substring)\
    \ { count += 1 }\n  count\nend", "  string.scan(substring).length\nend", "  return\
    \ 0 if string.empty? || substring.empty?\n  string.scan(/(?=#{substring})/).count\n\
    end", "  string.scan(substring).count\nend", "  string.scan(substring).length\n\
    end", "  count = 0\n  i = 0\n  while i < string.length\n    if string[i..i+substring.length-1]\
    \ == substring\n      count += 1\n      i += substring.length\n    else\n    \
    \  i += 1\n    end\n  end\n  count\nend", "  string.scan(substring).count\nend",
  "  string.scan(/#{substring}/).count\nend", "  string.scan(substring).count\nend",
  "  string.scan(substring).length\nend", "  string.scan(substring).count\nend", " \
    \ string.scan(substring).count\nend", "  string.scan(substring).count\nend", " \
    \ string.scan(substring).count\nend", "  string.scan(/(?=#{substring})/).count\n\
    end", "  string.scan(substring).count\nend", "  return 0 if string.empty? || substring.empty?\n\
    \  return 1 if string == substring\n  return string.length if substring.length\
    \ == 1", "  # TODO: implement me\nend", "  string.scan(substring).count\nend",
  "  string.scan(substring).count\nend", "  string.scan(substring).count\nend", " \
    \ string.scan(substring).count\nend", "  string.scan(/(?=#{substring})/).count\n\
    end", "  string.scan(substring).length\nend", "  string.scan(substring).count\n\
    end", "  string.scan(substring).length\nend", "  count = 0\n  string.scan(substring)\
    \ { count += 1 }\n  count\nend", "  string.scan(/(?=#{substring})/).count\nend",
  "  string.scan(substring).length\nend", "  string.scan(substring).length\nend",
  "  return 0 if string.empty? || substring.empty?\n  string.scan(/(?=#{substring})/).count\n\
    end", "  string.scan(substring).count\nend", "  string.scan(substring).count\n\
    end", "  string.scan(/(?=#{substring})/).count\nend", "  string.scan(substring).count\n\
    end", "  if string.empty? || substring.empty?\n    0\n  else\n    string.scan(substring).count\n\
    \  end\nend", "  string.scan(substring).length\nend", "  string.scan(/(?=#{substring})/).count\n\
    end", "  count = 0\n  i = 0\n  while i < string.length\n    if string[i..-1].start_with?(substring)\n\
    \      count += 1\n      i += substring.length\n    else\n      i += 1\n    end\n\
    \  end\n  count\nend", "  string.scan(substring).count\nend", "  string.scan(substring).count\n\
    end", "  string.scan(substring).length\nend", "  string.scan(substring).length\n\
    end", "  string.scan(substring).length\nend", "  string.scan(substring).count\n\
    end", "  string.scan(substring).length\nend", "  string.scan(/(?=#{substring})/).count\n\
    end", "  string.scan(substring).count\nend", "  string.scan(substring).count\n\
    end", "  string.scan(substring).count\nend", "  string.scan(substring).count\n\
    end", "  string.scan(substring).count\nend", "  string.scan(substring).length\n\
    end", "  string.scan(substring).length\nend", "  string.scan(substring).length\n\
    end", "  string.scan(substring).length\nend", "  return 0 if string.empty? ||\
    \ substring.empty?\n  string.scan(/(?=#{substring})/).count\nend", "  string.scan(substring).length\n\
    end", "  string.scan(substring).count\nend", "  string.scan(substring).count\n\
    end", "  string.scan(substring).length\nend", "  return 0 if string.empty? ||\
    \ substring.empty?\n  return string.scan(substring).count\nend", "  string.scan(substring).length\n\
    end", "  return 0 if string.empty? || substring.empty?\n  string.scan(substring).count\n\
    end", "  string.scan(substring).length\nend", "  string.scan(substring).count\n\
    end", "  string.scan(/(?=#{substring})/).count\nend", "  string.scan(substring).count\n\
    end", "  string.scan(substring).count\nend", "  string.scan(/(?=#{substring})/).count\n\
    end", "  string.scan(/(?=#{substring})/).count\nend", "  string.scan(/(?=#{substring})/).count\n\
    end", "  string.scan(substring).count\nend", "  string.scan(substring).count\n\
    end", "  string.scan(/(?=#{substring})/).count\nend", "  return 0 if string.empty?\n\
    \  return 1 if substring.empty?\n  return 0 if string.length < substring.length\n\
    \  count = 0\n  i = 0\n  while i < string.length\n    if string[i] == substring[0]\n\
    \      count += 1 if string[i..i + substring.length - 1] == substring\n    end\n\
    \    i += 1\n  end\n  count\nend", "  string.scan(/(?=#{substring})/).count\n\
    end", "  string.scan(substring).length\nend", "  string.scan(substring).count\n\
    end", "  string.scan(/(?=#{substring})/).count\nend", "  string.scan(substring).count\n\
    end", "  string.scan(/(?=#{substring})/).count\nend", "  count = 0\n  string.scan(substring)\
    \ { count += 1 }\n  count\nend", "  string.scan(substring).length\nend", "  string.scan(/(?=#{substring})/).count\n\
    end", "  string.scan(/(?=#{substring})/).count\nend", "  string.scan(substring).count\n\
    end", "  string.scan(substring).count\nend", "  return 0 if string.empty?\n  return\
    \ 1 if substring.empty?\n  return 0 if string.length < substring.length\n  return\
    \ 1 if string.length == substring.length", "  return 0 if string.empty? || substring.empty?\n\
    \  string.scan(/#{substring}/).count\nend", "  string.scan(substring).count\n\
    end", "  string.scan(substring).count\nend", "  string.scan(substring).count\n\
    end", "  string.scan(substring).count\nend", "  string.scan(substring).count\n\
    end", "  string.scan(substring).length\nend", "  string.scan(substring).length\n\
    end", "  string.scan(substring).count\nend", "  string.scan(substring).count\n\
    end", "  string.scan(substring).count\nend", "  string.scan(substring).count\n\
    end", "  string.scan(substring).length\nend", "  string.scan(substring).count\n\
    end", "  string.scan(/(?=#{substring})/).count\nend", "  string.scan(substring).count\n\
    end", "  string.scan(/(?=#{substring})/).count\nend", "  string.scan(substring).count\n\
    end", "  string.scan(/(?=#{substring})/).count\nend", "  return 0 if string.empty?\
    \ || substring.empty?\n  string.scan(substring).count\nend", "  string.scan(substring).length\n\
    end", "  string.scan(substring).length\nend", "  return 0 if substring.length\
    \ > string.length\n  return 1 if substring.length == string.length\n  return string.scan(substring).length\n\
    end", "  string.scan(substring).count\nend", "  string.scan(/(?=#{substring})/).count\n\
    end", "  string.scan(/(?=#{substring})/).count\nend", "  string.scan(/(?=#{substring})/).count\n\
    end", "  string.scan(substring).count\nend", "  return 0 if string.empty? || substring.empty?\n\
    \  string.scan(substring).count\nend", "  string.scan(substring).count\nend",
  "  string.scan(substring).length\nend", "  return 0 if string.empty?\n  return string.length\
    \ if substring.empty?\n  return 0 if string.length < substring.length\n  return\
    \ 1 if string.length == substring.length", "  string.scan(/(?=#{substring})/).count\n\
    end", "  string.scan(substring).count\nend", "  return 0 if string.empty?\n  return\
    \ 1 if substring.empty?\n  return string.scan(substring).count\nend", "  string.scan(/(?=#{substring})/).count\n\
    end", "  string.scan(substring).length\nend", "  string.scan(/(?=#{substring})/).count\n\
    end", "  string.scan(substring).length\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
