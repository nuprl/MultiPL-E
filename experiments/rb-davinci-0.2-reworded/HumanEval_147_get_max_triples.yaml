name: HumanEval_147_get_max_triples
language: rb
prompt: "# You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i\
  \ - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j <\
  \ k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# >>> get_max_triples.call(5)\n\
  # 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7,\
  \ 13).\ndef get_max_triples(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_max_triples\n\
  \    candidate = method(:get_max_triples)\n    assert_equal(1, candidate.call(5))\n\
  \    assert_equal(4, candidate.call(6))\n    assert_equal(36, candidate.call(10))\n\
  \    assert_equal(53361, candidate.call(100))\n  end\nend\n"
completions: ["  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count {\
    \ |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i +\
    \ 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a\
    \ = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |x, y, z| (x\
    \ + y + z) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).select\
    \ { |i, j, k| (i + j + k) % 3 == 0 }.size\nend", "  a = (1..n).map { |i| i * i\
    \ - i + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend",
  "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |x, y, z| (x + y + z) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).select { |x, y, z| (x + y + z) % 3 == 0 }.count\n\
    end", "  a = Array.new(n) { |i| i * i - i + 1 }\n  a.combination(3).count { |i,\
    \ j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n\
    \  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map\
    \ { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3\
    \ == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).select { |i, j, k| (i + j + k) % 3 == 0 }.count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i,\
    \ j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n\
    \  a.combination(3).select { |i, j, k| (i + j + k) % 3 == 0 }.size\nend", "  a\
    \ = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).select { |i, j, k| (i\
    \ + j + k) % 3 == 0 }.count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n \
    \ a.combination(3).count { |x, y, z| (x + y + z) % 3 == 0 }\nend", "  a = (1..n).map\
    \ { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3\
    \ == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count\
    \ = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each\
    \ do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n   \
    \ end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |x, y, z| (x + y + z) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |x, y, z| (x + y + z) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each do |i|\n\
    \    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1\
    \ if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend",
  "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |x, y, z| (x + y + z) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).select { |i, j, k| (i + j + k) % 3 == 0 }.count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |x,\
    \ y, z| (x + y + z) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n\
    \  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map\
    \ { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3\
    \ == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  # Write your code here\n  a = []\n\
    \  (1..n).each do |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..a.length\
    \ - 3).each do |i|\n    (i + 1..a.length - 2).each do |j|\n      (j + 1..a.length\
    \ - 1).each do |k|\n        if (a[i] + a[j] + a[k]) % 3 == 0\n          count\
    \ += 1\n        end\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map\
    \ { |i| i * i - i + 1 }\n  a.combination(3).count { |x, y, z| (x + y + z) % 3\
    \ == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |x, y, z| (x + y + z) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).select\
    \ { |i, j, k| (i + j + k) % 3 == 0 }.size\nend", "  a = (1..n).map { |i| i * i\
    \ - i + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend",
  "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  # Write your code here\n  a = (1..n).map { |i|\
    \ i * i - i + 1 }\n  a.combination(3).select { |i, j, k| (i + j + k) % 3 == 0\
    \ }.size\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |x, y, z| (x + y + z) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n   \
    \   (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i -\
    \ i + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend",
  "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |x, y, z| (x + y + z) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).select\
    \ { |i, j, k| (i + j + k) % 3 == 0 }.size\nend", "  a = (1..n).map { |i| i * i\
    \ - i + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend",
  "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).select { |x, y, z| (x\
    \ + y + z) % 3 == 0 }.count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n \
    \ a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map\
    \ { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3\
    \ == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).select\
    \ { |x, y, z| (x + y + z) % 3 == 0 }.count\nend", "  a = (1..n).map { |i| i *\
    \ i - i + 1 }\n  count = 0\n  (0..n - 3).each do |i|\n    (i + 1..n - 2).each\
    \ do |j|\n      (j + 1..n - 1).each do |k|\n        count += 1 if (a[i] + a[j]\
    \ + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = []\n  (1..n).each\
    \ do |i|\n    a << i * i - i + 1\n  end\n  count = 0\n  (0..n-3).each do |i|\n\
    \    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count += 1\
    \ if a[i] + a[j] + a[k] % 3 == 0\n      end\n    end\n  end\n  count\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |x, y, z| (x + y + z) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).select { |i, j, k| (i + j + k) % 3 == 0 }.count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i,\
    \ j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n\
    \  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map\
    \ { |i| i * i - i + 1 }\n  a.combination(3).select { |i, j, k| (i + j + k) % 3\
    \ == 0 }.size\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |x, y, z| (x + y + z) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).select { |i, j, k|\
    \ (i + j + k) % 3 == 0 }.count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n\
    \  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map\
    \ { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3\
    \ == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).select { |i, j, k| (i + j + k) % 3 == 0 }.count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |x,\
    \ y, z| (x + y + z) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n\
    \  a.combination(3).count { |x, y, z| (x + y + z) % 3 == 0 }\nend", "  a = (1..n).map\
    \ { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3\
    \ == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |x, y, z| (x\
    \ + y + z) % 3 == 0 }\nend", "  # write your code here\nend", "  a = (1..n).to_a.map\
    \ { |i| i * i - i + 1 }\n  count = 0\n  (0..a.length - 3).each do |i|\n    (i\
    \ + 1..a.length - 2).each do |j|\n      (j + 1..a.length - 1).each do |k|\n  \
    \      count += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n\
    \  count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |x, y, z| (x + y + z) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |x, y, z| (x\
    \ + y + z) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).select\
    \ { |i, j, k| (i + j + k) % 3 == 0 }.count\nend", "  a = (1..n).map { |i| i *\
    \ i - i + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend",
  "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).select { |i, j, k| (i + j + k) % 3 == 0 }.count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).select { |i,\
    \ j, k| (i + j + k) % 3 == 0 }.count\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |x, y, z| (x\
    \ + y + z) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).to_a.count\
    \ { |x| x.sum % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |x, y, z| (x + y + z) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |x, y, z| (x + y + z) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |x, y, z| (x + y + z) % 3 == 0 }\nend", "  # your code here\nend", "  a =\
    \ (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i +\
    \ j + k) % 3 == 0 }\nend", "  # your code here\nend", "  a = (1..n).map { |i|\
    \ i * i - i + 1 }\n  a.combination(3).select { |i, j, k| (i + j + k) % 3 == 0\
    \ }.size\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |x, y, z| (x + y + z) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).select { |x, y, z|\
    \ (x + y + z) % 3 == 0 }.count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n\
    \  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map\
    \ { |i| i * i - i + 1 }\n  a.combination(3).count { |x, y, z| (x + y + z) % 3\
    \ == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).select\
    \ { |i, j, k| (i + j + k) % 3 == 0 }.count\nend", "  a = (1..n).map { |i| i *\
    \ i - i + 1 }\n  a.combination(3).select { |i, j, k| (i + j + k) % 3 == 0 }.count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i,\
    \ j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n\
    \  a.combination(3).select { |i, j, k| (i + j + k) % 3 == 0 }.size\nend", "  a\
    \ = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  a = []\n  (1..n).each { |i| a << i * i - i + 1\
    \ }\n  count = 0\n  (0..a.length - 3).each do |i|\n    (i + 1..a.length - 2).each\
    \ do |j|\n      (j + 1..a.length - 1).each do |k|\n        count += 1 if (a[i]\
    \ + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map\
    \ { |i| i * i - i + 1 }\n  a.combination(3).count { |x, y, z| (x + y + z) % 3\
    \ == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each\
    \ do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i,\
    \ j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n\
    \  a.combination(3).select { |i, j, k| (i + j + k) % 3 == 0 }.size\nend", "  a\
    \ = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).select { |i, j, k| (i\
    \ + j + k) % 3 == 0 }.count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n \
    \ a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map\
    \ { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3\
    \ == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |x, y, z| (x + y + z) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |x, y, z| (x\
    \ + y + z) % 3 == 0 }\nend", "  # your code here\nend", "  a = (1..n).map { |i|\
    \ i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).select { |x,\
    \ y, z| (x + y + z) % 3 == 0 }.count\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  # Write your code here\n  a = []\n  for i in 1..n\n\
    \    a[i] = i * i - i + 1\n  end\n  count = 0\n  for i in 1..n-2\n    for j in\
    \ i+1..n-1\n      for k in j+1..n\n        if (a[i] + a[j] + a[k]) % 3 == 0\n\
    \          count += 1\n        end\n      end\n    end\n  end\n  count\nend",
  "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |x, y, z| (x\
    \ + y + z) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |x, y, z| (x + y + z) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |x, y, z| (x + y + z) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).select { |i, j, k|\
    \ (i + j + k) % 3 == 0 }.count\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n\
    \  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map\
    \ { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3\
    \ == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (1..n-2).each\
    \ do |i|\n    (i+1..n-1).each do |j|\n      (j+1..n).each do |k|\n        count\
    \ += 1 if (a[i] + a[j] + a[k]) % 3 == 0\n      end\n    end\n  end\n  count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i,\
    \ j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n\
    \  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map\
    \ { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3\
    \ == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |x, y, z| (x + y + z) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |x, y, z| (x\
    \ + y + z) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n   \
    \   (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i -\
    \ i + 1 }\n  a.combination(3).select { |i, j, k| (i + j + k) % 3 == 0 }.count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |x,\
    \ y, z| (x + y + z) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n\
    \  a.combination(3).select { |i, j, k| (i + j + k) % 3 == 0 }.count\nend", " \
    \ a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  count = 0\n  (0..n-3).each do |i|\n    (i+1..n-2).each do |j|\n   \
    \   (j+1..n-1).each do |k|\n        count += 1 if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0\n      end\n    end\n  end\n  count\nend", "  a = (1..n).map { |i| i * i -\
    \ i + 1 }\n  a.combination(3).count { |x, y, z| (x + y + z) % 3 == 0 }\nend",
  "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).select\
    \ { |i, j, k| (i + j + k) % 3 == 0 }.count\nend", "  a = (1..n).map { |i| i *\
    \ i - i + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend",
  "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  # your code here\nend", "  a = (1..n).map { |i|\
    \ i * i - i + 1 }\n  a.combination(3).count { |x, y, z| (x + y + z) % 3 == 0 }\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i,\
    \ j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n\
    \  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map\
    \ { |i| i * i - i + 1 }\n  a.combination(3).count { |x, y, z| (x + y + z) % 3\
    \ == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  # Write your code here\n  a = (1..n).map\
    \ { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i + j + k) % 3\
    \ == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  count = 0\n  (0..n-3).each\
    \ do |i|\n    (i+1..n-2).each do |j|\n      (j+1..n-1).each do |k|\n        count\
    \ += 1 if a[i] + a[j] + a[k] % 3 == 0\n      end\n    end\n  end\n  count\nend",
  "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i, j, k| (i\
    \ + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count\
    \ { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i\
    \ + 1 }\n  a.combination(3).select { |i, j, k| (i + j + k) % 3 == 0 }.count\n\
    end", "  a = (1..n).map { |i| i * i - i + 1 }\n  a.combination(3).count { |i,\
    \ j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map { |i| i * i - i + 1 }\n\
    \  a.combination(3).count { |i, j, k| (i + j + k) % 3 == 0 }\nend", "  a = (1..n).map\
    \ { |i| i * i - i + 1 }\n  a.combination(3).select { |x, y, z| (x + y + z) % 3\
    \ == 0 }.count\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
