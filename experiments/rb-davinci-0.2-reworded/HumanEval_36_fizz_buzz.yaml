name: HumanEval_36_fizz_buzz
language: rb
prompt: "# Return the number of times the digit 7 appears in integers less than n\
  \ which are divisible by 11 or 13.\n# >>> fizz_buzz.call(50)\n# 0\n# >>> fizz_buzz.call(78)\n\
  # 2\n# >>> fizz_buzz.call(79)\n# 3\ndef fizz_buzz(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fizz_buzz\n\
  \    candidate = method(:fizz_buzz)\n    assert_equal(0, candidate.call(50))\n \
  \   assert_equal(2, candidate.call(78))\n    assert_equal(3, candidate.call(79))\n\
  \    assert_equal(3, candidate.call(100))\n    assert_equal(6, candidate.call(200))\n\
  \    assert_equal(192, candidate.call(4000))\n    assert_equal(639, candidate.call(10000))\n\
  \    assert_equal(8026, candidate.call(100000))\n  end\nend\n"
completions: ["  (1...n).select { |x| x % 11 == 0 || x % 13 == 0 }.count { |x| x.to_s.include?('7')\
    \ }\nend", "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  count\
    \ = 0\n  (1...n).each do |i|\n    count += 1 if (i % 11 == 0 || i % 13 == 0) &&\
    \ i.to_s.include?('7')\n  end\n  count\nend", "  (1...n).select { |i| i % 11 ==\
    \ 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend", "  (1...n).select\
    \ { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend",
  "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  count = 0\n  (1...n).each\
    \ do |i|\n    count += 1 if (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7')\n\
    \  end\n  count\nend", "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend",
  "  count = 0\n  (1...n).each do |i|\n    count += 1 if (i % 11 == 0 || i % 13 ==\
    \ 0) && i.to_s.include?('7')\n  end\n  count\nend", "  (1...n).select { |i| i\
    \ % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend", "  (1...n).select\
    \ { |x| x % 11 == 0 || x % 13 == 0 }.count { |x| x.to_s.include?(\"7\") }\nend",
  "  (1...n).count { |i| (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7') }\n\
    end", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  (1...n).select\
    \ { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend",
  "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  count = 0\n  (1...n).each do |num|\n    if num % 11 == 0 || num\
    \ % 13 == 0\n      count += num.to_s.count('7')\n    end\n  end\n  count\nend",
  "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  count\
    \ = 0\n  (1...n).each do |i|\n    count += 1 if i % 11 == 0 || i % 13 == 0 &&\
    \ i.to_s.include?('7')\n  end\n  count\nend", "  (1...n).select { |x| x % 11 ==\
    \ 0 || x % 13 == 0 }.count { |x| x.to_s.include?('7') }\nend", "  (1...n).count\
    \ { |i| (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7') }\nend", "  (1...n).select\
    \ { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend",
  "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |x| x % 11 == 0 || x % 13 == 0 }.count { |x| x.to_s.include?('7')\
    \ }\nend", "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  (1...n).select\
    \ { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend",
  "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  count = 0\n  (1...n).each do |i|\n    count += 1 if (i % 11 == 0\
    \ || i % 13 == 0) && i.to_s.include?('7')\n  end\n  count\nend", "  (1...n).select\
    \ { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend",
  "  (1...n).select { |i| (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7') }.size\n\
    end", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).count { |i| (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7')\
    \ }\nend", "  (1...n).count { |i| (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  (1...n).count\
    \ { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  (1...n).count { |i| i % 11 == 0\
    \ || i % 13 == 0 }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count\
    \ { |i| i.to_s.include?('7') }\nend", "  # TODO: return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \ count = 0\n  (1..n).each do |i|\n    if i % 11 == 0 || i % 13 == 0\n      count\
    \ += i.to_s.count('7')\n    end\n  end\n  count\nend", "  (1...n).select { |i|\
    \ i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend", "  (1...n).count\
    \ { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  (1...n).select { |x| x % 11 ==\
    \ 0 || x % 13 == 0 }.count { |x| x.to_s.include?(\"7\") }\nend", "  (1...n).select\
    \ { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend",
  "  (1...n).select{|i| i % 11 == 0 || i % 13 == 0}.count{|i| i.to_s.include?(\"7\"\
    )}\nend", "  count = 0\n  (1...n).each do |i|\n    if i % 11 == 0 || i % 13 ==\
    \ 0\n      count += i.to_s.count('7')\n    end\n  end\n  count\nend", "  (1...n).select\
    \ { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend",
  "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  (1...n).select { |x|\
    \ x % 11 == 0 || x % 13 == 0 }.count { |x| x.to_s.include?('7') }\nend", "  count\
    \ = 0\n  (1...n).each do |i|\n    count += 1 if (i % 11 == 0 || i % 13 == 0) &&\
    \ i.to_s.include?('7')\n  end\n  count\nend", "  (1...n).count { |i| i % 11 ==\
    \ 0 || i % 13 == 0 }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0\
    \ }.count { |i| i.to_s.include?('7') }\nend", "  (1...n).select { |i| i % 11 ==\
    \ 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend", "  (1...n).select\
    \ { |x| x % 11 == 0 || x % 13 == 0 }.count { |x| x.to_s.include?('7') }\nend",
  "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  (1...n).select\
    \ { |i| (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7') }.size\nend", " \
    \ (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |x| x % 11 == 0 || x % 13 == 0 }.count { |x| x.to_s.include?('7')\
    \ }\nend", "  count = 0\n  (1...n).each do |i|\n    count += 1 if (i % 11 == 0\
    \ || i % 13 == 0) && i.to_s.include?('7')\n  end\n  count\nend", "  (1...n).select\
    \ { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend",
  "  count = 0\n  (1...n).each do |i|\n    count += 1 if i % 11 == 0 || i % 13 ==\
    \ 0\n    count -= 1 if i.to_s.include?('7')\n  end\n  count\nend", "  (1...n).select\
    \ { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend",
  "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  (1...n).count\
    \ { |i| (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7') }\nend", "  # TODO\n\
    end", "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  (1...n).select\
    \ { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend",
  "  (1...n).count { |i| (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7') }\n\
    end", "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  (1...n).select\
    \ { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend",
  "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  (1...n).count\
    \ { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  # TODO: return the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    \  count = 0\n  (0..n).each do |i|\n    if i % 11 == 0 || i % 13 == 0\n      count\
    \ += i.to_s.count('7')\n    end\n  end\n  count\nend", "  (1...n).select { |i|\
    \ i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend", "  (1...n).count\
    \ { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  (1...n).select { |i| (i % 11 ==\
    \ 0 || i % 13 == 0) && i.to_s.include?('7') }.size\nend", "  (1...n).select {\
    \ |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend", " \
    \ (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  (1...n).count\
    \ { |i| (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7') }\nend", "  (1...n).select\
    \ { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend",
  "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  (1...n).select { |i|\
    \ i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend", "  (1...n).select\
    \ { |x| x % 11 == 0 || x % 13 == 0 }.count { |x| x.to_s.include?(\"7\") }\nend",
  "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  count = 0\n  (1...n).each do |i|\n    count += 1 if i % 11 == 0\
    \ || i % 13 == 0 && i.to_s.include?('7')\n  end\n  count\nend", "  (1...n).select\
    \ { |x| x % 11 == 0 || x % 13 == 0 }.count { |x| x.to_s.include?(\"7\") }\nend",
  "  # TODO: return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n  # n = n.to_s\n  # n.count('7')\n  # n.scan(/7/).count\n\
    \  # n.scan(/7/).size\n  # n.scan(/7/).length\n  # n.scan(/7/).count\n  # n.scan(/7/).size\n\
    \  # n.scan(/7/).length\n  # n.scan(/7/).count\n  # n.scan(/7/).size\n  # n.scan(/7/).length\n\
    \  # n.scan(/7/).count\n  # n.scan(/7/).size\n  # n.scan(/7/).length\n  # n.scan(/7/).count\n\
    \  # n.scan(/7/).size\n  # n.scan(/7/).length\n  # n.scan(/7/).count\n  # n.scan(/7/).size\n\
    \  # n.scan(/7/).length\n  # n.scan(/7/).count\n  # n.scan(/7/).size\n  # n.scan(/7/).length\n\
    \  # n.scan(/7/).count\n  # n.scan(/7/).size\n  # n.scan(/7/).length\n  # n.scan(/7/).count\n\
    \  # n.scan(/7/).size\n  # n.scan(/7/).length\n  # n.scan(/7/).count\n  # n.scan(/7/).size\n\
    \  # n.scan(/7/).length\n  # n.scan(/7/).count\n  # n.scan(/7/).size\n  # n.scan(/7/).length\n\
    \  # n.scan(/7/).count\n  # n.scan(/7/).size\n  # n.scan(/7/).length\n  # n.scan(/7/).count\n\
    \  # n.scan(/7/).size\n  # n.scan(/", "  (1...n).count { |i| i % 11 == 0 || i\
    \ % 13 == 0 }\nend", "  (1...n).select { |x| x % 11 == 0 || x % 13 == 0 }.count\
    \ { |x| x.to_s.include?(\"7\") }\nend", "  (1...n).count { |i| i % 11 == 0 ||\
    \ i % 13 == 0 }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count\
    \ { |i| i.to_s.include?('7') }\nend", "  (1...n).count { |i| (i % 11 == 0 || i\
    \ % 13 == 0) && i.to_s.include?('7') }\nend", "  count = 0\n  (1...n).each do\
    \ |i|\n    if (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7')\n      count\
    \ += 1\n    end\n  end\n  count\nend", "  (1...n).count { |i| i % 11 == 0 || i\
    \ % 13 == 0 }\nend", "  (1...n).select { |x| x % 11 == 0 || x % 13 == 0 }.count\
    \ { |x| x.to_s.include?('7') }\nend", "  (1...n).select { |i| i % 11 == 0 || i\
    \ % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend", "  (1...n).select { |i|\
    \ i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend", "  #\
    \ Your code here\nend", "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\n\
    end", "  count = 0\n  (1...n).each do |i|\n    count += 1 if (i % 11 == 0 || i\
    \ % 13 == 0) && i.to_s.include?('7')\n  end\n  count\nend", "  (1...n).select\
    \ { |i| (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7') }.size\nend", " \
    \ (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  (1...n).select\
    \ { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend",
  "  (1...n).select { |x| x % 11 == 0 || x % 13 == 0 }.count { |x| x.to_s.include?('7')\
    \ }\nend", "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  (1...n).select\
    \ { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend",
  "  (1...n).select { |x| x % 11 == 0 || x % 13 == 0 }.count { |x| x.to_s.include?('7')\
    \ }\nend", "  # TODO: return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n  count = 0\n  (1..n).each do\
    \ |i|\n    if i % 11 == 0 || i % 13 == 0\n      count += i.to_s.count(\"7\")\n\
    \    end\n  end\n  count\nend", "  count = 0\n  (1...n).each do |i|\n    if i\
    \ % 11 == 0 || i % 13 == 0\n      count += i.to_s.count('7')\n    end\n  end\n\
    \  count\nend", "  count = 0\n  (1...n).each do |i|\n    count += 1 if i % 11\
    \ == 0 || i % 13 == 0\n    count -= 1 if i.to_s.include?('7')\n  end\n  count\n\
    end", "  count = 0\n  (1...n).each do |i|\n    if i % 11 == 0 || i % 13 == 0\n\
    \      count += i.to_s.count('7')\n    end\n  end\n  count\nend", "  # TODO: return\
    \ the number of times the digit 7 appears in integers less than n which are divisible\
    \ by 11 or 13.\n  # You can use the `%` operator to check if a number is divisible\
    \ by another number.\n  # For example, `14 % 3 == 0` means 14 is divisible by\
    \ 3.\n  # You can use the `.to_s` method to convert an integer to a string.\n\
    \  # For example, `7.to_s` returns \"7\".\n  # You can use the `.count` method\
    \ to count the number of times a character appears in a string.\n  # For example,\
    \ `\"hello\".count(\"l\")` returns 2.\n  # You can use the `.each` method to iterate\
    \ over the numbers from 0 to n.\n  # For example, `(0..n).each do |i| puts i end`\
    \ prints all the numbers from 0 to n.\n  # You can use the `.select` method to\
    \ select some elements from an array.\n  # For example, `(0..n).select { |i| i\
    \ % 2 == 0 }` returns an array containing all the even numbers from 0 to n.\n\
    \  # You can use the `.map` method to transform the elements of an array.\n  #\
    \ For example, `(0..n).map { |i| i * 2 }` returns an array containing all the\
    \ numbers from 0 to n multiplied by 2.\n  # You can use the `.reduce` method to\
    \ compute the sum of the elements of an array.\n  # For example, `(0..n).reduce(0)\
    \ { |sum, i| sum + i }` returns the sum of all the numbers from 0 to n.\n  # You\
    \ can use the `.inject` method to compute the sum of the elements of an array.\n\
    \  # For example, `(0..n).inject(0) { |sum, i| sum + i }` returns the sum of all\
    \ the numbers from 0 to n.\n  # You can use the `.grep` method to select some\
    \ elements from an array.\n  # For example, `(0..n).grep(11) { |i| i % 11 == 0\
    \ }` returns an array containing all the numbers from 0 to n divisible", "  (1...n).count\
    \ { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  (1...n).select { |i| i % 11 ==\
    \ 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend", "  (1...n).select\
    \ { |i| (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7') }.size\nend", " \
    \ (1...n).select { |x| x % 11 == 0 || x % 13 == 0 }.count { |x| x.to_s.include?('7')\
    \ }\nend", "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  (1...n).select\
    \ { |x| x % 11 == 0 || x % 13 == 0 }.count { |x| x.to_s.include?('7') }\nend",
  "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).count { |num| num % 11 == 0 || num % 13 == 0 }\nend", " \
    \ (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  # Your code here\nend", "  (1...n).select { |i| i % 11 == 0 || i\
    \ % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend", "  (1...n).count { |i|\
    \ i % 11 == 0 || i % 13 == 0 }\nend", "  (1...n).select { |i| i % 11 == 0 || i\
    \ % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend", "  (1...n).select { |i|\
    \ i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend", "  (1...n).select\
    \ { |x| x % 11 == 0 || x % 13 == 0 }.count { |x| x.to_s.include?(\"7\") }\nend",
  "  (1...n).select { |x| x % 11 == 0 || x % 13 == 0 }.count { |x| x.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  count = 0\n  (1...n).each do |i|\n    if i % 11 == 0 || i % 13 ==\
    \ 0\n      count += i.to_s.count('7')\n    end\n  end\n  count\nend", "  (1...n).select\
    \ { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend",
  "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  # Your code here\nend", "  (1...n).count { |i| i % 11 == 0 || i\
    \ % 13 == 0 }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count\
    \ { |i| i.to_s.include?('7') }\nend", "  (1...n).count { |i| i % 11 == 0 || i\
    \ % 13 == 0 }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count\
    \ { |i| i.to_s.include?('7') }\nend", "  (1...n).count { |i| (i % 11 == 0 || i\
    \ % 13 == 0) && i.to_s.include?('7') }\nend", "  (1...n).select { |i| i % 11 ==\
    \ 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend", "  (1...n).select\
    \ { |x| x % 11 == 0 || x % 13 == 0 }.count { |x| x.to_s.include?('7') }\nend",
  "  (1...n).count { |i| (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7') }\n\
    end", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  count = 0\n  (1...n).each do |i|\n    count += 1 if (i % 11 == 0\
    \ || i % 13 == 0) && i.to_s.include?('7')\n  end\n  count\nend", "  # TODO: return\
    \ the number of times the digit 7 appears in integers less than n which are divisible\
    \ by 11 or 13.\n  # 1.upto(n).select { |i| i % 11 == 0 || i % 13 == 0 }.count\
    \ { |i| i.to_s.include?('7') }\n  (1...n).count { |i| (i % 11 == 0 || i % 13 ==\
    \ 0) && i.to_s.include?('7') }\nend", "  (1...n).select { |i| i % 11 == 0 || i\
    \ % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend", "  count = 0\n  (1...n).each\
    \ do |i|\n    count += 1 if i % 11 == 0 || i % 13 == 0 && i.to_s.include?('7')\n\
    \  end\n  count\nend", "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend",
  "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  (1...n).select { |i|\
    \ i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend", "  (1...n).select\
    \ { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend",
  "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).count { |i| i % 11 == 0 || i % 13 == 0 }\nend", "  (1...n).select\
    \ { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend",
  "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |x| x % 11 == 0 || x % 13 == 0 }.count { |x| x.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7')\
    \ }.count\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count {\
    \ |i| i.to_s.include?('7') }\nend", "  (1...n).select { |i| i % 11 == 0 || i %\
    \ 13 == 0 }.count { |i| i.to_s.include?('7') }\nend", "  # your code here\nend",
  "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7')\
    \ }\nend", "  (1...n).select { |i| (i % 11 == 0 || i % 13 == 0) && i.to_s.include?('7')\
    \ }.count\nend", "  (1...n).select { |i| i % 11 == 0 || i % 13 == 0 }.count {\
    \ |i| i.to_s.include?('7') }\nend", "  (1...n).select { |i| i % 11 == 0 || i %\
    \ 13 == 0 }.count { |i| i.to_s.include?('7') }\nend", "  (1...n).select { |i|\
    \ i % 11 == 0 || i % 13 == 0 }.count { |i| i.to_s.include?('7') }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
