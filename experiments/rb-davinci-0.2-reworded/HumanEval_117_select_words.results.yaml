language: rb
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"^aeiou\"\
    ) == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpm8bboma3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpm8bboma3.rb:28:in `test_select_words'\n\
    \     25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little\
    \ lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple white space\"\
    , 2))\n     27:     assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n  => 28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n\
    \     29:     assert_equal([], candidate.call(\"\", 4))\n     30:     assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     31:   end\n\
    <[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\
    \nFinished in 0.014138045 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.73 tests/s, 353.66 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"bcdfghjklmnpqrstvwxyz\"\
    ) == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp976cmm0w\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp976cmm0w.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.014104506 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.90 tests/s, 141.80 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiouAEIOU\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpi8e3tqm5\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpi8e3tqm5.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013618563 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.43 tests/s, 73.43 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select{|w| w.count(\"aeiou\"\
    ) == n}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp32pa0v7k\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp32pa0v7k.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.012947395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.24 tests/s, 77.24 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 0
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"^aeiouAEIOU\"\
    ) == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdbyh5xkx

    Started

    .

    Finished in 0.000890439 seconds.

    -------------------------------------------------------------------------------

    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1123.04 tests/s, 7861.29 assertions/s

    '
  stdout: ''
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    ^aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp74tfnona\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp74tfnona.rb:28:in `test_select_words'\n\
    \     25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little\
    \ lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple white space\"\
    , 2))\n     27:     assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n  => 28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n\
    \     29:     assert_equal([], candidate.call(\"\", 4))\n     30:     assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     31:   end\n\
    <[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\
    \nFinished in 0.01010808 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.93 tests/s, 494.65 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  words = s.split(\" \")\n  words.select\
    \ { |word| word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsgzqop1_\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpsgzqop1_.rb:25:in `test_select_words'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_select_words\n\
    \     24:     candidate = method(:select_words)\n  => 25:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     26:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     27:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     28:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.012960707 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.16 tests/s, 77.16 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"^aeiou\"\
    ) == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpm8bboma3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpm8bboma3.rb:28:in `test_select_words'\n\
    \     25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little\
    \ lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple white space\"\
    , 2))\n     27:     assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n  => 28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n\
    \     29:     assert_equal([], candidate.call(\"\", 4))\n     30:     assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     31:   end\n\
    <[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\
    \nFinished in 0.014138045 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.73 tests/s, 353.66 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    ^aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp74tfnona\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp74tfnona.rb:28:in `test_select_words'\n\
    \     25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little\
    \ lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple white space\"\
    , 2))\n     27:     assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n  => 28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n\
    \     29:     assert_equal([], candidate.call(\"\", 4))\n     30:     assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     31:   end\n\
    <[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\
    \nFinished in 0.01010808 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.93 tests/s, 494.65 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  # your code here\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n    candidate\
    \ = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"Mary\
    \ had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
    Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
    \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
    \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
    a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpc7_36uli\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpc7_36uli.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<nil>\n\ndiff:\n? [\"little\"]\n? ni        \n? ?? -------\n\
    ===============================================================================\n\
    \nFinished in 0.013749539 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.73 tests/s, 72.73 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count('bcdfghjklmnpqrstvwxyz')\
    \ == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyndcxpb_\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpyndcxpb_.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.014477294 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.07 tests/s, 138.15 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split(' ').select { |word| word.count('aeiou')\
    \ == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpp6764j7c\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpp6764j7c.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.014182365 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.51 tests/s, 70.51 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"aeiou\"\
    ) == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjmn8sayu\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpjmn8sayu.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.011517146 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.83 tests/s, 86.83 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"aeiou\"\
    ) == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjmn8sayu\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpjmn8sayu.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.011517146 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.83 tests/s, 86.83 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"bcdfghjklmnpqrstvwxyz\"\
    ) == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp976cmm0w\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp976cmm0w.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.014104506 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.90 tests/s, 141.80 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"bcdfghjklmnpqrstvwxyz\"\
    ) == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp976cmm0w\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp976cmm0w.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.014104506 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.90 tests/s, 141.80 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.scan(/[^aeiou]/).size\
    \ == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpoj7fa0x3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpoj7fa0x3.rb:28:in `test_select_words'\n\
    \     25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little\
    \ lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple white space\"\
    , 2))\n     27:     assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n  => 28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n\
    \     29:     assert_equal([], candidate.call(\"\", 4))\n     30:     assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     31:   end\n\
    <[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\
    \nFinished in 0.010003729 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    99.96 tests/s, 499.81 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    ^aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp74tfnona\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp74tfnona.rb:28:in `test_select_words'\n\
    \     25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little\
    \ lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple white space\"\
    , 2))\n     27:     assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n  => 28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n\
    \     29:     assert_equal([], candidate.call(\"\", 4))\n     30:     assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     31:   end\n\
    <[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\
    \nFinished in 0.01010808 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.93 tests/s, 494.65 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    ^aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp74tfnona\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp74tfnona.rb:28:in `test_select_words'\n\
    \     25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little\
    \ lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple white space\"\
    , 2))\n     27:     assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n  => 28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n\
    \     29:     assert_equal([], candidate.call(\"\", 4))\n     30:     assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     31:   end\n\
    <[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\
    \nFinished in 0.01010808 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.93 tests/s, 494.65 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select{|word| word.count(\"aeiou\"\
    ) == n}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpktvl5_cp\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpktvl5_cp.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013955221 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    71.66 tests/s, 71.66 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"^aeiou\"\
    ) == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpm8bboma3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpm8bboma3.rb:28:in `test_select_words'\n\
    \     25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little\
    \ lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple white space\"\
    , 2))\n     27:     assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n  => 28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n\
    \     29:     assert_equal([], candidate.call(\"\", 4))\n     30:     assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     31:   end\n\
    <[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\
    \nFinished in 0.014138045 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    70.73 tests/s, 353.66 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split(\" \").select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpvpdblqoz\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpvpdblqoz.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.01353412 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.89 tests/s, 73.89 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"aeiou\"\
    ) == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjmn8sayu\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpjmn8sayu.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.011517146 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.83 tests/s, 86.83 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select{|w| w.count(\"aeiou\"\
    ) == n}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp32pa0v7k\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp32pa0v7k.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.012947395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.24 tests/s, 77.24 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    ^aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp74tfnona\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp74tfnona.rb:28:in `test_select_words'\n\
    \     25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little\
    \ lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple white space\"\
    , 2))\n     27:     assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n  => 28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n\
    \     29:     assert_equal([], candidate.call(\"\", 4))\n     30:     assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     31:   end\n\
    <[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\
    \nFinished in 0.01010808 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.93 tests/s, 494.65 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.downcase.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmphx7bua6x\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmphx7bua6x.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013290432 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    75.24 tests/s, 75.24 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    ^aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp74tfnona\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp74tfnona.rb:28:in `test_select_words'\n\
    \     25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little\
    \ lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple white space\"\
    , 2))\n     27:     assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n  => 28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n\
    \     29:     assert_equal([], candidate.call(\"\", 4))\n     30:     assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     31:   end\n\
    <[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\
    \nFinished in 0.01010808 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.93 tests/s, 494.65 assertions/s\n"
  timestamp: 1659805163
- exit_code: 0
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"^aeiouAEIOU\"\
    ) == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpdbyh5xkx

    Started

    .

    Finished in 0.000890439 seconds.

    -------------------------------------------------------------------------------

    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1123.04 tests/s, 7861.29 assertions/s

    '
  stdout: ''
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select{|word| word.count(\"bcdfghjklmnpqrstvwxyz\"\
    ) == n}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbggn7tml\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpbggn7tml.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.014411519 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.39 tests/s, 138.78 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    ^aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp74tfnona\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp74tfnona.rb:28:in `test_select_words'\n\
    \     25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little\
    \ lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple white space\"\
    , 2))\n     27:     assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n  => 28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n\
    \     29:     assert_equal([], candidate.call(\"\", 4))\n     30:     assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     31:   end\n\
    <[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\
    \nFinished in 0.01010808 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.93 tests/s, 494.65 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"aeiou\"\
    ) == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjmn8sayu\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpjmn8sayu.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.011517146 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.83 tests/s, 86.83 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split(\" \").select { |w| w.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy4ex18lv\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpy4ex18lv.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.014376525 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.56 tests/s, 69.56 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    ^aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp74tfnona\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp74tfnona.rb:28:in `test_select_words'\n\
    \     25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little\
    \ lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple white space\"\
    , 2))\n     27:     assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n  => 28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n\
    \     29:     assert_equal([], candidate.call(\"\", 4))\n     30:     assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     31:   end\n\
    <[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\
    \nFinished in 0.01010808 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.93 tests/s, 494.65 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select{|w| w.count(\"aeiou\"\
    ) == n}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp32pa0v7k\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp32pa0v7k.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.012947395 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    77.24 tests/s, 77.24 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split(\" \").select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpb0htrgf3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpb0htrgf3.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.017351793 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    57.63 tests/s, 115.26 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |w| w.count(\"aeiou\"\
    ) == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpjmn8sayu\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpjmn8sayu.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.011517146 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    86.83 tests/s, 86.83 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select{|w| w.count(\"bcdfghjklmnpqrstvwxyz\"\
    ) == n}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmper9dg0ft\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmper9dg0ft.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013843592 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    72.24 tests/s, 144.47 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    ^aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp74tfnona\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp74tfnona.rb:28:in `test_select_words'\n\
    \     25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little\
    \ lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple white space\"\
    , 2))\n     27:     assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n  => 28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n\
    \     29:     assert_equal([], candidate.call(\"\", 4))\n     30:     assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     31:   end\n\
    <[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\
    \nFinished in 0.01010808 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.93 tests/s, 494.65 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 0
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select{|word| word.gsub(/[aeiou]/i,\
    \ '').length == n}\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmp6c8pglk4

    Started

    .

    Finished in 0.001170496 seconds.

    -------------------------------------------------------------------------------

    1 tests, 7 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    854.34 tests/s, 5980.37 assertions/s

    '
  stdout: ''
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    ^aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp74tfnona\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp74tfnona.rb:28:in `test_select_words'\n\
    \     25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little\
    \ lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple white space\"\
    , 2))\n     27:     assert_equal([\"world\"], candidate.call(\"Hello world\",\
    \ 4))\n  => 28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n\
    \     29:     assert_equal([], candidate.call(\"\", 4))\n     30:     assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n     31:   end\n\
    <[\"Uncle\"]> expected but was\n<[]>\n\ndiff:\n? [\"Uncle\"]\n===============================================================================\n\
    \nFinished in 0.01010808 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 5 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    98.93 tests/s, 494.65 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count('bcdfghjklmnpqrstvwxyz')\
    \ == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyndcxpb_\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpyndcxpb_.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.014477294 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.07 tests/s, 138.15 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  words = s.split\n  words.select { |word|\
    \ word.count(\"aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4js_xfwc\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp4js_xfwc.rb:25:in `test_select_words'\n\
    \     22: class TestHumanEval < Test::Unit::TestCase\n     23:   def test_select_words\n\
    \     24:     candidate = method(:select_words)\n  => 25:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     26:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     27:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     28:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013401766 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.62 tests/s, 74.62 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count('bcdfghjklmnpqrstvwxyz')\
    \ == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyndcxpb_\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpyndcxpb_.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.014477294 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    69.07 tests/s, 138.15 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count('aeiou')\
    \ == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp878lm110\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp878lm110.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.005639837 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    177.31 tests/s, 177.31 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    aeiou\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_select_words\n    candidate = method(:select_words)\n    assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n    assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n    assert_equal([],\
    \ candidate.call(\"simple white space\", 2))\n    assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\"\
    , 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"b\"\
    , \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp5qyeb8b3\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmp5qyeb8b3.rb:24:in `test_select_words'\n\
    \     21: class TestHumanEval < Test::Unit::TestCase\n     22:   def test_select_words\n\
    \     23:     candidate = method(:select_words)\n  => 24:     assert_equal([\"\
    little\"], candidate.call(\"Mary had a little lamb\", 4))\n     25:     assert_equal([\"\
    Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\", 3))\n     26:  \
    \   assert_equal([], candidate.call(\"simple white space\", 2))\n     27:    \
    \ assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n<[\"little\"\
    ]> expected but was\n<[]>\n\ndiff:\n? [\"little\"]\n===============================================================================\n\
    \nFinished in 0.013539471 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    73.86 tests/s, 73.86 assertions/s\n"
  timestamp: 1659805163
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>>\
    \ select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n#\
    \ >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"\
    Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n\
    # [\"Uncle\"]\ndef select_words(s, n)\n  s.split.select { |word| word.count(\"\
    bcdfghjklmnpqrstvwxyz\") == n }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_select_words\n    candidate = method(:select_words)\n\
    \    assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\", 4))\n\
    \    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had a little lamb\"\
    , 3))\n    assert_equal([], candidate.call(\"simple white space\", 2))\n    assert_equal([\"\
    world\"], candidate.call(\"Hello world\", 4))\n    assert_equal([\"Uncle\"], candidate.call(\"\
    Uncle sam\", 3))\n    assert_equal([], candidate.call(\"\", 4))\n    assert_equal([\"\
    b\", \"c\", \"d\", \"f\"], candidate.call(\"a b c d e f\", 1))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpd_ts_wah\nStarted\nF\n===============================================================================\n\
    Failure: test_select_words(TestHumanEval)\n/tmp/tmpd_ts_wah.rb:25:in `test_select_words'\n\
    \     22:   def test_select_words\n     23:     candidate = method(:select_words)\n\
    \     24:     assert_equal([\"little\"], candidate.call(\"Mary had a little lamb\"\
    , 4))\n  => 25:     assert_equal([\"Mary\", \"lamb\"], candidate.call(\"Mary had\
    \ a little lamb\", 3))\n     26:     assert_equal([], candidate.call(\"simple\
    \ white space\", 2))\n     27:     assert_equal([\"world\"], candidate.call(\"\
    Hello world\", 4))\n     28:     assert_equal([\"Uncle\"], candidate.call(\"Uncle\
    \ sam\", 3))\n<[\"Mary\", \"lamb\"]> expected but was\n<[\"lamb\"]>\n\ndiff:\n\
    ? [\"Mary\", \"lamb\"]\n===============================================================================\n\
    \nFinished in 0.013129485 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    76.16 tests/s, 152.33 assertions/s\n"
  timestamp: 1659805163
