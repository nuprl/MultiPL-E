name: HumanEval_82_prime_length
language: rb
prompt: "# Write a function that takes a string and returns true if the string\n#\
  \ length is a prime number or false otherwise\n# Examples\n# >>> prime_length.call(\"\
  Hello\")\n# true\n# >>> prime_length.call(\"abcdcba\")\n# true\n# >>> prime_length.call(\"\
  kittens\")\n# true\n# >>> prime_length.call(\"orange\")\n# false\ndef prime_length(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_prime_length\n\
  \    candidate = method(:prime_length)\n    assert_equal(true, candidate.call(\"\
  Hello\"))\n    assert_equal(true, candidate.call(\"abcdcba\"))\n    assert_equal(true,\
  \ candidate.call(\"kittens\"))\n    assert_equal(false, candidate.call(\"orange\"\
  ))\n    assert_equal(true, candidate.call(\"wow\"))\n    assert_equal(true, candidate.call(\"\
  world\"))\n    assert_equal(true, candidate.call(\"MadaM\"))\n    assert_equal(true,\
  \ candidate.call(\"Wow\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(true,\
  \ candidate.call(\"HI\"))\n    assert_equal(true, candidate.call(\"go\"))\n    assert_equal(false,\
  \ candidate.call(\"gogo\"))\n    assert_equal(false, candidate.call(\"aaaaaaaaaaaaaaa\"\
  ))\n    assert_equal(true, candidate.call(\"Madam\"))\n    assert_equal(false, candidate.call(\"\
  M\"))\n    assert_equal(false, candidate.call(\"0\"))\n  end\nend\n"
completions: ["  string.length.prime?\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  length = string.length\n  return false if length == 1\n  (2..length -\
    \ 1).each do |i|\n    return false if length % i == 0\n  end\n  true\nend", " \
    \ string.length.prime?\nend", "  length = string.length\n  if length == 1\n  \
    \  return false\n  end\n  (2..length-1).each do |i|\n    if length % i == 0\n\
    \      return false\n    end\n  end\n  return true\nend", "  string.length.prime?\n\
    end", "  if string.length == 2 || string.length == 3 || string.length == 5 ||\
    \ string.length == 7\n    return true\n  else\n    return false\n  end\nend",
  "  string.length.prime?\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  if string.length == 1\n    return false\n\
    \  end\n  if string.length == 2\n    return true\n  end\n  if string.length %\
    \ 2 == 0\n    return false\n  end\n  for i in 3..(string.length - 1)\n    if string.length\
    \ % i == 0\n      return false\n    end\n  end\n  return true\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  length = string.length\n  if length ==\
    \ 1\n    return false\n  end\n  for i in 2..(length-1)\n    if length % i == 0\n\
    \      return false\n    end\n  end\n  return true\nend", "  return false if string.length\
    \ < 2\n  (2..(string.length - 1)).each do |num|\n    return false if string.length\
    \ % num == 0\n  end\n  true\nend", "  string.length.prime?\nend", "  if string.length\
    \ == 2 || string.length == 3 || string.length == 5 || string.length == 7\n   \
    \ return true\n  else\n    return false\n  end\nend", "  string.length.prime?\n\
    end", "  length = string.length\n  return false if length < 2\n  (2..length-1).each\
    \ do |i|\n    return false if length % i == 0\n  end\n  true\nend", "  length\
    \ = string.length\n  if length == 2 || length == 3 || length == 5 || length ==\
    \ 7\n    return true\n  elsif length % 2 == 0 || length % 3 == 0 || length % 5\
    \ == 0 || length % 7 == 0\n    return false\n  else\n    return true\n  end\n\
    end", "  if string.length == 2 || string.length == 3 || string.length == 5 ||\
    \ string.length == 7\n    return true\n  else\n    return false\n  end\nend",
  "  string.length.prime?\nend", "  string.length.prime?\nend", "  length = string.length\n\
    \  return false if length == 1\n  (2..length - 1).each do |i|\n    return false\
    \ if length % i == 0\n  end\n  true\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  length = string.length\n  if length == 2\n    return true\n  end\n  (2..length-1).each\
    \ do |i|\n    if length % i == 0\n      return false\n    end\n  end\n  return\
    \ true\nend", "  string.length.prime?\nend", "  string.length.prime?\nend", " \
    \ prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137,\
    \ 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,\
    \ 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,\
    \ 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,\
    \ 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509,\
    \ 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617,\
    \ 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727,\
    \ 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829,\
    \ 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947,\
    \ 953, 967, 971, 977, 983, 991, 997]\n  prime_numbers.include?(string.length)\n\
    end", "  string.length.prime?\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  length = string.length\n  (2..length-1).each\
    \ do |i|\n    if length % i == 0\n      return false\n    end\n  end\n  return\
    \ true\nend", "  string.length.prime?\nend", "  length = string.length\n  return\
    \ false if length <= 1\n  (2..length-1).each do |i|\n    return false if length\
    \ % i == 0\n  end\n  true\nend", "  if string.length == 2 || string.length ==\
    \ 3 || string.length == 5 || string.length == 7\n    return true\n  else\n   \
    \ return false\n  end\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  length = string.length\n  if length ==\
    \ 1\n    return false\n  end\n  (2..length-1).each do |i|\n    if length % i ==\
    \ 0\n      return false\n    end\n  end\n  return true\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  string.length.prime?\nend", "  if string.length\
    \ == 2 || string.length == 3 || string.length == 5 || string.length == 7\n   \
    \ return true\n  else\n    return false\n  end\nend", "  length = string.length\n\
    \  return false if length == 1\n  (2..length-1).each do |i|\n    return false\
    \ if length % i == 0\n  end\n  true\nend", "  string.length.prime?\nend", "  if\
    \ string.length == 2 || string.length == 3 || string.length == 5 || string.length\
    \ == 7\n    return true\n  else\n    return false\n  end\nend", "  n = string.length\n\
    \  return false if n < 2\n  (2..n-1).each do |i|\n    return false if n % i ==\
    \ 0\n  end\n  true\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  string.length.prime?\nend", "  length\
    \ = string.length\n  return false if length < 2\n  (2..length-1).each do |i|\n\
    \    return false if length % i == 0\n  end\n  true\nend", "  length = string.length\n\
    \  return false if length == 1\n  (2..length-1).each do |i|\n    return false\
    \ if length % i == 0\n  end\n  true\nend", "  string.length.prime?\nend", "  prime_length\
    \ = string.length\n  if prime_length == 1\n    return false\n  elsif prime_length\
    \ == 2\n    return true\n  else\n    (2..prime_length-1).each do |i|\n      if\
    \ prime_length % i == 0\n        return false\n      end\n    end\n    return\
    \ true\n  end\nend", "  if string.length == 2 || string.length == 3 || string.length\
    \ == 5 || string.length == 7\n    return true\n  else\n    return false\n  end\n\
    end", "  string.length.prime?\nend", "  if string.length == 1 || string.length\
    \ == 2\n    return true\n  end\n  for i in 2..string.length - 1\n    if string.length\
    \ % i == 0\n      return false\n    end\n  end\n  return true\nend", "  if string.length\
    \ == 2 || string.length == 3 || string.length == 5 || string.length == 7\n   \
    \ return true\n  else\n    return false\n  end\nend", "  string.length.prime?\n\
    end", "  length = string.length\n  if length == 2 || length == 3 || length ==\
    \ 5 || length == 7\n    return true\n  elsif length % 2 == 0 || length % 3 ==\
    \ 0 || length % 5 == 0 || length % 7 == 0\n    return false\n  else\n    return\
    \ true\n  end\nend", "  string.length.prime?\nend", "  if string.length == 2 ||\
    \ string.length == 3 || string.length == 5 || string.length == 7\n    return true\n\
    \  else\n    return false\n  end\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  length = string.length\n  return false if length == 1\n  (2..length-1).each\
    \ do |i|\n    return false if length % i == 0\n  end\n  true\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  prime = true\n  (2..string.length-1).each\
    \ do |i|\n    if string.length % i == 0\n      prime = false\n    end\n  end\n\
    \  prime\nend", "  string.length.prime?\nend", "  string.length.prime?\nend",
  "  length = string.length\n  if length == 1\n    return false\n  end\n  (2..length-1).each\
    \ do |i|\n    if length % i == 0\n      return false\n    end\n  end\n  return\
    \ true\nend", "  string.length.prime?\nend", "  string.length.prime?\nend", " \
    \ string.length.prime?\nend", "  string.length.prime?\nend", "  length = string.length\n\
    \  return false if length < 2\n  (2..length-1).each do |i|\n    return false if\
    \ length % i == 0\n  end\n  true\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  if string.length == 2 || string.length\
    \ == 3 || string.length == 5 || string.length == 7\n    return true\n  else\n\
    \    return false\n  end\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  return false if string.length <= 1\n \
    \ (2..string.length-1).each do |i|\n    return false if string.length % i == 0\n\
    \  end\n  true\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  if string.length == 2 || string.length == 3 || string.length == 5 ||\
    \ string.length == 7\n    return true\n  else\n    return false\n  end\nend",
  "  string.length.prime?\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  length = string.length\n  return false\
    \ if length == 1\n  (2..length-1).each do |i|\n    return false if length % i\
    \ == 0\n  end\n  true\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  length = string.length\n  return false if length == 1\n  (2..length-1).each\
    \ do |i|\n    return false if length % i == 0\n  end\n  true\nend", "  return\
    \ false if string.length < 2\n  (2..string.length - 1).each do |i|\n    return\
    \ false if string.length % i == 0\n  end\n  true\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  if string.length == 2 || string.length == 3 || string.length == 5 ||\
    \ string.length == 7\n    true\n  else\n    false\n  end\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  string.length.prime?\nend", "  if string.length\
    \ == 2 || string.length == 3 || string.length == 5 || string.length == 7\n   \
    \ return true\n  else\n    return false\n  end\nend", "  if string.length == 2\
    \ || string.length == 3 || string.length == 5 || string.length == 7\n    return\
    \ true\n  else\n    return false\n  end\nend", "  length = string.length\n  if\
    \ length == 2 || length == 3 || length == 5 || length == 7\n    return true\n\
    \  elsif length % 2 == 0 || length % 3 == 0 || length % 5 == 0 || length % 7 ==\
    \ 0\n    return false\n  else\n    return true\n  end\nend", "  length = string.length\n\
    \  return false if length < 2\n  (2..length-1).each do |i|\n    return false if\
    \ length % i == 0\n  end\n  true\nend", "  string.length.prime?\nend", "  length\
    \ = string.length\n  return false if length <= 1\n  (2..length-1).each do |i|\n\
    \    return false if length % i == 0\n  end\n  true\nend", "  length = string.length\n\
    \  return false if length == 1\n  (2..length-1).each do |i|\n    return false\
    \ if length % i == 0\n  end\n  true\nend", "  string.length.prime?\nend", "  length\
    \ = string.length\n  if length == 2 || length == 3 || length == 5 || length ==\
    \ 7\n    return true\n  else\n    return false\n  end\nend", "  string.length.prime?\n\
    end", "  length = string.length\n  return false if length == 1\n  (2..length-1).each\
    \ do |i|\n    return false if length % i == 0\n  end\n  true\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  string.length.prime?\nend", "  prime =\
    \ true\n  (2..string.length-1).each do |i|\n    if string.length % i == 0\n  \
    \    prime = false\n    end\n  end\n  prime\nend", "  return false if string.length\
    \ < 2\n  (2..string.length - 1).each do |num|\n    return false if string.length\
    \ % num == 0\n  end\n  true\nend", "  prime_numbers = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,\
    \ 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181,\
    \ 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271,\
    \ 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373,\
    \ 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\
    \ 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,\
    \ 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673,\
    \ 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787,\
    \ 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887,\
    \ 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  prime_numbers.include?(string.length)\n\
    end", "  string.length.prime?\nend", "  if string.length.prime?\n    return true\n\
    \  else\n    return false\n  end\nend", "  length = string.length\n  return false\
    \ if length == 1\n  (2..length-1).each do |i|\n    return false if length % i\
    \ == 0\n  end\n  true\nend", "  return false if string.length == 1\n  (2..string.length-1).each\
    \ do |i|\n    return false if string.length % i == 0\n  end\n  true\nend", " \
    \ string.length.prime?\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131,\
    \ 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\
    \ 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311,\
    \ 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409,\
    \ 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503,\
    \ 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613,\
    \ 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719,\
    \ 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827,\
    \ 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941,\
    \ 947, 953, 967, 971, 977, 983, 991, 997]\n  prime_numbers.include?(string.length)\n\
    end", "  length = string.length\n  if length == 2\n    return true\n  end\n  (2..length-1).each\
    \ do |i|\n    if length % i == 0\n      return false\n    end\n  end\n  return\
    \ true\nend", "  string.length.prime?\nend", "  string.length.prime?\nend", " \
    \ string.length.prime?\nend", "  prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\
    \ 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191,\
    \ 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277,\
    \ 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379,\
    \ 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467,\
    \ 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587,\
    \ 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677,\
    \ 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,\
    \ 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907,\
    \ 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  prime_numbers.include?(string.length)\n\
    end", "  string.length.prime?\nend", "  string.length.prime?\nend", "  return\
    \ false if string.length < 2\n  return true if string.length == 2\n  return false\
    \ if string.length % 2 == 0\n  (3..Math.sqrt(string.length)).each do |i|\n   \
    \ return false if string.length % i == 0\n  end\n  true\nend", "  string.length.prime?\n\
    end", "  length = string.length\n  return false if length == 1\n  (2..length-1).each\
    \ do |i|\n    return false if length % i == 0\n  end\n  true\nend", "  string.length.prime?\n\
    end", "  length = string.length\n  return false if length == 1\n  (2..length-1).each\
    \ do |i|\n    return false if length % i == 0\n  end\n  true\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  length = string.length\n  if length ==\
    \ 1\n    return false\n  end\n  if length == 2\n    return true\n  end\n  (2..length-1).each\
    \ do |i|\n    if length % i == 0\n      return false\n    end\n  end\n  return\
    \ true\nend", "  string.length.prime?\nend", "  length = string.length\n  return\
    \ false if length <= 1\n  (2..length-1).each do |i|\n    return false if length\
    \ % i == 0\n  end\n  true\nend", "  string.length.prime?\nend", "  length = string.length\n\
    \  if length == 1\n    return false\n  end\n  for i in 2..length-1\n    if length\
    \ % i == 0\n      return false\n    end\n  end\n  return true\nend", "  if string.length\
    \ == 2 || string.length == 3 || string.length == 5 || string.length == 7\n   \
    \ return true\n  else\n    return false\n  end\nend", "  string.length.prime?\n\
    end", "  string.length.prime?\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end", "  if string.length == 2 || string.length == 3 || string.length == 5 ||\
    \ string.length == 7\n    return true\n  else\n    return false\n  end\nend",
  "  string.length.prime?\nend", "  if string.length == 2 || string.length == 3 ||\
    \ string.length == 5 || string.length == 7\n    return true\n  else\n    return\
    \ false\n  end\nend", "  string.length.prime?\nend", "  string.length.prime?\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
