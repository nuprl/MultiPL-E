name: HumanEval_49_modp
language: rb
prompt: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp.call(3, 5)\n# 3\n\
  # >>> modp.call(1101, 101)\n# 2\n# >>> modp.call(0, 101)\n# 1\n# >>> modp.call(3,\
  \ 11)\n# 8\n# >>> modp.call(100, 101)\n# 1\ndef modp(n, p)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_modp\n\
  \    candidate = method(:modp)\n    assert_equal(3, candidate.call(3, 5))\n    assert_equal(2,\
  \ candidate.call(1101, 101))\n    assert_equal(1, candidate.call(0, 101))\n    assert_equal(8,\
  \ candidate.call(3, 11))\n    assert_equal(1, candidate.call(100, 101))\n    assert_equal(4,\
  \ candidate.call(30, 5))\n    assert_equal(3, candidate.call(31, 5))\n  end\nend\n"
completions: ["  raise ArgumentError, \"n must be >= 0\" if n < 0\n  raise ArgumentError,\
    \ \"p must be > 0\" if p <= 0\n  return 1 if n == 0\n  return 2 if n == 1\n  return\
    \ 4 if n == 2\n  return (2 * modp(n - 1, p)) % p if n.even?\n  return (2 * modp(n\
    \ - 1, p) - 1) % p if n.odd?\nend", "  return 1 if n == 0\n  return 2 if n ==\
    \ 1\n  return modp(n-1, p) * 2 % p\nend", "  return 1 if n == 0\n  return 2 if\
    \ n == 1\n  return modp(n-1, p)**2 % p if n.even?\n  return 2 * modp(n-1, p)**2\
    \ % p if n.odd?\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return modp(n-1,\
    \ p)**2 % p if n.even?\n  return 2 * modp(n-1, p)**2 % p if n.odd?\nend", "  return\
    \ 1 if n == 0\n  return 2 if n == 1\n  return modp(n/2, p)**2 % p if n % 2 ==\
    \ 0\n  return 2 * modp(n/2, p)**2 % p if n % 2 == 1\nend", "  return 1 if n ==\
    \ 0\n  return modp(n / 2, p) ** 2 % p if n.even?\n  return 2 * modp(n / 2, p)\
    \ ** 2 % p if n.odd?\nend", "  if n == 0\n    return 1\n  end\n  if n == 1\n \
    \   return 2 % p\n  end\n  if n % 2 == 0\n    return (modp(n / 2, p) ** 2) % p\n\
    \  else\n    return (2 * modp(n - 1, p)) % p\n  end\nend", "  return 1 if n ==\
    \ 0\n  return 2 if n == 1\n  return modp(n - 1, p) * 2 % p\nend", "  return 1\
    \ if n == 0\n  return modp(n / 2, p) ** 2 % p if n.even?\n  return 2 * modp(n\
    \ / 2, p) ** 2 % p if n.odd?\nend", "  return 1 if n == 0\n  return 2 if n ==\
    \ 1\n  return modp(n / 2, p) ** 2 * 2 ** (n % 2) % p\nend", "  return 1 if n ==\
    \ 0\n  return n if n == 1\n  return (2 * modp(n - 1, p)) % p if n.even?\n  return\
    \ (2 * modp(n - 1, p) - 1) % p if n.odd?\nend", "  return 1 if n == 0\n  return\
    \ 2 if n == 1\n  return modp(n - 1, p) * 2 % p\nend", "  return 1 if n == 0\n\
    \  return 2 if n == 1\n  return modp(n-1, p) * 2 % p\nend", "  return 1 if n ==\
    \ 0\n  return modp(n / 2, p) ** 2 % p if n.even?\n  return 2 * modp(n / 2, p)\
    \ ** 2 % p if n.odd?\nend", "  if n == 0\n    1\n  elsif n % 2 == 0\n    modp(n\
    \ / 2, p) ** 2 % p\n  else\n    n * modp(n - 1, p) % p\n  end\nend", "  return\
    \ 1 if n == 0\n  return 2 if n == 1\n  return modp(n-1, p)**2 % p if n.even?\n\
    \  return 2 * modp(n-1, p)**2 % p if n.odd?\nend", "  return 1 if n == 0\n  return\
    \ 2 if n == 1\n  return modp(n-1, p)**2 % p if n % 2 == 0\n  return 2 * modp(n-1,\
    \ p)**2 % p if n % 2 == 1\nend", "  return 1 if n == 0\n  return 2 if n == 1\n\
    \  return modp(n - 1, p) * 2 % p\nend", "  return 1 if n == 0\n  return 2 if n\
    \ == 1\n  return modp(n - 1, p) ** 2 % p if n.even?\n  return 2 * modp(n - 1,\
    \ p) ** 2 % p if n.odd?\nend", "  if n == 0\n    1\n  elsif n.even?\n    (modp(n/2,\
    \ p) ** 2) % p\n  else\n    (2 * modp(n-1, p)) % p\n  end\nend", "  return 1 if\
    \ n == 0\n  return 2 if n == 1\n  return (2 * modp(n - 1, p)) % p if n.even?\n\
    \  return (2 * modp(n - 1, p) - 1) % p if n.odd?\nend", "  return 1 if n == 0\n\
    \  return 2 if n == 1\n  return 4 if n == 2\n  return 8 if n == 3\n  return 16\
    \ if n == 4\n  return 32 if n == 5\n  return 64 if n == 6\n  return 128 if n ==\
    \ 7\n  return 256 if n == 8\n  return 512 if n == 9\n  return 1024 if n == 10\n\
    \  return 2048 if n == 11\n  return 4096 if n == 12\n  return 8192 if n == 13\n\
    \  return 16384 if n == 14\n  return 32768 if n == 15\n  return 65536 if n ==\
    \ 16\n  return 131072 if n == 17\n  return 262144 if n == 18\n  return 524288\
    \ if n == 19\n  return 1048576 if n == 20\n  return 2097152 if n == 21\n  return\
    \ 4194304 if n == 22\n  return 8388608 if n == 23\n  return 16777216 if n == 24\n\
    \  return 33554432 if n == 25\n  return 67108864 if n == 26\n  return 134217728\
    \ if n == 27\n  return 268435456 if n == 28\n  return 536870912 if n == 29\n \
    \ return 1073741824 if n == 30\n  return 2147483648 if n == 31\n  return 4294967296\
    \ if n == 32\n  return 8589934592 if n == 33\n  return 17179869184 if n == 34\n\
    \  return 34359738368 if n == 35\n  return 68719476736 if n == 36\n  return 137438953472\
    \ if n == 37\n  return 274877906944 if n == 38\n  return 549755813888 if n ==\
    \ 39\n  return 1099511627776 if n == 40\n  return 2199023255552 if n == 41\n \
    \ return 4398046511104 if n == 42\n  return 8796093022208 if n == 43\n  return\
    \ 17592186044416 if n == 44\n  return 35184372088832 if n == 45\n  return 70368744177664\
    \ if n == 46\n  return 140737488355328 if n == 47\n  return 281474976710656 if",
  "  return 1 if n == 0\n  return 2 if n == 1\n  return 4 if n == 2\n  return 8 if\
    \ n == 3\n  return 16 if n == 4\n  return 32 if n == 5\n  return 64 if n == 6\n\
    \  return 128 if n == 7\n  return 256 if n == 8\n  return 512 if n == 9\n  return\
    \ 1024 if n == 10\n  return 2048 if n == 11\n  return 4096 if n == 12\n  return\
    \ 8192 if n == 13\n  return 16384 if n == 14\n  return 32768 if n == 15\n  return\
    \ 65536 if n == 16\n  return 131072 if n == 17\n  return 262144 if n == 18\n \
    \ return 524288 if n == 19\n  return 1048576 if n == 20\n  return 2097152 if n\
    \ == 21\n  return 4194304 if n == 22\n  return 8388608 if n == 23\n  return 16777216\
    \ if n == 24\n  return 33554432 if n == 25\n  return 67108864 if n == 26\n  return\
    \ 134217728 if n == 27\n  return 268435456 if n == 28\n  return 536870912 if n\
    \ == 29\n  return 1073741824 if n == 30\n  return 2147483648 if n == 31\n  return\
    \ 4294967296 if n == 32\n  return 8589934592 if n == 33\n  return 17179869184\
    \ if n == 34\n  return 34359738368 if n == 35\n  return 68719476736 if n == 36\n\
    \  return 137438953472 if n == 37\n  return 274877906944 if n == 38\n  return\
    \ 549755813888 if n == 39\n  return 1099511627776 if n == 40\n  return 2199023255552\
    \ if n == 41\n  return 4398046511104 if n == 42\n  return 8796093022208 if n ==\
    \ 43\n  return 17592186044416 if n == 44\n  return 35184372088832 if n == 45\n\
    \  return 70368744177664 if n == 46\n  return 140737488355328 if n == 47\n  return\
    \ 281474976710656 if", "  if n == 0\n    1\n  elsif n == 1\n    2\n  else\n  \
    \  modp(n - 1, p) * 2 % p\n  end\nend", "  return 1 if n == 0\n  return modp(n/2,\
    \ p)**2 % p if n.even?\n  return 2 * modp(n/2, p)**2 % p if n.odd?\nend", "  return\
    \ 1 if n == 0\n  return 2 if n == 1\n  return (2 * modp(n - 1, p)) % p if n.even?\n\
    \  return (2 * modp(n - 1, p) - 1) % p if n.odd?\nend", "  return 1 if n == 0\n\
    \  return modp(n/2, p)**2 * (n%2 == 0 ? 1 : 2) % p\nend", "  # TODO: Implement\
    \ this!\n  if n == 0\n    return 1\n  end\n  if n == 1\n    return 2\n  end\n\
    \  if n % 2 == 0\n    return (modp(n/2, p)**2) % p\n  else\n    return (2 * modp(n-1,\
    \ p)) % p\n  end\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return\
    \ modp(n-1, p) * 2 % p\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return\
    \ (2 * modp(n - 1, p)) % p if n.even?\n  return (2 * modp(n - 1, p) - 1) % p if\
    \ n.odd?\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return 4 if n ==\
    \ 2\n  return modp(n - 1, p) * 2 % p\nend", "  return 1 if n == 0\n  return modp(n\
    \ / 2, p) ** 2 % p if n.even?\n  return 2 * modp(n / 2, p) ** 2 % p if n.odd?\n\
    end", "  return 1 if n == 0\n  return 2 if n == 1\n  return (2 * modp(n - 1, p))\
    \ % p if n.even?\n  return (2 * modp(n - 1, p) - 1) % p if n.odd?\nend", "  return\
    \ 1 if n == 0\n  return modp(n/2, p)**2 % p if n % 2 == 0\n  return 2 * modp(n/2,\
    \ p)**2 % p if n % 2 == 1\nend", "  return 1 if n == 0\n  return 2 if n == 1\n\
    \  return modp(n - 1, p) ** 2 % p if n.even?\n  return 2 * modp(n - 1, p) ** 2\
    \ % p if n.odd?\nend", "  return 1 if n == 0\n  return modp(n/2, p)**2 % p if\
    \ n % 2 == 0\n  return 2 * modp(n/2, p)**2 % p if n % 2 == 1\nend", "  return\
    \ 1 if n == 0\n  return 2 if n == 1\n  return (2 * modp(n - 1, p)) % p if n.even?\n\
    \  return (2 * modp(n - 1, p) - 1) % p if n.odd?\nend", "  return 1 if n == 0\n\
    \  return modp(n / 2, p) ** 2 % p if n.even?\n  return 2 * modp(n / 2, p) ** 2\
    \ % p if n.odd?\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return modp(n-1,\
    \ p)**2 % p if n % 2 == 0\n  return 2 * modp(n-1, p)**2 % p if n % 2 == 1\nend",
  "  return 1 if n == 0\n  return 2 if n == 1\n  return modp(n - 1, p) * 2 % p\nend",
  "  return 1 if n == 0\n  return 2 if n == 1\n  return modp(n-1, p)**2 % p if n.even?\n\
    \  return 2 * modp(n-1, p)**2 % p if n.odd?\nend", "  return 1 if n == 0\n  return\
    \ 2 if n == 1\n  return modp(n-1, p) * 2 % p\nend", "  return 1 if n == 0\n  return\
    \ 2 if n == 1\n  return modp(n/2, p)**2 % p if n.even?\n  return 2 * modp(n-1,\
    \ p) % p if n.odd?\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return\
    \ modp(n-1, p)**2 % p if n % 2 == 0\n  return 2 * modp(n-1, p)**2 % p if n % 2\
    \ == 1\nend", "  return 1 if n == 0\n  return modp(n / 2, p) ** 2 % p if n.even?\n\
    \  return 2 * modp(n / 2, p) ** 2 % p if n.odd?\nend", "  return 1 if n == 0\n\
    \  return 2 if n == 1\n  return modp(n - 1, p) * 2 % p\nend", "  return 1 if n\
    \ == 0\n  return 2 if n == 1\n  return 4 if n == 2\n  return 8 if n == 3\n  return\
    \ 16 if n == 4\n  return 32 if n == 5\n  return 64 if n == 6\n  return 128 if\
    \ n == 7\n  return 256 if n == 8\n  return 512 if n == 9\n  return 1024 if n ==\
    \ 10\n  return 2048 if n == 11\n  return 4096 if n == 12\n  return 8192 if n ==\
    \ 13\n  return 16384 if n == 14\n  return 32768 if n == 15\n  return 65536 if\
    \ n == 16\n  return 131072 if n == 17\n  return 262144 if n == 18\n  return 524288\
    \ if n == 19\n  return 1048576 if n == 20\n  return 2097152 if n == 21\n  return\
    \ 4194304 if n == 22\n  return 8388608 if n == 23\n  return 16777216 if n == 24\n\
    \  return 33554432 if n == 25\n  return 67108864 if n == 26\n  return 134217728\
    \ if n == 27\n  return 268435456 if n == 28\n  return 536870912 if n == 29\n \
    \ return 1073741824 if n == 30\n  return 2147483648 if n == 31\n  return 4294967296\
    \ if n == 32\n  return 8589934592 if n == 33\n  return 17179869184 if n == 34\n\
    \  return 34359738368 if n == 35\n  return 68719476736 if n == 36\n  return 137438953472\
    \ if n == 37\n  return 274877906944 if n == 38\n  return 549755813888 if n ==\
    \ 39\n  return 1099511627776 if n == 40\n  return 2199023255552 if n == 41\n \
    \ return 4398046511104 if n == 42\n  return 8796093022208 if n == 43\n  return\
    \ 17592186044416 if n == 44\n  return 35184372088832 if n == 45\n  return 70368744177664\
    \ if n == 46\n  return 140737488355328 if n == 47\n  return 281474976710656 if",
  "  return 1 if n == 0\n  return 2 if n == 1\n  return modp(n-1, p)**2 % p if n.even?\n\
    \  return 2 * modp(n-1, p)**2 % p if n.odd?\nend", "  return 1 if n == 0\n  return\
    \ 2 if n == 1\n  return 4 if n == 2\n  return 8 if n == 3\n  return 16 if n ==\
    \ 4\n  return 32 if n == 5\n  return 64 if n == 6\n  return 128 if n == 7\n  return\
    \ 256 if n == 8\n  return 512 if n == 9\n  return 1024 if n == 10\n  return 2048\
    \ if n == 11\n  return 4096 if n == 12\n  return 8192 if n == 13\n  return 16384\
    \ if n == 14\n  return 32768 if n == 15\n  return 65536 if n == 16\n  return 131072\
    \ if n == 17\n  return 262144 if n == 18\n  return 524288 if n == 19\n  return\
    \ 1048576 if n == 20\n  return 2097152 if n == 21\n  return 4194304 if n == 22\n\
    \  return 8388608 if n == 23\n  return 16777216 if n == 24\n  return 33554432\
    \ if n == 25\n  return 67108864 if n == 26\n  return 134217728 if n == 27\n  return\
    \ 268435456 if n == 28\n  return 536870912 if n == 29\n  return 1073741824 if\
    \ n == 30\n  return 2147483648 if n == 31\n  return 4294967296 if n == 32\n  return\
    \ 8589934592 if n == 33\n  return 17179869184 if n == 34\n  return 34359738368\
    \ if n == 35\n  return 68719476736 if n == 36\n  return 137438953472 if n == 37\n\
    \  return 274877906944 if n == 38\n  return 549755813888 if n == 39\n  return\
    \ 1099511627776 if n == 40\n  return 2199023255552 if n == 41\n  return 4398046511104\
    \ if n == 42\n  return 8796093022208 if n == 43\n  return 17592186044416 if n\
    \ == 44\n  return 35184372088832 if n == 45\n  return 70368744177664 if n == 46\n\
    \  return 140737488355328 if n == 47\n  return 281474976710656 if", "  return\
    \ 1 if n == 0\n  return modp(n/2, p)**2 % p if n.even?\n  return 2 * modp(n/2,\
    \ p)**2 % p if n.odd?\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return\
    \ modp(n - 1, p) * 2 % p\nend", "  return 1 if n == 0\n  return modp(n / 2, p)\
    \ ** 2 % p if n.even?\n  return 2 * modp(n / 2, p) ** 2 % p if n.odd?\nend", " \
    \ return 1 if n == 0\n  return 2 if n == 1\n  return modp(n - 1, p) * 2 % p\n\
    end", "  if n == 0\n    1\n  elsif n % 2 == 0\n    (modp(n/2, p) ** 2) % p\n \
    \ else\n    (modp(n-1, p) * 2) % p\n  end\nend", "  return 1 if n == 0\n  return\
    \ 2 if n == 1\n  return modp(n - 1, p) * 2 % p\nend", "  n.pow(p, p)\nend", " \
    \ return 1 if n == 0\n  return 2 if n == 1\n  return modp(n-1, p)**2 % p if n\
    \ % 2 == 0\n  return 2 * modp(n-1, p)**2 % p if n % 2 == 1\nend", "  return 1\
    \ if n == 0\n  return 2 if n == 1\n  return modp(n-1, p)**2 % p if n.even?\n \
    \ return 2 * modp(n-1, p)**2 % p if n.odd?\nend", "  # TODO: implement\n  return\
    \ 1 if n == 0\n  return 2 if n == 1\n  return (2 * modp(n - 1, p)) % p\nend",
  "  return 1 if n == 0\n  return 2 if n == 1\n  return modp(n - 1, p) * 2 % p\nend",
  "  if n == 0\n    return 1\n  end\n  if n % 2 == 0\n    return (modp(n/2, p)**2)\
    \ % p\n  else\n    return (modp(n-1, p) * 2) % p\n  end\nend", "  return 1 if\
    \ n == 0\n  return 2 if n == 1\n  return modp(n - 1, p) * 2 % p\nend", "  return\
    \ 1 if n == 0\n  return 2 if n == 1\n  return modp(n-1, p)**2 % p if n.even?\n\
    \  return 2 * modp(n-1, p)**2 % p if n.odd?\nend", "  return 1 if n == 0\n  return\
    \ modp(n / 2, p) ** 2 % p if n.even?\n  return 2 * modp(n / 2, p) ** 2 % p if\
    \ n.odd?\nend", "  if n == 0\n    return 1\n  end\n  if n % 2 == 0\n    return\
    \ (modp(n/2, p)**2) % p\n  else\n    return (modp(n-1, p) * 2) % p\n  end\nend",
  "  if n == 0\n    return 1\n  elsif n == 1\n    return 2\n  else\n    return (2\
    \ * modp(n - 1, p)) % p\n  end\nend", "  return 1 if n == 0\n  return 2 if n ==\
    \ 1\n  return modp(n/2, p)**2 % p if n.even?\n  return 2 * modp(n-1, p) % p if\
    \ n.odd?\nend", "  # TODO: implement\n  return 1 if n == 0\n  return 2 if n ==\
    \ 1\n  return (2 * modp(n - 1, p)) % p\nend", "  return 1 if n == 0\n  return\
    \ 2 if n == 1\n  return modp(n / 2, p) * modp(n / 2, p) % p if n % 2 == 0\n  return\
    \ 2 * modp(n / 2, p) * modp(n / 2, p) % p if n % 2 == 1\nend", "  return 1 if\
    \ n == 0\n  return 2 if n == 1\n  return modp(n-1, p)**2 % p if n.even?\n  return\
    \ 2 * modp(n-1, p)**2 % p if n.odd?\nend", "  return 1 if n == 0\n  return modp(n\
    \ / 2, p) ** 2 % p if n.even?\n  return 2 * modp(n / 2, p) ** 2 % p if n.odd?\n\
    end", "  return 1 if n == 0\n  return 2 if n == 1\n  return 4 if n == 2\n  return\
    \ 8 if n == 3\n  return 16 if n == 4\n  return 32 if n == 5\n  return 64 if n\
    \ == 6\n  return 128 if n == 7\n  return 256 if n == 8\n  return 512 if n == 9\n\
    \  return 1024 if n == 10\n  return 2048 if n == 11\n  return 4096 if n == 12\n\
    \  return 8192 if n == 13\n  return 16384 if n == 14\n  return 32768 if n == 15\n\
    \  return 65536 if n == 16\n  return 131072 if n == 17\n  return 262144 if n ==\
    \ 18\n  return 524288 if n == 19\n  return 1048576 if n == 20\n  return 2097152\
    \ if n == 21\n  return 4194304 if n == 22\n  return 8388608 if n == 23\n  return\
    \ 16777216 if n == 24\n  return 33554432 if n == 25\n  return 67108864 if n ==\
    \ 26\n  return 134217728 if n == 27\n  return 268435456 if n == 28\n  return 536870912\
    \ if n == 29\n  return 1073741824 if n == 30\n  return 2147483648 if n == 31\n\
    \  return 4294967296 if n == 32\n  return 8589934592 if n == 33\n  return 17179869184\
    \ if n == 34\n  return 34359738368 if n == 35\n  return 68719476736 if n == 36\n\
    \  return 137438953472 if n == 37\n  return 274877906944 if n == 38\n  return\
    \ 549755813888 if n == 39\n  return 1099511627776 if n == 40\n  return 2199023255552\
    \ if n == 41\n  return 4398046511104 if n == 42\n  return 8796093022208 if n ==\
    \ 43\n  return 17592186044416 if n == 44\n  return 35184372088832 if n == 45\n\
    \  return 70368744177664 if n == 46\n  return 140737488355328 if n == 47\n  return\
    \ 281474976710656 if", "  return 1 if n == 0\n  return 2 if n == 1\n  return modp(n\
    \ - 1, p) * 2 % p\nend", "  if n == 0\n    return 1\n  elsif n == 1\n    return\
    \ 2\n  else\n    return (2 * modp(n - 1, p)) % p\n  end\nend", "  return 1 if\
    \ n == 0\n  return 2 if n == 1\n  return modp(n - 1, p) ** 2 % p if n.even?\n\
    \  return 2 * modp(n - 1, p) ** 2 % p if n.odd?\nend", "  return 1 if n == 0\n\
    \  return 2 if n == 1\n  return modp(n-1, p)**2 % p if n.even?\n  return 2 * modp(n-1,\
    \ p)**2 % p if n.odd?\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return\
    \ modp(n - 1, p) * 2 % p\nend", "  return 1 if n == 0\n  return 2 if n == 1\n\
    \  return modp(n - 1, p) * 2 % p\nend", "  if n == 0\n    1\n  elsif n == 1\n\
    \    2\n  else\n    modp(n - 1, p) * 2 % p\n  end\nend", "  return 1 if n == 0\n\
    \  return modp(n / 2, p) ** 2 % p if n.even?\n  return modp(n / 2, p) ** 2 * 2\
    \ % p if n.odd?\nend", "  if n == 0\n    1\n  elsif n % 2 == 0\n    (modp(n/2,\
    \ p) ** 2) % p\n  else\n    (2 * modp(n-1, p)) % p\n  end\nend", "  return 1 if\
    \ n == 0\n  return 2 if n == 1\n  return modp(n - 1, p) * 2 % p\nend", "  raise\
    \ \"n must be non-negative\" if n < 0\n  raise \"p must be prime\" unless p.prime?\n\
    \  return 1 if n == 0\n  return 2 if n == 1\n  return 4 if n == 2\n  return 8\
    \ if n == 3\n  return 16 if n == 4\n  return 32 if n == 5\n  return 64 if n ==\
    \ 6\n  return 128 if n == 7\n  return 256 if n == 8\n  return 512 if n == 9\n\
    \  return 1024 if n == 10\n  return 2048 if n == 11\n  return 4096 if n == 12\n\
    \  return 8192 if n == 13\n  return 16384 if n == 14\n  return 32768 if n == 15\n\
    \  return 65536 if n == 16\n  return 131072 if n == 17\n  return 262144 if n ==\
    \ 18\n  return 524288 if n == 19\n  return 1048576 if n == 20\n  return 2097152\
    \ if n == 21\n  return 4194304 if n == 22\n  return 8388608 if n == 23\n  return\
    \ 16777216 if n == 24\n  return 33554432 if n == 25\n  return 67108864 if n ==\
    \ 26\n  return 134217728 if n == 27\n  return 268435456 if n == 28\n  return 536870912\
    \ if n == 29\n  return 1073741824 if n == 30\n  return 2147483648 if n == 31\n\
    \  return 4294967296 if n == 32\n  return 8589934592 if n == 33\n  return 17179869184\
    \ if n == 34\n  return 34359738368 if n == 35\n  return 68719476736 if n == 36\n\
    \  return 137438953472 if n == 37\n  return 274877906944 if n == 38\n  return\
    \ 549755813888 if n == 39\n  return 1099511627776 if n == 40\n  return 2199023255552\
    \ if n == 41\n  return 4398046511104 if n == 42\n  return 8796093022208 if n ==\
    \ 43\n  return 17592186044416 if n == 44\n  return 35184372088832 if n == 45\n\
    \  return 703687441776", "  return 1 if n == 0\n  return 2 if n == 1\n  return\
    \ 4 if n == 2\n  return 8 if n == 3\n  return 6 if n == 4\n  return 3 if n ==\
    \ 5\n  return 9 if n == 6\n  return 7 if n == 7\n  return 5 if n == 8\n  return\
    \ 10 if n == 9\n  return 11 if n == 10\n  return 12 if n == 11\n  return 14 if\
    \ n == 12\n  return 13 if n == 13\n  return 15 if n == 14\n  return 16 if n ==\
    \ 15\n  return 17 if n == 16\n  return 19 if n == 17\n  return 18 if n == 18\n\
    \  return 20 if n == 19\n  return 22 if n == 20\n  return 21 if n == 21\n  return\
    \ 23 if n == 22\n  return 25 if n == 23\n  return 24 if n == 24\n  return 26 if\
    \ n == 25\n  return 28 if n == 26\n  return 27 if n == 27\n  return 29 if n ==\
    \ 28\n  return 31 if n == 29\n  return 30 if n == 30\n  return 32 if n == 31\n\
    \  return 34 if n == 32\n  return 33 if n == 33\n  return 35 if n == 34\n  return\
    \ 37 if n == 35\n  return 36 if n == 36\n  return 38 if n == 37\n  return 40 if\
    \ n == 38\n  return 39 if n == 39\n  return 41 if n == 40\n  return 43 if n ==\
    \ 41\n  return 42 if n == 42\n  return 44 if n == 43\n  return 46 if n == 44\n\
    \  return 45 if n == 45\n  return 47 if n == 46\n  return 49 if n == 47\n  return\
    \ 48 if n == 48\n  return 50 if n == 49\n  return 52 if n == 50\n  return 51 if\
    \ n == 51\n  return 53 if n == 52\n  return 55 if n == 53\n  return 54 if n ==\
    \ 54\n  return 56 if n == 55\n  return 58 if n == 56\n  return 57 if n == 57\n\
    \  return 59 if n == 58\n  return 61 if n == 59\n  return 60 if n == 60\n  return\
    \ 62 if n == 61\n  return 64 if n == 62\n  return 63 if n == 63", "  return 1\
    \ if n == 0\n  return 2 if n == 1\n  return 4 if n == 2\n  return 8 if n == 3\n\
    \  return 16 if n == 4\n  return 32 if n == 5\n  return 64 if n == 6\n  return\
    \ 128 if n == 7\n  return 256 if n == 8\n  return 512 if n == 9\n  return 1024\
    \ if n == 10\n  return 2048 if n == 11\n  return 4096 if n == 12\n  return 8192\
    \ if n == 13\n  return 16384 if n == 14\n  return 32768 if n == 15\n  return 65536\
    \ if n == 16\n  return 131072 if n == 17\n  return 262144 if n == 18\n  return\
    \ 524288 if n == 19\n  return 1048576 if n == 20\n  return 2097152 if n == 21\n\
    \  return 4194304 if n == 22\n  return 8388608 if n == 23\n  return 16777216 if\
    \ n == 24\n  return 33554432 if n == 25\n  return 67108864 if n == 26\n  return\
    \ 134217728 if n == 27\n  return 268435456 if n == 28\n  return 536870912 if n\
    \ == 29\n  return 1073741824 if n == 30\n  return 2147483648 if n == 31\n  return\
    \ 4294967296 if n == 32\n  return 8589934592 if n == 33\n  return 17179869184\
    \ if n == 34\n  return 34359738368 if n == 35\n  return 68719476736 if n == 36\n\
    \  return 137438953472 if n == 37\n  return 274877906944 if n == 38\n  return\
    \ 549755813888 if n == 39\n  return 1099511627776 if n == 40\n  return 2199023255552\
    \ if n == 41\n  return 4398046511104 if n == 42\n  return 8796093022208 if n ==\
    \ 43\n  return 17592186044416 if n == 44\n  return 35184372088832 if n == 45\n\
    \  return 70368744177664 if n == 46\n  return 140737488355328 if n == 47\n  return\
    \ 281474976710656 if", "  return 1 if n == 0\n  return 2 if n == 1\n  return 4\
    \ if n == 2\n  return 8 if n == 3\n  return 16 if n == 4\n  return 32 if n ==\
    \ 5\n  return 64 if n == 6\n  return 128 if n == 7\n  return 256 if n == 8\n \
    \ return 512 if n == 9\n  return 1024 if n == 10\n  return 2048 if n == 11\n \
    \ return 4096 if n == 12\n  return 8192 if n == 13\n  return 16384 if n == 14\n\
    \  return 32768 if n == 15\n  return 65536 if n == 16\n  return 131072 if n ==\
    \ 17\n  return 262144 if n == 18\n  return 524288 if n == 19\n  return 1048576\
    \ if n == 20\n  return 2097152 if n == 21\n  return 4194304 if n == 22\n  return\
    \ 8388608 if n == 23\n  return 16777216 if n == 24\n  return 33554432 if n ==\
    \ 25\n  return 67108864 if n == 26\n  return 134217728 if n == 27\n  return 268435456\
    \ if n == 28\n  return 536870912 if n == 29\n  return 1073741824 if n == 30\n\
    \  return 2147483648 if n == 31\n  return 4294967296 if n == 32\n  return 8589934592\
    \ if n == 33\n  return 17179869184 if n == 34\n  return 34359738368 if n == 35\n\
    \  return 68719476736 if n == 36\n  return 137438953472 if n == 37\n  return 274877906944\
    \ if n == 38\n  return 549755813888 if n == 39\n  return 1099511627776 if n ==\
    \ 40\n  return 2199023255552 if n == 41\n  return 4398046511104 if n == 42\n \
    \ return 8796093022208 if n == 43\n  return 17592186044416 if n == 44\n  return\
    \ 35184372088832 if n == 45\n  return 70368744177664 if n == 46\n  return 140737488355328\
    \ if n == 47\n  return 281474976710656 if", "  return 1 if n == 0\n  return 2\
    \ if n == 1\n  return modp(n-1, p)**2 % p if n % 2 == 0\n  return 2 * modp(n-1,\
    \ p)**2 % p if n % 2 == 1\nend", "  raise ArgumentError, \"n must be non-negative\"\
    \ if n < 0\n  raise ArgumentError, \"p must be positive\" if p <= 0\n  return\
    \ 1 if n == 0\n  return 2 if n == 1\n  return modp(n/2, p)**2 * (2**(n%2)) % p\n\
    end", "  return 1 if n == 0\n  return 2 if n == 1\n  return modp(n - 1, p) **\
    \ 2 % p if n.even?\n  return 2 * modp(n - 1, p) ** 2 % p if n.odd?\nend", "  return\
    \ 1 if n == 0\n  return modp(n/2, p)**2 % p if n.even?\n  return 2 * modp(n/2,\
    \ p)**2 % p if n.odd?\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return\
    \ (2 * modp(n - 1, p)) % p if n.even?\n  return (2 * modp(n - 1, p) - 1) % p if\
    \ n.odd?\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return modp(n-1,\
    \ p)**2 % p if n.even?\n  return 2 * modp(n-1, p)**2 % p if n.odd?\nend", "  return\
    \ 1 if n == 0\n  return 2 if n == 1\n  return (2 * modp(n - 1, p)) % p if n.even?\n\
    \  return (2 * modp(n - 1, p) - 1) % p if n.odd?\nend", "  if n == 0\n    1\n\
    \  elsif n == 1\n    2\n  else\n    modp(n - 1, p) * 2 % p\n  end\nend", "  if\
    \ n == 0\n    1\n  elsif n == 1\n    2\n  else\n    modp(n - 1, p) * 2 % p\n \
    \ end\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return modp(n-1, p)**2\
    \ % p if n.even?\n  return 2 * modp(n-1, p)**2 % p if n.odd?\nend", "  return\
    \ 1 if n == 0\n  return 2 if n == 1\n  return modp(n-1, p) * 2 % p\nend", "  #\
    \ TODO: implement\n  if n == 0\n    return 1\n  end\n  if n == 1\n    return 2\n\
    \  end\n  if n % 2 == 0\n    return (modp(n/2, p)**2) % p\n  else\n    return\
    \ (2 * modp(n-1, p)) % p\n  end\nend", "  return 1 if n == 0\n  return 2 if n\
    \ == 1\n  return modp(n-1, p)**2 % p if n.even?\n  return 2 * modp(n-1, p)**2\
    \ % p if n.odd?\nend", "  if n == 0\n    1\n  elsif n % 2 == 0\n    (modp(n/2,\
    \ p)**2) % p\n  else\n    (2 * modp(n-1, p)) % p\n  end\nend", "  return 1 if\
    \ n == 0\n  return 2 if n == 1\n  return modp(n/2, p)**2 % p if n.even?\n  return\
    \ 2 * modp(n-1, p) % p if n.odd?\nend", "  if n == 0\n    1\n  elsif n == 1\n\
    \    2\n  else\n    modp(n - 1, p) * 2 % p\n  end\nend", "  if n == 0\n    1\n\
    \  elsif n == 1\n    2\n  else\n    modp(n - 1, p) * 2 % p\n  end\nend", "  #\
    \ TODO: implement\n  if n == 0\n    return 1\n  end\n  if n % 2 == 0\n    return\
    \ (modp(n/2, p) ** 2) % p\n  else\n    return (modp(n-1, p) * 2) % p\n  end\n\
    end", "  return 1 if n == 0\n  return 2 if n == 1\n  return modp(n - 1, p) * 2\
    \ % p\nend", "  return 1 if n == 0\n  return modp(n/2, p)**2 % p if n.even?\n\
    \  return 2 * modp(n/2, p)**2 % p if n.odd?\nend", "  return 1 if n == 0\n  return\
    \ modp(n/2, p)**2 * (n%2 == 0 ? 1 : 2) % p\nend", "  return 1 if n == 0\n  return\
    \ modp(n/2, p)**2 % p if n.even?\n  return 2 * modp(n/2, p)**2 % p if n.odd?\n\
    end", "  if n == 0\n    return 1\n  end\n  if n == 1\n    return 2\n  end\n  if\
    \ n % 2 == 0\n    return (modp(n/2, p) ** 2) % p\n  else\n    return (2 * modp(n-1,\
    \ p)) % p\n  end\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return\
    \ modp(n - 1, p) * 2 % p\nend", "  return 1 if n == 0\n  return 2 if n == 1\n\
    \  return 4 if n == 2\n  return 8 if n == 3\n  return 16 if n == 4\n  return 32\
    \ if n == 5\n  return 64 if n == 6\n  return 128 if n == 7\n  return 256 if n\
    \ == 8\n  return 512 if n == 9\n  return 1024 if n == 10\n  return 2048 if n ==\
    \ 11\n  return 4096 if n == 12\n  return 8192 if n == 13\n  return 16384 if n\
    \ == 14\n  return 32768 if n == 15\n  return 65536 if n == 16\n  return 131072\
    \ if n == 17\n  return 262144 if n == 18\n  return 524288 if n == 19\n  return\
    \ 1048576 if n == 20\n  return 2097152 if n == 21\n  return 4194304 if n == 22\n\
    \  return 8388608 if n == 23\n  return 16777216 if n == 24\n  return 33554432\
    \ if n == 25\n  return 67108864 if n == 26\n  return 134217728 if n == 27\n  return\
    \ 268435456 if n == 28\n  return 536870912 if n == 29\n  return 1073741824 if\
    \ n == 30\n  return 2147483648 if n == 31\n  return 4294967296 if n == 32\n  return\
    \ 8589934592 if n == 33\n  return 17179869184 if n == 34\n  return 34359738368\
    \ if n == 35\n  return 68719476736 if n == 36\n  return 137438953472 if n == 37\n\
    \  return 274877906944 if n == 38\n  return 549755813888 if n == 39\n  return\
    \ 1099511627776 if n == 40\n  return 2199023255552 if n == 41\n  return 4398046511104\
    \ if n == 42\n  return 8796093022208 if n == 43\n  return 17592186044416 if n\
    \ == 44\n  return 35184372088832 if n == 45\n  return 70368744177664 if n == 46\n\
    \  return 140737488355328 if n == 47\n  return 281474976710656 if", "  n.pow(p,\
    \ p)\nend", "  if n == 0\n    1\n  elsif n == 1\n    2\n  else\n    modp(n - 1,\
    \ p) ** 2 % p\n  end\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return\
    \ 4 if n == 2\n  return 8 if n == 3\n  return 16 if n == 4\n  return 32 if n ==\
    \ 5\n  return 64 if n == 6\n  return 128 if n == 7\n  return 256 if n == 8\n \
    \ return 512 if n == 9\n  return 1024 if n == 10\n  return 2048 if n == 11\n \
    \ return 4096 if n == 12\n  return 8192 if n == 13\n  return 16384 if n == 14\n\
    \  return 32768 if n == 15\n  return 65536 if n == 16\n  return 131072 if n ==\
    \ 17\n  return 262144 if n == 18\n  return 524288 if n == 19\n  return 1048576\
    \ if n == 20\n  return 2097152 if n == 21\n  return 4194304 if n == 22\n  return\
    \ 8388608 if n == 23\n  return 16777216 if n == 24\n  return 33554432 if n ==\
    \ 25\n  return 67108864 if n == 26\n  return 134217728 if n == 27\n  return 268435456\
    \ if n == 28\n  return 536870912 if n == 29\n  return 1073741824 if n == 30\n\
    \  return 2147483648 if n == 31\n  return 4294967296 if n == 32\n  return 8589934592\
    \ if n == 33\n  return 17179869184 if n == 34\n  return 34359738368 if n == 35\n\
    \  return 68719476736 if n == 36\n  return 137438953472 if n == 37\n  return 274877906944\
    \ if n == 38\n  return 549755813888 if n == 39\n  return 1099511627776 if n ==\
    \ 40\n  return 2199023255552 if n == 41\n  return 4398046511104 if n == 42\n \
    \ return 8796093022208 if n == 43\n  return 17592186044416 if n == 44\n  return\
    \ 35184372088832 if n == 45\n  return 70368744177664 if n == 46\n  return 140737488355328\
    \ if n == 47\n  return 281474976710656 if", "  return 1 if n == 0\n  return 2\
    \ if n == 1\n  return modp(n / 2, p) ** 2 % p if n.even?\n  return 2 * modp(n\
    \ - 1, p) % p if n.odd?\nend", "  return 1 if n == 0\n  if n.even?\n    modp(n\
    \ / 2, p) ** 2 % p\n  else\n    n % p * modp(n - 1, p) % p\n  end\nend", "  return\
    \ 1 if n == 0\n  return 2 if n == 1\n  return modp(n-1, p)**2 % p if n.even?\n\
    \  return 2 * modp(n-1, p)**2 % p if n.odd?\nend", "  return 1 if n == 0\n  return\
    \ 2 if n == 1\n  return modp(n - 1, p) * 2 % p\nend", "  return 1 if n == 0\n\
    \  return 2 if n == 1\n  return modp(n-1, p)**2 % p if n % 2 == 0\n  return 2\
    \ * modp(n-1, p)**2 % p if n % 2 == 1\nend", "  return 1 if n == 0\n  return 2\
    \ if n == 1\n  return modp(n-1, p)**2 % p if n.even?\n  return 2 * modp(n-1, p)**2\
    \ % p if n.odd?\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return modp(n\
    \ - 1, p) * 2 % p\nend", "  if n == 0\n    1\n  elsif n == 1\n    2\n  else\n\
    \    modp(n - 1, p) * 2 % p\n  end\nend", "  return 1 if n == 0\n  return 2 if\
    \ n == 1\n  return modp(n-1, p)**2 % p if n % 2 == 0\n  return 2 * modp(n-1, p)**2\
    \ % p if n % 2 == 1\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return\
    \ modp(n - 1, p) * 2 % p\nend", "  raise ArgumentError, \"n must be >= 0\" if\
    \ n < 0\n  raise ArgumentError, \"p must be > 0\" if p <= 0\n  return 1 if n ==\
    \ 0\n  return 2 if n == 1\n  return 4 if n == 2\n  return 8 if n == 3\n  return\
    \ 16 if n == 4\n  return 32 if n == 5\n  return 64 if n == 6\n  return 128 if\
    \ n == 7\n  return 256 if n == 8\n  return 512 if n == 9\n  return 1024 if n ==\
    \ 10\n  return 2048 if n == 11\n  return 4096 if n == 12\n  return 8192 if n ==\
    \ 13\n  return 16384 if n == 14\n  return 32768 if n == 15\n  return 65536 if\
    \ n == 16\n  return 131072 if n == 17\n  return 262144 if n == 18\n  return 524288\
    \ if n == 19\n  return 1048576 if n == 20\n  return 2097152 if n == 21\n  return\
    \ 4194304 if n == 22\n  return 8388608 if n == 23\n  return 16777216 if n == 24\n\
    \  return 33554432 if n == 25\n  return 67108864 if n == 26\n  return 134217728\
    \ if n == 27\n  return 268435456 if n == 28\n  return 536870912 if n == 29\n \
    \ return 1073741824 if n == 30\n  return 2147483648 if n == 31\n  return 4294967296\
    \ if n == 32\n  return 8589934592 if n == 33\n  return 17179869184 if n == 34\n\
    \  return 34359738368 if n == 35\n  return 68719476736 if n == 36\n  return 137438953472\
    \ if n == 37\n  return 274877906944 if n == 38\n  return 549755813888 if n ==\
    \ 39\n  return 1099511627776 if n == 40\n  return 2199023255552 if n == 41\n \
    \ return 4398046511104 if n == 42\n  return 8796093022208 if n == 43\n  return\
    \ 17592186044416 if n == 44\n  return 35184372088832 if n == 45\n  return 70",
  "  raise \"n must be non-negative\" if n < 0\n  raise \"p must be positive\" if\
    \ p <= 0\n  return 1 if n == 0\n  return 2 if n == 1\n  return modp(n-1, p) *\
    \ 2 % p\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return modp(n-1,\
    \ p)**2 % p if n.even?\n  return 2 * modp(n-1, p)**2 % p if n.odd?\nend", "  return\
    \ 1 if n == 0\n  return 2 if n == 1\n  return modp(n - 1, p) * 2 % p\nend", " \
    \ return 1 if n == 0\n  return 2 if n == 1\n  return modp(n-1, p)**2 % p if n.even?\n\
    \  return 2 * modp(n-1, p)**2 % p if n.odd?\nend", "  return 1 if n == 0\n  return\
    \ 2 if n == 1\n  return modp(n - 1, p) * 2 % p\nend", "  return 1 if n == 0\n\
    \  return 2 if n == 1\n  return 4 if n == 2\n  return 8 if n == 3\n  return 16\
    \ if n == 4\n  return 32 if n == 5\n  return 64 if n == 6\n  return 128 if n ==\
    \ 7\n  return 256 if n == 8\n  return 512 if n == 9\n  return 1024 if n == 10\n\
    \  return 2048 if n == 11\n  return 4096 if n == 12\n  return 8192 if n == 13\n\
    \  return 16384 if n == 14\n  return 32768 if n == 15\n  return 65536 if n ==\
    \ 16\n  return 131072 if n == 17\n  return 262144 if n == 18\n  return 524288\
    \ if n == 19\n  return 1048576 if n == 20\n  return 2097152 if n == 21\n  return\
    \ 4194304 if n == 22\n  return 8388608 if n == 23\n  return 16777216 if n == 24\n\
    \  return 33554432 if n == 25\n  return 67108864 if n == 26\n  return 134217728\
    \ if n == 27\n  return 268435456 if n == 28\n  return 536870912 if n == 29\n \
    \ return 1073741824 if n == 30\n  return 2147483648 if n == 31\n  return 4294967296\
    \ if n == 32\n  return 8589934592 if n == 33\n  return 17179869184 if n == 34\n\
    \  return 34359738368 if n == 35\n  return 68719476736 if n == 36\n  return 137438953472\
    \ if n == 37\n  return 274877906944 if n == 38\n  return 549755813888 if n ==\
    \ 39\n  return 1099511627776 if n == 40\n  return 2199023255552 if n == 41\n \
    \ return 4398046511104 if n == 42\n  return 8796093022208 if n == 43\n  return\
    \ 17592186044416 if n == 44\n  return 35184372088832 if n == 45\n  return 70368744177664\
    \ if n == 46\n  return 140737488355328 if n == 47\n  return 281474976710656 if",
  "  return 1 if n == 0\n  return 2 if n == 1\n  return (2 * modp(n - 1, p)) % p if\
    \ n.even?\n  return (2 * modp(n - 1, p) - 1) % p if n.odd?\nend", "  if n == 0\n\
    \    1\n  elsif n == 1\n    2\n  else\n    modp(n - 1, p) * 2 % p\n  end\nend",
  "  if n == 0\n    1\n  elsif n == 1\n    2\n  else\n    modp(n - 1, p) * 2 % p\n\
    \  end\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return modp(n-1,\
    \ p)**2 % p if n.even?\n  return 2 * modp(n-1, p)**2 % p if n.odd?\nend", "  return\
    \ 1 if n == 0\n  return modp(n/2, p)**2 % p if n % 2 == 0\n  return 2 * modp(n/2,\
    \ p)**2 % p if n % 2 == 1\nend", "  return 1 if n == 0\n  return 2 if n == 1\n\
    \  return modp(n-1, p)**2 % p if n % 2 == 0\n  return 2 * modp(n-1, p)**2 % p\
    \ if n % 2 == 1\nend", "  if n == 0\n    1\n  elsif n % 2 == 0\n    (modp(n/2,\
    \ p)**2) % p\n  else\n    (2 * modp(n-1, p)) % p\n  end\nend", "  return 1 if\
    \ n == 0\n  return 2 if n == 1\n  return modp(n-1, p) * 2 % p\nend", "  return\
    \ 1 if n == 0\n  return 2 if n == 1\n  return modp(n/2, p)**2 % p if n.even?\n\
    \  return 2 * modp(n-1, p) % p if n.odd?\nend", "  if n == 0\n    1\n  elsif n\
    \ % 2 == 0\n    modp(n / 2, p) ** 2 % p\n  else\n    n * modp(n - 1, p) % p\n\
    \  end\nend", "  return 1 if n == 0\n  if n.even?\n    modp(n/2, p)**2 % p\n \
    \ else\n    (2 * modp(n/2, p)**2) % p\n  end\nend", "  return 1 if n == 0\n  return\
    \ 2 if n == 1\n  return modp(n-1, p)**2 % p if n.even?\n  return 2 * modp(n-1,\
    \ p)**2 % p if n.odd?\nend", "  raise ArgumentError, \"n must be an integer\"\
    \ unless n.is_a? Integer\n  raise ArgumentError, \"p must be an integer\" unless\
    \ p.is_a? Integer\n  raise ArgumentError, \"p must be greater than 1\" unless\
    \ p > 1\n  raise ArgumentError, \"n must be greater than or equal to 0\" unless\
    \ n >= 0\n  return 1 if n == 0\n  return 2 if n == 1\n  return (2 * modp(n - 1,\
    \ p)) % p\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return modp(n/2,\
    \ p)**2 % p if n % 2 == 0\n  return 2 * modp(n-1, p) % p if n % 2 == 1\nend",
  "  return 1 if n == 0\n  return 2 if n == 1\n  return 4 if n == 2\n  return 8 if\
    \ n == 3\n  return 16 if n == 4\n  return 32 if n == 5\n  return 64 if n == 6\n\
    \  return 128 if n == 7\n  return 256 if n == 8\n  return 512 if n == 9\n  return\
    \ 1024 if n == 10\n  return 2048 if n == 11\n  return 4096 if n == 12\n  return\
    \ 8192 if n == 13\n  return 16384 if n == 14\n  return 32768 if n == 15\n  return\
    \ 65536 if n == 16\n  return 131072 if n == 17\n  return 262144 if n == 18\n \
    \ return 524288 if n == 19\n  return 1048576 if n == 20\n  return 2097152 if n\
    \ == 21\n  return 4194304 if n == 22\n  return 8388608 if n == 23\n  return 16777216\
    \ if n == 24\n  return 33554432 if n == 25\n  return 67108864 if n == 26\n  return\
    \ 134217728 if n == 27\n  return 268435456 if n == 28\n  return 536870912 if n\
    \ == 29\n  return 1073741824 if n == 30\n  return 2147483648 if n == 31\n  return\
    \ 4294967296 if n == 32\n  return 8589934592 if n == 33\n  return 17179869184\
    \ if n == 34\n  return 34359738368 if n == 35\n  return 68719476736 if n == 36\n\
    \  return 137438953472 if n == 37\n  return 274877906944 if n == 38\n  return\
    \ 549755813888 if n == 39\n  return 1099511627776 if n == 40\n  return 2199023255552\
    \ if n == 41\n  return 4398046511104 if n == 42\n  return 8796093022208 if n ==\
    \ 43\n  return 17592186044416 if n == 44\n  return 35184372088832 if n == 45\n\
    \  return 70368744177664 if n == 46\n  return 140737488355328 if n == 47\n  return\
    \ 281474976710656 if", "  (n == 0) ? 1 : (modp(n/2, p)**2 * (n%2 == 0 ? 1 : 2))\
    \ % p\nend", "  if n == 0\n    1\n  elsif n == 1\n    2\n  else\n    modp(n -\
    \ 1, p) * 2 % p\n  end\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return\
    \ modp(n - 1, p) * 2 % p\nend", "  return 1 if n == 0\n  return 2 if n == 1\n\
    \  return modp(n / 2, p) ** 2 % p if n.even?\n  return 2 * modp(n - 1, p) % p\
    \ if n.odd?\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return modp(n-1,\
    \ p)**2 % p if n.even?\n  return 2 * modp(n-1, p)**2 % p if n.odd?\nend", "  if\
    \ n == 0\n    1\n  elsif n % 2 == 0\n    (modp(n/2, p) ** 2) % p\n  else\n   \
    \ (modp(n-1, p) * 2) % p\n  end\nend", "  n % p\nend", "  return 1 if n == 0\n\
    \  return 2 if n == 1\n  return (2 * modp(n - 1, p)) % p if n.even?\n  return\
    \ (2 * modp(n - 1, p) - 1) % p if n.odd?\nend", "  return 1 if n == 0\n  return\
    \ 2 if n == 1\n  return modp(n - 1, p) * 2 % p\nend", "  return 1 if n == 0\n\
    \  return 2 if n == 1\n  return modp(n-1, p) * 2 % p\nend", "  if n == 0\n   \
    \ 1\n  elsif n == 1\n    2\n  else\n    modp(n - 1, p) * 2 % p\n  end\nend", " \
    \ return 1 if n == 0\n  return 2 if n == 1\n  return 4 if n == 2\n  return 8 if\
    \ n == 3\n  return 16 if n == 4\n  return 32 if n == 5\n  return 64 if n == 6\n\
    \  return 128 if n == 7\n  return 256 if n == 8\n  return 512 if n == 9\n  return\
    \ 1024 if n == 10\n  return 2048 if n == 11\n  return 4096 if n == 12\n  return\
    \ 8192 if n == 13\n  return 16384 if n == 14\n  return 32768 if n == 15\n  return\
    \ 65536 if n == 16\n  return 131072 if n == 17\n  return 262144 if n == 18\n \
    \ return 524288 if n == 19\n  return 1048576 if n == 20\n  return 2097152 if n\
    \ == 21\n  return 4194304 if n == 22\n  return 8388608 if n == 23\n  return 16777216\
    \ if n == 24\n  return 33554432 if n == 25\n  return 67108864 if n == 26\n  return\
    \ 134217728 if n == 27\n  return 268435456 if n == 28\n  return 536870912 if n\
    \ == 29\n  return 1073741824 if n == 30\n  return 2147483648 if n == 31\n  return\
    \ 4294967296 if n == 32\n  return 8589934592 if n == 33\n  return 17179869184\
    \ if n == 34\n  return 34359738368 if n == 35\n  return 68719476736 if n == 36\n\
    \  return 137438953472 if n == 37\n  return 274877906944 if n == 38\n  return\
    \ 549755813888 if n == 39\n  return 1099511627776 if n == 40\n  return 2199023255552\
    \ if n == 41\n  return 4398046511104 if n == 42\n  return 8796093022208 if n ==\
    \ 43\n  return 17592186044416 if n == 44\n  return 35184372088832 if n == 45\n\
    \  return 70368744177664 if n == 46\n  return 140737488355328 if n == 47\n  return\
    \ 281474976710656 if", "  return 1 if n == 0\n  return 2 if n == 1\n  return modp(n-1,\
    \ p)**2 % p if n.even?\n  return 2 * modp(n-1, p)**2 % p if n.odd?\nend", "  return\
    \ 1 if n == 0\n  return 2 if n == 1\n  return modp(n-1, p) * 2 % p\nend", "  if\
    \ n == 0\n    1\n  elsif n == 1\n    2\n  else\n    modp(n-1, p)**2 % p\n  end\n\
    end", "  return 1 if n == 0\n  return 2 if n == 1\n  return (2 * modp(n - 1, p))\
    \ % p if n.even?\n  return (2 * modp(n - 1, p) - 1) % p if n.odd?\nend", "  return\
    \ 1 if n == 0\n  return 2 if n == 1\n  return modp(n - 1, p) * 2 % p\nend", " \
    \ # your code here\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return\
    \ 4 if n == 2\n  return 8 if n == 3\n  return 16 if n == 4\n  return 32 if n ==\
    \ 5\n  return 64 if n == 6\n  return 128 if n == 7\n  return 256 if n == 8\n \
    \ return 512 if n == 9\n  return 1024 if n == 10\n  return 2048 if n == 11\n \
    \ return 4096 if n == 12\n  return 8192 if n == 13\n  return 16384 if n == 14\n\
    \  return 32768 if n == 15\n  return 65536 if n == 16\n  return 131072 if n ==\
    \ 17\n  return 262144 if n == 18\n  return 524288 if n == 19\n  return 1048576\
    \ if n == 20\n  return 2097152 if n == 21\n  return 4194304 if n == 22\n  return\
    \ 8388608 if n == 23\n  return 16777216 if n == 24\n  return 33554432 if n ==\
    \ 25\n  return 67108864 if n == 26\n  return 134217728 if n == 27\n  return 268435456\
    \ if n == 28\n  return 536870912 if n == 29\n  return 1073741824 if n == 30\n\
    \  return 2147483648 if n == 31\n  return 4294967296 if n == 32\n  return 8589934592\
    \ if n == 33\n  return 17179869184 if n == 34\n  return 34359738368 if n == 35\n\
    \  return 68719476736 if n == 36\n  return 137438953472 if n == 37\n  return 274877906944\
    \ if n == 38\n  return 549755813888 if n == 39\n  return 1099511627776 if n ==\
    \ 40\n  return 2199023255552 if n == 41\n  return 4398046511104 if n == 42\n \
    \ return 8796093022208 if n == 43\n  return 17592186044416 if n == 44\n  return\
    \ 35184372088832 if n == 45\n  return 70368744177664 if n == 46\n  return 140737488355328\
    \ if n == 47\n  return 281474976710656 if", "  return 1 if n == 0\n  return 2\
    \ if n == 1\n  return modp(n-1, p)**2 % p if n.even?\n  return 2 * modp(n-1, p)**2\
    \ % p if n.odd?\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return 4\
    \ if n == 2\n  return 8 if n == 3\n  return 16 if n == 4\n  return 32 if n ==\
    \ 5\n  return 64 if n == 6\n  return 128 if n == 7\n  return 256 if n == 8\n \
    \ return 512 if n == 9\n  return 1024 if n == 10\n  return 2048 if n == 11\n \
    \ return 4096 if n == 12\n  return 8192 if n == 13\n  return 16384 if n == 14\n\
    \  return 32768 if n == 15\n  return 65536 if n == 16\n  return 131072 if n ==\
    \ 17\n  return 262144 if n == 18\n  return 524288 if n == 19\n  return 1048576\
    \ if n == 20\n  return 2097152 if n == 21\n  return 4194304 if n == 22\n  return\
    \ 8388608 if n == 23\n  return 16777216 if n == 24\n  return 33554432 if n ==\
    \ 25\n  return 67108864 if n == 26\n  return 134217728 if n == 27\n  return 268435456\
    \ if n == 28\n  return 536870912 if n == 29\n  return 1073741824 if n == 30\n\
    \  return 2147483648 if n == 31\n  return 4294967296 if n == 32\n  return 8589934592\
    \ if n == 33\n  return 17179869184 if n == 34\n  return 34359738368 if n == 35\n\
    \  return 68719476736 if n == 36\n  return 137438953472 if n == 37\n  return 274877906944\
    \ if n == 38\n  return 549755813888 if n == 39\n  return 1099511627776 if n ==\
    \ 40\n  return 2199023255552 if n == 41\n  return 4398046511104 if n == 42\n \
    \ return 8796093022208 if n == 43\n  return 17592186044416 if n == 44\n  return\
    \ 35184372088832 if n == 45\n  return 70368744177664 if n == 46\n  return 140737488355328\
    \ if n == 47\n  return 281474976710656 if", "  return 1 if n == 0\n  return modp(n\
    \ / 2, p) ** 2 % p if n.even?\n  return 2 * modp(n / 2, p) ** 2 % p if n.odd?\n\
    end", "  raise ArgumentError, \"n must be non-negative\" if n < 0\n  raise ArgumentError,\
    \ \"p must be prime\" unless p.prime?\n  return 1 if n == 0\n  return 2 if n ==\
    \ 1\n  return 4 if n == 2\n  return 8 if n == 3\n  return 16 if n == 4\n  return\
    \ 32 if n == 5\n  return 64 if n == 6\n  return 128 if n == 7\n  return 256 if\
    \ n == 8\n  return 512 if n == 9\n  return 1024 if n == 10\n  return 2048 if n\
    \ == 11\n  return 4096 if n == 12\n  return 8192 if n == 13\n  return 16384 if\
    \ n == 14\n  return 32768 if n == 15\n  return 65536 if n == 16\n  return 131072\
    \ if n == 17\n  return 262144 if n == 18\n  return 524288 if n == 19\n  return\
    \ 1048576 if n == 20\n  return 2097152 if n == 21\n  return 4194304 if n == 22\n\
    \  return 8388608 if n == 23\n  return 16777216 if n == 24\n  return 33554432\
    \ if n == 25\n  return 67108864 if n == 26\n  return 134217728 if n == 27\n  return\
    \ 268435456 if n == 28\n  return 536870912 if n == 29\n  return 1073741824 if\
    \ n == 30\n  return 2147483648 if n == 31\n  return 4294967296 if n == 32\n  return\
    \ 8589934592 if n == 33\n  return 17179869184 if n == 34\n  return 34359738368\
    \ if n == 35\n  return 68719476736 if n == 36\n  return 137438953472 if n == 37\n\
    \  return 274877906944 if n == 38\n  return 549755813888 if n == 39\n  return\
    \ 1099511627776 if n == 40\n  return 2199023255552 if n == 41\n  return 4398046511104\
    \ if n == 42\n  return 8796093022208 if n == 43\n  return 17592186044416 if n\
    \ == 44\n  return 35184372088832 if n == 45\n  return", "  return 1 if n == 0\n\
    \  return 2 if n == 1\n  return modp(n-1, p)**2 % p if n.even?\n  return 2 * modp(n-1,\
    \ p)**2 % p if n.odd?\nend", "  if n == 0\n    1\n  elsif n % 2 == 0\n    (modp(n/2,\
    \ p)**2) % p\n  else\n    (2 * modp(n-1, p)) % p\n  end\nend", "  return 1 if\
    \ n == 0\n  return modp(n / 2, p) ** 2 % p if n.even?\n  return 2 * modp(n / 2,\
    \ p) ** 2 % p if n.odd?\nend", "  if n == 0\n    1\n  elsif n % 2 == 0\n    modp(n\
    \ / 2, p) ** 2 % p\n  else\n    n * modp(n - 1, p) % p\n  end\nend", "  return\
    \ 1 if n == 0\n  return 2 if n == 1\n  return modp(n/2, p)**2 % p if n % 2 ==\
    \ 0\n  return 2 * modp(n/2, p)**2 % p if n % 2 == 1\nend", "  raise ArgumentError,\
    \ \"n must be non-negative\" if n < 0\n  raise ArgumentError, \"p must be positive\"\
    \ if p <= 0\n  return 1 if n == 0\n  return 2 if n == 1\n  return modp(n/2, p)**2\
    \ % p if n % 2 == 0\n  return 2 * modp(n-1, p) % p\nend", "  if n == 0\n    1\n\
    \  elsif n % 2 == 0\n    (modp(n/2, p) ** 2) % p\n  else\n    (2 * modp(n-1, p))\
    \ % p\n  end\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return modp(n-1,\
    \ p) * 2 % p\nend", "  return 1 if n == 0\n  return modp(n/2, p)**2 % p if n %\
    \ 2 == 0\n  return 2 * modp(n/2, p)**2 % p if n % 2 == 1\nend", "  return 1 if\
    \ n == 0\n  return 2 if n == 1\n  return (2 * modp(n - 1, p)) % p if n.even?\n\
    \  return (2 * modp(n - 1, p) - 1) % p if n.odd?\nend", "  return 1 if n == 0\n\
    \  return 2 if n == 1\n  return modp(n/2, p)**2 % p if n.even?\n  return 2 * modp(n/2,\
    \ p)**2 % p if n.odd?\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return\
    \ 4 if n == 2\n  return (2 * modp(n - 1, p)) % p if n.even?\n  return (2 * modp(n\
    \ - 1, p) - modp(n - 2, p)) % p if n.odd?\nend", "  return 1 if n == 0\n  return\
    \ modp(n / 2, p) ** 2 % p if n.even?\n  return 2 * modp(n / 2, p) ** 2 % p if\
    \ n.odd?\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return modp(n -\
    \ 1, p) * 2 % p\nend", "  # TODO: implement me\n  return 1 if n == 0\n  return\
    \ 2 if n == 1\n  return (2 * modp(n - 1, p)) % p\nend", "  return 1 if n == 0\n\
    \  return 2 if n == 1\n  return modp(n - 1, p) * 2 % p\nend", "  if n == 0\n \
    \   1\n  elsif n % 2 == 0\n    modp(n / 2, p) ** 2 % p\n  else\n    n * modp(n\
    \ - 1, p) % p\n  end\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return\
    \ modp(n - 1, p) * 2 % p\nend", "  return 1 if n == 0\n  return 2 if n == 1\n\
    \  return modp(n-1, p)**2 % p if n % 2 == 0\n  return 2 * modp(n-1, p)**2 % p\
    \ if n % 2 == 1\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return modp(n\
    \ - 1, p) * 2 % p\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return\
    \ modp(n-1, p)**2 % p if n.even?\n  return 2 * modp(n-1, p)**2 % p if n.odd?\n\
    end", "  (n**n) % p\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return\
    \ modp(n - 1, p) * 2 % p\nend", "  return 1 if n == 0\n  return 2 if n == 1\n\
    \  return modp(n-1, p)**2 % p if n.even?\n  return 2 * modp(n-1, p)**2 % p if\
    \ n.odd?\nend", "  if n == 0\n    return 1\n  end\n  if n == 1\n    return 2\n\
    \  end\n  if n % 2 == 0\n    return (modp(n/2, p)**2) % p\n  else\n    return\
    \ (2 * modp(n-1, p)) % p\n  end\nend", "  return 1 if n == 0\n  return 2 if n\
    \ == 1\n  return modp(n-1, p) * 2 % p\nend", "  return 1 if n == 0\n  return modp(n/2,\
    \ p)**2 % p if n % 2 == 0\n  return (modp(n/2, p)**2 * 2) % p if n % 2 == 1\n\
    end", "  return 1 if n == 0\n  return 2 if n == 1\n  return modp(n - 1, p) * 2\
    \ % p\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return modp(n-1, p)\
    \ * 2 % p\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return modp(n\
    \ - 1, p) * 2 % p\nend", "  return 1 if n == 0\n  return 2 if n == 1\n  return\
    \ modp(n - 1, p) * 2 % p\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
