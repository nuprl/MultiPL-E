name: HumanEval_31_is_prime
language: rb
prompt: "# Return true if a given number is prime, and false otherwise.\n# >>> is_prime.call(6)\n\
  # false\n# >>> is_prime.call(101)\n# true\n# >>> is_prime.call(11)\n# true\n# >>>\
  \ is_prime.call(13441)\n# true\n# >>> is_prime.call(61)\n# true\n# >>> is_prime.call(4)\n\
  # false\n# >>> is_prime.call(1)\n# false\ndef is_prime(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_prime\n\
  \    candidate = method(:is_prime)\n    assert_equal(false, candidate.call(6))\n\
  \    assert_equal(true, candidate.call(101))\n    assert_equal(true, candidate.call(11))\n\
  \    assert_equal(true, candidate.call(13441))\n    assert_equal(true, candidate.call(61))\n\
  \    assert_equal(false, candidate.call(4))\n    assert_equal(false, candidate.call(1))\n\
  \    assert_equal(true, candidate.call(5))\n    assert_equal(true, candidate.call(11))\n\
  \    assert_equal(true, candidate.call(17))\n    assert_equal(false, candidate.call(85))\n\
  \    assert_equal(false, candidate.call(77))\n    assert_equal(false, candidate.call(255379))\n\
  \  end\nend\n"
completions: ["  return false if n < 2\n  return true if n == 2\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n == 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n\
    \  end\n  true\nend", "  return false if n < 2\n  2.upto(Math.sqrt(n).to_i) do\
    \ |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false if\
    \ n <= 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n  end\n\
    \  true\nend", "  return false if n <= 1\n  (2..Math.sqrt(n)).each do |i|\n  \
    \  return false if n % i == 0\n  end\n  true\nend", "  return false if n == 1\n\
    \  (2..n-1).each do |i|\n    return false if n % i == 0\n  end\n  true\nend",
  "  return false if n <= 1\n  return true if n == 2\n  return false if n % 2 == 0\n\
    \  (3..Math.sqrt(n)).step(2).each do |i|\n    return false if n % i == 0\n  end\n\
    \  true\nend", "  if n == 1\n    return false\n  end\n  (2..n-1).each do |i|\n\
    \    if n % i == 0\n      return false\n    end\n  end\n  return true\nend", " \
    \ if n <= 1\n    return false\n  end\n  (2..Math.sqrt(n)).each do |i|\n    if\
    \ n % i == 0\n      return false\n    end\n  end\n  return true\nend", "  return\
    \ false if n < 2\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i ==\
    \ 0\n  end\n  true\nend", "  return false if n <= 1\n  Math.sqrt(n).to_i.downto(2).each\
    \ {|i| return false if n % i == 0}\n  true\nend", "  return false if n <= 1\n\
    \  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n  end\n  true\n\
    end", "  (2..n-1).each do |i|\n    if n % i == 0\n      return false\n    end\n\
    \  end\n  return true\nend", "  return false if n == 1\n  return true if n ==\
    \ 2\n  (2..n-1).each do |i|\n    return false if n % i == 0\n  end\n  true\nend",
  "  return false if n == 1\n  (2..n-1).each do |i|\n    return false if n % i ==\
    \ 0\n  end\n  true\nend", "  if n <= 1\n    return false\n  end\n  (2..n-1).each\
    \ do |i|\n    if n % i == 0\n      return false\n    end\n  end\n  return true\n\
    end", "  return false if n == 1\n  return true if n == 2\n  return false if n\
    \ % 2 == 0\n  (3..n-1).step(2) do |i|\n    return false if n % i == 0\n  end\n\
    \  true\nend", "  return false if n == 1\n  (2..n-1).each do |i|\n    return false\
    \ if n % i == 0\n  end\n  true\nend", "  return false if n <= 1\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  if n <= 1\n\
    \    return false\n  end\n  (2..n-1).each do |i|\n    if n % i == 0\n      return\
    \ false\n    end\n  end\n  return true\nend", "  (2..n-1).each do |i|\n    if\
    \ n % i == 0\n      return false\n    end\n  end\n  return true\nend", "  return\
    \ false if n < 2\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i ==\
    \ 0\n  end\n  true\nend", "  return false if n == 1\n  return true if n == 2\n\
    \  (2..n-1).each do |i|\n    return false if n % i == 0\n  end\n  true\nend",
  "  return false if n == 1\n  (2..n-1).each do |x|\n    return false if n % x ==\
    \ 0\n  end\n  true\nend", "  (2..n-1).each do |i|\n    if n % i == 0\n      return\
    \ false\n    end\n  end\n  return true\nend", "  if n == 1\n    return false\n\
    \  end\n  for i in 2..n-1\n    if n % i == 0\n      return false\n    end\n  end\n\
    \  return true\nend", "  return false if n == 1\n  (2..Math.sqrt(n)).each do |i|\n\
    \    return false if n % i == 0\n  end\n  true\nend", "  return false if n < 2\n\
    \  return true if n == 2\n  return false if n % 2 == 0\n  i = 3\n  while i <=\
    \ Math.sqrt(n)\n    return false if n % i == 0\n    i += 2\n  end\n  true\nend",
  "  return false if n == 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if\
    \ n % i == 0\n  end\n  true\nend", "  return false if n == 1\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n < 2\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n\
    \  end\n  true\nend", "  return false if n == 1\n  (2..Math.sqrt(n)).each do |i|\n\
    \    return false if n % i == 0\n  end\n  true\nend", "  return false if n ==\
    \ 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n  end\n\
    \  true\nend", "  return false if n == 1\n  (2..n-1).each do |i|\n    return false\
    \ if n % i == 0\n  end\n  true\nend", "  (2..Math.sqrt(n)).each do |i|\n    return\
    \ false if n % i == 0\n  end\n  true\nend", "  return false if n == 1\n  return\
    \ true if n == 2\n  (2..n/2).each do |i|\n    return false if n % i == 0\n  end\n\
    \  true\nend", "  if n <= 1\n    return false\n  end\n  (2..n-1).each do |i|\n\
    \    if n % i == 0\n      return false\n    end\n  end\n  return true\nend", " \
    \ return false if n == 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if\
    \ n % i == 0\n  end\n  true\nend", "  return false if n == 1\n  return true if\
    \ n == 2\n  (2..n-1).each do |i|\n    return false if n % i == 0\n  end\n  true\n\
    end", "  return false if n == 1\n  (2..Math.sqrt(n)).each do |i|\n    return false\
    \ if n % i == 0\n  end\n  true\nend", "  return false if n == 1\n  return true\
    \ if n == 2\n  return false if n % 2 == 0\n  (3..Math.sqrt(n)).step(2).each do\
    \ |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false if\
    \ n == 1\n  (2..Math.sqrt(n)).each do |x|\n    return false if n % x == 0\n  end\n\
    \  true\nend", "  if n <= 1\n    return false\n  end\n  i = 2\n  while i < n\n\
    \    if n % i == 0\n      return false\n    end\n    i += 1\n  end\n  return true\n\
    end", "  return false if n < 2\n  (2..Math.sqrt(n)).each do |i|\n    return false\
    \ if n % i == 0\n  end\n  true\nend", "  return false if n == 1\n  return true\
    \ if n == 2\n  (2..n-1).each do |i|\n    return false if n % i == 0\n  end\n \
    \ true\nend", "  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n\
    \  end\n  true\nend", "  (2..n-1).each do |i|\n    if n % i == 0\n      return\
    \ false\n    end\n  end\n  return true\nend", "  if n == 1\n    return false\n\
    \  end\n  (2..n-1).each do |i|\n    if n % i == 0\n      return false\n    end\n\
    \  end\n  return true\nend", "  (2..n-1).each do |i|\n    if n % i == 0\n    \
    \  return false\n    end\n  end\n  true\nend", "  return false if n <= 1\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n <= 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n\
    \  end\n  true\nend", "  return false if n == 1\n  (2..Math.sqrt(n)).each do |i|\n\
    \    return false if n % i == 0\n  end\n  true\nend", "  return false if n <=\
    \ 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n  end\n\
    \  true\nend", "  if n <= 1\n    return false\n  end\n  i = 2\n  while i < n\n\
    \    if n % i == 0\n      return false\n    end\n    i += 1\n  end\n  return true\n\
    end", "  return false if n <= 1\n  return true if n == 2\n  return false if n\
    \ % 2 == 0\n  (3..Math.sqrt(n)).step(2).each do |i|\n    return false if n % i\
    \ == 0\n  end\n  true\nend", "  return false if n == 1\n  return true if n ==\
    \ 2\n  (2..n-1).each do |i|\n    return false if n % i == 0\n  end\n  true\nend",
  "  return false if n == 1\n  (2..n/2).each do |i|\n    return false if n % i ==\
    \ 0\n  end\n  true\nend", "  return false if n == 1\n  return true if n == 2\n\
    \  (2..Math.sqrt(n)).each do |x|\n    return false if n % x == 0\n  end\n  true\n\
    end", "  return false if n == 1\n  return true if n == 2\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n == 1\n  (2..n-1).each do |i|\n    return false if n % i == 0\n  end\n \
    \ true\nend", "  if n <= 1\n    return false\n  end\n  (2..n-1).each do |i|\n\
    \    if n % i == 0\n      return false\n    end\n  end\n  return true\nend", " \
    \ return false if n == 1\n  return true if n == 2\n  (2..n-1).each do |i|\n  \
    \  return false if n % i == 0\n  end\n  true\nend", "  return false if n == 1\n\
    \  (2..n-1).each do |i|\n    return false if n % i == 0\n  end\n  true\nend",
  "  return false if n == 1\n  return true if n == 2\n  (2..Math.sqrt(n)).each do\
    \ |i|\n    return false if n % i == 0\n  end\n  true\nend", "  if n < 2\n    return\
    \ false\n  end\n  (2...n).each do |i|\n    if n % i == 0\n      return false\n\
    \    end\n  end\n  return true\nend", "  return false if n == 1\n  return true\
    \ if n == 2\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n\
    \  end\n  true\nend", "  return false if n == 1\n  (2..Math.sqrt(n)).each do |i|\n\
    \    return false if n % i == 0\n  end\n  true\nend", "  return false if n ==\
    \ 1\n  return true if n == 2\n  (2..n-1).each do |i|\n    return false if n %\
    \ i == 0\n  end\n  true\nend", "  return false if n == 1\n  (2..n-1).each do |i|\n\
    \    return false if n % i == 0\n  end\n  true\nend", "  return false if n ==\
    \ 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n  end\n\
    \  true\nend", "  return false if n == 1\n  return true if n == 2\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n == 1\n  return true if n == 2\n  (2..n-1).each do |i|\n    return false\
    \ if n % i == 0\n  end\n  true\nend", "  return false if n == 1\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n <= 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n\
    \  end\n  true\nend", "  return false if n == 1\n  (2..n-1).each do |i|\n    return\
    \ false if n % i == 0\n  end\n  true\nend", "  if n == 1\n    return false\n \
    \ end\n  (2..(n-1)).each do |i|\n    if n % i == 0\n      return false\n    end\n\
    \  end\n  return true\nend", "  return false if n < 2\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n == 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n\
    \  end\n  true\nend", "  return false if n == 1\n  (2..n-1).each do |i|\n    return\
    \ false if n % i == 0\n  end\n  true\nend", "  return false if n == 1\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n < 2\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n\
    \  end\n  true\nend", "  return false if n == 1\n  (2..Math.sqrt(n)).each do |i|\n\
    \    return false if n % i == 0\n  end\n  true\nend", "  return false if n ==\
    \ 1\n  return true if n == 2\n  (2..n-1).each do |i|\n    return false if n %\
    \ i == 0\n  end\n  true\nend", "  if n <= 1\n    return false\n  end\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    if n % i == 0\n      return false\n    end\n  end\n  return true\n\
    end", "  return false if n < 2\n  (2..Math.sqrt(n)).each do |i|\n    return false\
    \ if n % i == 0\n  end\n  true\nend", "  return false if n <= 1\n  return true\
    \ if n == 2 || n == 3\n  return false if n % 2 == 0 || n % 3 == 0\n  return true\
    \ if n < 9\n  r = (n**0.5).floor\n  f = 5\n  while f <= r\n    return false if\
    \ n % f == 0\n    return false if n % (f + 2) == 0\n    f += 6\n  end\n  true\n\
    end", "  return false if n == 1\n  (2..n-1).each do |i|\n    return false if n\
    \ % i == 0\n  end\n  true\nend", "  return false if n == 1\n  return true if n\
    \ == 2\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n  end\n\
    \  true\nend", "  return false if n == 1\n  (2..Math.sqrt(n)).each do |i|\n  \
    \  return false if n % i == 0\n  end\n  true\nend", "  return false if n <= 1\n\
    \  return true if n == 2\n  return false if n % 2 == 0\n  (3..n-1).step(2) do\
    \ |i|\n    return false if n % i == 0\n  end\n  true\nend", "  if n <= 1\n   \
    \ return false\n  end\n  for i in 2..n-1\n    if n % i == 0\n      return false\n\
    \    end\n  end\n  return true\nend", "  if n == 1\n    return false\n  end\n\
    \  if n == 2\n    return true\n  end\n  if n % 2 == 0\n    return false\n  end\n\
    \  (3..Math.sqrt(n)).step(2) do |i|\n    if n % i == 0\n      return false\n \
    \   end\n  end\n  return true\nend", "  return false if n == 1\n  (2..n-1).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  if n < 2\n \
    \   return false\n  end\n  (2...n).each do |i|\n    if n % i == 0\n      return\
    \ false\n    end\n  end\n  return true\nend", "  return false if n <= 1\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n == 1\n  (2..n/2).each do |i|\n    return false if n % i == 0\n  end\n \
    \ true\nend", "  return false if n == 1\n  (2..Math.sqrt(n)).each do |i|\n   \
    \ return false if n % i == 0\n  end\n  true\nend", "  return false if n == 1\n\
    \  (2..n-1).each do |i|\n    return false if n % i == 0\n  end\n  true\nend",
  "  (2..n-1).each do |i|\n    if n % i == 0\n      return false\n    end\n  end\n\
    \  return true\nend", "  return false if n == 1\n  (2..Math.sqrt(n)).each do |i|\n\
    \    return false if n % i == 0\n  end\n  true\nend", "  return false if n <=\
    \ 1\n  return true if n == 2\n  return false if n % 2 == 0\n  (3..Math.sqrt(n)).step(2).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  if n == 1\n\
    \    return false\n  end\n  (2..n-1).each do |i|\n    if n % i == 0\n      return\
    \ false\n    end\n  end\n  return true\nend", "  return false if n == 1\n  (2..n-1).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n == 1\n  return true if n == 2\n  return false if n % 2 == 0\n  (3..Math.sqrt(n)).step(2).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n < 2\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n\
    \  end\n  true\nend", "  return false if n < 2\n  (2..Math.sqrt(n)).each do |i|\n\
    \    return false if n % i == 0\n  end\n  true\nend", "  if n <= 1\n    return\
    \ false\n  end\n  i = 2\n  while i < n\n    if n % i == 0\n      return false\n\
    \    end\n    i += 1\n  end\n  return true\nend", "  (2..n-1).each do |i|\n  \
    \  if n % i == 0\n      return false\n    end\n  end\n  return true\nend", " \
    \ return false if n == 1\n  (2..n/2).each do |i|\n    return false if n % i ==\
    \ 0\n  end\n  true\nend", "  if n == 1\n    return false\n  end\n  (2..n-1).each\
    \ do |i|\n    if n % i == 0\n      return false\n    end\n  end\n  return true\n\
    end", "  return false if n == 1\n  (2..n-1).each do |i|\n    return false if n\
    \ % i == 0\n  end\n  true\nend", "  if n == 1\n    return false\n  end\n  (2..n-1).each\
    \ do |i|\n    if n % i == 0\n      return false\n    end\n  end\n  return true\n\
    end", "  return false if n == 1\n  (2..Math.sqrt(n)).each do |i|\n    return false\
    \ if n % i == 0\n  end\n  true\nend", "  return false if n == 1\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n == 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n\
    \  end\n  true\nend", "  return false if n == 1\n  (2..n-1).each do |i|\n    return\
    \ false if n % i == 0\n  end\n  true\nend", "  return false if n == 1\n  return\
    \ true if n == 2\n  (2..n/2).each do |i|\n    return false if n % i == 0\n  end\n\
    \  true\nend", "  return false if n == 1\n  (2..Math.sqrt(n)).each do |i|\n  \
    \  return false if n % i == 0\n  end\n  true\nend", "  return false if n == 1\n\
    \  (2..n-1).each do |i|\n    return false if n % i == 0\n  end\n  true\nend",
  "  if n == 1\n    return false\n  end\n  for i in 2..(n-1)\n    if n % i == 0\n\
    \      return false\n    end\n  end\n  return true\nend", "  return false if n\
    \ <= 1\n  return true if n == 2\n  return false if n % 2 == 0\n  (3..Math.sqrt(n)).step(2).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n <= 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n\
    \  end\n  true\nend", "  return false if n < 2\n  (2..Math.sqrt(n)).each do |i|\n\
    \    return false if n % i == 0\n  end\n  true\nend", "  return false if n <=\
    \ 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n  end\n\
    \  true\nend", "  if n <= 1\n    return false\n  end\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    if n % i == 0\n      return false\n    end\n  end\n  return true\n\
    end", "  return false if n == 1\n  (2..Math.sqrt(n)).each do |i|\n    return false\
    \ if n % i == 0\n  end\n  true\nend", "  if n == 1\n    return false\n  end\n\
    \  for i in 2..(n-1)\n    if n % i == 0\n      return false\n    end\n  end\n\
    \  return true\nend", "  return false if n < 2\n  (2..Math.sqrt(n)).each do |i|\n\
    \    return false if n % i == 0\n  end\n  true\nend", "  if n <= 1\n    return\
    \ false\n  end\n  (2..n-1).each do |x|\n    if n % x == 0\n      return false\n\
    \    end\n  end\n  return true\nend", "  return false if n == 1\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n < 2\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n\
    \  end\n  true\nend", "  return false if n == 1\n  return true if n == 2\n  (2..n-1).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n == 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n\
    \  end\n  true\nend", "  return false if n == 1\n  (2..Math.sqrt(n)).each do |x|\n\
    \    return false if n % x == 0\n  end\n  true\nend", "  return false if n ==\
    \ 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n  end\n\
    \  true\nend", "  (2..n-1).each do |i|\n    if n % i == 0\n      return false\n\
    \    end\n  end\n  return true\nend", "  return false if n <= 1\n  Math.sqrt(n).to_i.downto(2).each\
    \ {|i| return false if n % i == 0}\n  true\nend", "  return false if n < 2\n \
    \ return true if n == 2\n  (2..Math.sqrt(n)).each do |i|\n    return false if\
    \ n % i == 0\n  end\n  true\nend", "  return false if n == 1\n  (2..n-1).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  if n <= 1\n\
    \    return false\n  end\n  (2..n-1).each do |i|\n    if n % i == 0\n      return\
    \ false\n    end\n  end\n  return true\nend", "  return false if n <= 1\n  return\
    \ true if n == 2\n  return false if n % 2 == 0\n  (3..Math.sqrt(n)).step(2).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n == 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n\
    \  end\n  true\nend", "  return false if n == 1\n  (2..Math.sqrt(n)).each do |i|\n\
    \    return false if n % i == 0\n  end\n  true\nend", "  return false if n ==\
    \ 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n  end\n\
    \  true\nend", "  (2..n-1).each do |i|\n    if n % i == 0\n      return false\n\
    \    end\n  end\n  return true\nend", "  return false if n <= 1\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  if n == 1\n\
    \    return false\n  end\n  (2..n-1).each do |i|\n    if n % i == 0\n      return\
    \ false\n    end\n  end\n  return true\nend", "  return false if n == 1\n  return\
    \ true if n == 2\n  (2..n-1).each do |i|\n    return false if n % i == 0\n  end\n\
    \  true\nend", "  return false if n == 1\n  (2..Math.sqrt(n)).each do |i|\n  \
    \  return false if n % i == 0\n  end\n  true\nend", "  return false if n == 1\n\
    \  return true if n == 2\n  (2..Math.sqrt(n)).each do |i|\n    return false if\
    \ n % i == 0\n  end\n  true\nend", "  (2..n-1).each do |i|\n    if n % i == 0\n\
    \      return false\n    end\n  end\n  return true\nend", "  return false if n\
    \ == 1\n  (2..n-1).each do |i|\n    return false if n % i == 0\n  end\n  true\n\
    end", "  return false if n == 1\n  (2..n-1).each do |i|\n    return false if n\
    \ % i == 0\n  end\n  true\nend", "  return false if n == 1\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n <= 1\n  return true if n == 2\n  return false if n % 2 == 0\n  i = 3\n\
    \  while i * i <= n\n    return false if n % i == 0\n    i += 2\n  end\n  true\n\
    end", "  return false if n == 1\n  return true if n == 2\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n <= 1\n  (2..n/2).none? { |i| n % i == 0 }\nend", "  return false if n ==\
    \ 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n  end\n\
    \  true\nend", "  return false if n == 1\n  (2..Math.sqrt(n)).each do |i|\n  \
    \  return false if n % i == 0\n  end\n  true\nend", "  return false if n <= 1\n\
    \  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n  end\n  true\n\
    end", "  return false if n == 1\n  (2..n/2).each do |i|\n    return false if n\
    \ % i == 0\n  end\n  true\nend", "  return false if n == 1\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n < 2\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n\
    \  end\n  true\nend", "  (2..n-1).each do |i|\n    if n % i == 0\n      return\
    \ false\n    end\n  end\n  true\nend", "  return false if n <= 1\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n == 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n\
    \  end\n  true\nend", "  (2..n-1).each do |i|\n    if n % i == 0\n      return\
    \ false\n    end\n  end\n  return true\nend", "  return false if n <= 1\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n <= 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n\
    \  end\n  true\nend", "  return false if n <= 1\n  (2..Math.sqrt(n)).each do |i|\n\
    \    return false if n % i == 0\n  end\n  true\nend", "  return false if n ==\
    \ 1\n  return true if n == 2\n  (2..n-1).each do |i|\n    return false if n %\
    \ i == 0\n  end\n  true\nend", "  return false if n == 1\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  if n == 1\n\
    \    return false\n  end\n  (2..n-1).each do |i|\n    if n % i == 0\n      return\
    \ false\n    end\n  end\n  return true\nend", "  return false if n < 2\n  return\
    \ true if n == 2\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i ==\
    \ 0\n  end\n  true\nend", "  if n <= 1\n    return false\n  end\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    if n % i == 0\n      return false\n    end\n  end\n  return true\n\
    end", "  if n <= 1\n    return false\n  end\n  i = 2\n  while i < n\n    if n\
    \ % i == 0\n      return false\n    end\n    i += 1\n  end\n  return true\nend",
  "  return false if n <= 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if\
    \ n % i == 0\n  end\n  true\nend", "  return false if n < 2\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n <= 1\n  return true if n == 2\n  return false if n % 2 == 0\n  i = 3\n\
    \  while i * i <= n\n    return false if n % i == 0\n    i += 2\n  end\n  true\n\
    end", "  return false if n <= 1\n  Math.sqrt(n).to_i.downto(2).each {|i| return\
    \ false if n % i == 0}\n  true\nend", "  if n == 1\n    return false\n  end\n\
    \  (2..n-1).each do |i|\n    if n % i == 0\n      return false\n    end\n  end\n\
    \  return true\nend", "  return false if n == 1\n  (2..Math.sqrt(n)).each do |i|\n\
    \    return false if n % i == 0\n  end\n  true\nend", "  return false if n ==\
    \ 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n  end\n\
    \  true\nend", "  return false if n <= 1\n  (2..Math.sqrt(n)).each do |i|\n  \
    \  return false if n % i == 0\n  end\n  true\nend", "  return false if n == 1\n\
    \  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n  end\n  true\n\
    end", "  return false if n < 2\n  return true if n == 2\n  return false if n %\
    \ 2 == 0\n  (3..Math.sqrt(n)).step(2).each do |i|\n    return false if n % i ==\
    \ 0\n  end\n  true\nend", "  return false if n == 1\n  (2..n-1).each do |i|\n\
    \    return false if n % i == 0\n  end\n  true\nend", "  return false if n ==\
    \ 1\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n  end\n\
    \  true\nend", "  return false if n <= 1\n  (2..Math.sqrt(n)).each do |i|\n  \
    \  return false if n % i == 0\n  end\n  true\nend", "  return false if n == 1\n\
    \  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n  end\n  true\n\
    end", "  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n  end\n\
    \  return true\nend", "  return false if n == 1\n  (2..n-1).each do |i|\n    return\
    \ false if n % i == 0\n  end\n  true\nend", "  return false if n == 1\n  (2..n-1).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n < 2\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n\
    \  end\n  true\nend", "  return false if n < 2\n  (2..Math.sqrt(n)).each do |i|\n\
    \    return false if n % i == 0\n  end\n  true\nend", "  if n <= 1\n    return\
    \ false\n  end\n  for i in 2..n-1\n    if n % i == 0\n      return false\n   \
    \ end\n  end\n  return true\nend", "  return false if n == 1\n  (2..Math.sqrt(n)).each\
    \ do |i|\n    return false if n % i == 0\n  end\n  true\nend", "  return false\
    \ if n == 1\n  return true if n == 2\n  (2..n-1).each do |i|\n    return false\
    \ if n % i == 0\n  end\n  true\nend", "  return false if n == 1\n  return true\
    \ if n == 2\n  return false if n % 2 == 0\n  (3..Math.sqrt(n)).step(2).each do\
    \ |i|\n    return false if n % i == 0\n  end\n  true\nend", "  if n == 1\n   \
    \ return false\n  end\n  for i in 2..n-1\n    if n % i == 0\n      return false\n\
    \    end\n  end\n  return true\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
