name: HumanEval_153_Strongest_Extension
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You will be given the name of a class (a string) and an\
  \ array array list of extensions.\n    // The extensions are to be used to load\
  \ additional classes to the class. The\n    // strength of the extension is as follows:\
  \ Let CAP be the number of the uppercase\n    // letters in the extension's name,\
  \ and let SM be the number of lowercase letters \n    // in the extension's name,\
  \ the strength is given by the fraction CAP - SM. \n    // You should find the strongest\
  \ extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
  \    // If there are two or more extensions with the same strength, you should\n\
  \    // choose the one that comes first in the array list.\n    // For example,\
  \ if you are given \"Slices\" as the class and an array array list of the\n    //\
  \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    // return\
  \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n   \
  \ // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"my_class\"\
  ), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\", (String)\"\
  CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
  \ class_name, ArrayList<String> extensions) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
  Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
  , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
  Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"NazeDa\"\
  , (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
  )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
  t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
  , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
  K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
  t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
  __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
  , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
  YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
  okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
  YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
  \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
  Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
  _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
  _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
  671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
completions: ["        double strength = 0;\n        double maxStrength = 0;\n   \
    \     double minStrength = Double.MAX_VALUE;\n        for(String extension : extensions)\
    \ {\n            String extensionName = extension.substring(0,1).toUpperCase()\
    \ + extension.substring(1);\n            int cap = extensionName.length();\n \
    \           int sm = extensionName.substring(0,1).toLowerCase().length();\n  \
    \          strength += (cap - sm);\n            if(strength > maxStrength) {\n\
    \                maxStrength = strength;\n            }\n            if(strength\
    \ < minStrength) {\n                minStrength = strength;\n            }\n \
    \       }\n        double strengthRatio = maxStrength / minStrength;\n       \
    \ for(String extension : extensions) {\n            String extensionName = extension.substring(0,1).toUpperCase()\
    \ + extension.substring(1);\n            int cap = extensionName.length();\n \
    \           int sm = extensionName.substring(0,1).toLowerCase().length();\n  \
    \          strength += (cap - sm);\n        }\n        double strengthRatio =\
    \ maxStrength / minStrength;\n        for(String extension : extensions) {\n \
    \           String extensionName = extension.substring(0,1).toUpperCase() + extension.substring(1);\n\
    \            int cap = extensionName.length();\n            int sm = extensionName.substring(0,1).toLowerCase().length();\n\
    \            strength += (cap - sm);\n        }\n        double strengthRatio\
    \ = maxStrength / minStrength;\n        for(String extension : extensions) {\n\
    \            String extensionName = extension.substring(0,1).toUpperCase() + extension.substring(1);\n\
    \            int cap = extensionName.length();\n            int sm = extensionName.substring(0,1).toLowerCase().length();\n\
    \            strength += (cap - sm);\n        }\n        double strengthRatio\
    \ = maxStrength / minStrength;\n        for(String extension : extensions) {\n\
    \            String extensionName = extension.substring(0,1).toUpperCase() + extension.substring(1);\n\
    \            int cap = extensionName.length();\n            int sm = extensionName.substring(0,1).toLowerCase().length();\n\
    \            strength += (cap - sm);\n        }\n        double strengthRatio\
    \ = maxStrength / minStrength;\n        for(String extension : extensions) {\n\
    \            String extensionName = extension.substring(0,1).toUpperCase() + extension.substring(1);\n\
    \            int cap = extensionName.length();\n            int sm = extensionName.substring(0,1).toLowerCase().length();\n\
    \            strength += (cap - sm);\n        }\n        double strengthRatio\
    \ = maxStrength / minStrength;\n        for(String extension : extensions) {\n\
    \            String extensionName = extension.substring(0,1).toUpperCase() + extension.substring(1);\n\
    \            int cap", "        ArrayList<Integer> strengths = new ArrayList<>();\n\
    \        for(String extension : extensions) {\n            int strength = extension.substring(extension.indexOf('C')\
    \ - 1, extension.indexOf('C')).chars().filter(Character::isUpperCase).count()\
    \ - extension.substring(extension.indexOf('S') - 1, extension.indexOf('S')).chars().filter(Character::isLowerCase).count();\n\
    \            strengths.add(strength);\n        }\n        Collections.sort(strengths);\n\
    \        int strongest = strengths.get(0);\n        for(Integer strength : strengths)\
    \ {\n            if(strength == strongest) {\n                strongest = strength;\n\
    \            }\n        }\n        return class_name + \".\" + extensions.get(strengths.indexOf(strongest));",
  "        double strength = -1;\n        double maxStrength = -1;\n        for(String\
    \ extension : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            double fraction\
    \ = cap - sm;\n            strength += fraction;\n            if(strength > maxStrength)\
    \ {\n                maxStrength = strength;\n            }\n        }\n     \
    \   if(maxStrength == -1) {\n            return class_name;\n        }\n     \
    \   double maxFraction = maxStrength / strength;\n        for(String extension\
    \ : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            double fraction\
    \ = cap - sm;\n            if(fraction > maxFraction) {\n                return\
    \ class_name + \".\" + extension;\n            }\n        }\n        return class_name;",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        double max_strength = -1;\n        String strongest_extension = null;\n\
    \        for (String extension : extensions_sorted) {\n            try {\n   \
    \             Class<?> clazz = Class.forName(class_name + \".\" + extension);\n\
    \                Method method = clazz.getMethod(\"main\", String[].class);\n\
    \                String extension_str = extension;\n                String method_name\
    \ = method.getName();\n                for (String extension_str2 : extensions_sorted)\
    \ {\n                    try {\n                        Class<?> clazz2 = Class.forName(class_name\
    \ + \".\" + extension_str2);\n                        Method method2 = clazz2.getMethod(method_name,\
    \ String[].class);\n                        String method_name2 = method2.getName();\n\
    \                        double method_strength = method2.invoke(null, new Object[]{new\
    \ String[]{method_name2}});\n                        if (method_strength > strength)\
    \ {\n                            strength = method_strength;\n               \
    \             strongest_extension = class_name + \".\" + extension_str2;\n   \
    \                     }\n                    } catch (ClassNotFoundException e)\
    \ {\n                        e.printStackTrace();\n                    } catch\
    \ (NoSuchMethodException e) {\n                        e.printStackTrace();\n\
    \                    } catch (IllegalAccessException e) {\n                  \
    \      e.printStackTrace();\n                    } catch (InvocationTargetException\
    \ e) {\n                        e.printStackTrace();\n                    }\n\
    \                }\n            } catch (ClassNotFoundException e) {\n       \
    \         e.printStackTrace();\n            } catch (NoSuchMethodException e)\
    \ {\n                e.printStackTrace();\n            } catch (IllegalAccessException\
    \ e) {\n                e.printStackTrace();\n            } catch (InvocationTargetException\
    \ e) {\n                e.printStackTrace();\n            }\n        }\n     \
    \   return strongest_extension;", "        double strength = 0;\n        double\
    \ maxStrength = 0;\n        for(String extension : extensions) {\n           \
    \ int cap = extension.substring(0, 1).toUpperCase().length();\n            int\
    \ sm = extension.substring(0, 1).toLowerCase().length();\n            strength\
    \ += (cap - sm);\n        }\n        strength = strength / extensions.size();\n\
    \        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).toUpperCase().length();\n            int sm = extension.substring(0, 1).toLowerCase().length();\n\
    \            if(cap - sm > maxStrength) {\n                maxStrength = cap -\
    \ sm;\n            }\n        }\n        return class_name + \".\" + extensions.get(extensions.indexOf(extensions.stream().filter(e\
    \ -> e.substring(0, 1).toUpperCase().equals(extension.substring(0, 1).toUpperCase())).findFirst().get())\
    \ + 1);", "        ArrayList<Integer> strengths = new ArrayList<Integer>();\n\
    \        for(String ext : extensions) {\n            int strength = ext.toUpperCase().replaceAll(\"\
    [^A-Z]\", \"\").length() - ext.toLowerCase().replaceAll(\"[^a-z]\", \"\").length();\n\
    \            strengths.add(strength);\n        }\n        Collections.sort(strengths);\n\
    \        int strongest = strengths.get(0);\n        for(Integer s : strengths)\
    \ {\n            if(s == strongest) {\n                strongest = s;\n      \
    \      }\n        }\n        return class_name + \".\" + extensions.get(strengths.indexOf(strongest));",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0,1).length();\n            int\
    \ sm = extension.substring(1,2).length();\n            double frac = cap - sm;\n\
    \            if (frac > strength) {\n                strength = frac;\n      \
    \          strongest_extension = extension;\n            }\n        }\n      \
    \  return class_name + \".\" + strongest_extension;", "        double strength\
    \ = 0;\n        double maxStrength = 0;\n        double maxExtension = 0;\n  \
    \      double maxExtensionIndex = 0;\n        double maxExtensionLength = 0;\n\
    \        double maxExtensionStrength = 0;\n        double maxExtensionStrengthIndex\
    \ = 0;\n        double maxExtensionStrengthLength = 0;\n        double maxExtensionStrengthIndex2\
    \ = 0;\n        double maxExtensionStrengthLength2 = 0;\n        double maxExtensionStrengthIndex3\
    \ = 0;\n        double maxExtensionStrengthLength3 = 0;\n        double maxExtensionStrengthIndex4\
    \ = 0;\n        double maxExtensionStrengthLength4 = 0;\n        double maxExtensionStrengthIndex5\
    \ = 0;\n        double maxExtensionStrengthLength5 = 0;\n        double maxExtensionStrengthIndex6\
    \ = 0;\n        double maxExtensionStrengthLength6 = 0;\n        double maxExtensionStrengthIndex7\
    \ = 0;\n        double maxExtensionStrengthLength7 = 0;\n        double maxExtensionStrengthIndex8\
    \ = 0;\n        double maxExtensionStrengthLength8 = 0;\n        double maxExtensionStrengthIndex9\
    \ = 0;\n        double maxExtensionStrengthLength9 = 0;\n        double maxExtensionStrengthIndex10\
    \ = 0;\n        double maxExtensionStrengthLength10 = 0;\n        double maxExtensionStrengthIndex11\
    \ = 0;\n        double maxExtensionStrengthLength11 = 0;\n        double maxExtensionStrengthIndex12\
    \ = 0;\n        double maxExtensionStrengthLength12 = 0;\n        double maxExtensionStrengthIndex13\
    \ = 0;\n        double maxExtensionStrengthLength13 = 0;\n        double maxExtensionStrengthIndex14\
    \ = 0;\n        double maxExtensionStrengthLength14 = 0;\n        double maxExtensionStrengthIndex15\
    \ = 0;\n        double maxExtensionStrengthLength15 = 0;\n        double maxExtensionStrengthIndex16\
    \ = 0;\n        double maxExtensionStrengthLength16 = 0;\n        double maxExtensionStrengthIndex17\
    \ = 0;\n        double maxExtensionStrengthLength17 = 0;\n        double maxExtensionStrengthIndex18\
    \ = 0;\n        double maxExtensionStrengthLength18 = 0;\n        double maxExtensionStrengthIndex19\
    \ = 0;\n        double maxExtensionStrengthLength19 = 0;\n        double maxExtensionStrengthIndex20\
    \ = 0;\n        double maxExtensionStrengthLength20 = 0;\n        double maxExtensionStrengthIndex21\
    \ = 0;\n        double maxExtensionStrengthLength21 = 0;\n        double maxExtensionStrengthIndex22\
    \ = 0;\n        double maxExtensionStrengthLength22 = 0;\n        double maxExtensionStrengthIndex23\
    \ = 0;\n        double maxExtensionStrengthLength23 = 0;\n        double maxExtensionStrengthIndex24\
    \ = 0;\n        double maxExtensionStrengthLength24 = 0;\n        double ", " \
    \       ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n \
    \       Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.length();\n            int sm = class_name.substring(class_name.lastIndexOf('.')+1,\
    \ class_name.length()).length();\n            double frac = cap - sm;\n      \
    \      if (frac > strength) {\n                strength = frac;\n            \
    \    strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        double strength = 0;\n\
    \        double maxStrength = 0;\n        double maxExtension = 0;\n        double\
    \ maxExtensionIndex = 0;\n        double maxExtensionLength = 0;\n        double\
    \ maxExtensionName = 0;\n        double maxExtensionNameIndex = 0;\n        double\
    \ maxExtensionNameLength = 0;\n        double maxExtensionNameLengthIndex = 0;\n\
    \        double maxExtensionNameLengthIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;", "        double strength = 0;\n        double maxStrength = 0;\n    \
    \    double maxExtension = 0;\n        double maxExtensionIndex = 0;\n       \
    \ for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).toUpperCase().length();\n            int sm = extension.substring(0, 1).toLowerCase().length();\n\
    \            strength += (cap - sm);\n            if(strength > maxStrength) {\n\
    \                maxStrength = strength;\n                maxExtension = extension;\n\
    \                maxExtensionIndex = extensions.indexOf(extension);\n        \
    \    }\n        }\n        return class_name + \".\" + maxExtension;", "     \
    \   ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest_extension_index\
    \ = extensions_sorted.size() - 1;\n        String strongest_extension = extensions_sorted.get(strongest_extension_index);\n\
    \        int strongest_extension_strength = -1;\n        for (int i = 0; i < extensions_sorted.size();\
    \ i++) {\n            if (extensions_sorted.get(i).equals(strongest_extension))\
    \ {\n                strongest_extension_strength = i;\n            }\n      \
    \  }\n        if (strongest_extension_strength == -1) {\n            return class_name;\n\
    \        }\n        int extension_strength = extensions_sorted.get(strongest_extension_index).length()\
    \ - extensions_sorted.get(strongest_extension_index).replaceAll(\"[^A-Z]\", \"\
    \").length();\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            return class_name + \".\" + strongest_extension;\n        }\n\
    \        return class_name + \".\" + extensions_sorted.get(strongest_extension_index);",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest_extension\
    \ = -1;\n        for (String extension : extensions_sorted) {\n            int\
    \ extension_strength = extension.substring(extension.indexOf('C') - 1, extension.indexOf('C')).charAt(0)\
    \ - extension.substring(extension.indexOf('S') - 1, extension.indexOf('S')).charAt(0);\n\
    \            if (extension_strength > strongest_extension) {\n               \
    \ strongest_extension = extension_strength;\n            }\n        }\n      \
    \  return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);", "        double max_strength = -1;\n        double max_index = -1;\n\
    \        double max_extension_length = -1;\n        double max_extension_class\
    \ = -1;\n        double max_extension_class_length = -1;\n        double max_extension_class_name\
    \ = -1;\n        double max_extension_class_name_length = -1;\n        double\
    \ max_extension_class_name_class = -1;\n        double max_extension_class_name_class_length\
    \ = -1;\n        double max_extension_class_name_class_name = -1;\n        double\
    \ max_extension_class_name_class_name_length = -1;\n        double max_extension_class_name_class_name_class\
    \ = -1;\n        double max_extension_class_name_class_name_class_length = -1;\n\
    \        double max_extension_class_name_class_name_class_name = -1;\n       \
    \ double max_extension_class_name_class_name_class_name_length = -1;\n       \
    \ double max_extension_class_name_class_name_class_name_class = -1;\n        double\
    \ max_extension_class_name_class_name_class_name_class_length = -1;\n        double\
    \ max_extension_class_name_class_name_class_name_class_name = -1;\n        double\
    \ max_extension_class_name_class_name_class_name_class_name_length = -1;\n   \
    \     double max_extension_class_name_class_name_class_name_class_name_class =\
    \ -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_length\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_length\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class_name_length\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_length\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_length\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_length\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class\
    \ = -1;\n        double max_extension_class_name_", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        String strongest_extension = null;\n \
    \       for (String extension : extensions_sorted) {\n            int cap = extension.substring(0,1).length();\n\
    \            int sm = extension.substring(1,2).length();\n            double fraction\
    \ = cap - sm;\n            if (strength == -1 || fraction > strength) {\n    \
    \            strength = fraction;\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest = -1;\n \
    \       String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.matches(\"[A-Z]+\").length()\
    \ - extension.matches(\"[a-z]+\").length();\n            if (extension_strength\
    \ > strongest) {\n                strongest = extension_strength;\n          \
    \      strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = extensions_sorted.size();\n        if (strength > 0)\
    \ {\n            String extension = extensions_sorted.get(0);\n            String\
    \ extension_class = class_name + \".\" + extension;\n            return extension_class;\n\
    \        }\n        return class_name;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest_extension_index = extensions_sorted.size() - 1;\n     \
    \   String strongest_extension = extensions_sorted.get(strongest_extension_index);\n\
    \        String class_name_with_strongest_extension = class_name + \".\" + strongest_extension;\n\
    \        return class_name_with_strongest_extension;", "        double strength\
    \ = 0;\n        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength += (cap - sm);\n        }\n        double maxStrength = strength;\n\
    \        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength += (cap - sm);\n            if(strength > maxStrength) {\n   \
    \             maxStrength = strength;\n            }\n        }\n        for(String\
    \ extension : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            strength +=\
    \ (cap - sm);\n            if(strength == maxStrength) {\n                return\
    \ class_name + \".\" + extension;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions.get(0);", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        for(String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0, 1).length();\n            int\
    \ sm = extension.substring(1).length();\n            strength = Math.max(strength,\
    \ cap - sm);\n        }\n        return class_name + \".\" + extensions.get(extensions_sorted.indexOf(extensions_sorted.stream().max(Comparator.comparingInt(s\
    \ -> s.length())).orElse(null)))", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        double max_strength = -1;\n        String\
    \ strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            try {\n                Class<?> clazz = Class.forName(class_name\
    \ + extension);\n                Field field = clazz.getDeclaredField(\"strength\"\
    );\n                field.setAccessible(true);\n                strength = (Double)\
    \ field.get(clazz);\n                if (strength > max_strength) {\n        \
    \            max_strength = strength;\n                    strongest_extension\
    \ = class_name + extension;\n                }\n            } catch (Exception\
    \ e) {\n                e.printStackTrace();\n            }\n        }\n     \
    \   return strongest_extension;", "        double strength = 0;\n        for(String\
    \ extension : extensions) {\n            int cap = extension.substring(0,1).length();\n\
    \            int sm = extension.substring(1,2).length();\n            strength\
    \ += cap - sm;\n        }\n        double maxStrength = Double.MIN_VALUE;\n  \
    \      for(String extension : extensions) {\n            int cap = extension.substring(0,1).length();\n\
    \            int sm = extension.substring(1,2).length();\n            double strength\
    \ = cap - sm;\n            if(strength > maxStrength) {\n                maxStrength\
    \ = strength;\n            }\n        }\n        double strengthRatio = maxStrength\
    \ / strength;\n        double strengthRatio2 = strengthRatio * strengthRatio;\n\
    \        double strengthRatio3 = strengthRatio2 * strengthRatio;\n        double\
    \ strengthRatio4 = strengthRatio3 * strengthRatio;\n        double strengthRatio5\
    \ = strengthRatio4 * strengthRatio;\n        double strengthRatio6 = strengthRatio5\
    \ * strengthRatio;\n        double strengthRatio7 = strengthRatio6 * strengthRatio;\n\
    \        double strengthRatio8 = strengthRatio7 * strengthRatio;\n        double\
    \ strengthRatio9 = strengthRatio8 * strengthRatio;\n        double strengthRatio10\
    \ = strengthRatio9 * strengthRatio;\n        double strengthRatio11 = strengthRatio10\
    \ * strengthRatio;\n        double strengthRatio12 = strengthRatio11 * strengthRatio;\n\
    \        double strengthRatio13 = strengthRatio12 * strengthRatio;\n        double\
    \ strengthRatio14 = strengthRatio13 * strengthRatio;\n        double strengthRatio15\
    \ = strengthRatio14 * strengthRatio;\n        double strengthRatio16 = strengthRatio15\
    \ * strengthRatio;\n        double strengthRatio17 = strengthRatio16 * strengthRatio;\n\
    \        double strengthRatio18 = strengthRatio17 * strengthRatio;\n        double\
    \ strengthRatio19 = strengthRatio18 * strengthRatio;\n        double strengthRatio20\
    \ = strengthRatio19 * strengthRatio;\n        double strengthRatio21 = strengthRatio20\
    \ * strengthRatio;\n        double strengthRatio22 = strengthRatio21 * strengthRatio;\n\
    \        double strengthRatio23 = strengthRatio22 * strengthRatio;\n        double\
    \ strengthRatio24 = strengthRatio23 * strengthRatio;\n        double strengthRatio25\
    \ = strengthRatio24 * strengthRatio;\n        double strengthRatio26 = strengthRatio25\
    \ * strengthRatio;\n        double strengthRatio27 = strengthRatio26 * strengthRatio;\n\
    \        double strengthRatio28 = strengthRatio27 * strengthRatio;\n        double\
    \ strengthRatio29 = strengthRatio28 * strengthRatio;\n        double strengthRatio30\
    \ = ", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = 0;\n\
    \        for (String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).toUpperCase().length();\n            int sm = extension.substring(0, 1).toLowerCase().length();\n\
    \            strength += (cap - sm);\n        }\n        double strength_sorted\
    \ = strength;\n        Collections.sort(extensions_sorted);\n        int i = 0;\n\
    \        for (String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).toUpperCase().length();\n            int sm = extension.substring(0, 1).toLowerCase().length();\n\
    \            if (cap - sm == strength_sorted) {\n                return class_name\
    \ + \".\" + extension;\n            }\n            i++;\n        }\n        return\
    \ class_name + \".\" + extensions_sorted.get(0);", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_length = extension.length();\n            int extension_strength\
    \ = extension_length - extension.substring(extension_length - 1).matches(\"[A-Z]\"\
    ).length();\n            if (extension_strength > strength) {\n              \
    \  strength = extension_strength;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions_sorted.get(extensions_sorted.size() - 1);", "        double\
    \ strength = -1;\n        double maxStrength = -1;\n        for(String extension\
    \ : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            strength =\
    \ (cap - sm) / cap;\n            if(strength > maxStrength) {\n              \
    \  maxStrength = strength;\n            }\n        }\n        for(String extension\
    \ : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            strength =\
    \ (cap - sm) / cap;\n            if(strength == maxStrength) {\n             \
    \   return class_name + \".\" + extension;\n            }\n        }\n       \
    \ return class_name + \".\" + extensions.get(0);", "        \n        \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = -1;\n  \
    \      for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.matches(\"[A-Z]+\").length() - extension.matches(\"[a-z]+\").length();\n\
    \            if (strength < 0 || strength > extension_strength) {\n          \
    \      strength = extension_strength;\n            }\n        }\n        return\
    \ class_name + \".\" + extensions_sorted.get(extensions_sorted.size() - 1);",
  "        ArrayList<Integer> strengths = new ArrayList<>();\n        for(String extension\
    \ : extensions) {\n            int strength = extension.substring(0, 1).replaceAll(\"\
    \\\\p{Upper}\", \"\").replaceAll(\"\\\\p{Lower}\", \"\").length() - extension.substring(1).replaceAll(\"\
    \\\\p{Upper}\", \"\").replaceAll(\"\\\\p{Lower}\", \"\").length();\n         \
    \   strengths.add(strength);\n        }\n        Collections.sort(strengths);\n\
    \        int strongest = strengths.get(0);\n        for(String extension : extensions)\
    \ {\n            int strength = extension.substring(0, 1).replaceAll(\"\\\\p{Upper}\"\
    , \"\").replaceAll(\"\\\\p{Lower}\", \"\").length() - extension.substring(1).replaceAll(\"\
    \\\\p{Upper}\", \"\").replaceAll(\"\\\\p{Lower}\", \"\").length();\n         \
    \   if(strength == strongest) {\n                return class_name + \".\" + extension;\n\
    \            }\n        }\n        return class_name + \".\" + extensions.get(0);",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest = -1;\n \
    \       String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_length = extension.length();\n            int extension_strength\
    \ = extension_length - extension.substring(extension_length - 1).length();\n \
    \           if (extension_strength > strongest) {\n                strongest =\
    \ extension_strength;\n                strongest_extension = extension;\n    \
    \        }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        double max_strength = -1;\n        String strongest_extension = null;\n\
    \        for (String extension : extensions) {\n            double extension_strength\
    \ = extension.matches(\"[A-Z]+\").length() - extension.matches(\"[a-z]+\").length();\n\
    \            if (extension_strength > max_strength) {\n                max_strength\
    \ = extension_strength;\n                strongest_extension = extension;\n  \
    \          }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        double strength = -1;\n        double maxStrength = -1;\n        double\
    \ minStrength = -1;\n        double sum = 0;\n        double average = 0;\n  \
    \      double max = 0;\n        double min = Double.MAX_VALUE;\n        double\
    \ sumOfSquares = 0;\n        double averageOfSquares = 0;\n        double maxOfSquares\
    \ = 0;\n        double minOfSquares = 0;\n        double sumOfSquareOfDifferences\
    \ = 0;\n        double averageOfSquareOfDifferences = 0;\n        double maxOfSquareOfDifferences\
    \ = 0;\n        double minOfSquareOfDifferences = 0;\n        double sumOfDifferences\
    \ = 0;\n        double averageOfDifferences = 0;\n        double maxOfDifferences\
    \ = 0;\n        double minOfDifferences = 0;\n        double sumOfSquaresOfDifferences\
    \ = 0;\n        double averageOfSquaresOfDifferences = 0;\n        double maxOfSquaresOfDifferences\
    \ = 0;\n        double minOfSquaresOfDifferences = 0;\n        double sumOfDifferencesOfDifferences\
    \ = 0;\n        double averageOfDifferencesOfDifferences = 0;\n        double\
    \ maxOfDifferencesOfDifferences = 0;\n        double minOfDifferencesOfDifferences\
    \ = 0;\n        double sumOfSquaresOfDifferencesOfDifferences = 0;\n        double\
    \ averageOfSquaresOfDifferencesOfDifferences = 0;\n        double maxOfSquaresOfDifferencesOfDifferences\
    \ = 0;\n        double minOfSquaresOfDifferencesOfDifferences = 0;\n        double\
    \ sumOfDifferencesOfDifferencesOfDifferences = 0;\n        double averageOfDifferencesOfDifferencesOfDifferences\
    \ = 0;\n        double maxOfDifferencesOfDifferencesOfDifferences = 0;\n     \
    \   double minOfDifferencesOfDifferencesOfDifferences = 0;\n        double sumOfSquaresOfDifferencesOfDifferencesOfDifferences\
    \ = 0;\n        double averageOfSquaresOfDifferencesOfDifferencesOfDifferences\
    \ = 0;\n        double maxOfSquaresOfDifferencesOfDifferencesOfDifferences = 0;\n\
    \        double minOfSquaresOfDifferencesOfDifferencesOfDifferences = 0;\n   \
    \     double sumOfDifferencesOfDifferencesOfDifferencesOfDifferences = 0;\n  \
    \      double averageOfDifferencesOfDifferencesOfDifferencesOfDifferences = 0;\n\
    \        double maxOfDifferencesOfDifferencesOfDifferencesOfDifferences = 0;\n\
    \        double minOfDifferencesOfDifferencesOfDifferencesOfDifferences = 0;\n\
    \        double sumOfSquaresOfDifferencesOfDifferencesOfDifferencesOfDifferences\
    \ = 0;\n        double averageOfSquaresOfDifferencesOfDifferencesOfDifferencesOfDifferences\
    \ = 0;\n        double maxOfSquaresOfDifferencesOfDifferencesOfDifferencesOfDifferences\
    \ = 0;\n        double minOfSqu", "        double strength = -1;\n        double\
    \ maxStrength = -1;\n        double maxExtension = -1;\n        for (String extension\
    \ : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            double extensionStrength\
    \ = (double) cap - sm;\n            if (extensionStrength > maxStrength) {\n \
    \               maxStrength = extensionStrength;\n                maxExtension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ maxExtension;", "        double strength = 0;\n        double maxStrength =\
    \ 0;\n        double minStrength = Double.MAX_VALUE;\n        double maxExtension\
    \ = 0;\n        double minExtension = Double.MAX_VALUE;\n        for (String extension\
    \ : extensions) {\n            double extensionStrength = Double.parseDouble(extension.substring(extension.lastIndexOf(\"\
    _\")+1));\n            if (extensionStrength > maxStrength) {\n              \
    \  maxStrength = extensionStrength;\n                maxExtension = Double.parseDouble(extension.substring(0,extension.lastIndexOf(\"\
    _\")));\n            }\n            if (extensionStrength < minStrength) {\n \
    \               minStrength = extensionStrength;\n                minExtension\
    \ = Double.parseDouble(extension.substring(0,extension.lastIndexOf(\"_\")));\n\
    \            }\n        }\n        double strengthRatio = maxStrength / minStrength;\n\
    \        double extensionRatio = maxExtension / minExtension;\n        if (strengthRatio\
    \ > extensionRatio) {\n            return class_name + \".\" + extensions.get(0);\n\
    \        }\n        return class_name + \".\" + extensions.get(1);", "       \
    \ ArrayList<Integer> strengths = new ArrayList<Integer>();\n        for(int i\
    \ = 0; i < extensions.size(); i++) {\n            String extension = extensions.get(i);\n\
    \            int length = extension.length();\n            int cap = length /\
    \ 2;\n            int sm = length - cap;\n            strengths.add(cap - sm);\n\
    \        }\n        Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for(int i = 0; i < strengths.size(); i++) {\n            if(strengths.get(i)\
    \ == strongest) {\n                strongest = i;\n            }\n        }\n\
    \        return class_name + \".\" + extensions.get(strongest);", "        Set<String>\
    \ extensions_set = new HashSet<String>(extensions);\n        extensions_set.removeAll(Arrays.asList(class_name));\n\
    \        extensions_set.removeAll(Arrays.asList(class_name.substring(class_name.length()\
    \ - 1)));\n        extensions_set.removeAll(Arrays.asList(class_name.substring(class_name.length()\
    \ - 2)));\n        extensions_set.removeAll(Arrays.asList(class_name.substring(class_name.length()\
    \ - 3)));\n        extensions_set.removeAll(Arrays.asList(class_name.substring(class_name.length()\
    \ - 4)));\n        extensions_set.removeAll(Arrays.asList(class_name.substring(class_name.length()\
    \ - 5)));\n        extensions_set.removeAll(Arrays.asList(class_name.substring(class_name.length()\
    \ - 6)));\n        extensions_set.removeAll(Arrays.asList(class_name.substring(class_name.length()\
    \ - 7)));\n        extensions_set.removeAll(Arrays.asList(class_name.substring(class_name.length()\
    \ - 8)));\n        extensions_set.removeAll(Arrays.asList(class_name.substring(class_name.length()\
    \ - 9)));\n        extensions_set.removeAll(Arrays.asList(class_name.substring(class_name.length()\
    \ - 10)));\n        extensions_set.removeAll(Arrays.asList(class_name.substring(class_name.length()\
    \ - 11)));\n        extensions_set.removeAll(Arrays.asList(class_name.substring(class_name.length()\
    \ - 12)));\n        extensions_set.removeAll(Arrays.asList(class_name.substring(class_name.length()\
    \ - 13)));\n        extensions_set.removeAll(Arrays.asList(class_name.substring(class_name.length()\
    \ - 14)));\n        extensions_set.removeAll(Arrays.asList(class_name.substring(class_name.length()\
    \ - 15)));\n        extensions_set.removeAll(Arrays.asList(class_name.substring(class_name.length()\
    \ - 16)));\n        extensions_set.removeAll(Arrays.asList(class_name.substring(class_name.length()\
    \ - 17)));\n        extensions_set.removeAll(Arrays.asList(class_name.substring(class_name.length()\
    \ - 18)));\n        extensions_set.removeAll(Arrays.asList(class_name.substring(class_name.length()\
    \ - 19)));\n        extensions_set.removeAll(Arrays.asList(class_name.substring(class_name.length()\
    \ - 20)));\n        extensions_set.removeAll(Arrays.asList(class_name.substring(class_name.length()\
    \ - 21)));\n        extensions_set.removeAll(Arrays.asList(class_name.substring(class_name.length()\
    \ - 22)));\n        extensions_set.removeAll(Arrays.asList(class_name.substring(class_name.length()\
    \ - 23)));\n        extensions_set.removeAll(Arrays.asList(class_name.substring(class_name.length()\
    \ - 24)));\n        ", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = -1;\n  \
    \      String strongest = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_length = extension.length();\n            int extension_cap\
    \ = extension_length / 2;\n            int extension_sm = (extension_length -\
    \ extension_cap) / 2;\n            int strength_extension_cap = extension_cap\
    \ - extension_sm;\n            int strength_extension_sm = extension_sm - extension_cap;\n\
    \            if (strength_extension_cap == strength_extension_sm) {\n        \
    \        strength = strength_extension_cap;\n                strongest = extension;\n\
    \            }\n        }\n        if (strength == -1) {\n            throw new\
    \ RuntimeException(\"No extensions found\");\n        }\n        return class_name\
    \ + \".\" + strongest;", "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.get(0).getClass().getSimpleName().toUpperCase().replaceAll(\"\
    [^A-Z]\", \"\").length() - extensions_sorted.get(1).getClass().getSimpleName().toUpperCase().replaceAll(\"\
    [^A-Z]\", \"\").length();\n        double strength_sum = 0;\n        for(int i\
    \ = 0; i < extensions_sorted.size(); i++) {\n            strength_sum += extensions_sorted.get(i).getClass().getSimpleName().toUpperCase().replaceAll(\"\
    [^A-Z]\", \"\").length();\n        }\n        double strength_avg = strength_sum\
    \ / extensions_sorted.size();\n        double strength_min = strength;\n     \
    \   for(int i = 0; i < extensions_sorted.size(); i++) {\n            if(strength_sum\
    \ > strength_avg) {\n                strength_min = strength_sum;\n          \
    \      break;\n            }\n            strength_sum += extensions_sorted.get(i).getClass().getSimpleName().toUpperCase().replaceAll(\"\
    [^A-Z]\", \"\").length();\n        }\n        double strength_max = strength;\n\
    \        for(int i = 0; i < extensions_sorted.size(); i++) {\n            if(strength_sum\
    \ < strength_avg) {\n                strength_max = strength_sum;\n          \
    \      break;\n            }\n            strength_sum += extensions_sorted.get(i).getClass().getSimpleName().toUpperCase().replaceAll(\"\
    [^A-Z]\", \"\").length();\n        }\n        double strength_median = strength;\n\
    \        for(int i = 0; i < extensions_sorted.size(); i++) {\n            if(strength_sum\
    \ == strength_avg) {\n                strength_median = strength_sum;\n      \
    \          break;\n            }\n            strength_sum += extensions_sorted.get(i).getClass().getSimpleName().toUpperCase().replaceAll(\"\
    [^A-Z]\", \"\").length();\n        }\n        double strength_mode = strength;\n\
    \        for(int i = 0; i < extensions_sorted.size(); i++) {\n            if(strength_sum\
    \ == strength_min) {\n                strength_mode = strength_sum;\n        \
    \        break;\n            }\n            strength_sum += extensions_sorted.get(i).getClass().getSimpleName().toUpperCase().replaceAll(\"\
    [^A-Z]\", \"\").length();\n        }\n        double strength_std = strength;\n\
    \        for(int i = 0; i < extensions_sorted.size(); i++) {\n            double\
    \ diff = extensions_sorted.get(i).getClass().getSimpleName().toUpperCase().replaceAll(\"\
    [^A-Z]\", \"\").length() - strength_sum;\n            strength_std = Math.sqrt(diff\
    \ * diff);\n        }\n        double strength_", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0, 1).length();\n            int\
    \ sm = extension.substring(1).length();\n            double frac = cap - sm;\n\
    \            if (strength == -1 || frac > strength) {\n                strength\
    \ = frac;\n            }\n        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);", "        ArrayList<Integer> strengths = new ArrayList<Integer>();\n\
    \        for(String extension : extensions) {\n            int strength = extension.substring(0,\
    \ 1).replaceAll(\"[^A-Z]\", \"\").length() - extension.substring(0, 1).replaceAll(\"\
    [^a-z]\", \"\").length();\n            strengths.add(strength);\n        }\n \
    \       Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for(Integer strength : strengths) {\n            if(strength == strongest)\
    \ {\n                strongest = strength;\n            }\n        }\n       \
    \ return class_name + \".\" + extensions.get(strengths.indexOf(strongest));",
  "        \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n", "        \n        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        \n        double strength = 0;\n        \n        for(int i = 0; i <\
    \ extensions_sorted.size(); i++) {\n            String extension = extensions_sorted.get(i);\n\
    \            \n            int cap = extension.length();\n            int sm =\
    \ extension.toUpperCase().length();\n            \n            strength += (cap\
    \ - sm);\n        }\n        \n        double strength_sorted = strength;\n  \
    \      \n        for(int i = 0; i < extensions_sorted.size(); i++) {\n       \
    \     String extension = extensions_sorted.get(i);\n            \n           \
    \ int cap = extension.length();\n            int sm = extension.toUpperCase().length();\n\
    \            \n            strength_sorted -= (cap - sm);\n        }\n       \
    \ \n        if(strength_sorted < 0) {\n            strength_sorted = -strength_sorted;\n\
    \        }\n        \n        double strength_sorted_sorted = strength_sorted;\n\
    \        \n        for(int i = 0; i < extensions_sorted.size(); i++) {\n     \
    \       String extension = extensions_sorted.get(i);\n            \n         \
    \   int cap = extension.length();\n            int sm = extension.toUpperCase().length();\n\
    \            \n            strength_sorted_sorted -= (cap - sm);\n        }\n\
    \        \n        if(strength_sorted_sorted < 0) {\n            strength_sorted_sorted\
    \ = -strength_sorted_sorted;\n        }\n        \n        double strength_sorted_sorted_sorted\
    \ = strength_sorted_sorted;\n        \n        for(int i = 0; i < extensions_sorted.size();\
    \ i++) {\n            String extension = extensions_sorted.get(i);\n         \
    \   \n            int cap = extension.length();\n            int sm = extension.toUpperCase().length();\n\
    \            \n            strength_sorted_sorted_sorted -= (cap - sm);\n    \
    \    }\n        \n        if(strength_sorted_sorted_sorted < 0) {\n          \
    \  strength_sorted_sorted_sorted = -strength_sorted_sorted_sorted;\n        }\n\
    \        \n        double strength_sorted_sorted_sorted_sorted = strength_sorted_sorted_sorted;\n\
    \        \n        for(int i = 0; i < extensions_sorted.size(); i++) {\n     \
    \       String extension = extensions_sorted.get(i);\n            \n         \
    \   int cap = extension.length();\n            int sm = extension.toUpperCase().length();\n\
    \            \n            strength_sorted_sorted_sorted_sorted -= (cap - sm);\n\
    \        }\n        \n        if(strength_sorted_sorted_sorted_sorted < 0) {\n\
    \            strength_sorted_sorted_sorted_sorted = -strength_sorted_sorted_sorted_sorted;\n\
    \        }\n        \n        double strength_sorted_sorted_sorted_sorted_sorted\
    \ = strength_sorted_sorted_sorted_sorted;\n        \n        for(int i = 0; i\
    \ < extensions_sorted.size(); i++) {", "        double strength = -1;\n      \
    \  double maxStrength = -1;\n        double maxExtensionStrength = -1;\n     \
    \   for(String extension : extensions) {\n            String extensionName = extension.substring(0,1).toUpperCase()\
    \ + extension.substring(1);\n            int extensionStrength = extension.substring(1).toLowerCase().length();\n\
    \            strength += extensionStrength;\n            if(strength > maxStrength)\
    \ {\n                maxStrength = strength;\n                maxExtensionStrength\
    \ = extensionStrength;\n            }\n        }\n        if(maxStrength == -1)\
    \ {\n            return class_name;\n        }\n        double maxExtensionStrengthPercentage\
    \ = maxExtensionStrength / maxStrength;\n        double maxExtensionStrengthPercentageRounded\
    \ = Math.round(maxExtensionStrengthPercentage*100);\n        double maxExtensionStrengthPercentageRounded2\
    \ = maxExtensionStrengthPercentageRounded / 100;\n        double maxExtensionStrengthPercentageRounded3\
    \ = maxExtensionStrengthPercentageRounded2 / 100;\n        double maxExtensionStrengthPercentageRounded4\
    \ = maxExtensionStrengthPercentageRounded3 / 100;\n        double maxExtensionStrengthPercentageRounded5\
    \ = maxExtensionStrengthPercentageRounded4 / 100;\n        double maxExtensionStrengthPercentageRounded6\
    \ = maxExtensionStrengthPercentageRounded5 / 100;\n        double maxExtensionStrengthPercentageRounded7\
    \ = maxExtensionStrengthPercentageRounded6 / 100;\n        double maxExtensionStrengthPercentageRounded8\
    \ = maxExtensionStrengthPercentageRounded7 / 100;\n        double maxExtensionStrengthPercentageRounded9\
    \ = maxExtensionStrengthPercentageRounded8 / 100;\n        double maxExtensionStrengthPercentageRounded10\
    \ = maxExtensionStrengthPercentageRounded9 / 100;\n        double maxExtensionStrengthPercentageRounded11\
    \ = maxExtensionStrengthPercentageRounded10 / 100;\n        double maxExtensionStrengthPercentageRounded12\
    \ = maxExtensionStrengthPercentageRounded11 / 100;\n        double maxExtensionStrengthPercentageRounded13\
    \ = maxExtensionStrengthPercentageRounded12 / 100;\n        double maxExtensionStrengthPercentageRounded14\
    \ = maxExtensionStrengthPercentageRounded13 / 100;\n        double maxExtensionStrengthPercentageRounded15\
    \ = maxExtensionStrengthPercentageRounded14 / 100;\n        double maxExtensionStrengthPercentageRounded16\
    \ = maxExtensionStrengthPercentageRounded15 / 100;\n        double maxExtensionStrengthPercentageRounded17\
    \ = maxExtension", "        double strength = -1;\n        double maxStrength\
    \ = -1;\n        double maxExtensionStrength = -1;\n        double maxExtensionName\
    \ = -1;\n        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      double extensionStrength = (double)cap - (double)sm;\n            if(extensionStrength\
    \ > maxExtensionStrength) {\n                maxExtensionStrength = extensionStrength;\n\
    \                maxExtensionName = extension;\n            }\n            if(extensionStrength\
    \ > strength) {\n                strength = extensionStrength;\n            }\n\
    \        }\n        return class_name + \".\" + maxExtensionName;", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strength = -1;\n        String strongest_extension = null;\n    \
    \    for (int i = 0; i < extensions_sorted.size(); i++) {\n            String\
    \ extension = extensions_sorted.get(i);\n            int extension_length = extension.length();\n\
    \            int extension_strength = extension_length - 1;\n            if (extension_strength\
    \ > strength) {\n                strength = extension_strength;\n            \
    \    strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        double strength = 0;\n\
    \        double maxStrength = 0;\n        double maxExtension = 0;\n        double\
    \ maxExtensionName = 0;\n        double maxExtensionNameLength = 0;\n        double\
    \ maxExtensionNameLength2 = 0;\n        double maxExtensionNameLength3 = 0;\n\
    \        double maxExtensionNameLength4 = 0;\n        double maxExtensionNameLength5\
    \ = 0;\n        double maxExtensionNameLength6 = 0;\n        double maxExtensionNameLength7\
    \ = 0;\n        double maxExtensionNameLength8 = 0;\n        double maxExtensionNameLength9\
    \ = 0;\n        double maxExtensionNameLength10 = 0;\n        double maxExtensionNameLength11\
    \ = 0;\n        double maxExtensionNameLength12 = 0;\n        double maxExtensionNameLength13\
    \ = 0;\n        double maxExtensionNameLength14 = 0;\n        double maxExtensionNameLength15\
    \ = 0;\n        double maxExtensionNameLength16 = 0;\n        double maxExtensionNameLength17\
    \ = 0;\n        double maxExtensionNameLength18 = 0;\n        double maxExtensionNameLength19\
    \ = 0;\n        double maxExtensionNameLength20 = 0;\n        double maxExtensionNameLength21\
    \ = 0;\n        double maxExtensionNameLength22 = 0;\n        double maxExtensionNameLength23\
    \ = 0;\n        double maxExtensionNameLength24 = 0;\n        double maxExtensionNameLength25\
    \ = 0;\n        double maxExtensionNameLength26 = 0;\n        double maxExtensionNameLength27\
    \ = 0;\n        double maxExtensionNameLength28 = 0;\n        double maxExtensionNameLength29\
    \ = 0;\n        double maxExtensionNameLength30 = 0;\n        double maxExtensionNameLength31\
    \ = 0;\n        double maxExtensionNameLength32 = 0;\n        double maxExtensionNameLength33\
    \ = 0;\n        double maxExtensionNameLength34 = 0;\n        double maxExtensionNameLength35\
    \ = 0;\n        double maxExtensionNameLength36 = 0;\n        double maxExtensionNameLength37\
    \ = 0;\n        double maxExtensionNameLength38 = 0;\n        double maxExtensionNameLength39\
    \ = 0;\n        double maxExtensionNameLength40 = 0;\n        double maxExtensionNameLength41\
    \ = 0;\n        double maxExtensionNameLength42 = 0;\n        double maxExtensionNameLength43\
    \ = 0;\n        double maxExtensionNameLength44 = 0;\n        double maxExtensionNameLength45\
    \ = 0;\n        double maxExtensionNameLength46 = 0;\n        double maxExtensionNameLength47\
    \ = 0;\n        double maxExtensionNameLength48 = 0;\n        double maxExtensionNameLength49\
    \ = 0;\n        double maxExtensionNameLength50 = 0;\n        double maxExtensionNameLength51\
    \ = 0;\n        double maxExtensionNameLength52 = 0;\n        double maxExtensionNameLength53\
    \ = 0;\n        double maxExtensionNameLength54 = 0;\n        double maxExtensionNameLength",
  "        ArrayList<Integer> strengths = new ArrayList<>();\n        for(String extension\
    \ : extensions) {\n            int strength = extension.substring(extension.indexOf('C')\
    \ - 1, extension.indexOf('S')).charAt(0) - extension.substring(extension.indexOf('C')\
    \ - 1, extension.indexOf('S')).charAt(1);\n            strengths.add(strength);\n\
    \        }\n        Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for(Integer strength : strengths) {\n            if(strength == strongest)\
    \ {\n                strongest = strength;\n            }\n        }\n       \
    \ return class_name + \".\" + extensions.get(strengths.indexOf(strongest));",
  "        double strength = 0;\n        double maxStrength = 0;\n        double maxExtension\
    \ = 0;\n        double maxExtensionIndex = 0;\n        double maxExtensionLength\
    \ = 0;\n        double maxExtensionName = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameLength = 0;\n        double maxExtensionNameLengthIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex",
  "        double strength = -1;\n        double maxStrength = -1;\n        for(String\
    \ extension : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            double fraction\
    \ = cap - sm;\n            strength += fraction;\n            if(strength > maxStrength)\
    \ {\n                maxStrength = strength;\n            }\n        }\n     \
    \   if(maxStrength == -1) {\n            return class_name;\n        }\n     \
    \   double strength_fraction = strength / maxStrength;\n        for(String extension\
    \ : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            double fraction\
    \ = cap - sm;\n            if(fraction == strength_fraction) {\n             \
    \   return class_name + \".\" + extension;\n            }\n        }\n       \
    \ return class_name;", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        double max_strength = -1;\n        for(String extension : extensions_sorted)\
    \ {\n            String extension_class = extension.substring(0, extension.indexOf(\"\
    .\"));\n            String extension_name = extension.substring(extension.indexOf(\"\
    .\")+1);\n            try {\n                Class<?> extension_class = Class.forName(extension_class);\n\
    \                Class<?> extension_class_extends = extension_class.getSuperclass();\n\
    \                Class<?> extension_class_extends_extends = extension_class_extends.getSuperclass();\n\
    \                Class<?> extension_class_extends_extends_extends = extension_class_extends_extends.getSuperclass();\n\
    \                Class<?> extension_class_extends_extends_extends_extends = extension_class_extends_extends_extends.getSuperclass();\n\
    \                Class<?> extension_class_extends_extends_extends_extends_extends\
    \ = extension_class_extends_extends_extends_extends.getSuperclass();\n       \
    \         Class<?> extension_class_extends_extends_extends_extends_extends_extends\
    \ = extension_class_extends_extends_extends_extends_extends.getSuperclass();\n\
    \                Class<?> extension_class_extends_extends_extends_extends_extends_extends_extends\
    \ = extension_class_extends_extends_extends_extends_extends_extends_extends.getSuperclass();\n\
    \                Class<?> extension_class_extends_extends_extends_extends_extends_extends_extends_extends\
    \ = extension_class_extends_extends_extends_extends_extends_extends_extends_extends_extends.getSuperclass();\n\
    \                Class<?> extension_class_extends_extends_extends_extends_extends_extends_extends_extends_extends\
    \ = extension_class_extends_extends_extends_extends_extends_extends_extends_extends_extends_extends.getSuperclass();\n\
    \                Class<?> extension_class_extends_extends_extends_extends_extends_extends_extends_extends_extends_extends\
    \ = extension_class_extends_extends_extends_extends_extends_extends_extends_extends_extends_extends_extends_extends.getSuperclass();\n\
    \                Class<?> extension_class_extends_extends_extends_extends_extends_extends_extends_extends_extends_extends_extends\
    \ = extension_class_extends_extends_extends_extends_extends_extends_extends_extends_extends_extends_extends_extends_extends.getSuperclass();\n\
    \                ", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest = -1;\n \
    \       String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_length = extension.length();\n            int extension_strength\
    \ = extension_length - extension.substring(extension_length - 1).length();\n \
    \           if (strongest < 0 || extension_strength > strongest) {\n         \
    \       strongest = extension_strength;\n                strongest_extension =\
    \ extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.get(0).getClass().getSimpleName().toUpperCase().replaceAll(\"\
    [^A-Z]\", \"\").length() - extensions_sorted.get(1).getClass().getSimpleName().toUpperCase().replaceAll(\"\
    [^A-Z]\", \"\").length();\n        if (extensions_sorted.size() > 2) {\n     \
    \       strength = extensions_sorted.get(1).getClass().getSimpleName().toUpperCase().replaceAll(\"\
    [^A-Z]\", \"\").length() - extensions_sorted.get(2).getClass().getSimpleName().toUpperCase().replaceAll(\"\
    [^A-Z]\", \"\").length();\n        }\n        return class_name + \".\" + extensions_sorted.get(0).getClass().getSimpleName()\
    \ + extensions_sorted.get(1).getClass().getSimpleName() + extensions_sorted.get(2).getClass().getSimpleName()\
    \ + extensions_sorted.get(3).getClass().getSimpleName() + extensions_sorted.get(4).getClass().getSimpleName()\
    \ + extensions_sorted.get(5).getClass().getSimpleName() + extensions_sorted.get(6).getClass().getSimpleName()\
    \ + extensions_sorted.get(7).getClass().getSimpleName() + extensions_sorted.get(8).getClass().getSimpleName()\
    \ + extensions_sorted.get(9).getClass().getSimpleName() + extensions_sorted.get(10).getClass().getSimpleName()\
    \ + extensions_sorted.get(11).getClass().getSimpleName() + extensions_sorted.get(12).getClass().getSimpleName()\
    \ + extensions_sorted.get(13).getClass().getSimpleName() + extensions_sorted.get(14).getClass().getSimpleName()\
    \ + extensions_sorted.get(15).getClass().getSimpleName() + extensions_sorted.get(16).getClass().getSimpleName()\
    \ + extensions_sorted.get(17).getClass().getSimpleName() + extensions_sorted.get(18).getClass().getSimpleName()\
    \ + extensions_sorted.get(19).getClass().getSimpleName() + extensions_sorted.get(20).getClass().getSimpleName()\
    \ + extensions_sorted.get(21).getClass().getSimpleName() + extensions_sorted.get(22).getClass().getSimpleName()\
    \ + extensions_sorted.get(23).getClass().getSimpleName() + extensions_sorted.get(24).getClass().getSimpleName()\
    \ + extensions_sorted.get(25).getClass().getSimpleName() + extensions_sorted.get(26).getClass().getSimpleName()\
    \ + extensions_sorted.get(27).getClass().get", "        double strength = -1;\n\
    \        double maxStrength = -1;\n        for(String extension : extensions)\
    \ {\n            int cap = extension.substring(0, 1).length();\n            int\
    \ sm = extension.substring(1).length();\n            double fraction = cap - sm;\n\
    \            strength += fraction;\n            if(strength > maxStrength) {\n\
    \                maxStrength = strength;\n            }\n        }\n        double\
    \ maxStrengthInt = maxStrength;\n        double maxStrengthDouble = maxStrengthInt;\n\
    \        if(maxStrengthInt < 0) {\n            maxStrengthDouble = maxStrengthInt\
    \ * -1;\n        }\n        for(String extension : extensions) {\n           \
    \ int cap = extension.substring(0, 1).length();\n            int sm = extension.substring(1).length();\n\
    \            double fraction = cap - sm;\n            strength += fraction;\n\
    \            if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n        }\n        double maxStrengthInt2 = maxStrength;\n   \
    \     double maxStrengthDouble2 = maxStrengthInt2;\n        if(maxStrengthInt2\
    \ < 0) {\n            maxStrengthDouble2 = maxStrengthInt2 * -1;\n        }\n\
    \        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      double fraction = cap - sm;\n            strength += fraction;\n      \
    \      if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n        }\n        double maxStrengthInt3 = maxStrength;\n   \
    \     double maxStrengthDouble3 = maxStrengthInt3;\n        if(maxStrengthInt3\
    \ < 0) {\n            maxStrengthDouble3 = maxStrengthInt3 * -1;\n        }\n\
    \        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      double fraction = cap - sm;\n            strength += fraction;\n      \
    \      if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n        }\n        double maxStrengthInt4 = maxStrength;\n   \
    \     double maxStrengthDouble4 = maxStrengthInt4;\n        if(maxStrengthInt4\
    \ < 0) {\n            maxStrengthDouble4 = maxStrengthInt4 * -1;\n        }\n\
    \        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      double fraction = cap - sm;\n            strength += fraction;\n      \
    \      if(strength > maxStrength", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = extensions_sorted.get(extensions_sorted.size() - 1).length()\
    \ - extensions_sorted.get(extensions_sorted.size() - 1).length();\n        String\
    \ extension = class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n        if (strength > 0) {\n            return extension;\n        }\n\
    \        if (extensions_sorted.size() > 1) {\n            double strength_2 =\
    \ extensions_sorted.get(extensions_sorted.size() - 2).length() - extensions_sorted.get(extensions_sorted.size()\
    \ - 1).length();\n            if (strength_2 > 0) {\n                return extension;\n\
    \            }\n        }\n        return \"\";", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0,1).length();\n            int\
    \ sm = extension.substring(1,2).length();\n            strength = strength + ((cap\
    \ - sm) / cap);\n        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.size();\n\
    \        if (strength > 0) {\n            String extension = extensions_sorted.get(strength-1);\n\
    \            String class_name_with_extension = class_name + \".\" + extension;\n\
    \            return class_name_with_extension;\n        }\n        return class_name;",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest_extension\
    \ = -1;\n        String strongest_extension_name = \"\";\n        for (int i =\
    \ 0; i < extensions_sorted.size(); i++) {\n            String extension = extensions_sorted.get(i);\n\
    \            int extension_strength = extension.substring(extension.length() -\
    \ 1).replaceAll(\"[^A-Z]\", \"\").length();\n            if (extension_strength\
    \ > strongest_extension) {\n                strongest_extension = extension_strength;\n\
    \                strongest_extension_name = extension;\n            }\n      \
    \  }\n        return class_name + \".\" + strongest_extension_name;", "      \
    \  double strength = -1;\n        double maxStrength = -1;\n        for (String\
    \ extension : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            double fraction\
    \ = cap - sm;\n            strength += fraction;\n            if (strength > maxStrength)\
    \ {\n                maxStrength = strength;\n            }\n        }\n     \
    \   if (maxStrength == -1) {\n            return class_name;\n        }\n    \
    \    double maxStrengthInt = maxStrength;\n        String maxStrengthExtension\
    \ = \"\";\n        for (String extension : extensions) {\n            int cap\
    \ = extension.substring(0, 1).length();\n            int sm = extension.substring(1).length();\n\
    \            double fraction = cap - sm;\n            if (fraction == maxStrengthInt)\
    \ {\n                maxStrengthExtension = extension;\n            }\n      \
    \  }\n        return class_name + \".\" + maxStrengthExtension;", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        String strongest_extension = null;\n \
    \       for (String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      double fraction = cap - sm;\n            if (strength == -1 || strength\
    \ > fraction) {\n                strength = fraction;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n", "        double\
    \ strength = 0;\n        double maxStrength = 0;\n        double maxExtension\
    \ = 0;\n        double maxExtensionIndex = 0;\n        double maxExtensionStrength\
    \ = 0;\n        double maxExtensionExtension = 0;\n        double maxExtensionExtensionIndex\
    \ = 0;\n        double maxExtensionExtensionStrength = 0;\n        double maxExtensionExtensionExtension\
    \ = 0;\n        double maxExtensionExtensionExtensionIndex = 0;\n        double\
    \ maxExtensionExtensionExtensionStrength = 0;\n        double maxExtensionExtensionExtensionExtension\
    \ = 0;\n        double maxExtensionExtensionExtensionIndex = 0;\n        double\
    \ maxExtensionExtensionExtensionStrength = 0;\n        double maxExtensionExtensionExtensionExtension\
    \ = 0;\n        double maxExtensionExtensionExtensionIndex = 0;\n        double\
    \ maxExtensionExtensionExtensionStrength = 0;\n        double maxExtensionExtensionExtensionExtension\
    \ = 0;\n        double maxExtensionExtensionExtensionIndex = 0;\n        double\
    \ maxExtensionExtensionExtensionStrength = 0;\n        double maxExtensionExtensionExtensionExtension\
    \ = 0;\n        double maxExtensionExtensionExtensionIndex = 0;\n        double\
    \ maxExtensionExtensionExtensionStrength = 0;\n        double maxExtensionExtensionExtensionExtension\
    \ = 0;\n        double maxExtensionExtensionExtensionIndex = 0;\n        double\
    \ maxExtensionExtensionExtensionStrength = 0;\n        double maxExtensionExtensionExtensionExtension\
    \ = 0;\n        double maxExtensionExtensionExtensionIndex = 0;\n        double\
    \ maxExtensionExtensionExtensionStrength = 0;\n        double maxExtensionExtensionExtensionExtension\
    \ = 0;\n        double maxExtensionExtensionExtensionIndex = 0;\n        double\
    \ maxExtensionExtensionExtensionStrength = 0;\n        double maxExtensionExtensionExtensionExtension\
    \ = 0;\n        double maxExtensionExtensionExtensionIndex = 0;\n        double\
    \ maxExtensionExtensionExtensionStrength = 0;\n        double maxExtensionExtensionExtensionExtension\
    \ = 0;\n        double maxExtensionExtensionExtensionIndex = 0;\n        double\
    \ maxExtensionExtensionExtensionStrength = 0;\n        double maxExtensionExtensionExtensionExtension\
    \ = 0;\n        double maxExtensionExtensionExtensionIndex = 0;\n        double\
    \ maxExtensionExtensionExtensionStrength = 0;\n        double maxExtensionExtensionExtensionExtension\
    \ = 0;\n        double maxExtensionExtensionExtensionIndex = 0;\n        double\
    \ maxExtensionExtensionExtensionStrength = 0;\n        double maxExtensionExtensionExtensionExtension\
    \ = 0;\n        double maxExtensionExtensionExtensionIndex = 0;\n        double\
    \ maxExtensionExtensionExtensionStrength = 0;\n        double maxExtensionExtensionExtensionExtension\
    \ = 0;\n        double maxExtensionExtensionExtensionIndex = 0;\n        double\
    \ maxExtensionExtensionExtensionStrength = 0;\n        double maxExtensionExtensionExtensionExtension\
    \ = 0;\n        double maxExtensionExtensionExtensionIndex = 0;\n        double\
    \ maxExtensionExtensionExtensionStrength = 0;\n        double maxExtensionExtensionExtensionExtension\
    \ = 0;\n        double maxExtensionExtensionExtensionIndex = 0;\n        double\
    \ maxExtensionExtensionExtensionStrength = 0;\n        double maxExtensionExtensionExtensionExtension\
    \ = 0;", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        double max_strength = -1;\n        for(String extension : extensions_sorted)\
    \ {\n            double extension_strength = extension.length();\n           \
    \ if(extension_strength > max_strength) {\n                max_strength = extension_strength;\n\
    \                strength = extension_strength;\n            }\n        }\n  \
    \      if(strength == -1) {\n            return class_name;\n        }\n     \
    \   double strength_fraction = strength / max_strength;\n        double extension_fraction\
    \ = extensions_sorted.size() / extensions_sorted.size();\n        if(strength_fraction\
    \ > extension_fraction) {\n            return class_name + \".\" + extensions_sorted.get(0);\n\
    \        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        for (String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength = (double)cap - (double)sm;\n            if (strength > 0) {\n\
    \                return class_name + \".\" + extension;\n            }\n     \
    \   }\n        return class_name;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest = -1;\n        String strongest_extension = null;\n   \
    \     for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.substring(extension.indexOf('C') + 1).length();\n            if\
    \ (extension_strength > strongest) {\n                strongest = extension_strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = extensions_sorted.get(extensions_sorted.size() - 1).length()\
    \ - extensions_sorted.get(extensions_sorted.size() - 1).length();\n        double\
    \ strength_of_class = class_name.substring(class_name.lastIndexOf('.')+1).length();\n\
    \        double strength_of_extension = extensions_sorted.get(extensions_sorted.size()\
    \ - 1).length();\n        double strength_of_extension_of_class = extensions_sorted.get(extensions_sorted.size()\
    \ - 1).substring(extensions_sorted.get(extensions_sorted.size() - 1).lastIndexOf('.')+1).length();\n\
    \        if (strength_of_extension_of_class < strength_of_extension) {\n     \
    \       strength = strength_of_extension_of_class;\n        }\n        if (strength_of_class\
    \ < strength) {\n            strength = strength_of_class;\n        }\n      \
    \  if (strength_of_extension < strength) {\n            strength = strength_of_extension;\n\
    \        }\n        if (strength_of_extension < strength_of_class) {\n       \
    \     strength = strength_of_extension;\n        }\n        if (strength_of_extension\
    \ < strength_of_extension_of_class) {\n            strength = strength_of_extension;\n\
    \        }\n        if (strength_of_extension < strength_of_extension_of_class)\
    \ {\n            strength = strength_of_extension;\n        }\n        if (strength_of_extension\
    \ < strength_of_extension_of_class) {\n            strength = strength_of_extension;\n\
    \        }\n        if (strength_of_extension < strength_of_extension_of_class)\
    \ {\n            strength = strength_of_extension;\n        }\n        if (strength_of_extension\
    \ < strength_of_extension_of_class) {\n            strength = strength_of_extension;\n\
    \        }\n        if (strength_of_extension < strength_of_extension_of_class)\
    \ {\n            strength = strength_of_extension;\n        }\n        if (strength_of_extension\
    \ < strength_of_extension_of_class) {\n            strength = strength_of_extension;\n\
    \        }\n        if (strength_of_extension < strength_of_extension_of_class)\
    \ {\n            strength = strength_of_extension;\n        }\n        if (strength_of_extension\
    \ < strength_of_extension_of_class) {\n            strength = strength_of_extension;\n\
    \        }\n        if (strength_of_extension < strength_of_extension_of_class)\
    \ {\n            strength = strength_of_extension;\n        }\n        if (strength_of_extension\
    \ < strength_of_extension_of_class) {\n            strength = strength_", "  \
    \      double strength = -1;\n        double maxStrength = -1;\n        double\
    \ minStrength = Double.MAX_VALUE;\n        for (String extension : extensions)\
    \ {\n            int cap = extension.substring(0, 1).toUpperCase().length();\n\
    \            int sm = extension.substring(0, 1).toLowerCase().length();\n    \
    \        double d = (cap - sm) / cap;\n            if (strength == -1 || d > strength)\
    \ {\n                strength = d;\n                maxStrength = strength;\n\
    \                minStrength = Double.MAX_VALUE;\n            }\n            if\
    \ (d < minStrength) {\n                minStrength = d;\n            }\n     \
    \   }\n        if (maxStrength == -1) {\n            return class_name;\n    \
    \    }\n        double strengthRatio = strength / maxStrength;\n        int maxStrengthIndex\
    \ = -1;\n        for (int i = 0; i < extensions.size(); i++) {\n            double\
    \ d = extensions.get(i).substring(0, 1).toUpperCase().length();\n            int\
    \ cap = extensions.get(i).substring(0, 1).toUpperCase().length();\n          \
    \  int sm = extensions.get(i).substring(0, 1).toLowerCase().length();\n      \
    \      double d = (cap - sm) / cap;\n            if (strengthRatio == d || d >\
    \ strengthRatio) {\n                maxStrengthIndex = i;\n            }\n   \
    \     }\n        if (maxStrengthIndex == -1) {\n            return class_name;\n\
    \        }\n        return class_name + \".\" + extensions.get(maxStrengthIndex);",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest = -1;\n \
    \       for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.substring(extension.lastIndexOf(\"_\")+1).length();\n          \
    \  if (extension_strength > strongest) {\n                strongest = extension_strength;\n\
    \            }\n        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()-1);",
  "        ArrayList<Integer> strengths = new ArrayList<Integer>();\n        for(String\
    \ ext : extensions) {\n            int strength = ext.replaceAll(\"[^A-Z]\", \"\
    \").length() - ext.replaceAll(\"[^a-z]\", \"\").length();\n            strengths.add(strength);\n\
    \        }\n        Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for(Integer strength : strengths) {\n            if(strength == strongest)\
    \ {\n                return class_name + \".\" + extensions.get(strength);\n \
    \           }\n        }\n        return class_name;", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = 0;\n        double maxStrength = 0;\n        for (String\
    \ extension : extensions_sorted) {\n            String extension_class = extension.substring(0,\
    \ extension.indexOf(\".\"));\n            try {\n                Class<?> clazz\
    \ = Class.forName(extension_class);\n                Method method = clazz.getMethod(\"\
    strength\", null);\n                strength = (Double) method.invoke(clazz, null);\n\
    \            } catch (ClassNotFoundException | NoSuchMethodException | SecurityException\
    \ | IllegalAccessException | IllegalArgumentException | InvocationTargetException\
    \ e) {\n                e.printStackTrace();\n            }\n            if (strength\
    \ > maxStrength) {\n                maxStrength = strength;\n            }\n \
    \       }\n        if (maxStrength == 0) {\n            return class_name;\n \
    \       }\n        double strength_percentage = maxStrength / extensions_sorted.size();\n\
    \        String extension_class = class_name + \".\" + extensions_sorted.get(0);\n\
    \        for (int i = 1; i < extensions_sorted.size(); i++) {\n            extension_class\
    \ = extension_class + \".\" + extensions_sorted.get(i);\n        }\n        return\
    \ extension_class + \".\" + String.format(\"%.2f\", strength_percentage);", " \
    \       ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = -1;\n  \
    \      String strongest_extension = null;\n        for(String extension : extensions_sorted)\
    \ {\n            int extension_length = extension.length();\n            int extension_strength\
    \ = extension_length - extension_length/2;\n            if(extension_strength\
    \ > strength) {\n                strength = extension_strength;\n            \
    \    strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        double max_strength = -1;\n        double\
    \ max_index = -1;\n        for (int i = 0; i < extensions_sorted.size(); i++)\
    \ {\n            String extension = extensions_sorted.get(i);\n            int\
    \ cap = extension.length();\n            int sm = class_name.substring(class_name.lastIndexOf('S')\
    \ + 1).length();\n            double frac = cap - sm;\n            if (strength\
    \ == -1) {\n                strength = frac;\n                class_name = class_name\
    \ + \".\" + extension;\n            } else if (frac > strength) {\n          \
    \      strength = frac;\n                class_name = class_name + \".\" + extension;\n\
    \            }\n        }\n        return class_name;", "        double strength\
    \ = 0;\n        double max = 0;\n        double min = 0;\n        double sum =\
    \ 0;\n        double average = 0;\n        double sumOfSquares = 0;\n        double\
    \ averageOfSquares = 0;\n        double sumOfSquareOfDifferences = 0;\n      \
    \  double averageOfSquareOfDifferences = 0;\n        double sumOfDifferences =\
    \ 0;\n        double averageOfDifferences = 0;\n        double sumOfSquareOfDifferences\
    \ = 0;\n        double averageOfSquareOfDifferences = 0;\n        double sumOfDifferences\
    \ = 0;\n        double averageOfDifferences = 0;\n        double sumOfSquareOfDifferences\
    \ = 0;\n        double averageOfSquareOfDifferences = 0;\n        double sumOfDifferences\
    \ = 0;\n        double averageOfDifferences = 0;\n        double sumOfSquareOfDifferences\
    \ = 0;\n        double averageOfSquareOfDifferences = 0;\n        double sumOfDifferences\
    \ = 0;\n        double averageOfDifferences = 0;\n        double sumOfSquareOfDifferences\
    \ = 0;\n        double averageOfSquareOfDifferences = 0;\n        double sumOfDifferences\
    \ = 0;\n        double averageOfDifferences = 0;\n        double sumOfSquareOfDifferences\
    \ = 0;\n        double averageOfSquareOfDifferences = 0;\n        double sumOfDifferences\
    \ = 0;\n        double averageOfDifferences = 0;\n        double sumOfSquareOfDifferences\
    \ = 0;\n        double averageOfSquareOfDifferences = 0;\n        double sumOfDifferences\
    \ = 0;\n        double averageOfDifferences = 0;\n        double sumOfSquareOfDifferences\
    \ = 0;\n        double averageOfSquareOfDifferences = 0;\n        double sumOfDifferences\
    \ = 0;\n        double averageOfDifferences = 0;\n        double sumOfSquareOfDifferences\
    \ = 0;\n        double averageOfSquareOfDifferences = 0;\n        double sumOfDifferences\
    \ = 0;\n        double averageOfDifferences = 0;\n        double sumOfSquareOfDifferences\
    \ = 0;\n        double averageOfSquareOfDifferences = 0;\n        double sumOfDifferences\
    \ = 0;\n        double averageOfDifferences = 0;\n        double sumOfSquareOfDifferences\
    \ = 0;\n        double averageOfSquareOfDifferences = 0;\n        double sumOfDifferences\
    \ = 0;\n        double averageOfDifferences = 0;\n        double sumOfSquareOfDifferences\
    \ = 0;\n        double averageOfSquareOfDifferences = 0;\n        double sumOfDifferences\
    \ = 0;\n        double averageOfDifferences = 0;\n        double sumOfSquareOfDifferences\
    \ = 0;\n        double averageOfSquareOfDifferences = 0;\n        double sumOfDifferences\
    \ = 0;\n        double averageOfDifferences = 0;\n        double sumOfSquareOfDifferences\
    \ = 0;\n        double averageOfSquareOfDifferences = 0;\n        double sumOfDifferences\
    \ = 0;\n        double averageOfDifferences = 0;\n        double sumOfSquareOfDifferences\
    \ = 0;\n        double averageOfSquareOfDifferences = 0;\n        double sumOfDifferences\
    \ = 0;\n", "        ArrayList<Integer> strengths = new ArrayList<Integer>();\n\
    \        for(String extension : extensions) {\n            int extension_length\
    \ = extension.length();\n            int extension_strength = extension_length\
    \ - 1;\n            int extension_letter_count = 1;\n            for(int i = 0;\
    \ i < extension_length; i++) {\n                if(extension.charAt(i) == extension.charAt(i\
    \ + 1)) {\n                    extension_letter_count++;\n                }\n\
    \            }\n            int extension_strength_fraction = extension_letter_count\
    \ / extension_length;\n            strengths.add(extension_strength);\n      \
    \      strengths.add(extension_strength_fraction);\n        }\n        Collections.sort(strengths);\n\
    \        int strongest_extension = strengths.get(0);\n        int strongest_extension_strength\
    \ = strengths.get(1);\n        for(String extension : extensions) {\n        \
    \    int extension_length = extension.length();\n            int extension_strength\
    \ = extension_length - 1;\n            int extension_letter_count = 1;\n     \
    \       for(int i = 0; i < extension_length; i++) {\n                if(extension.charAt(i)\
    \ == extension.charAt(i + 1)) {\n                    extension_letter_count++;\n\
    \                }\n            }\n            int extension_strength_fraction\
    \ = extension_letter_count / extension_length;\n            if(extension_strength_fraction\
    \ > strongest_extension_strength) {\n                strongest_extension = extension;\n\
    \                strongest_extension_strength = extension_strength_fraction;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        double strength = 0;\n        double maxStrength = 0;\n        double maxExtension\
    \ = 0;\n        double maxExtensionIndex = 0;\n        double maxExtensionLength\
    \ = 0;\n        double maxExtensionStrength = 0;\n        double maxExtensionStrengthIndex\
    \ = 0;\n        double maxExtensionStrengthLength = 0;\n        double maxExtensionStrengthIndex2\
    \ = 0;\n        double maxExtensionStrengthLength2 = 0;\n        double maxExtensionStrengthIndex3\
    \ = 0;\n        double maxExtensionStrengthLength3 = 0;\n        double maxExtensionStrengthIndex4\
    \ = 0;\n        double maxExtensionStrengthLength4 = 0;\n        double maxExtensionStrengthIndex5\
    \ = 0;\n        double maxExtensionStrengthLength5 = 0;\n        double maxExtensionStrengthIndex6\
    \ = 0;\n        double maxExtensionStrengthLength6 = 0;\n        double maxExtensionStrengthIndex7\
    \ = 0;\n        double maxExtensionStrengthLength7 = 0;\n        double maxExtensionStrengthIndex8\
    \ = 0;\n        double maxExtensionStrengthLength8 = 0;\n        double maxExtensionStrengthIndex9\
    \ = 0;\n        double maxExtensionStrengthLength9 = 0;\n        double maxExtensionStrengthIndex10\
    \ = 0;\n        double maxExtensionStrengthLength10 = 0;\n        double maxExtensionStrengthIndex11\
    \ = 0;\n        double maxExtensionStrengthLength11 = 0;\n        double maxExtensionStrengthIndex12\
    \ = 0;\n        double maxExtensionStrengthLength12 = 0;\n        double maxExtensionStrengthIndex13\
    \ = 0;\n        double maxExtensionStrengthLength13 = 0;\n        double maxExtensionStrengthIndex14\
    \ = 0;\n        double maxExtensionStrengthLength14 = 0;\n        double maxExtensionStrengthIndex15\
    \ = 0;\n        double maxExtensionStrengthLength15 = 0;\n        double maxExtensionStrengthIndex16\
    \ = 0;\n        double maxExtensionStrengthLength16 = 0;\n        double maxExtensionStrengthIndex17\
    \ = 0;\n        double maxExtensionStrengthLength17 = 0;\n        double maxExtensionStrengthIndex18\
    \ = 0;\n        double maxExtensionStrengthLength18 = 0;\n        double maxExtensionStrengthIndex19\
    \ = 0;\n        double maxExtensionStrengthLength19 = 0;\n        double maxExtensionStrengthIndex20\
    \ = 0;\n        double maxExtensionStrengthLength20 = 0;\n        double maxExtensionStrengthIndex21\
    \ = 0;\n        double maxExtensionStrengthLength21 = 0;\n        double maxExtensionStrengthIndex22\
    \ = 0;\n        double maxExtensionStrengthLength22 = 0;\n        double maxExtensionStrengthIndex23\
    \ = 0;\n        double maxExtensionStrengthLength23 = 0;\n        double maxExtensionStrengthIndex24\
    \ = 0;\n        double maxExtensionStrengthLength24 = 0;\n        double ", " \
    \       ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = -1;\n  \
    \      for (String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength = (cap - sm) / cap;\n            if (strength > 0) {\n       \
    \         break;\n            }\n        }\n        if (strength == 0) {\n   \
    \         throw new RuntimeException(\"No extensions found\");\n        }\n  \
    \      return class_name + \".\" + extensions_sorted.get(strength);", "      \
    \  ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.get(extensions_sorted.size()\
    \ - 1).length() - extensions_sorted.get(extensions_sorted.size() - 1).length();\n\
    \        double strength_sum = 0;\n        double strength_max = 0;\n        double\
    \ strength_min = 0;\n        double strength_average = 0;\n        double strength_variance\
    \ = 0;\n        double strength_standard_deviation = 0;\n        double strength_sum_squares\
    \ = 0;\n        double strength_sum_cubes = 0;\n        double strength_sum_powers\
    \ = 0;\n        double strength_sum_logarithms = 0;\n        double strength_sum_exponentials\
    \ = 0;\n        double strength_sum_logarithmic_powers = 0;\n        double strength_sum_logarithmic_powers_squared\
    \ = 0;\n        double strength_sum_logarithmic_powers_cubed = 0;\n        double\
    \ strength_sum_logarithmic_powers_cubed2 = 0;\n        double strength_sum_logarithmic_powers_cubed3\
    \ = 0;\n        double strength_sum_logarithmic_powers_cubed4 = 0;\n        double\
    \ strength_sum_logarithmic_powers_cubed5 = 0;\n        double strength_sum_logarithmic_powers_cubed6\
    \ = 0;\n        double strength_sum_logarithmic_powers_cubed7 = 0;\n        double\
    \ strength_sum_logarithmic_powers_cubed8 = 0;\n        double strength_sum_logarithmic_powers_cubed9\
    \ = 0;\n        double strength_sum_logarithmic_powers_cubed10 = 0;\n        double\
    \ strength_sum_logarithmic_powers_cubed11 = 0;\n        double strength_sum_logarithmic_powers_cubed12\
    \ = 0;\n        double strength_sum_logarithmic_powers_cubed13 = 0;\n        double\
    \ strength_sum_logarithmic_powers_cubed14 = 0;\n        double strength_sum_logarithmic_powers_cubed15\
    \ = 0;\n        double strength_sum_logarithmic_powers_cubed16 = 0;\n        double\
    \ strength_sum_logarithmic_powers_cubed17 = 0;\n        double strength_sum_logarithmic_powers_cubed18\
    \ = 0;\n        double strength_sum_logarithmic_powers_cubed19 = 0;\n        double\
    \ strength_sum_logarithmic_powers_cubed20 = 0;\n        double strength_sum_logarithmic_powers_cubed21\
    \ = 0;\n        double strength_sum_logarithmic_powers_cubed22 = 0;\n        double\
    \ strength_sum_logarithmic_powers_cubed23 = 0;\n        double strength_sum_logarith",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest = null;\n        for (String extension : extensions_sorted)\
    \ {\n            String extension_class = extension.substring(0, extension.length()\
    \ - 1);\n            try {\n                Class<?> clazz = Class.forName(class_name\
    \ + extension_class);\n                Method method = clazz.getMethod(\"main\"\
    , String[].class);\n                strength = (Double) method.invoke(null, new\
    \ Object[]{new String[0]});\n            } catch (ClassNotFoundException | NoSuchMethodException\
    \ | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException\
    \ e) {\n                e.printStackTrace();\n            }\n            if (strength\
    \ > 0) {\n                strongest = class_name + extension;\n              \
    \  break;\n            }\n        }\n        return strongest;", "        double\
    \ max_strength = -1;\n        String strongest_extension = null;\n        for\
    \ (String extension : extensions) {\n            int extension_strength = extension.substring(extension.lastIndexOf(\"\
    _\") + 1).length();\n            if (extension_strength > max_strength) {\n  \
    \              max_strength = extension_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        double strength = -1;\n        double maxStrength\
    \ = -1;\n        for(String extension : extensions) {\n            int cap = extension.substring(0,1).length();\n\
    \            int sm = extension.substring(1,2).length();\n            double fraction\
    \ = cap - sm;\n            strength += fraction;\n            if(strength > maxStrength)\
    \ {\n                maxStrength = strength;\n            }\n        }\n     \
    \   double maxStrengthInt = Math.round(maxStrength);\n        for(String extension\
    \ : extensions) {\n            int cap = extension.substring(0,1).length();\n\
    \            int sm = extension.substring(1,2).length();\n            double fraction\
    \ = cap - sm;\n            strength += fraction;\n            if(strength == maxStrengthInt)\
    \ {\n                return class_name + \".\" + extension;\n            }\n \
    \       }\n        return class_name + \".\" + extensions.get(0);", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strength = -1;\n        String strongest_extension = null;\n    \
    \    for (String extension : extensions_sorted) {\n            int extension_length\
    \ = extension.length();\n            int extension_capital_letters = extension_length\
    \ - extension.toUpperCase().length();\n            int extension_lowercase_letters\
    \ = extension_length - extension.toLowerCase().length();\n            int extension_strength\
    \ = extension_capital_letters - extension_lowercase_letters;\n            if (strength\
    \ < extension_strength) {\n                strength = extension_strength;\n  \
    \              strongest_extension = extension;\n            }\n        }\n  \
    \      return class_name + \".\" + strongest_extension;", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        double max_strength = -1;\n        String\
    \ strongest_extension = \"\";\n        for (String extension : extensions_sorted)\
    \ {\n            String extension_class_name = class_name + \".\" + extension;\n\
    \            try {\n                Class<?> extension_class = Class.forName(extension_class_name);\n\
    \                Method method_getName = extension_class.getMethod(\"getName\"\
    );\n                String extension_name = (String) method_getName.invoke(extension_class);\n\
    \                String extension_class_name_with_extension = extension_class_name\
    \ + \".\" + extension_name;\n                Class<?> extension_class_with_extension\
    \ = Class.forName(extension_class_name_with_extension);\n                Method\
    \ method_getStrength = extension_class_with_extension.getMethod(\"getStrength\"\
    );\n                double extension_strength = (double) method_getStrength.invoke(extension_class_with_extension);\n\
    \                if (extension_strength > max_strength) {\n                  \
    \  max_strength = extension_strength;\n                    strongest_extension\
    \ = extension_name;\n                }\n            } catch (ClassNotFoundException\
    \ | NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\
    \ | InvocationTargetException e) {\n                e.printStackTrace();\n   \
    \         }\n        }\n        return strongest_extension;", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        double max_strength = -1;\n        for(String\
    \ extension : extensions_sorted) {\n            String extension_class = extension.substring(0,\
    \ extension.length() - 1);\n            try {\n                Class<?> c = Class.forName(extension_class);\n\
    \                Method m = c.getMethod(\"main\", String[].class);\n         \
    \       String s = m.invoke(null, new String[]{null});\n                strength\
    \ = Double.parseDouble(s.substring(s.length() - 1));\n                if(strength\
    \ > max_strength) {\n                    max_strength = strength;\n          \
    \      }\n            } catch (ClassNotFoundException | NoSuchMethodException\
    \ | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException\
    \ e) {\n                e.printStackTrace();\n            }\n        }\n     \
    \   if(max_strength == -1) {\n            return class_name;\n        }\n    \
    \    double strength_percentage = (max_strength - strength) / max_strength;\n\
    \        String extension_class = class_name + \".\" + extensions_sorted.get(0);\n\
    \        for(String extension : extensions_sorted) {\n            String extension_class\
    \ = extension.substring(0, extension.length() - 1);\n            try {\n     \
    \           Class<?> c = Class.forName(extension_class);\n                Method\
    \ m = c.getMethod(\"main\", String[].class);\n                String s = m.invoke(null,\
    \ new String[]{null});\n                strength = Double.parseDouble(s.substring(s.length()\
    \ - 1));\n                if(strength > max_strength) {\n                    max_strength\
    \ = strength;\n                    extension_class = class_name + \".\" + extension;\n\
    \                }\n            } catch (ClassNotFoundException | NoSuchMethodException\
    \ | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException\
    \ e) {\n                e.printStackTrace();\n            }\n        }\n     \
    \   return extension_class;", "        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n", "        double\
    \ strength = 0;\n        double maxStrength = 0;\n        double maxExtension\
    \ = 0;\n        double maxExtensionName = 0;\n        double maxExtensionNameLength\
    \ = 0;\n        double maxExtensionNameLength2 = 0;\n        double maxExtensionNameLength3\
    \ = 0;\n        double maxExtensionNameLength4 = 0;\n        double maxExtensionNameLength5\
    \ = 0;\n        double maxExtensionNameLength6 = 0;\n        double maxExtensionNameLength7\
    \ = 0;\n        double maxExtensionNameLength8 = 0;\n        double maxExtensionNameLength9\
    \ = 0;\n        double maxExtensionNameLength10 = 0;\n        double maxExtensionNameLength11\
    \ = 0;\n        double maxExtensionNameLength12 = 0;\n        double maxExtensionNameLength13\
    \ = 0;\n        double maxExtensionNameLength14 = 0;\n        double maxExtensionNameLength15\
    \ = 0;\n        double maxExtensionNameLength16 = 0;\n        double maxExtensionNameLength17\
    \ = 0;\n        double maxExtensionNameLength18 = 0;\n        double maxExtensionNameLength19\
    \ = 0;\n        double maxExtensionNameLength20 = 0;\n        double maxExtensionNameLength21\
    \ = 0;\n        double maxExtensionNameLength22 = 0;\n        double maxExtensionNameLength23\
    \ = 0;\n        double maxExtensionNameLength24 = 0;\n        double maxExtensionNameLength25\
    \ = 0;\n        double maxExtensionNameLength26 = 0;\n        double maxExtensionNameLength27\
    \ = 0;\n        double maxExtensionNameLength28 = 0;\n        double maxExtensionNameLength29\
    \ = 0;\n        double maxExtensionNameLength30 = 0;\n        double maxExtensionNameLength31\
    \ = 0;\n        double maxExtensionNameLength32 = 0;\n        double maxExtensionNameLength33\
    \ = 0;\n        double maxExtensionNameLength34 = 0;\n        double maxExtensionNameLength35\
    \ = 0;\n        double maxExtensionNameLength36 = 0;\n        double maxExtensionNameLength37\
    \ = 0;\n        double maxExtensionNameLength38 = 0;\n        double maxExtensionNameLength39\
    \ = 0;\n        double maxExtensionNameLength40 = 0;\n        double maxExtensionNameLength41\
    \ = 0;\n        double maxExtensionNameLength42 = 0;\n        double maxExtensionNameLength43\
    \ = 0;\n        double maxExtensionNameLength44 = 0;\n        double maxExtensionNameLength45\
    \ = 0;\n        double maxExtensionNameLength46 = 0;\n        double maxExtensionNameLength47\
    \ = 0;\n        double maxExtensionNameLength48 = 0;\n        double maxExtensionNameLength49\
    \ = 0;\n        double maxExtensionNameLength50 = 0;\n        double maxExtensionNameLength51\
    \ = 0;\n        double maxExtensionNameLength52 = 0;\n        double maxExtensionNameLength53\
    \ = 0;\n        double maxExtensionNameLength54 = 0;\n        double maxExtensionNameLength",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        for (String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength = (double)cap - (double)sm;\n            if (strength > 0) {\n\
    \                return class_name + \".\" + extension;\n            }\n     \
    \   }\n        return class_name;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest = -1;\n        String strongest_extension = null;\n   \
    \     for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.substring(extension.length() - 1).replaceAll(\"[^A-Z]\", \"\").length();\n\
    \            if (strongest < 0 || strongest > extension_strength) {\n        \
    \        strongest = extension_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        double strength = -1;\n        double maxStrength\
    \ = -1;\n        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength = (double)cap - sm;\n            if(strength > maxStrength) {\n\
    \                maxStrength = strength;\n            }\n        }\n        for(String\
    \ extension : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            strength =\
    \ (double)cap - sm;\n            if(strength == maxStrength) {\n             \
    \   return class_name + \".\" + extension;\n            }\n        }\n       \
    \ return class_name + \".\" + extensions.get(0);", "        Set<String> extensions_set\
    \ = new HashSet<String>(extensions);\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        ", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest = -1;\n        String strongest_extension = null;\n   \
    \     for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.substring(extension.length() - 1).replaceAll(\"[^A-Z]\", \"\").length();\n\
    \            if (extension_strength > strongest) {\n                strongest\
    \ = extension_strength;\n                strongest_extension = extension;\n  \
    \          }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        double strength = 0;\n        double max = 0;\n        for (String extension\
    \ : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            strength +=\
    \ (cap - sm);\n        }\n        if (strength > max) {\n            max = strength;\n\
    \        }\n        double strength_sum = 0;\n        for (String extension :\
    \ extensions) {\n            int cap = extension.substring(0, 1).length();\n \
    \           int sm = extension.substring(1).length();\n            strength_sum\
    \ += (cap - sm);\n        }\n        if (strength_sum > max) {\n            max\
    \ = strength_sum;\n        }\n        double strength_sum2 = 0;\n        for (String\
    \ extension : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            strength_sum2\
    \ += (cap - sm);\n        }\n        if (strength_sum2 > max) {\n            max\
    \ = strength_sum2;\n        }\n        double strength_sum3 = 0;\n        for\
    \ (String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength_sum3 += (cap - sm);\n        }\n        if (strength_sum3 > max)\
    \ {\n            max = strength_sum3;\n        }\n        double strength_sum4\
    \ = 0;\n        for (String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength_sum4 += (cap - sm);\n        }\n        if (strength_sum4 > max)\
    \ {\n            max = strength_sum4;\n        }\n        double strength_sum5\
    \ = 0;\n        for (String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength_sum5 += (cap - sm);\n        }\n        if (strength_sum5 > max)\
    \ {\n            max = strength_sum5;\n        }\n        double strength_sum6\
    \ = 0;\n        for (String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength_sum6 += (cap - sm);\n        }\n        if (strength_sum6 > max)\
    \ {\n            max = strength_sum6;\n        }\n        double strength_sum7\
    \ = 0;\n        for (String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength_sum7 += (cap - sm);\n        }\n", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        double max_strength = -1;\n        for\
    \ (String extension : extensions_sorted) {\n            int cap = extension.length();\n\
    \            int sm = extension.charAt(0) - 'a';\n            double strength_extension\
    \ = cap - sm;\n            if (strength_extension > max_strength) {\n        \
    \        max_strength = strength_extension;\n            }\n            if (strength_extension\
    \ == max_strength) {\n                strength = strength_extension;\n       \
    \     }\n        }\n        if (strength > 0) {\n            return class_name\
    \ + \".\" + extensions.get(extensions_sorted.indexOf(extensions_sorted.stream().max(Comparator.comparingDouble(s\
    \ -> strength))).orElse(null));\n        } else {\n            return class_name;\n\
    \        }", "        double strength = 0;\n        double maxStrength = 0;\n\
    \        double minStrength = Double.MAX_VALUE;\n        for(String extension\
    \ : extensions) {\n            int cap = extension.substring(0, 1).toUpperCase().length();\n\
    \            int sm = extension.substring(0, 1).toLowerCase().length();\n    \
    \        double fraction = cap - sm;\n            strength += fraction;\n    \
    \        if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n            if(strength < minStrength) {\n                minStrength\
    \ = strength;\n            }\n        }\n        double strengthRatio = maxStrength\
    \ / minStrength;\n        for(String extension : extensions) {\n            int\
    \ cap = extension.substring(0, 1).toUpperCase().length();\n            int sm\
    \ = extension.substring(0, 1).toLowerCase().length();\n            double fraction\
    \ = cap - sm;\n            strength += fraction;\n            if(strength > maxStrength)\
    \ {\n                maxStrength = strength;\n            }\n            if(strength\
    \ < minStrength) {\n                minStrength = strength;\n            }\n \
    \       }\n        double strengthRatio = maxStrength / minStrength;\n       \
    \ for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).toUpperCase().length();\n            int sm = extension.substring(0, 1).toLowerCase().length();\n\
    \            double fraction = cap - sm;\n            strength += fraction;\n\
    \            if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n            if(strength < minStrength) {\n                minStrength\
    \ = strength;\n            }\n        }\n        double strengthRatio = maxStrength\
    \ / minStrength;\n        for(String extension : extensions) {\n            int\
    \ cap = extension.substring(0, 1).toUpperCase().length();\n            int sm\
    \ = extension.substring(0, 1).toLowerCase().length();\n            double fraction\
    \ = cap - sm;\n            strength += fraction;\n            if(strength > maxStrength)\
    \ {\n                maxStrength = strength;\n            }\n            if(strength\
    \ < minStrength) {\n                minStrength = strength;\n            }\n \
    \       }\n        double strengthRatio = maxStrength / minStrength;\n       \
    \ for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).toUpperCase().length();\n            int sm = extension.substring(0, 1).toLowerCase().length();\n\
    \            double fraction = cap - sm;\n            strength += fraction;\n\
    \            if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n            if(strength < minStrength) {\n                minStrength",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        double max_strength = -1;\n        String strongest_extension = null;\n\
    \        for (String extension : extensions_sorted) {\n            String extension_class\
    \ = class_name + \".\" + extension;\n            try {\n                Class<?>\
    \ clazz = Class.forName(extension_class);\n                Method method = clazz.getMethod(\"\
    getStrength\");\n                strength = (Double) method.invoke(clazz);\n \
    \           } catch (ClassNotFoundException | NoSuchMethodException | SecurityException\
    \ | IllegalAccessException | IllegalArgumentException | InvocationTargetException\
    \ e) {\n                e.printStackTrace();\n            }\n            if (strength\
    \ > max_strength) {\n                max_strength = strength;\n              \
    \  strongest_extension = extension;\n            }\n        }\n        return\
    \ strongest_extension;", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.size();\n\
    \        double cap = class_name.substring(0, class_name.indexOf(\"_\"));\n  \
    \      double sm = class_name.substring(class_name.indexOf(\"_\") + 1);\n    \
    \    double strength_fraction = strength / extensions_sorted.size();\n       \
    \ double cap_fraction = cap / extensions_sorted.size();\n        double sm_fraction\
    \ = sm / extensions_sorted.size();\n        if (cap_fraction > sm_fraction) {\n\
    \            return class_name + \".\" + extensions_sorted.get(0);\n        }\
    \ else if (cap_fraction < sm_fraction) {\n            return class_name + \".\"\
    \ + extensions_sorted.get(extensions_sorted.size() - 1);\n        } else {\n \
    \           return class_name + \".\" + extensions_sorted.get(0);\n        }",
  "        double strength = 0;\n        double maxStrength = 0;\n        double maxExtension\
    \ = 0;\n        double maxExtensionIndex = 0;\n        double maxExtensionLength\
    \ = 0;\n        double maxExtensionStrength = 0;\n        double maxExtensionStrengthIndex\
    \ = 0;\n        double maxExtensionStrengthLength = 0;\n        double maxExtensionStrengthIndex2\
    \ = 0;\n        double maxExtensionStrengthLength2 = 0;\n        double maxExtensionStrengthIndex3\
    \ = 0;\n        double maxExtensionStrengthLength3 = 0;\n        double maxExtensionStrengthIndex4\
    \ = 0;\n        double maxExtensionStrengthLength4 = 0;\n        double maxExtensionStrengthIndex5\
    \ = 0;\n        double maxExtensionStrengthLength5 = 0;\n        double maxExtensionStrengthIndex6\
    \ = 0;\n        double maxExtensionStrengthLength6 = 0;\n        double maxExtensionStrengthIndex7\
    \ = 0;\n        double maxExtensionStrengthLength7 = 0;\n        double maxExtensionStrengthIndex8\
    \ = 0;\n        double maxExtensionStrengthLength8 = 0;\n        double maxExtensionStrengthIndex9\
    \ = 0;\n        double maxExtensionStrengthLength9 = 0;\n        double maxExtensionStrengthIndex10\
    \ = 0;\n        double maxExtensionStrengthLength10 = 0;\n        double maxExtensionStrengthIndex11\
    \ = 0;\n        double maxExtensionStrengthLength11 = 0;\n        double maxExtensionStrengthIndex12\
    \ = 0;\n        double maxExtensionStrengthLength12 = 0;\n        double maxExtensionStrengthIndex13\
    \ = 0;\n        double maxExtensionStrengthLength13 = 0;\n        double maxExtensionStrengthIndex14\
    \ = 0;\n        double maxExtensionStrengthLength14 = 0;\n        double maxExtensionStrengthIndex15\
    \ = 0;\n        double maxExtensionStrengthLength15 = 0;\n        double maxExtensionStrengthIndex16\
    \ = 0;\n        double maxExtensionStrengthLength16 = 0;\n        double maxExtensionStrengthIndex17\
    \ = 0;\n        double maxExtensionStrengthLength17 = 0;\n        double maxExtensionStrengthIndex18\
    \ = 0;\n        double maxExtensionStrengthLength18 = 0;\n        double maxExtensionStrengthIndex19\
    \ = 0;\n        double maxExtensionStrengthLength19 = 0;\n        double maxExtensionStrengthIndex20\
    \ = 0;\n        double maxExtensionStrengthLength20 = 0;\n        double maxExtensionStrengthIndex21\
    \ = 0;\n        double maxExtensionStrengthLength21 = 0;\n        double maxExtensionStrengthIndex22\
    \ = 0;\n        double maxExtensionStrengthLength22 = 0;\n        double maxExtensionStrengthIndex23\
    \ = 0;\n        double maxExtensionStrengthLength23 = 0;\n        double maxExtensionStrengthIndex24\
    \ = 0;\n        double maxExtensionStrengthLength24 = 0;\n        double ", " \
    \       ArrayList<Integer> strengths = new ArrayList<>();\n        for(String\
    \ extension : extensions) {\n            int strength = extension.charAt(0) -\
    \ extension.charAt(1);\n            strengths.add(strength);\n        }\n    \
    \    Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for(Integer strength : strengths) {\n            if(strength == strongest)\
    \ {\n                strongest = strength;\n            }\n        }\n       \
    \ return class_name + \".\" + extensions.get(strengths.indexOf(strongest));",
  "        Set<String> extensions_set = new HashSet<String>(extensions);\n       \
    \ extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extension", "        double strength = 0;\n        double maxStrength\
    \ = 0;\n        double minStrength = Double.MAX_VALUE;\n        for (String extension\
    \ : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            strength +=\
    \ (cap - sm);\n            if (strength > maxStrength) {\n                maxStrength\
    \ = strength;\n            }\n            if (strength < minStrength) {\n    \
    \            minStrength = strength;\n            }\n        }\n        double\
    \ strengthRatio = maxStrength / minStrength;\n        double strengthFactor =\
    \ strengthRatio * class_name.substring(0, class_name.indexOf(\".\"));\n      \
    \  double strengthFactor2 = strengthFactor * class_name.substring(class_name.indexOf(\"\
    .\") + 1);\n        double strengthFactor3 = strengthFactor2 * class_name.substring(class_name.indexOf(\"\
    .\") + 2);\n        double strengthFactor4 = strengthFactor3 * class_name.substring(class_name.indexOf(\"\
    .\") + 3);\n        double strengthFactor5 = strengthFactor4 * class_name.substring(class_name.indexOf(\"\
    .\") + 4);\n        double strengthFactor6 = strengthFactor5 * class_name.substring(class_name.indexOf(\"\
    .\") + 5);\n        double strengthFactor7 = strengthFactor6 * class_name.substring(class_name.indexOf(\"\
    .\") + 6);\n        double strengthFactor8 = strengthFactor7 * class_name.substring(class_name.indexOf(\"\
    .\") + 7);\n        double strengthFactor9 = strengthFactor8 * class_name.substring(class_name.indexOf(\"\
    .\") + 8);\n        double strengthFactor10 = strengthFactor9 * class_name.substring(class_name.indexOf(\"\
    .\") + 9);\n        double strengthFactor11 = strengthFactor10 * class_name.substring(class_name.indexOf(\"\
    .\") + 10);\n        double strengthFactor12 = strengthFactor11 * class_name.substring(class_name.indexOf(\"\
    .\") + 11);\n        double strengthFactor13 = strengthFactor12 * class_name.substring(class_name.indexOf(\"\
    .\") + 12);\n        double strengthFactor14 = strengthFactor13 * class_name.substring(class_name.indexOf(\"\
    .\") + 13);\n        double strengthFactor15 = strengthFactor14 * class_name.substring(class_name.indexOf(\"\
    .\") + 14);\n        double strengthFactor16 = strengthFactor15 * class_name.substring(class_name.indexOf(\"\
    .\") + 15);\n        double strengthFactor17 = strengthFactor16 * class_name.substring(class_name.indexOf(\"\
    .\") + 16);\n        double strengthFactor18 = strengthFactor17 * class_name.substring(class_name.indexOf(\"\
    .\") + 17);\n        double strengthFactor19 = strengthFactor18 * class_name.substring(class_name.indexOf(\"\
    .\") + 18);\n        double strengthFactor20 = strengthFactor19 * class_name.substring(class_name.indexOf(\"\
    .\") + 19", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = -1;\n  \
    \      for (String extension : extensions_sorted) {\n            int extension_length\
    \ = extension.length();\n            int extension_cap = extension_length - 1;\n\
    \            int extension_sm = 0;\n            for (int i = 0; i < extension_cap;\
    \ i++) {\n                if (extension.charAt(i) >= 'A' && extension.charAt(i)\
    \ <= 'Z') {\n                    extension_sm += 1;\n                }\n     \
    \       }\n            int extension_strength = extension_cap - extension_sm;\n\
    \            if (extension_strength > strength) {\n                strength =\
    \ extension_strength;\n            }\n        }\n        return class_name + \"\
    .\" + extensions_sorted.get(strength);", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest = -1;\n        for(String extension : extensions_sorted)\
    \ {\n            int extension_length = extension.length();\n            int extension_strength\
    \ = extension_length - 1;\n            int extension_count_cap = extension.chars().filter(Character::isUpperCase).count();\n\
    \            int extension_count_sm = extension.chars().filter(Character::isLowerCase).count();\n\
    \            int extension_strength_cap = extension_count_cap - extension_count_sm;\n\
    \            if(extension_strength > strongest) {\n                strongest =\
    \ extension_strength;\n            }\n            if(extension_strength_cap >\
    \ strongest) {\n                strongest = extension_strength_cap;\n        \
    \    }\n        }\n        return class_name + \".\" + extensions_sorted.get(strongest);",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        for (String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).toUpperCase().length();\n            int sm = extension.substring(0, 1).toLowerCase().length();\n\
    \            double fraction = cap - sm;\n            if (strength < fraction)\
    \ {\n                strength = fraction;\n            }\n        }\n        return\
    \ class_name + \".\" + extensions_sorted.get(extensions_sorted.size() - 1);",
  "        \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n", "        ArrayList<String> extensions_sorted =\
    \ new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strength = -1;\n        String strongest_extension = null;\n    \
    \    for(String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.substring(extension.indexOf('C') - 1, extension.indexOf('C')).matches(\"\
    [A-Z]+\")\n                    ? extension.substring(extension.indexOf('C') -\
    \ 1, extension.indexOf('C')).length() - 1\n                    : extension.substring(extension.indexOf('C')\
    \ - 1, extension.indexOf('C')).length();\n            if(strength < extension_strength)\
    \ {\n                strength = extension_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        double strength = -1;\n        double maxStrength\
    \ = -1;\n        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength = (cap - sm) / cap;\n            if(strength > maxStrength) {\n\
    \                maxStrength = strength;\n            }\n        }\n        if(maxStrength\
    \ == -1) {\n            return class_name;\n        }\n        for(String extension\
    \ : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            strength =\
    \ (cap - sm) / cap;\n            if(strength == maxStrength) {\n             \
    \   return class_name + \".\" + extension;\n            }\n        }\n       \
    \ return class_name;", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest = -1;\n \
    \       String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.substring(extension.lastIndexOf(\"\
    _\") + 1).length();\n            if (strongest < 0 || extension_strength > strongest)\
    \ {\n                strongest = extension_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        for(String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      double fraction = cap - sm;\n            strength = fraction > strength\
    \ ? fraction : strength;\n        }\n        return class_name + \".\" + extensions_sorted.get(0);",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0,1).length();\n            int\
    \ sm = extension.substring(1).length();\n            double fraction = cap - sm;\n\
    \            if (strength == -1) {\n                strength = fraction;\n   \
    \             strongest_extension = extension;\n            } else if (strength\
    \ > fraction) {\n                strength = fraction;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        ArrayList<Integer> caps = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> sms = new ArrayList<Integer>();\n        for(String\
    \ ext : extensions) {\n            int cap = ext.toUpperCase().length();\n   \
    \         int sm = ext.toLowerCase().length();\n            caps.add(cap);\n \
    \           sms.add(sm);\n        }\n        int max = 0;\n        int maxIndex\
    \ = 0;\n        for(int i = 0; i < caps.size(); i++) {\n            int cap =\
    \ caps.get(i);\n            int sm = sms.get(i);\n            if(cap > max) {\n\
    \                max = cap;\n                maxIndex = i;\n            }\n  \
    \          if(sm > max) {\n                max = sm;\n                maxIndex\
    \ = i;\n            }\n        }\n        String result = class_name + \".\" +\
    \ extensions.get(maxIndex);\n        return result;", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        String strongest_extension = null;\n \
    \       for (String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      double fraction = cap - sm;\n            if (strength == -1 || fraction\
    \ > strength) {\n                strength = fraction;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        double strength = 0;\n        double max = 0;\n\
    \        double min = 0;\n        double sum = 0;\n        double average = 0;\n\
    \        double max2 = 0;\n        double min2 = 0;\n        double sum2 = 0;\n\
    \        double average2 = 0;\n        double max3 = 0;\n        double min3 =\
    \ 0;\n        double sum3 = 0;\n        double average3 = 0;\n        double max4\
    \ = 0;\n        double min4 = 0;\n        double sum4 = 0;\n        double average4\
    \ = 0;\n        double max5 = 0;\n        double min5 = 0;\n        double sum5\
    \ = 0;\n        double average5 = 0;\n        double max6 = 0;\n        double\
    \ min6 = 0;\n        double sum6 = 0;\n        double average6 = 0;\n        double\
    \ max7 = 0;\n        double min7 = 0;\n        double sum7 = 0;\n        double\
    \ average7 = 0;\n        double max8 = 0;\n        double min8 = 0;\n        double\
    \ sum8 = 0;\n        double average8 = 0;\n        double max9 = 0;\n        double\
    \ min9 = 0;\n        double sum9 = 0;\n        double average9 = 0;\n        double\
    \ max10 = 0;\n        double min10 = 0;\n        double sum10 = 0;\n        double\
    \ average10 = 0;\n        double max11 = 0;\n        double min11 = 0;\n     \
    \   double sum11 = 0;\n        double average11 = 0;\n        double max12 = 0;\n\
    \        double min12 = 0;\n        double sum12 = 0;\n        double average12\
    \ = 0;\n        double max13 = 0;\n        double min13 = 0;\n        double sum13\
    \ = 0;\n        double average13 = 0;\n        double max14 = 0;\n        double\
    \ min14 = 0;\n        double sum14 = 0;\n        double average14 = 0;\n     \
    \   double max15 = 0;\n        double min15 = 0;\n        double sum15 = 0;\n\
    \        double average15 = 0;\n        double max16 = 0;\n        double min16\
    \ = 0;\n        double sum16 = 0;\n        double average16 = 0;\n        double\
    \ max17 = 0;\n        double min17 = 0;\n        double sum17 = 0;\n        double\
    \ average17 = 0;\n        double max18 = 0;\n        double min18 = 0;\n     \
    \   double sum18 = 0;\n        double average18 = 0;\n        double max19 = 0;\n\
    \        double min19 = 0;\n        double sum19 = 0;\n        double average19\
    \ = 0;\n        double max20 = 0;\n        double min20 = 0;\n        double sum20\
    \ = 0;\n        double average20 = 0;\n        double max21 = 0;\n        double\
    \ min21 = 0;\n        double sum21 = 0;\n        double average21 = 0;\n     \
    \   double max22 = 0;\n        double min22 = 0;\n        double sum22 = 0;\n\
    \        double average22 = 0;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest = -1;\n        String strongest_extension = \"\";\n   \
    \     for(int i = 0; i < extensions_sorted.size(); i++) {\n            String\
    \ extension = extensions_sorted.get(i);\n            int extension_length = extension.length();\n\
    \            int extension_strength = extension_length - extension.substring(extension_length\
    \ - 1).length();\n            if(strongest == -1 || extension_strength > strongest)\
    \ {\n                strongest = extension_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        double strength = -1;\n        double maxStrength\
    \ = -1;\n        double maxExtension = -1;\n        for(String extension : extensions)\
    \ {\n            int cap = extension.substring(0,1).length();\n            int\
    \ sm = extension.substring(1,2).length();\n            strength = (cap - sm);\n\
    \            if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \                maxExtension = extension;\n            }\n        }\n       \
    \ return class_name + \".\" + maxExtension;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        String strongest_extension = null;\n \
    \       for(int i = 0; i < extensions_sorted.size(); i++) {\n            String\
    \ extension = extensions_sorted.get(i);\n            int extension_length = extension.length();\n\
    \            int extension_strength = extension_length - 1;\n            int extension_upper_case_letters\
    \ = extension.chars().filter(Character::isUpperCase).count();\n            int\
    \ extension_lower_case_letters = extension.chars().filter(Character::isLowerCase).count();\n\
    \            double extension_strength_fraction = (extension_upper_case_letters\
    \ - extension_lower_case_letters)/(extension_upper_case_letters + extension_lower_case_letters);\n\
    \            if(strength < extension_strength) {\n                strength = extension_strength;\n\
    \                strongest_extension = extension;\n            }\n           \
    \ if(strength == extension_strength && extension_strength_fraction > strength)\
    \ {\n                strength = extension_strength_fraction;\n               \
    \ strongest_extension = extension;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest_extension;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = extensions_sorted.get(0).length() - extensions_sorted.get(1).length();\n\
    \        double strength_sorted = Double.parseDouble(String.valueOf(strength));\n\
    \        double strength_sorted_sorted = Double.parseDouble(String.valueOf(strength_sorted));\n\
    \        double strength_sorted_sorted_sorted = Double.parseDouble(String.valueOf(strength_sorted_sorted));\n\
    \        double strength_sorted_sorted_sorted_sorted = Double.parseDouble(String.valueOf(strength_sorted_sorted_sorted));\n\
    \        double strength_sorted_sorted_sorted_sorted_sorted = Double.parseDouble(String.valueOf(strength_sorted_sorted_sorted_sorted));\n\
    \        double strength_sorted_sorted_sorted_sorted_sorted_sorted = Double.parseDouble(String.valueOf(strength_sorted_sorted_sorted_sorted_sorted));\n\
    \        double strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted = Double.parseDouble(String.valueOf(strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted));\n\
    \        double strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = Double.parseDouble(String.valueOf(strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted));\n\
    \        double strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = Double.parseDouble(String.valueOf(strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted));\n\
    \        double strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = Double.parseDouble(String.valueOf(strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted));\n\
    \        double strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = Double.parseDouble(String.valueOf(strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted));\n\
    \        double strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = Double.parseDouble(String.valueOf(strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted));\n\
    \        double strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = Double.parseDouble(String.valueOf(strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted));\n\
    \        double strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = Double.parseDouble(String.valueOf(strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted));\n\
    \        double strength_", "        ArrayList<String> extensions_sorted = new\
    \ ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        String strongest_extension = \"\";\n \
    \       for(int i = 0; i < extensions_sorted.size(); i++) {\n            String\
    \ extension = extensions_sorted.get(i);\n            int cap = extension.length();\n\
    \            int sm = extension.toUpperCase().length();\n            double fraction\
    \ = cap - sm;\n            strength = fraction;\n            if(strength > 0)\
    \ {\n                strongest_extension = class_name + \".\" + extension;\n \
    \               break;\n            }\n        }\n        return strongest_extension;",
  "        double strength = -1;\n        double maxStrength = -1;\n        for(String\
    \ extension : extensions) {\n            int cap = extension.substring(0,1).length();\n\
    \            int sm = extension.substring(1,2).length();\n            double strength_extension\
    \ = cap - sm;\n            if(strength_extension > strength) {\n             \
    \   strength = strength_extension;\n                maxStrength = strength;\n\
    \            }\n        }\n        if(maxStrength == -1) {\n            return\
    \ class_name;\n        }\n        for(String extension : extensions) {\n     \
    \       int cap = extension.substring(0,1).length();\n            int sm = extension.substring(1,2).length();\n\
    \            double strength_extension = cap - sm;\n            if(strength_extension\
    \ == maxStrength) {\n                return class_name + \".\" + extension;\n\
    \            }\n        }\n        return class_name + \".\" + extensions.get(0);",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest_extension_index\
    \ = extensions_sorted.size() - 1;\n        String strongest_extension = extensions_sorted.get(strongest_extension_index);\n\
    \        int strongest_extension_strength = -1;\n        for (int i = 0; i < extensions_sorted.size();\
    \ i++) {\n            if (extensions_sorted.get(i).equals(strongest_extension))\
    \ {\n                strongest_extension_strength = i;\n            }\n      \
    \  }\n        if (strongest_extension_strength == -1) {\n            throw new\
    \ IllegalArgumentException(\"No extensions found with strength \" + strongest_extension_strength);\n\
    \        }\n        return class_name + \".\" + strongest_extension;", "     \
    \   ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest_extension\
    \ = -1;\n        for (String extension : extensions_sorted) {\n            int\
    \ extension_strength = extension.substring(extension.length() - 1).replaceAll(\"\
    [^A-Z]\", \"\").length();\n            if (extension_strength > strongest_extension)\
    \ {\n                strongest_extension = extension_strength;\n            }\n\
    \        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);", "        double strength = 0;\n        double max = 0;\n        double\
    \ min = 0;\n        for(String extension : extensions) {\n            int cap\
    \ = extension.substring(0,1).length();\n            int sm = extension.substring(1,2).length();\n\
    \            double fraction = cap - sm;\n            strength += fraction;\n\
    \            if(fraction > max) {\n                max = fraction;\n         \
    \   }\n            if(fraction < min) {\n                min = fraction;\n   \
    \         }\n        }\n        double strength_avg = strength / extensions.size();\n\
    \        double max_avg = max / extensions.size();\n        double min_avg = min\
    \ / extensions.size();\n        double strength_max = Math.max(strength_avg, max_avg);\n\
    \        double strength_min = Math.min(strength_avg, min_avg);\n        double\
    \ strength_max_index = extensions.indexOf(strength_max);\n        double strength_min_index\
    \ = extensions.indexOf(strength_min);\n        if(strength_max_index > strength_min_index)\
    \ {\n            return class_name + \".\" + extensions.get(strength_max_index);\n\
    \        } else {\n            return class_name + \".\" + extensions.get(strength_min_index);\n\
    \        }", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.size();\n\
    \        double cap = class_name.chars().filter(Character::isUpperCase).count();\n\
    \        double sm = class_name.chars().filter(Character::isLowerCase).count();\n\
    \        double strength_frac = strength / cap;\n        double strength_frac_sorted\
    \ = strength_frac - sm;\n        String strongest_extension = class_name + \"\
    .\" + extensions_sorted.get(0);\n        if (strength_frac_sorted < 0) {\n   \
    \         strongest_extension = extensions_sorted.get(0);\n        }\n       \
    \ return strongest_extension;", "        ArrayList<String> extensions_sorted =\
    \ new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0,1).length();\n            int\
    \ sm = extension.substring(1,2).length();\n            strength += (cap - sm);\n\
    \        }\n        if (strength > 0) {\n            return class_name + \".\"\
    \ + extensions_sorted.get(0);\n        } else {\n            return class_name;\n\
    \        }", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int max_strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int strength = extension.charAt(0) - extension.charAt(1);\n \
    \           if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        Set<String>\
    \ extensions_set = new HashSet<String>(extensions);\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extension",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = -1;\n  \
    \      for (String extension : extensions_sorted) {\n            int extension_length\
    \ = extension.length();\n            int extension_cap = extension_length / 2;\n\
    \            int extension_sm = (extension_length - extension_cap);\n        \
    \    int extension_strength = extension_cap - extension_sm;\n            if (extension_strength\
    \ > strength) {\n                strength = extension_strength;\n            }\n\
    \        }\n        return class_name + \".\" + extensions_sorted.get(strength);",
  "        double strength = 0;\n        double maxStrength = 0;\n        double maxExtension\
    \ = 0;\n        double maxExtensionIndex = 0;\n        double maxExtensionLength\
    \ = 0;\n        double maxExtensionName = 0;\n        double maxExtensionNameIndex\
    \ = 0;\n        double maxExtensionNameLength = 0;\n        double maxExtensionNameLengthIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest_extension_strength\
    \ = -1;\n        String strongest_extension = null;\n        for (String extension\
    \ : extensions_sorted) {\n            int extension_strength = extension.substring(extension.indexOf('C')\
    \ + 1).length();\n            if (extension_strength > strongest_extension_strength)\
    \ {\n                strongest_extension_strength = extension_strength;\n    \
    \            strongest_extension = extension;\n            }\n        }\n    \
    \    return class_name + \".\" + strongest_extension;", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = 0;\n        int i = 0;\n        while(i < extensions_sorted.size())\
    \ {\n            String extension = extensions_sorted.get(i);\n            int\
    \ cap = extension.length();\n            int sm = extension.toUpperCase().length();\n\
    \            strength += (cap - sm);\n            i++;\n        }\n        double\
    \ strength_rounded = Math.ceil(strength);\n        String extension_rounded =\
    \ \"\";\n        if(strength_rounded == strength) {\n            extension_rounded\
    \ = class_name + \".\" + extensions_sorted.get(0);\n        }\n        else {\n\
    \            extension_rounded = class_name + \".\" + extensions_sorted.get(0);\n\
    \            for(int j = 1; j < extensions_sorted.size(); j++) {\n           \
    \     if(strength_rounded == strength) {\n                    extension_rounded\
    \ += \".\" + extensions_sorted.get(j);\n                }\n                else\
    \ {\n                    extension_rounded += \".\" + extensions_sorted.get(j);\n\
    \                    for(int k = 1; k < extensions_sorted.size(); k++) {\n   \
    \                     if(strength_rounded == strength) {\n                   \
    \         extension_rounded += \".\" + extensions_sorted.get(k);\n           \
    \             }\n                        else {\n                            extension_rounded\
    \ += \".\" + extensions_sorted.get(k);\n                            for(int l\
    \ = 1; l < extensions_sorted.size(); l++) {\n                                if(strength_rounded\
    \ == strength) {\n                                    extension_rounded += \"\
    .\" + extensions_sorted.get(l);\n                                }\n         \
    \                       else {\n                                    extension_rounded\
    \ += \".\" + extensions_sorted.get(l);\n                                    for(int\
    \ m = 1; m < extensions_sorted.size(); m++) {\n                              \
    \          if(strength_rounded == strength) {\n                              \
    \              extension_rounded += \".\" + extensions_sorted.get(m);\n      \
    \                                  }\n                                       \
    \ else {\n                                            extension_rounded += \"\
    .\" + extensions_sorted.get(m);\n                                            for(int\
    \ n = 1; n < extensions_sorted.size(); n++) {\n                              \
    \                  if(strength_rounded == strength) {\n                      \
    \                              extension_rounded += \".\" + extensions_sorted.get(n);\n\
    \                                                }\n                         \
    \                       else {\n                                             \
    \       extension_rounded += \".\" + extensions_sorted.get(n);\n             \
    \                                       for(int o = 1; o < extensions_sorted.size();\
    \ o++) {\n                                                        if(strength_rounded\
    \ == strength) {\n                                                           \
    \ extension_rounded += \".\" + extensions_sorted.get(o);\n                   \
    \                                     }\n                                    \
    \                    else {\n                                                \
    \            extension_rounded += \".\" + extensions_sorted.get(o);\n        \
    \                                                    for(int p = 1; p < extensions_sorted.size();\
    \ p++) {\n                                                                if(strength_rounded ",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        for (String extension : extensions_sorted) {\n            int cap = extension.length();\n\
    \            int sm = class_name.substring(class_name.lastIndexOf('S') + 1).length();\n\
    \            double frac = cap - sm;\n            if (frac > strength) {\n   \
    \             strength = frac;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions_sorted.get(extensions_sorted.size() - 1);", "        double\
    \ strength = 0;\n        double maxStrength = 0;\n        double maxExtension\
    \ = 0;\n        double maxExtensionIndex = 0;\n        double maxExtensionName\
    \ = 0;\n        double maxExtensionNameIndex = 0;\n        double maxExtensionNameLength\
    \ = 0;\n        double maxExtensionNameLengthIndex = 0;\n        double maxExtensionNameLengthLength\
    \ = 0;\n        double maxExtensionNameLengthLengthIndex = 0;\n        double\
    \ maxExtensionNameLengthLengthLength = 0;\n        double maxExtensionNameLengthLengthLengthIndex\
    \ = 0;\n        double maxExtensionNameLengthLengthLengthLength = 0;\n       \
    \ double maxExtensionNameLengthLengthLengthIndex = 0;\n        double maxExtensionNameLengthLengthLengthLength\
    \ = 0;\n        double maxExtensionNameLengthLengthLengthIndex = 0;\n        double\
    \ maxExtensionNameLengthLengthLengthLength = 0;\n        double maxExtensionNameLengthLengthLengthIndex\
    \ = 0;\n        double maxExtensionNameLengthLengthLengthLength = 0;\n       \
    \ double maxExtensionNameLengthLengthLengthIndex = 0;\n        double maxExtensionNameLengthLengthLengthLength\
    \ = 0;\n        double maxExtensionNameLengthLengthLengthIndex = 0;\n        double\
    \ maxExtensionNameLengthLengthLengthLength = 0;\n        double maxExtensionNameLengthLengthLengthIndex\
    \ = 0;\n        double maxExtensionNameLengthLengthLengthLength = 0;\n       \
    \ double maxExtensionNameLengthLengthLengthIndex = 0;\n        double maxExtensionNameLengthLengthLengthLength\
    \ = 0;\n        double maxExtensionNameLengthLengthLengthIndex = 0;\n        double\
    \ maxExtensionNameLengthLengthLengthLength = 0;\n        double maxExtensionNameLengthLengthLengthIndex\
    \ = 0;\n        double maxExtensionNameLengthLengthLengthLength = 0;\n       \
    \ double maxExtensionNameLengthLengthLengthIndex = 0;\n        double maxExtensionNameLengthLengthLengthLength\
    \ = 0;\n        double maxExtensionNameLengthLengthLengthIndex = 0;\n        double\
    \ maxExtensionNameLengthLengthLengthLength = 0;\n        double maxExtensionNameLengthLengthLengthIndex\
    \ = 0;\n        double maxExtensionNameLengthLengthLengthLength = 0;\n       \
    \ double maxExtensionNameLengthLengthLengthIndex = 0;\n        double maxExtensionNameLengthLengthLengthLength\
    \ = 0;\n        double maxExtensionNameLengthLengthLengthIndex = 0;\n        double\
    \ maxExtensionNameLengthLengthLengthLength = 0;\n        double maxExtensionNameLengthLengthLengthIndex\
    \ = 0;\n        double maxExtensionNameLengthLengthLengthLength = 0;\n       \
    \ double maxExtensionNameLengthLengthLengthIndex = 0;\n        double maxExtensionNameLengthLengthLengthLength\
    \ = 0;\n        double maxExtensionNameLengthLengthLengthIndex = 0;\n        double\
    \ maxExtensionNameLengthLengthLengthLength = 0;\n        double maxExtensionNameLengthLengthLengthIndex\
    \ = 0;\n        double maxExtensionNameLengthLengthLengthLength = 0;\n       \
    \ double maxExtensionNameLengthLengthLength", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0, 1).length();\n            int\
    \ sm = extension.substring(1).length();\n            strength = cap - sm;\n  \
    \          if (strength > 0) {\n                break;\n            }\n      \
    \  }\n        if (strength == 0) {\n            return class_name;\n        }\n\
    \        StringBuilder sb = new StringBuilder();\n        sb.append(class_name);\n\
    \        sb.append(\".\");\n        for (int i = 0; i < strength; i++) {\n   \
    \         sb.append(extensions_sorted.get(i));\n        }\n        return sb.toString();",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int max_strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.charAt(0) - extension.charAt(1);\n\
    \            if (extension_strength > max_strength) {\n                max_strength\
    \ = extension_strength;\n                strongest_extension = extension;\n  \
    \          }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest = -1;\n \
    \       for(String extension : extensions_sorted) {\n            int extension_length\
    \ = extension.length();\n            int extension_cap = extension_length / 2;\n\
    \            int extension_sm = (extension_length - extension_cap) / 2;\n    \
    \        int strength = extension_cap - extension_sm;\n            if(strength\
    \ > strongest) {\n                strongest = strength;\n            }\n     \
    \   }\n        return class_name + \".\" + extensions_sorted.get(strongest);",
  "        double strength = 0;\n        for(String extension : extensions) {\n  \
    \          int cap = extension.substring(0, 1).toUpperCase().length();\n     \
    \       int sm = extension.substring(0, 1).toLowerCase().length();\n         \
    \   double frac = cap - sm;\n            strength += frac;\n        }\n      \
    \  double max = Math.max(strength);\n        for(String extension : extensions)\
    \ {\n            int cap = extension.substring(0, 1).toUpperCase().length();\n\
    \            int sm = extension.substring(0, 1).toLowerCase().length();\n    \
    \        double frac = cap - sm;\n            if(frac >= max) {\n            \
    \    return class_name + \".\" + extension;\n            }\n        }\n      \
    \  return class_name;", "        double strength = 0;\n        double maxStrength\
    \ = 0;\n        double maxExtension = 0;\n        double maxExtensionIndex = 0;\n\
    \        double maxExtensionName = 0;\n        double maxExtensionNameIndex =\
    \ 0;\n        double maxExtensionNameLength = 0;\n        double maxExtensionNameLengthIndex\
    \ = 0;\n        double maxExtensionNameLengthLength = 0;\n        double maxExtensionNameLengthLengthIndex\
    \ = 0;\n        double maxExtensionNameLengthLengthLength = 0;\n        double\
    \ maxExtensionNameLengthLengthLength = 0;\n        double maxExtensionNameLengthLengthLength\
    \ = 0;\n        double maxExtensionNameLengthLengthLength = 0;\n        double\
    \ maxExtensionNameLengthLengthLength = 0;\n        double maxExtensionNameLengthLengthLength\
    \ = 0;\n        double maxExtensionNameLengthLengthLength = 0;\n        double\
    \ maxExtensionNameLengthLengthLength = 0;\n        double maxExtensionNameLengthLengthLength\
    \ = 0;\n        double maxExtensionNameLengthLengthLength = 0;\n        double\
    \ maxExtensionNameLengthLengthLength = 0;\n        double maxExtensionNameLengthLengthLength\
    \ = 0;\n        double maxExtensionNameLengthLengthLength = 0;\n        double\
    \ maxExtensionNameLengthLengthLength = 0;\n        double maxExtensionNameLengthLengthLength\
    \ = 0;\n        double maxExtensionNameLengthLengthLength = 0;\n        double\
    \ maxExtensionNameLengthLengthLength = 0;\n        double maxExtensionNameLengthLengthLength\
    \ = 0;\n        double maxExtensionNameLengthLengthLength = 0;\n        double\
    \ maxExtensionNameLengthLengthLength = 0;\n        double maxExtensionNameLengthLengthLength\
    \ = 0;\n        double maxExtensionNameLengthLengthLength = 0;\n        double\
    \ maxExtensionNameLengthLengthLength = 0;\n        double maxExtensionNameLengthLengthLength\
    \ = 0;\n        double maxExtensionNameLengthLengthLength = 0;\n        double\
    \ maxExtensionNameLengthLengthLength = 0;\n        double maxExtensionNameLengthLengthLength\
    \ = 0;\n        double maxExtensionNameLengthLengthLength = 0;\n        double\
    \ maxExtensionNameLengthLengthLength = 0;\n        double maxExtensionNameLengthLengthLength\
    \ = 0;\n        double maxExtensionNameLengthLengthLength = 0;\n        double\
    \ maxExtensionNameLengthLengthLength = 0;\n        double maxExtensionNameLengthLengthLength\
    \ = 0;\n        double maxExtensionNameLengthLengthLength = 0;\n        double\
    \ maxExtensionNameLengthLengthLength = 0;\n        double maxExtensionNameLengthLengthLength\
    \ = 0;\n        double maxExtensionNameLengthLengthLength = 0;\n        double\
    \ maxExtensionNameLengthLengthLength = 0;\n        double maxExtensionNameLengthLengthLength\
    \ = 0;\n        double maxExtensionNameLengthLengthLength = 0;\n        double\
    \ maxExtensionNameLengthLengthLength = 0;\n        double maxExtensionNameLengthLengthLength\
    \ = 0;\n        double maxExtensionNameLengthLengthLength = 0;\n        double\
    \ maxExtensionNameLength", "        double strength = -1;\n        double maxStrength\
    \ = -1;\n        for (String extension : extensions) {\n            int cap =\
    \ extension.substring(0, 1).length();\n            int sm = extension.substring(1).length();\n\
    \            double fraction = cap - sm;\n            strength += fraction;\n\
    \            if (strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n        }\n        if (maxStrength == -1) {\n            return\
    \ class_name;\n        }\n        double maxFraction = maxStrength / strength;\n\
    \        double minFraction = strength / maxStrength;\n        double maxIndex\
    \ = -1;\n        int minIndex = -1;\n        for (String extension : extensions)\
    \ {\n            int cap = extension.substring(0, 1).length();\n            int\
    \ sm = extension.substring(1).length();\n            double fraction = cap - sm;\n\
    \            if (fraction > maxFraction) {\n                maxIndex = extensions.indexOf(extension);\n\
    \                maxFraction = fraction;\n            }\n            if (fraction\
    \ < minFraction) {\n                minIndex = extensions.indexOf(extension);\n\
    \                minFraction = fraction;\n            }\n        }\n        if\
    \ (maxIndex == -1) {\n            return class_name;\n        }\n        return\
    \ class_name + \".\" + extensions.get(maxIndex);", "        double strength =\
    \ 0;\n        double max = 0;\n        for(String extension : extensions) {\n\
    \            int cap = extension.substring(0, 1).length();\n            int sm\
    \ = extension.substring(1).length();\n            strength += (cap - sm);\n  \
    \          max = Math.max(max, strength);\n        }\n        double strength_fraction\
    \ = strength / max;\n        ArrayList<String> strongest = new ArrayList<String>();\n\
    \        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      double extension_strength = cap - sm;\n            if(extension_strength\
    \ == strength_fraction) {\n                strongest.add(extension);\n       \
    \     }\n        }\n        if(strongest.size() > 1) {\n            Collections.sort(strongest);\n\
    \        }\n        return class_name + \".\" + strongest.get(0);", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        String strongest = null;\n        for\
    \ (String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      double fraction = cap - sm;\n            if (strength == -1 || strength\
    \ > fraction) {\n                strength = fraction;\n                strongest\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest;", "        double strength = -1;\n        double maxStrength = -1;\n\
    \        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1, 2).length();\n   \
    \         double fraction = cap - sm;\n            strength += fraction;\n   \
    \         if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n        }\n        for(String extension : extensions) {\n    \
    \        int cap = extension.substring(0, 1).length();\n            int sm = extension.substring(1,\
    \ 2).length();\n            double fraction = cap - sm;\n            if(fraction\
    \ == maxStrength) {\n                return class_name + \".\" + extension;\n\
    \            }\n        }\n        return class_name + \".\" + extensions.get(0);",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = 0;\n   \
    \     for(int i = 0; i < extensions_sorted.size(); i++) {\n            String\
    \ extension = extensions_sorted.get(i);\n            int cap = extension.length();\n\
    \            int sm = extension.toUpperCase().length();\n            strength\
    \ += (cap - sm);\n        }\n        double strength_double = strength / extensions_sorted.size();\n\
    \        double strength_double2 = Math.ceil(strength_double);\n        String\
    \ extension = extensions_sorted.get(0);\n        if(strength_double2 == strength_double)\
    \ {\n            return class_name + \".\" + extension;\n        } else {\n  \
    \          return class_name + \".\" + extension;\n        }", "        double\
    \ strength = 0;\n        double max = 0;\n        double min = 0;\n        double\
    \ sum = 0;\n        double average = 0;\n        double max2 = 0;\n        double\
    \ min2 = 0;\n        double sum2 = 0;\n        double average2 = 0;\n        double\
    \ max3 = 0;\n        double min3 = 0;\n        double sum3 = 0;\n        double\
    \ average3 = 0;\n        double max4 = 0;\n        double min4 = 0;\n        double\
    \ sum4 = 0;\n        double average4 = 0;\n        double max5 = 0;\n        double\
    \ min5 = 0;\n        double sum5 = 0;\n        double average5 = 0;\n        double\
    \ max6 = 0;\n        double min6 = 0;\n        double sum6 = 0;\n        double\
    \ average6 = 0;\n        double max7 = 0;\n        double min7 = 0;\n        double\
    \ sum7 = 0;\n        double average7 = 0;\n        double max8 = 0;\n        double\
    \ min8 = 0;\n        double sum8 = 0;\n        double average8 = 0;\n        double\
    \ max9 = 0;\n        double min9 = 0;\n        double sum9 = 0;\n        double\
    \ average9 = 0;\n        double max10 = 0;\n        double min10 = 0;\n      \
    \  double sum10 = 0;\n        double average10 = 0;\n        double max11 = 0;\n\
    \        double min11 = 0;\n        double sum11 = 0;\n        double average11\
    \ = 0;\n        double max12 = 0;\n        double min12 = 0;\n        double sum12\
    \ = 0;\n        double average12 = 0;\n        double max13 = 0;\n        double\
    \ min13 = 0;\n        double sum13 = 0;\n        double average13 = 0;\n     \
    \   double max14 = 0;\n        double min14 = 0;\n        double sum14 = 0;\n\
    \        double average14 = 0;\n        double max15 = 0;\n        double min15\
    \ = 0;\n        double sum15 = 0;\n        double average15 = 0;\n        double\
    \ max16 = 0;\n        double min16 = 0;\n        double sum16 = 0;\n        double\
    \ average16 = 0;\n        double max17 = 0;\n        double min17 = 0;\n     \
    \   double sum17 = 0;\n        double average17 = 0;\n        double max18 = 0;\n\
    \        double min18 = 0;\n        double sum18 = 0;\n        double average18\
    \ = 0;\n        double max19 = 0;\n        double min19 = 0;\n        double sum19\
    \ = 0;\n        double average19 = 0;\n        double max20 = 0;\n        double\
    \ min20 = 0;\n        double sum20 = 0;\n        double average20 = 0;\n     \
    \   double max21 = 0;\n        double min21 = 0;\n        double sum21 = 0;\n\
    \        double average21 = 0;\n        double max22 = 0;\n        double min22\
    \ = 0;\n        double sum22 = 0;\n        double average22 = 0;", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int max_strength = 0;\n        String strongest_extension = null;\n \
    \       for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.substring(extension.indexOf('C') - 1, extension.indexOf('C')).charAt(0)\
    \ - extension.substring(extension.indexOf('S') - 1, extension.indexOf('S')).charAt(0);\n\
    \            if (extension_strength > max_strength) {\n                max_strength\
    \ = extension_strength;\n                strongest_extension = extension;\n  \
    \          }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        for (String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).toUpperCase().length();\n            int sm = extension.substring(0, 1).toLowerCase().length();\n\
    \            double strength_extension = cap - sm;\n            if (strength <\
    \ strength_extension) {\n                strength = strength_extension;\n    \
    \        }\n        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = -1;\n  \
    \      String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_length = extension.length();\n            int extension_capital\
    \ = extension_length - 1;\n            int extension_smaller = extension_capital\
    \ - 1;\n            int extension_strength = extension_capital - extension_smaller;\n\
    \            if (extension_strength > strength) {\n                strength =\
    \ extension_strength;\n                strongest_extension = extension;\n    \
    \        }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        double max_strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            String extension_class = class_name + \".\" + extension;\n  \
    \          try {\n                Class<?> clazz = Class.forName(extension_class);\n\
    \                Method method = clazz.getMethod(\"getStrength\");\n         \
    \       strength = (Double) method.invoke(null);\n                if (strength\
    \ > max_strength) {\n                    max_strength = strength;\n          \
    \      }\n            } catch (ClassNotFoundException | NoSuchMethodException\
    \ | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException\
    \ e) {\n                e.printStackTrace();\n            }\n        }\n     \
    \   if (max_strength == -1) {\n            return class_name;\n        }\n   \
    \     double strength_fraction = max_strength / strength;\n        double extension_fraction\
    \ = strength_fraction - 1;\n        String extension_class_name = class_name +\
    \ \".\" + extensions_sorted.get(0);\n        if (extension_fraction > 0) {\n \
    \           extension_class_name = StrongestExtension(extension_class_name, extensions_sorted.subList(1,\
    \ extensions_sorted.size()));\n        }\n        return extension_class_name;",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest_extension\
    \ = -1;\n        String strongest_extension_name = \"\";\n        for (String\
    \ extension : extensions_sorted) {\n            int extension_strength = extension.matches(\"\
    [A-Z]+\").length();\n            if (extension_strength > strongest_extension)\
    \ {\n                strongest_extension = extension_strength;\n             \
    \   strongest_extension_name = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension_name;", "        double max_strength\
    \ = -1;\n        String strongest_extension = null;\n        for (String extension\
    \ : extensions) {\n            double extension_strength = extension.matches(\"\
    [A-Z]+\").length();\n            if (extension_strength > max_strength) {\n  \
    \              max_strength = extension_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.get(0).getClass().getSimpleName().toUpperCase().replaceAll(\"\
    [^A-Z]\", \"\").length() - extensions_sorted.get(1).getClass().getSimpleName().toUpperCase().replaceAll(\"\
    [^A-Z]\", \"\").length();\n        double max_strength = -1;\n        String strongest_extension\
    \ = null;\n        for (String extension : extensions_sorted) {\n            if\
    \ (extension.getClass().getSimpleName().toUpperCase().replaceAll(\"[^A-Z]\", \"\
    \").length() - extension.getClass().getSimpleName().toUpperCase().replaceAll(\"\
    [^A-Z]\", \"\").length() > max_strength) {\n                max_strength = extension.getClass().getSimpleName().toUpperCase().replaceAll(\"\
    [^A-Z]\", \"\").length() - extension.getClass().getSimpleName().toUpperCase().replaceAll(\"\
    [^A-Z]\", \"\").length();\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest_extension_index\
    \ = extensions_sorted.indexOf(extensions_sorted.get(0));\n        String strongest_extension\
    \ = extensions_sorted.get(strongest_extension_index);\n        extensions_sorted.remove(strongest_extension_index);\n\
    \        extensions_sorted.add(strongest_extension_index);\n        extensions_sorted.add(strongest_extension);\n\
    \        String strongest_extension_class = class_name + \".\" + strongest_extension;\n\
    \        return strongest_extension_class;", "        double strength = -1;\n\
    \        double maxStrength = -1;\n        for(String extension : extensions)\
    \ {\n            int cap = extension.substring(0, 1).length();\n            int\
    \ sm = extension.substring(1).length();\n            double fraction = cap - sm;\n\
    \            strength += fraction;\n            if(strength > maxStrength) {\n\
    \                maxStrength = strength;\n            }\n        }\n        for(String\
    \ extension : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            double fraction\
    \ = cap - sm;\n            strength += fraction;\n            if(strength > maxStrength)\
    \ {\n                maxStrength = strength;\n            }\n        }\n     \
    \   for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      double fraction = cap - sm;\n            strength += fraction;\n      \
    \      if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n        }\n        for(String extension : extensions) {\n    \
    \        int cap = extension.substring(0, 1).length();\n            int sm = extension.substring(1).length();\n\
    \            double fraction = cap - sm;\n            strength += fraction;\n\
    \            if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n        }\n        for(String extension : extensions) {\n    \
    \        int cap = extension.substring(0, 1).length();\n            int sm = extension.substring(1).length();\n\
    \            double fraction = cap - sm;\n            strength += fraction;\n\
    \            if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n        }\n        for(String extension : extensions) {\n    \
    \        int cap = extension.substring(0, 1).length();\n            int sm = extension.substring(1).length();\n\
    \            double fraction = cap - sm;\n            strength += fraction;\n\
    \            if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n        }\n        for(String extension : extensions) {\n    \
    \        int cap = extension.substring(0, 1).length();\n            int sm = extension.substring(1).length();\n\
    \            double fraction = cap - sm;\n            strength += fraction;\n\
    \            if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n        }\n        for(String extension : extensions) {\n    \
    \        int cap = extension.substring(0, 1).length();\n            int sm = extension.substring(1).length();\n\
    \            double fraction = cap - sm;\n            strength += fraction", " \
    \       ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.length();\n            int sm = class_name.substring(class_name.lastIndexOf('.')+1,\
    \ class_name.lastIndexOf('.')+1+cap).length();\n            double fraction =\
    \ cap - sm;\n            if (strength == -1 || strength > fraction) {\n      \
    \          strength = fraction;\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        double strongest = -1;\n        double strength = -1;\n        for(String\
    \ extension : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(0, 1).length();\n            double\
    \ fraction = cap - sm;\n            strength = fraction;\n            if((strongest\
    \ == -1) || (strength > strongest)) {\n                strongest = strength;\n\
    \            }\n        }\n        return class_name + \".\" + extensions.get(extensions.indexOf(strongest));",
  "        double max_strength = -1;\n        double min_strength = Double.MAX_VALUE;\n\
    \        for (String extension : extensions) {\n            double strength =\
    \ extension.charAt(0) - extension.charAt(extension.length() - 1);\n          \
    \  if (strength > max_strength) {\n                max_strength = strength;\n\
    \            }\n            if (strength < min_strength) {\n                min_strength\
    \ = strength;\n            }\n        }\n        if (max_strength == min_strength)\
    \ {\n            return class_name;\n        }\n        double strength = max_strength\
    \ - min_strength;\n        double frac = strength / max_strength;\n        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double max_extension_strength = -1;\n        for (String extension :\
    \ extensions_sorted) {\n            double extension_strength = extension.charAt(0)\
    \ - extension.charAt(extension.length() - 1);\n            if (extension_strength\
    \ > max_extension_strength) {\n                max_extension_strength = extension_strength;\n\
    \            }\n        }\n        double strength_frac = max_extension_strength\
    \ / max_strength;\n        if (strength_frac < frac) {\n            return class_name\
    \ + \".\" + extensions_sorted.get(0);\n        }\n        return class_name +\
    \ \".\" + extensions_sorted.get(extensions_sorted.size() - 1);", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        String strongest_extension = null;\n \
    \       for (String extension : extensions_sorted) {\n            int cap = extension.length();\n\
    \            int sm = extension.toUpperCase().length();\n            double frac\
    \ = cap - sm;\n            if (strength == -1 || strength > frac) {\n        \
    \        strength = frac;\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        int strongest_extension =\
    \ -1;\n        for(String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.substring(extension.indexOf('C') - 1, extension.indexOf('S')).charAt(0);\n\
    \            if(extension_strength > strongest_extension) {\n                strongest_extension\
    \ = extension_strength;\n            }\n        }\n        return class_name +\
    \ \".\" + extensions_sorted.get(extensions_sorted.indexOf(strongest_extension));",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest = -1;\n \
    \       for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.substring(extension.indexOf('C'), extension.indexOf('S'));\n   \
    \         if (extension_strength > strongest) {\n                strongest = extension_strength;\n\
    \            }\n        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.indexOf(strongest));",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.length();\n            int sm = class_name.substring(class_name.lastIndexOf('.')+1,\
    \ class_name.lastIndexOf('.')+1+cap).length();\n            double fraction =\
    \ cap - sm;\n            if (strength == -1 || fraction > strength) {\n      \
    \          strength = fraction;\n                strongest = extension;\n    \
    \        }\n        }\n        return class_name + \".\" + strongest;", "    \
    \    ArrayList<Integer> strengths = new ArrayList<Integer>();\n        for(String\
    \ extension : extensions) {\n            int extension_length = extension.length();\n\
    \            int extension_cap = extension_length / 2;\n            int extension_sm\
    \ = (extension_length - extension_cap) / 2;\n            int strength = extension_cap\
    \ - extension_sm;\n            strengths.add(strength);\n        }\n        Collections.sort(strengths);\n\
    \        int strongest_strength = strengths.get(0);\n        for(Integer strength\
    \ : strengths) {\n            if(strength == strongest_strength) {\n         \
    \       return class_name + \".\" + extensions.get(0);\n            }\n      \
    \  }\n        return class_name + \".\" + extensions.get(0);", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strength = -1;\n        String strongest_extension = null;\n    \
    \    for (String extension : extensions_sorted) {\n            int extension_length\
    \ = extension.length();\n            int extension_strength = extension_length\
    \ - extension.substring(extension_length - 1).length();\n            if (extension_strength\
    \ > strength) {\n                strength = extension_strength;\n            \
    \    strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        String strongest_extension = null;\n \
    \       for (int i = 0; i < extensions_sorted.size(); i++) {\n            String\
    \ extension = extensions_sorted.get(i);\n            int extension_length = extension.length();\n\
    \            int extension_upper = extension_length - 1;\n            int extension_lower\
    \ = extension_length - 2;\n            int extension_middle_upper = extension_length\
    \ - 3;\n            int extension_middle_lower = extension_length - 4;\n     \
    \       int extension_middle_middle_upper = extension_length - 5;\n          \
    \  int extension_middle_middle_lower = extension_length - 6;\n            int\
    \ extension_middle_middle_middle_upper = extension_length - 7;\n            int\
    \ extension_middle_middle_middle_lower = extension_length - 8;\n            int\
    \ extension_middle_middle_middle_middle_upper = extension_length - 9;\n      \
    \      int extension_middle_middle_middle_middle_lower = extension_length - 10;\n\
    \            int extension_middle_middle_middle_middle_middle_upper = extension_length\
    \ - 11;\n            int extension_middle_middle_middle_middle_middle_lower =\
    \ extension_length - 12;\n            int extension_middle_middle_middle_middle_middle_middle_upper\
    \ = extension_length - 13;\n            int extension_middle_middle_middle_middle_middle_middle_lower\
    \ = extension_length - 14;\n            int extension_middle_middle_middle_middle_middle_middle_middle_upper\
    \ = extension_length - 15;\n            int extension_middle_middle_middle_middle_middle_middle_middle_lower\
    \ = extension_length - 16;\n            int extension_middle_middle_middle_middle_middle_middle_middle_middle_upper\
    \ = extension_length - 17;\n            int extension_middle_middle_middle_middle_middle_middle_middle_middle_lower\
    \ = extension_length - 18;\n            int extension_middle_middle_middle_middle_middle_middle_middle_middle_upper\
    \ = extension_length - 19;\n            int extension_middle_middle_middle_middle_middle_middle_middle_middle_lower\
    \ = extension_length - 20;\n            int extension_middle_middle_middle_middle_middle_middle_middle_middle_upper\
    \ = extension_length - 21;\n            int extension_middle_middle_middle_middle_middle_middle_middle_middle_lower\
    \ = extension_length - 22;\n            int extension_middle_middle_middle_middle_middle_middle_middle_middle_upper\
    \ = extension_length - 23;\n            int extension_middle_middle_middle_middle_middle_middle_middle_middle_lower\
    \ = extension_length - 24;\n            int extension_middle_middle_middle_middle_middle_middle_middle_middle_middle_upper\
    \ = extension_length - 25;\n            int extension_middle_middle_middle_middle_middle_middle_middle_middle_middle_lower\
    \ = extension_length - 26;\n            int extension_middle_middle_middle_middle_middle_middle_middle_middle_middle_upper",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.get(extensions_sorted.size()\
    \ - 1).length() - extensions_sorted.get(extensions_sorted.size() - 1).length();\n\
    \        double strength_2 = extensions_sorted.get(extensions_sorted.size() -\
    \ 1).length();\n        double strength_3 = extensions_sorted.get(extensions_sorted.size()\
    \ - 1).length() / extensions_sorted.get(extensions_sorted.size() - 1).length();\n\
    \        double strength_4 = extensions_sorted.get(extensions_sorted.size() -\
    \ 1).length() % extensions_sorted.get(extensions_sorted.size() - 1).length();\n\
    \        double strength_5 = strength_2 / strength_3;\n        double strength_6\
    \ = strength_4 / strength_3;\n        double strength_7 = strength_5 / strength_3;\n\
    \        double strength_8 = strength_6 / strength_3;\n        double strength_9\
    \ = strength_7 / strength_3;\n        double strength_10 = strength_8 / strength_3;\n\
    \        double strength_11 = strength_9 / strength_3;\n        double strength_12\
    \ = strength_10 / strength_3;\n        double strength_13 = strength_11 / strength_3;\n\
    \        double strength_14 = strength_12 / strength_3;\n        double strength_15\
    \ = strength_13 / strength_3;\n        double strength_16 = strength_14 / strength_3;\n\
    \        double strength_17 = strength_15 / strength_3;\n        double strength_18\
    \ = strength_16 / strength_3;\n        double strength_19 = strength_17 / strength_3;\n\
    \        double strength_20 = strength_18 / strength_3;\n        double strength_21\
    \ = strength_19 / strength_3;\n        double strength_22 = strength_20 / strength_3;\n\
    \        double strength_23 = strength_21 / strength_3;\n        double strength_24\
    \ = strength_22 / strength_3;\n        double strength_25 = strength_23 / strength_3;\n\
    \        double strength_26 = strength_24 / strength_3;\n        double strength_27\
    \ = strength_25 / strength_3;\n        double strength_28 = strength_26 / strength_3;\n\
    \        double strength_29 = strength_27 / strength_3;\n        double strength_30\
    \ = strength_28 / strength_3;\n        double strength_31 = strength_29 / strength_3;\n\
    \        double ", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest_extension = null;\n        for(String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0,1).length();\n            int\
    \ sm = extension.substring(1,2).length();\n            double fraction = cap -\
    \ sm;\n            strength = Math.max(strength, fraction);\n            strongest_extension\
    \ = class_name + \".\" + extension;\n        }\n        return strongest_extension;",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.size();\n\
    \        double cap = class_name.chars().filter(Character::isUpperCase).count();\n\
    \        double sm = class_name.chars().filter(Character::isLowerCase).count();\n\
    \        double strength_frac = strength - cap - sm;\n        double strength_frac_sorted\
    \ = strength_frac / strength;\n        double strength_frac_sorted_sorted = strength_frac_sorted\
    \ * strength;\n        double strength_frac_sorted_sorted_sorted = strength_frac_sorted_sorted\
    \ + strength;\n        double strength_frac_sorted_sorted_sorted_sorted = strength_frac_sorted_sorted_sorted\
    \ - strength;\n        double strength_frac_sorted_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_sorted_sorted_sorted + strength;\n        double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_sorted_sorted_sorted_sorted - strength;\n        double\
    \ strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted = strength_frac_sorted_sorted_sorted_sorted_sorted_sorted\
    \ + strength;\n        double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted - strength;\n\
    \        double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ + strength;\n        double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ - strength;\n        double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ + strength;\n        double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ - strength;\n        double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ + strength;\n        double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ - strength;\n        double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_", "        double strength = 0;\n        double maxStrength\
    \ = 0;\n        double minStrength = Double.MAX_VALUE;\n        double maxExtension\
    \ = 0;\n        double minExtension = Double.MAX_VALUE;\n        for(String extension\
    \ : extensions) {\n            double extensionStrength = Double.parseDouble(extension.substring(extension.indexOf(\"\
    _\") + 1));\n            if(extensionStrength > maxStrength) {\n             \
    \   maxStrength = extensionStrength;\n                maxExtension = Double.parseDouble(extension.substring(0,\
    \ extension.indexOf(\"_\")));\n            }\n            if(extensionStrength\
    \ < minStrength) {\n                minStrength = extensionStrength;\n       \
    \         minExtension = Double.parseDouble(extension.substring(0, extension.indexOf(\"\
    _\")));\n            }\n        }\n        double strengthDifference = maxStrength\
    \ - minStrength;\n        double extensionDifference = maxExtension - minExtension;\n\
    \        if(strengthDifference == 0) {\n            return class_name + \".\"\
    \ + extensions.get(0);\n        }\n        if(extensionDifference == 0) {\n  \
    \          return class_name + \".\" + extensions.get(0);\n        }\n       \
    \ if(strengthDifference > extensionDifference) {\n            return class_name\
    \ + \".\" + extensions.get(0);\n        }\n        return class_name + \".\" +\
    \ extensions.get(1);", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        for (String extension : extensions_sorted) {\n            int cap = extension.length();\n\
    \            int sm = extension.toUpperCase().length();\n            double fraction\
    \ = cap - sm;\n            if (strength == -1 || fraction > strength) {\n    \
    \            strength = fraction;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions_sorted.get(extensions_sorted.size() - 1);", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = extensions_sorted.size();\n        double cap = class_name.charAt(0).toUpperCase().length();\n\
    \        double sm = class_name.charAt(0).toLowerCase().length();\n        double\
    \ strength_frac = strength / cap;\n        double strength_frac_2 = strength_frac\
    \ / sm;\n        double strength_frac_3 = strength_frac_2 * sm;\n        double\
    \ strength_frac_4 = strength_frac_3 * sm;\n        double strength_frac_5 = strength_frac_4\
    \ * sm;\n        double strength_frac_6 = strength_frac_5 * sm;\n        double\
    \ strength_frac_7 = strength_frac_6 * sm;\n        double strength_frac_8 = strength_frac_7\
    \ * sm;\n        double strength_frac_9 = strength_frac_8 * sm;\n        double\
    \ strength_frac_10 = strength_frac_9 * sm;\n        double strength_frac_11 =\
    \ strength_frac_10 * sm;\n        double strength_frac_12 = strength_frac_11 *\
    \ sm;\n        double strength_frac_13 = strength_frac_12 * sm;\n        double\
    \ strength_frac_14 = strength_frac_13 * sm;\n        double strength_frac_15 =\
    \ strength_frac_14 * sm;\n        double strength_frac_16 = strength_frac_15 *\
    \ sm;\n        double strength_frac_17 = strength_frac_16 * sm;\n        double\
    \ strength_frac_18 = strength_frac_17 * sm;\n        double strength_frac_19 =\
    \ strength_frac_18 * sm;\n        double strength_frac_20 = strength_frac_19 *\
    \ sm;\n        double strength_frac_21 = strength_frac_20 * sm;\n        double\
    \ strength_frac_22 = strength_frac_21 * sm;\n        double strength_frac_23 =\
    \ strength_frac_22 * sm;\n        double strength_frac_24 = strength_frac_23 *\
    \ sm;\n        double strength_frac_25 = strength_frac_24 * sm;\n        double\
    \ strength_frac_26 = strength_frac_25 * sm;\n        double strength_frac_27 =\
    \ strength_frac_26 * sm;\n        double strength_frac_28 = strength_frac_27 *\
    \ sm;\n        double strength_frac_29 = strength_frac_28 * sm;\n        double\
    \ strength_frac_30 = strength_frac_29 * sm;\n        double strength_frac_31 =\
    \ strength_frac_30 * sm;\n        double strength_frac_32 = strength", "     \
    \   ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n     \
    \   Collections.sort(extensions_sorted);\n        double strength = -1;\n    \
    \    String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.length();\n            int sm = extension.toUpperCase().length();\n\
    \            double fraction = cap - sm;\n            if (strength == -1 || fraction\
    \ > strength) {\n                strength = fraction;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        double max_strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0,1).length();\n            int\
    \ sm = extension.substring(1,2).length();\n            double strength_extension\
    \ = cap - sm;\n            if (strength_extension > max_strength) {\n        \
    \        max_strength = strength_extension;\n            }\n            if (strength_extension\
    \ == max_strength) {\n                strength = max_strength;\n            }\n\
    \        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()-1);",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.length();\n            int sm = extension.toLowerCase().length();\n\
    \            double fraction = cap - sm;\n            if (strength == -1 || fraction\
    \ > strength) {\n                strength = fraction;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        double strength = 0;\n        double maxStrength\
    \ = 0;\n        double maxExtension = 0;\n        for(String extension : extensions)\
    \ {\n            int cap = extension.substring(0, 1).length();\n            int\
    \ sm = extension.substring(1).length();\n            strength += (cap - sm);\n\
    \            if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \                maxExtension = extension;\n            }\n        }\n       \
    \ return class_name + \".\" + maxExtension;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.matches(\"[A-Z]+\").length();\n\
    \            if (extension_strength > strength) {\n                strength =\
    \ extension_strength;\n            }\n        }\n        return class_name + \"\
    .\" + extensions_sorted.get(extensions_sorted.size() - 1);", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        double max_strength = -1;\n        for\
    \ (String extension : extensions_sorted) {\n            int cap = extension.length();\n\
    \            int sm = extension.toLowerCase().length();\n            double fraction\
    \ = cap - sm;\n            if (fraction > max_strength) {\n                max_strength\
    \ = fraction;\n                strength = fraction;\n            }\n        }\n\
    \        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1) + \".\" + strength;", "        double strength = 0;\n        double max\
    \ = 0;\n        double min = 0;\n        double sum = 0;\n        double average\
    \ = 0;\n        double sum2 = 0;\n        double average2 = 0;\n        double\
    \ max2 = 0;\n        double min2 = 0;\n        double max3 = 0;\n        double\
    \ min3 = 0;\n        double max4 = 0;\n        double min4 = 0;\n        double\
    \ max5 = 0;\n        double min5 = 0;\n        double max6 = 0;\n        double\
    \ min6 = 0;\n        double max7 = 0;\n        double min7 = 0;\n        double\
    \ max8 = 0;\n        double min8 = 0;\n        double max9 = 0;\n        double\
    \ min9 = 0;\n        double max10 = 0;\n        double min10 = 0;\n        double\
    \ max11 = 0;\n        double min11 = 0;\n        double max12 = 0;\n        double\
    \ min12 = 0;\n        double max13 = 0;\n        double min13 = 0;\n        double\
    \ max14 = 0;\n        double min14 = 0;\n        double max15 = 0;\n        double\
    \ min15 = 0;\n        double max16 = 0;\n        double min16 = 0;\n        double\
    \ max17 = 0;\n        double min17 = 0;\n        double max18 = 0;\n        double\
    \ min18 = 0;\n        double max19 = 0;\n        double min19 = 0;\n        double\
    \ max20 = 0;\n        double min20 = 0;\n        double max21 = 0;\n        double\
    \ min21 = 0;\n        double max22 = 0;\n        double min22 = 0;\n        double\
    \ max23 = 0;\n        double min23 = 0;\n        double max24 = 0;\n        double\
    \ min24 = 0;\n        double max25 = 0;\n        double min25 = 0;\n        double\
    \ max26 = 0;\n        double min26 = 0;\n        double max27 = 0;\n        double\
    \ min27 = 0;\n        double max28 = 0;\n        double min28 = 0;\n        double\
    \ max29 = 0;\n        double min29 = 0;\n        double max30 = 0;\n        double\
    \ min30 = 0;\n        double max31 = 0;\n        double min31 = 0;\n        double\
    \ max32 = 0;\n        double min32 = 0;\n        double max33 = 0;\n        double\
    \ min33 = 0;\n        double max34 = 0;\n        double min34 = 0;\n        double\
    \ max35 = 0;\n        double min35 = 0;\n        double max36 = 0;\n        double\
    \ min36 = 0;\n        double max37 = 0;\n        double min37 = 0;\n        double\
    \ max38 = 0;\n        double min38 = 0;\n        double max39 = 0;\n        double\
    \ min39 = 0;\n        double max40 = 0;\n        double min40 = 0;\n        double\
    \ max41 = 0;\n        double min41 = 0;\n        double max42 = 0;", "       \
    \ ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n \
    \       Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            String extension_class_name = class_name + \".\" + extension;\n\
    \            try {\n                Class<?> extension_class = Class.forName(extension_class_name);\n\
    \                Method method_getName = extension_class.getMethod(\"getName\"\
    );\n                String extension_name = (String) method_getName.invoke(extension_class);\n\
    \                double extension_strength = extension_name.length() - extension_name.toLowerCase().length();\n\
    \                if (strength < extension_strength) {\n                    strength\
    \ = extension_strength;\n                    strongest_extension = extension;\n\
    \                }\n            } catch (ClassNotFoundException | NoSuchMethodException\
    \ | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException\
    \ e) {\n                e.printStackTrace();\n            }\n        }\n     \
    \   return class_name + \".\" + strongest_extension;", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest = -1;\n        String strongest_extension = \"\";\n   \
    \     for (int i = 0; i < extensions_sorted.size(); i++) {\n            String\
    \ extension = extensions_sorted.get(i);\n            int extension_length = extension.length();\n\
    \            int extension_strength = extension_length - extension.substring(extension_length\
    \ - 1).length();\n            if (strongest < extension_strength) {\n        \
    \        strongest = extension_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.get(0).length()\
    \ - extensions_sorted.get(1).length();\n        double strength_2 = extensions_sorted.get(1).length()\
    \ - extensions_sorted.get(2).length();\n        double strength_3 = extensions_sorted.get(2).length()\
    \ - extensions_sorted.get(3).length();\n        double strength_4 = extensions_sorted.get(3).length()\
    \ - extensions_sorted.get(4).length();\n        double strength_5 = extensions_sorted.get(4).length()\
    \ - extensions_sorted.get(5).length();\n        double strength_6 = extensions_sorted.get(5).length()\
    \ - extensions_sorted.get(6).length();\n        double strength_7 = extensions_sorted.get(6).length()\
    \ - extensions_sorted.get(7).length();\n        double strength_8 = extensions_sorted.get(7).length()\
    \ - extensions_sorted.get(8).length();\n        double strength_9 = extensions_sorted.get(8).length()\
    \ - extensions_sorted.get(9).length();\n        double strength_10 = extensions_sorted.get(9).length()\
    \ - extensions_sorted.get(10).length();\n        double strength_11 = extensions_sorted.get(10).length()\
    \ - extensions_sorted.get(11).length();\n        double strength_12 = extensions_sorted.get(11).length()\
    \ - extensions_sorted.get(12).length();\n        double strength_13 = extensions_sorted.get(12).length()\
    \ - extensions_sorted.get(13).length();\n        double strength_14 = extensions_sorted.get(13).length()\
    \ - extensions_sorted.get(14).length();\n        double strength_15 = extensions_sorted.get(14).length()\
    \ - extensions_sorted.get(15).length();\n        double strength_16 = extensions_sorted.get(15).length()\
    \ - extensions_sorted.get(16).length();\n        double strength_17 = extensions_sorted.get(16).length()\
    \ - extensions_sorted.get(17).length();\n        double strength_18 = extensions_sorted.get(17).length()\
    \ - extensions_sorted.get(18).length();\n        double strength_19 = extensions_sorted.get(18).length()\
    \ - extensions_sorted.get(19).length();\n        double strength_20 = extensions_sorted.get(19).length()\
    \ - extensions_sorted.get(20).length();\n        double strength_21 = extensions_sorted.get(",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        double max_strength = -1;\n        String strongest_extension = null;\n\
    \        for (String extension : extensions_sorted) {\n            try {\n   \
    \             Class<?> clazz = Class.forName(class_name + \".\" + extension);\n\
    \                Method method = clazz.getMethod(\"getStrength\");\n         \
    \       strength = (Double) method.invoke(clazz);\n                if (strength\
    \ > max_strength) {\n                    max_strength = strength;\n          \
    \          strongest_extension = extension;\n                }\n            }\
    \ catch (ClassNotFoundException | NoSuchMethodException | SecurityException |\
    \ IllegalAccessException | IllegalArgumentException | InvocationTargetException\
    \ e) {\n                e.printStackTrace();\n            }\n        }\n     \
    \   return class_name + \".\" + strongest_extension;", "        double strength\
    \ = -1;\n        double maxStrength = -1;\n        double maxExtension = -1;\n\
    \        double maxExtensionStrength = -1;\n        for(String extension : extensions)\
    \ {\n            String extensionName = extension.substring(0,1).toUpperCase()\
    \ + extension.substring(1);\n            int extensionStrength = extension.substring(1).toLowerCase().length();\n\
    \            strength += extensionStrength;\n            if(strength > maxStrength)\
    \ {\n                maxStrength = strength;\n                maxExtension = extension;\n\
    \                maxExtensionStrength = extensionStrength;\n            }\n  \
    \      }\n        if(maxStrength > 0) {\n            return class_name + \".\"\
    \ + maxExtension + \".\" + maxExtensionStrength;\n        } else {\n         \
    \   return class_name;\n        }", "        Set<String> extensions_set = new\
    \ HashSet<String>(extensions);\n        extensions_set.stream().filter(s -> s.matches(\"\
    [A-Z]+\")).forEach(s -> {\n            int cap = s.length();\n            int\
    \ sm = s.toLowerCase().length();\n            double strength = cap - sm;\n  \
    \          extensions_set.stream().filter(s1 -> s1.matches(\"[a-z]+\")).forEach(s\
    \ -> {\n                int cap1 = s.length();\n                int sm1 = s.toLowerCase().length();\n\
    \                double strength1 = cap1 - sm1;\n                if (strength\
    \ > strength1) {\n                    strength = strength1;\n                }\n\
    \            });\n        });\n        extensions_set.stream().filter(s -> s.matches(\"\
    [A-Z]+\")).forEach(s -> {\n            int cap = s.length();\n            int\
    \ sm = s.toLowerCase().length();\n            double strength = cap - sm;\n  \
    \          extensions_set.stream().filter(s1 -> s1.matches(\"[a-z]+\")).forEach(s\
    \ -> {\n                int cap1 = s.length();\n                int sm1 = s.toLowerCase().length();\n\
    \                double strength1 = cap1 - sm1;\n                if (strength\
    \ > strength1) {\n                    strength = strength1;\n                }\n\
    \            });\n        });\n        extensions_set.stream().filter(s -> s.matches(\"\
    [A-Z]+\")).forEach(s -> {\n            int cap = s.length();\n            int\
    \ sm = s.toLowerCase().length();\n            double strength = cap - sm;\n  \
    \          extensions_set.stream().filter(s1 -> s1.matches(\"[a-z]+\")).forEach(s\
    \ -> {\n                int cap1 = s.length();\n                int sm1 = s.toLowerCase().length();\n\
    \                double strength1 = cap1 - sm1;\n                if (strength\
    \ > strength1) {\n                    strength = strength1;\n                }\n\
    \            });\n        });\n        extensions_set.stream().filter(s -> s.matches(\"\
    [A-Z]+\")).forEach(s -> {\n            int cap = s.length();\n            int\
    \ sm = s.toLowerCase().length();\n            double strength = cap - sm;\n  \
    \          extensions_set.stream().filter(s1 -> s1.matches(\"[a-z]+\")).forEach(s\
    \ -> {\n                int cap1 = s.length();\n                int sm1 = s.toLowerCase().length();\n\
    \                double strength1 = cap1 - sm1;\n                if (strength\
    \ > strength1) {\n                    strength = strength1;\n                }\n\
    \            });\n        });\n        extensions_set.stream().filter(s -> s.matches(\"\
    [A-Z]+\")).forEach(s -> {\n            int cap = s.length();\n            int\
    \ sm = s.toLowerCase().length();\n            double strength = cap - sm;\n  \
    \          extensions_set.stream", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = extensions_sorted.get(0).length() - extensions_sorted.get(1).length();\n\
    \        double max_strength = -1;\n        String strongest_extension = null;\n\
    \        for (String extension : extensions_sorted) {\n            double extension_strength\
    \ = extension.length() - extension.substring(extension.length() - 1).length();\n\
    \            if (extension_strength > max_strength) {\n                max_strength\
    \ = extension_strength;\n                strongest_extension = extension;\n  \
    \          }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = 0;\n   \
    \     for (String extension : extensions_sorted) {\n            int extension_length\
    \ = extension.length();\n            int extension_cap = extension_length / 2;\n\
    \            int extension_sm = (extension_length - extension_cap) / 2;\n    \
    \        int strength_extension_cap = extension_cap - extension_sm;\n        \
    \    int strength_extension_sm = extension_sm - extension_cap;\n            if\
    \ (strength_extension_cap > strength) {\n                strength = strength_extension_cap;\n\
    \            }\n            if (strength_extension_sm > strength) {\n        \
    \        strength = strength_extension_sm;\n            }\n        }\n       \
    \ return class_name + \".\" + extensions.get(extensions_sorted.indexOf(extension));",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest_extension\
    \ = -1;\n        int strongest_extension_strength = -1;\n        for (String extension\
    \ : extensions_sorted) {\n            int extension_strength = extension.matches(\"\
    [A-Z]\").length() - extension.matches(\"[a-z]\").length();\n            if (extension_strength\
    \ > strongest_extension_strength) {\n                strongest_extension = extension;\n\
    \                strongest_extension_strength = extension_strength;\n        \
    \    }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        for(String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength += (cap - sm);\n        }\n        double strength_rounded = Math.round(strength\
    \ * 100.0) / 100.0;\n        double strength_rounded_rounded = Math.round(strength_rounded\
    \ * 100.0) / 100.0;\n        double strength_rounded_rounded_rounded = Math.round(strength_rounded_rounded\
    \ * 100.0) / 100.0;\n        double strength_rounded_rounded_rounded_rounded =\
    \ Math.round(strength_rounded_rounded_rounded * 100.0) / 100.0;\n        double\
    \ strength_rounded_rounded_rounded_rounded_rounded = Math.round(strength_rounded_rounded_rounded_rounded\
    \ * 100.0) / 100.0;\n        double strength_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.round(strength_rounded_rounded_rounded_rounded_rounded * 100.0) / 100.0;\n\
    \        double strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.round(strength_rounded_rounded_rounded_rounded_rounded_rounded * 100.0)\
    \ / 100.0;\n        double strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.round(strength_rounded_rounded_rounded_rounded_rounded_rounded * 100.0)\
    \ / 100.0;\n        double strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.round(strength_rounded_rounded_rounded_rounded_rounded_rounded * 100.0)\
    \ / 100.0;\n        double strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.round(strength_rounded_rounded_rounded_rounded_rounded_rounded * 100.0)\
    \ / 100.0;\n        double strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.round(strength_rounded_rounded_rounded_rounded_rounded_rounded * 100.0)\
    \ / 100.0;\n        double strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.round(strength_rounded_rounded_rounded_rounded_rounded * 100.0) / 100.0;\n\
    \        double strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.round(strength", "        Set<String> extensions_set = new HashSet<String>(extensions);\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extension", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = -1;\n  \
    \      String strongest_extension = null;\n        for(String extension : extensions_sorted)\
    \ {\n            int extension_length = extension.length();\n            int extension_cap\
    \ = extension_length - 1;\n            int extension_sm = 0;\n            for(int\
    \ i = 0; i < extension_cap; i++) {\n                if(extension.charAt(i) >=\
    \ 'A' && extension.charAt(i) <= 'Z') {\n                    extension_sm += 1;\n\
    \                }\n            }\n            int extension_strength = extension_cap\
    \ - extension_sm;\n            if(strength < extension_strength) {\n         \
    \       strength = extension_strength;\n                strongest_extension =\
    \ extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        double strength = 0;\n        double maxStrength = 0;\n        String strongest\
    \ = null;\n        for (String extension : extensions) {\n            String name\
    \ = extension.substring(extension.lastIndexOf(\".\")+1);\n            int cap\
    \ = name.toUpperCase().length();\n            int sm = name.toLowerCase().length();\n\
    \            double fraction = cap - sm;\n            strength += fraction;\n\
    \            if (strength > maxStrength) {\n                maxStrength = strength;\n\
    \                strongest = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest;", "        double strength = 0;\n        double\
    \ max = 0;\n        double min = 0;\n        double sum = 0;\n        double avg\
    \ = 0;\n        double sum2 = 0;\n        double avg2 = 0;\n        double sum3\
    \ = 0;\n        double avg3 = 0;\n        double sum4 = 0;\n        double avg4\
    \ = 0;\n        double sum5 = 0;\n        double avg5 = 0;\n        double sum6\
    \ = 0;\n        double avg6 = 0;\n        double sum7 = 0;\n        double avg7\
    \ = 0;\n        double sum8 = 0;\n        double avg8 = 0;\n        double sum9\
    \ = 0;\n        double avg9 = 0;\n        double sum10 = 0;\n        double avg10\
    \ = 0;\n        double sum11 = 0;\n        double avg11 = 0;\n        double sum12\
    \ = 0;\n        double avg12 = 0;\n        double sum13 = 0;\n        double avg13\
    \ = 0;\n        double sum14 = 0;\n        double avg14 = 0;\n        double sum15\
    \ = 0;\n        double avg15 = 0;\n        double sum16 = 0;\n        double avg16\
    \ = 0;\n        double sum17 = 0;\n        double avg17 = 0;\n        double sum18\
    \ = 0;\n        double avg18 = 0;\n        double sum19 = 0;\n        double avg19\
    \ = 0;\n        double sum20 = 0;\n        double avg20 = 0;\n        double sum21\
    \ = 0;\n        double avg21 = 0;\n        double sum22 = 0;\n        double avg22\
    \ = 0;\n        double sum23 = 0;\n        double avg23 = 0;\n        double sum24\
    \ = 0;\n        double avg24 = 0;\n        double sum25 = 0;\n        double avg25\
    \ = 0;\n        double sum26 = 0;\n        double avg26 = 0;\n        double sum27\
    \ = 0;\n        double avg27 = 0;\n        double sum28 = 0;\n        double avg28\
    \ = 0;\n        double sum29 = 0;\n        double avg29 = 0;\n        double sum30\
    \ = 0;\n        double avg30 = 0;\n        double sum31 = 0;\n        double avg31\
    \ = 0;\n        double sum32 = 0;\n        double avg32 = 0;\n        double sum33\
    \ = 0;\n        double avg33 = 0;\n        double sum34 = 0;\n        double avg34\
    \ = 0;\n        double sum35 = 0;\n        double avg35 = 0;\n        double sum36\
    \ = 0;\n        double avg36 = 0;\n        double sum37 = 0;\n        double avg37\
    \ = 0;\n        double sum38 = 0;\n        double avg38 = 0;\n        double sum39\
    \ = 0;\n        double avg39 = 0;\n        double sum40 = 0;\n        double avg40\
    \ = 0;\n        double sum41 = 0;\n        double avg41 = 0;\n        double sum42\
    \ = 0;\n        double avg42 = 0;\n        double sum", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = extensions_sorted.get(extensions_sorted.size() - 1).length()\
    \ - extensions_sorted.get(extensions_sorted.size() - 1).length();\n        if\
    \ (strength > 0) {\n            return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n        }\n        return class_name;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest_extension = -1;\n        for(String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.substring(extension.length()\
    \ - 1).replaceAll(\"[^A-Z]\", \"\").length();\n            if(extension_strength\
    \ > strongest_extension) {\n                strongest_extension = extension_strength;\n\
    \            }\n        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest = -1;\n \
    \       for(String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.substring(extension.length() - 1).replaceAll(\"[^A-Z]\", \"\").length();\n\
    \            if(extension_strength > strongest) {\n                strongest =\
    \ extension_strength;\n            }\n        }\n        return class_name + \"\
    .\" + extensions_sorted.get(extensions_sorted.size() - 1);", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest = -1;\n        String strongest_extension = \"\";\n   \
    \     for (String extension : extensions_sorted) {\n            int extension_length\
    \ = extension.length();\n            int extension_strength = extension_length\
    \ - extension.substring(extension_length - 1).length();\n            if (strongest\
    \ == -1 || extension_strength > strongest) {\n                strongest = extension_strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        Set<String>\
    \ extensions_set = new HashSet<>(extensions);\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extension", "        ArrayList<Integer>\
    \ strengths = new ArrayList<Integer>();\n        for(int i = 0; i < extensions.size();\
    \ i++) {\n            String extension = extensions.get(i);\n            int cap\
    \ = extension.substring(0, 1).toUpperCase().length();\n            int sm = extension.substring(0,\
    \ 1).toLowerCase().length();\n            int strength = cap - sm;\n         \
    \   strengths.add(strength);\n        }\n        Collections.sort(strengths);\n\
    \        int strongest = strengths.get(0);\n        for(int i = 0; i < extensions.size();\
    \ i++) {\n            String extension = extensions.get(i);\n            int cap\
    \ = extension.substring(0, 1).toUpperCase().length();\n            int sm = extension.substring(0,\
    \ 1).toLowerCase().length();\n            int strength = cap - sm;\n         \
    \   if(strength == strongest) {\n                return class_name + \".\" + extension;\n\
    \            }\n        }\n        return class_name + \".\" + extensions.get(0);",
  "        double strength = -1;\n        double maxStrength = -1;\n        for(String\
    \ extension : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            double strength_extension\
    \ = cap - sm;\n            if(strength_extension > strength) {\n             \
    \   strength = strength_extension;\n                maxStrength = strength;\n\
    \            }\n        }\n        if(maxStrength == -1) {\n            return\
    \ class_name;\n        }\n        for(String extension : extensions) {\n     \
    \       int cap = extension.substring(0, 1).length();\n            int sm = extension.substring(1).length();\n\
    \            double strength_extension = cap - sm;\n            if(strength_extension\
    \ == maxStrength) {\n                return class_name + \".\" + extension;\n\
    \            }\n        }\n        return class_name;", "        \n        //\
    \ Your code here\n        \n        return \"\";", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        String strongest_extension = null;\n \
    \       for (String extension : extensions_sorted) {\n            int cap = extension.length();\n\
    \            int sm = extension.toUpperCase().length();\n            double frac\
    \ = cap - sm;\n            if (strength == -1 || frac > strength) {\n        \
    \        strength = frac;\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        double strength = -1;\n        double maxStrength = -1;\n        for(String\
    \ extension : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            strength +=\
    \ (cap - sm);\n            if(strength > maxStrength) {\n                maxStrength\
    \ = strength;\n            }\n        }\n        if(maxStrength == -1) {\n   \
    \         return class_name;\n        }\n        double maxStrengthInt = Math.ceil(maxStrength);\n\
    \        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength += (cap - sm);\n            if(strength > maxStrength) {\n   \
    \             maxStrength = strength;\n            }\n        }\n        if(maxStrengthInt\
    \ == maxStrength) {\n            return class_name + \".\" + extensions.get(0);\n\
    \        }\n        return class_name + \".\" + extensions.get(maxStrengthInt);",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = 0;\n   \
    \     for (String extension : extensions_sorted) {\n            int extension_length\
    \ = extension.length();\n            int extension_cap = extension_length - 1;\n\
    \            int extension_sm = 0;\n            for (int i = 0; i < extension_cap;\
    \ i++) {\n                if (extension.charAt(i) >= 'A' && extension.charAt(i)\
    \ <= 'Z') {\n                    extension_sm += 1;\n                }\n     \
    \       }\n            strength += extension_cap - extension_sm;\n        }\n\
    \        double strength_fraction = strength / extensions_sorted.size();\n   \
    \     double strength_fraction_rounded = Math.round(strength_fraction * 100.0)\
    \ / 100.0;\n        String extension_strength = class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n        if (strength_fraction_rounded == strength_fraction) {\n     \
    \       return extension_strength;\n        }\n        if (strength_fraction_rounded\
    \ > strength_fraction) {\n            return StrongestExtension(extension_strength,\
    \ extensions_sorted);\n        }\n        return StrongestExtension(class_name,\
    \ extensions_sorted);", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0, 1).length();\n            int\
    \ sm = extension.substring(1).length();\n            double fraction = cap - sm;\n\
    \            if (strength == -1 || fraction > strength) {\n                strength\
    \ = fraction;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;", "     \
    \   ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.length();\n            int sm = class_name.substring(class_name.lastIndexOf('S')\
    \ + 1).length();\n            double fraction = cap - sm;\n            if (strength\
    \ == -1 || fraction > strength) {\n                strength = fraction;\n    \
    \            strongest_extension = extension;\n            }\n        }\n    \
    \    return class_name + \".\" + strongest_extension;", "        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n", "        double max_strength = -1;\n        String strongest_extension\
    \ = null;\n        for (String extension : extensions) {\n            int extension_strength\
    \ = extension.substring(extension.lastIndexOf(\"_\") + 1).length();\n        \
    \    if (extension_strength > max_strength) {\n                max_strength =\
    \ extension_strength;\n                strongest_extension = extension;\n    \
    \        }\n        }\n        return class_name + \".\" + strongest_extension;"]
stop_tokens:
- "\n    }\n"
