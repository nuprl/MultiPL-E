name: HumanEval_90_next_smallest
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given an array array list of integers.\n    // Write\
  \ a function next_smallest() that returns the 2nd smallest element of the array\
  \ list.\n    // Return null if there is no such element.\n    // >>> nextSmallest((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))\n\
  \    // 2l\n    // >>> nextSmallest((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)1l, (long)4l, (long)3l, (long)2l))))\n    // 2l\n    // >>> nextSmallest((new\
  \ ArrayList<Long>(Arrays.asList())))\n    // Optional.empty()\n    // >>> nextSmallest((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)1l))))\n    // Optional.empty()\n\
  \    public static Optional<Long> nextSmallest(ArrayList<Long> lst) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(nextSmallest((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals(2l));\n\
  \    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)5l, (long)1l,\
  \ (long)4l, (long)3l, (long)2l)))).equals(2l));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
  \    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)))).equals(Optional.empty()));\n\
  \    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l,\
  \ (long)1l, (long)1l, (long)0l)))).equals(1l));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)1l)))).equals(Optional.empty()));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)-35l,\
  \ (long)34l, (long)12l, (long)-45l)))).equals(-35l));\n    }\n\n}\n"
completions: ["        long smallest = lst.get(0);\n        long secondSmallest =\
    \ lst.get(1);\n        for(long i = 2; i < lst.size(); i++) {\n            if(lst.get(i)\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst.get(i);\n            } else if(lst.get(i) == smallest) {\n           \
    \     secondSmallest = lst.get(i);\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        Long min1 = lst.get(0);\n        Long min2 = lst.get(1);\n        Long\
    \ min3 = lst.get(2);\n        Long min4 = lst.get(3);\n        Long min5 = lst.get(4);\n\
    \        Long min6 = lst.get(5);\n        Long min7 = lst.get(6);\n        Long\
    \ min8 = lst.get(7);\n        Long min9 = lst.get(8);\n        Long min10 = lst.get(9);\n\
    \        Long min11 = lst.get(10);\n        Long min12 = lst.get(11);\n      \
    \  Long min13 = lst.get(12);\n        Long min14 = lst.get(13);\n        Long\
    \ min15 = lst.get(14);\n        Long min16 = lst.get(15);\n        Long min17\
    \ = lst.get(16);\n        Long min18 = lst.get(17);\n        Long min19 = lst.get(18);\n\
    \        Long min20 = lst.get(19);\n        Long min21 = lst.get(20);\n      \
    \  Long min22 = lst.get(21);\n        Long min23 = lst.get(22);\n        Long\
    \ min24 = lst.get(23);\n        Long min25 = lst.get(24);\n        Long min26\
    \ = lst.get(25);\n        Long min27 = lst.get(26);\n        Long min28 = lst.get(27);\n\
    \        Long min29 = lst.get(28);\n        Long min30 = lst.get(29);\n      \
    \  Long min31 = lst.get(30);\n        Long min32 = lst.get(31);\n        Long\
    \ min33 = lst.get(32);\n        Long min34 = lst.get(33);\n        Long min35\
    \ = lst.get(34);\n        Long min36 = lst.get(35);\n        Long min37 = lst.get(36);\n\
    \        Long min38 = lst.get(37);\n        Long min39 = lst.get(38);\n      \
    \  Long min40 = lst.get(39);\n        Long min41 = lst.get(40);\n        Long\
    \ min42 = lst.get(41);\n        Long min43 = lst.get(42);\n        Long min44\
    \ = lst.get(43);\n        Long min45 = lst.get(44);\n        Long min46 = lst.get(45);\n\
    \        Long min47 = lst.get(46);\n        Long min48 = lst.get(47);\n      \
    \  ", "        Optional<Long> result = Optional.empty();\n        if (lst.size()\
    \ > 0) {\n            Long smallest = lst.get(0);\n            for (int i = 1;\
    \ i < lst.size(); i++) {\n                if (lst.get(i) < smallest) {\n     \
    \               smallest = lst.get(i);\n                }\n            }\n   \
    \         result = Optional.of(smallest);\n        }\n        return result;",
  "        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long min2 = lst.get(1);\n        long\
    \ min3 = lst.get(2);\n        long min4 = lst.get(3);\n        long min5 = lst.get(4);\n\
    \        long min6 = lst.get(5);\n        long min7 = lst.get(6);\n        long\
    \ min8 = lst.get(7);\n        long min9 = lst.get(8);\n        long min10 = lst.get(9);\n\
    \        long min11 = lst.get(10);\n        long min12 = lst.get(11);\n      \
    \  long min13 = lst.get(12);\n        long min14 = lst.get(13);\n        long\
    \ min15 = lst.get(14);\n        long min16 = lst.get(15);\n        long min17\
    \ = lst.get(16);\n        long min18 = lst.get(17);\n        long min19 = lst.get(18);\n\
    \        long min20 = lst.get(19);\n        long min21 = lst.get(20);\n      \
    \  long min22 = lst.get(21);\n        long min23 = lst.get(22);\n        long\
    \ min24 = lst.get(23);\n        long min25 = lst.get(24);\n        long min26\
    \ = lst.get(25);\n        long min27 = lst.get(26);\n        long min28 = lst.get(27);\n\
    \        long min29 = lst.get(28);\n        long min30 = lst.get(29);\n      \
    \  long min31 = lst.get(30);\n        long min32 = lst.get(31);\n        long\
    \ min33 = lst.get(32);\n        long min34 = lst.get(33);\n        long min35\
    \ = lst.get(34);\n        long min36 = lst.get(35);\n        long min37 = lst.get(36);\n\
    \        long min38 = lst.get(37);\n        long min39 = lst.get(38);\n      \
    \  long min40 = lst.get(39);\n        long min41 = lst.get(40);\n        long\
    \ min42 = lst.get(41);\n        long min43 = lst.get(42);\n        long min44\
    \ = lst.get(43);\n        long min45 = lst.get(44);\n        long min46 = lst.get(45);\n\
    \        long min47 = lst.get(46);\n        long min48 = lst.get(47);\n      \
    \  long min49 = lst.get(48);\n        long min50 = lst.get(49);\n        long\
    \ min51 = lst.get(50);\n        long min52 = lst.get(51);\n        long min53\
    \ = lst.get(52);\n        ", "        if (lst.isEmpty()) return Optional.empty();\n\
    \        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for (int i = 2; i < lst.size(); i++) {\n            if (lst.get(i) <\
    \ smallest) {\n                secondSmallest = lst.get(i);\n                smallest\
    \ = lst.get(i);\n            } else if (lst.get(i) == smallest) {\n          \
    \      if (lst.get(i) < secondSmallest) {\n                    secondSmallest\
    \ = lst.get(i);\n                }\n            }\n        }\n        return Optional.of(secondSmallest);",
  "        Optional<Long> result = Optional.empty();\n        if (lst.size() > 0)\
    \ {\n            Long minValue = lst.get(0);\n            for (int i = 1; i <\
    \ lst.size(); i++) {\n                if (minValue > lst.get(i)) {\n         \
    \           minValue = lst.get(i);\n                }\n            }\n       \
    \     result = Optional.of(minValue);\n        }\n        return result;", " \
    \       if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for (long i = 2; i < lst.size(); i++) {\n            if (lst.get(i) <\
    \ smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst.get(i);\n            } else if (lst.get(i) == smallest) {\n          \
    \      secondSmallest = lst.get(i);\n            }\n        }\n        return\
    \ Optional.of(secondSmallest);", "        Optional<Long> result = Optional.empty();\n\
    \        if (lst.size() > 0) {\n            Long smallest = lst.get(0);\n    \
    \        for (int i = 1; i < lst.size(); i++) {\n                if (lst.get(i)\
    \ < smallest) {\n                    result = Optional.of(lst.get(i));\n     \
    \               smallest = lst.get(i);\n                }\n            }\n   \
    \     }\n        return result;", "        Optional<Long> result = Optional.empty();\n\
    \        if (lst.size() > 0) {\n            Long min = lst.get(0);\n         \
    \   for (int i = 1; i < lst.size(); i++) {\n                if (lst.get(i) < min)\
    \ {\n                    min = lst.get(i);\n                }\n            }\n\
    \            result = Optional.of(min);\n        }\n        return result;", " \
    \       Collections.sort(lst);\n        if (lst.size() >= 2) {\n            return\
    \ Optional.of(lst.get(2));\n        }\n        return Optional.empty();", "  \
    \      if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for (int i = 2; i < lst.size(); i++) {\n            if (lst.get(i) <\
    \ smallest) {\n                secondSmallest = lst.get(i);\n                smallest\
    \ = lst.get(i);\n            } else if (lst.get(i) == smallest) {\n          \
    \      secondSmallest = lst.get(i);\n            }\n        }\n        return\
    \ Optional.of(secondSmallest);", "        if (lst.size() <= 1) return Optional.empty();\n\
    \        Long smallest = lst.get(0);\n        Long secondSmallest = lst.get(1);\n\
    \        for (int i = 2; i < lst.size(); i++) {\n            if (lst.get(i) <\
    \ smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst.get(i);\n            } else if (lst.get(i) == smallest) {\n          \
    \      secondSmallest = lst.get(i);\n            }\n        }\n        return\
    \ Optional.of(secondSmallest);", "        if (lst.size() == 0) {\n           \
    \ return Optional.empty();\n        }\n        long min = lst.get(0);\n      \
    \  long max = lst.get(0);\n        for (long i : lst) {\n            if (i < min)\
    \ {\n                min = i;\n            }\n            if (i > max) {\n   \
    \             max = i;\n            }\n        }\n        return Optional.of(max);",
  "        Optional<Long> result = Optional.empty();\n        for(Long i : lst) {\n\
    \            if(i == null || i > result.orElse(null)) {\n                result\
    \ = Optional.of(i);\n            }\n        }\n        return result;", "    \
    \    long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for(long i : lst) {\n            if(i<smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = i;\n            }\n            if(i>smallest)\
    \ {\n                secondSmallest = i;\n            }\n        }\n        return\
    \ Optional.ofNullable(secondSmallest);", "        Optional<Long> result = Optional.empty();\n\
    \        if (lst.size() > 0) {\n            Long smallest = lst.get(0);\n    \
    \        for (int i = 1; i < lst.size(); i++) {\n                if (lst.get(i)\
    \ < smallest) {\n                    smallest = lst.get(i);\n                }\n\
    \            }\n            result = Optional.of(smallest);\n        }\n     \
    \   return result;", "        long smallest = lst.get(0);\n        long secondSmallest\
    \ = lst.get(1);\n        for(long i : lst) {\n            if(i<smallest) {\n \
    \               secondSmallest = smallest;\n                smallest = i;\n  \
    \          }\n            if(i>smallest) {\n                secondSmallest = i;\n\
    \            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        long min = lst.stream().min(Comparator.naturalOrder()).get();\n       \
    \ long max = lst.stream().max(Comparator.naturalOrder()).get();\n        if (min\
    \ == max) {\n            return Optional.empty();\n        }\n        return Optional.of(lst.get(lst.indexOf(min)));",
  "        Optional<Long> result = Optional.empty();\n        Long min = null;\n \
    \       for (Long l : lst) {\n            if (min == null || l < min) {\n    \
    \            min = l;\n                result = Optional.of(l);\n            }\n\
    \        }\n        return result;", "        Collections.sort(lst);\n       \
    \ if (lst.size() == 0) {\n            return Optional.empty();\n        }\n  \
    \      Long result = lst.get(1);\n        if (lst.size() > 2) {\n            Long\
    \ second = lst.get(2);\n            if (second < result) {\n                result\
    \ = second;\n            }\n        }\n        return Optional.of(result);", " \
    \       long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        if (lst.size() > 2) {\n            for (int i = 2; i < lst.size(); i++)\
    \ {\n                long current = lst.get(i);\n                if (current <\
    \ smallest) {\n                    secondSmallest = smallest;\n              \
    \      smallest = current;\n                } else if (current < secondSmallest)\
    \ {\n                    secondSmallest = current;\n                }\n      \
    \      }\n        }\n        return Optional.ofNullable(secondSmallest);", " \
    \       Collections.sort(lst);\n        if (lst.size() == 0) {\n            return\
    \ Optional.empty();\n        }\n        Long second = lst.get(1);\n        if\
    \ (second == null) {\n            return Optional.empty();\n        }\n      \
    \  return Optional.of(second);", "        Optional<Long> result = Optional.empty();\n\
    \        long smallest = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long secondSmallest = lst.stream().filter(x -> x < smallest).min(Comparator.naturalOrder()).get();\n\
    \        if (secondSmallest == smallest) {\n            result = Optional.of(secondSmallest);\n\
    \        }\n        return result;", "        Optional<Long> result = Optional.empty();\n\
    \        if (lst.size() > 0) {\n            Long smallest = lst.get(0);\n    \
    \        Long second = smallest;\n            for (int i = 1; i < lst.size();\
    \ i++) {\n                if (lst.get(i) < smallest) {\n                    second\
    \ = smallest;\n                    smallest = lst.get(i);\n                } else\
    \ if (lst.get(i) == smallest) {\n                    second = lst.get(i);\n  \
    \              }\n            }\n            result = Optional.of(second);\n \
    \       }\n        return result;", "        Collections.sort(lst);\n        if\
    \ (lst.size() > 1) {\n            return Optional.of(lst.get(1));\n        }\n\
    \        return Optional.empty();", "        if (lst.isEmpty()) {\n          \
    \  return Optional.empty();\n        }\n        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        for (int i = 2; i < lst.size();\
    \ i++) {\n            long current = lst.get(i);\n            if (current < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = current;\n\
    \            } else if (current > secondSmallest) {\n                secondSmallest\
    \ = current;\n            }\n        }\n        return Optional.of(secondSmallest);",
  "        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        Long min = lst.get(0);\n        Long min2 = lst.get(1);\n        for\
    \ (int i = 2; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n  \
    \              min = lst.get(i);\n                min2 = lst.get(i-1);\n     \
    \       }\n        }\n        return Optional.of(min2);", "        Optional<Long>\
    \ result = Optional.empty();\n        Long min = null;\n        for(Long l : lst)\
    \ {\n            if(min == null || l < min) {\n                min = l;\n    \
    \            result = Optional.of(l);\n            }\n        }\n        return\
    \ result;", "        Optional<Long> result = Optional.empty();\n        if (lst.size()\
    \ > 0) {\n            Long smallest = lst.get(0);\n            for (int i = 1;\
    \ i < lst.size(); i++) {\n                if (lst.get(i) < smallest) {\n     \
    \               smallest = lst.get(i);\n                }\n            }\n   \
    \         result = Optional.of(smallest);\n        }\n        return result;",
  "        Optional<Long> result = Optional.empty();\n        Long smallest = lst.stream().min(Comparator.naturalOrder()).orElse(null);\n\
    \        if (smallest != null)\n            result = Optional.of(smallest);\n\
    \        return result;", "        Collections.sort(lst);\n        if (lst.size()\
    \ >= 2) {\n            return Optional.of(lst.get(1));\n        }\n        return\
    \ Optional.empty();", "        if (lst.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        Long smallest = lst.get(0);\n        Long secondSmallest =\
    \ lst.get(1);\n        Long thirdSmallest = lst.get(2);\n        Long fourthSmallest\
    \ = lst.get(3);\n        Long fifthSmallest = lst.get(4);\n        if (smallest\
    \ < secondSmallest) {\n            if (secondSmallest < thirdSmallest) {\n   \
    \             if (thirdSmallest < fourthSmallest) {\n                    if (fourthSmallest\
    \ < fifthSmallest) {\n                        return Optional.of(fifthSmallest);\n\
    \                    } else {\n                        return Optional.of(fourthSmallest);\n\
    \                    }\n                } else {\n                    return Optional.of(thirdSmallest);\n\
    \                }\n            } else {\n                return Optional.of(secondSmallest);\n\
    \            }\n        } else {\n            return Optional.of(smallest);\n\
    \        }", "        long min = lst.get(0);\n        long max = lst.get(0);\n\
    \        for (long i : lst) {\n            if (i < min) {\n                min\
    \ = i;\n            } else if (i > max) {\n                max = i;\n        \
    \    }\n        }\n        return Optional.ofNullable(max);", "        if (lst.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long max = lst.get(0);\n        for (long i : lst) {\n            if\
    \ (i < min) {\n                min = i;\n            } else if (i > max) {\n \
    \               max = i;\n            }\n        }\n        return Optional.ofNullable(max);",
  "        Optional<Long> result = Optional.empty();\n        if (lst.size() > 0)\
    \ {\n            Long min = lst.get(0);\n            for (int i = 1; i < lst.size();\
    \ i++) {\n                if (lst.get(i) < min) {\n                    min = lst.get(i);\n\
    \                }\n            }\n            result = Optional.of(min);\n  \
    \      }\n        return result;", "        if (lst.size() == 0) {\n         \
    \   return Optional.empty();\n        }\n        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        for (int i = 2; i < lst.size();\
    \ i++) {\n            if (lst.get(i) < smallest) {\n                secondSmallest\
    \ = lst.get(i);\n                smallest = lst.get(i);\n            } else if\
    \ (lst.get(i) == smallest) {\n                secondSmallest = lst.get(i);\n \
    \           }\n        }\n        return Optional.of(secondSmallest);", "    \
    \    Collections.sort(lst);\n        if (lst.size() > 1) {\n            return\
    \ Optional.of(lst.get(1));\n        }\n        return Optional.empty();", "  \
    \      long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        long thirdSmallest = lst.get(2);\n        long fourthSmallest = lst.get(3);\n\
    \        long fifthSmallest = lst.get(4);\n        long sixthSmallest = lst.get(5);\n\
    \        long seventhSmallest = lst.get(6);\n        long eighthSmallest = lst.get(7);\n\
    \        long ninthSmallest = lst.get(8);\n        long tenthSmallest = lst.get(9);\n\
    \        long eleventhSmallest = lst.get(10);\n        long twelfthSmallest =\
    \ lst.get(11);\n        long thirteenthSmallest = lst.get(12);\n        long fourteenthSmallest\
    \ = lst.get(13);\n        long fifteenthSmallest = lst.get(14);\n        long\
    \ sixteenthSmallest = lst.get(15);\n        long seventeenthSmallest = lst.get(16);\n\
    \        long eighteenthSmallest = lst.get(17);\n        long nineteenthSmallest\
    \ = lst.get(18);\n        long twentiethSmallest = lst.get(19);\n        long\
    \ twentyFirstSmallest = lst.get(20);\n        long twentySecondSmallest = lst.get(21);\n\
    \        long twentyThirdSmallest = lst.get(22);\n        long twentyFourthSmallest\
    \ = lst.get(23);\n        long twentyFifthSmallest = lst.get(24);\n        long\
    \ twentySixthSmallest = lst.get(25);\n        long twentySeventhSmallest = lst.get(26);\n\
    \        long twentyEighthSmallest = lst.get(27);\n        long twentyNinthSmallest\
    \ = lst.get(28);\n        long thirtiethSmallest = lst.get(29);\n        long\
    \ thirtyFirstSmallest = lst.get(30);\n        long thirtySecondSmallest = lst.get(31);\n\
    \        long thirtyThirdSmallest = lst.get(32);\n        long thirtyFourthSmallest\
    \ = lst.get(33);\n        long thirtyFifthSmallest = lst.get(34);\n        long\
    \ thirtySixthSmallest = lst.get(35);\n        long thirtySeventhSmallest = lst.get(36);\n\
    \        long thirtyEighthSmallest = lst.get(37);\n        long thirtyNinthSmallest\
    \ = lst.get(38);", "        if (lst.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        long smallest = lst.get(0);\n        long secondSmallest =\
    \ lst.get(1);\n        long thirdSmallest = lst.get(2);\n        long fourthSmallest\
    \ = lst.get(3);\n        long fifthSmallest = lst.get(4);\n        long sixthSmallest\
    \ = lst.get(5);\n        if (smallest > secondSmallest && smallest > thirdSmallest\
    \ && smallest > fourthSmallest && smallest > fifthSmallest && smallest > sixthSmallest)\
    \ {\n            return Optional.of(smallest);\n        } else if (secondSmallest\
    \ > smallest && secondSmallest > thirdSmallest && secondSmallest > fourthSmallest\
    \ && secondSmallest > fifthSmallest && secondSmallest > sixthSmallest) {\n   \
    \         return Optional.of(secondSmallest);\n        } else if (thirdSmallest\
    \ > smallest && thirdSmallest > secondSmallest && thirdSmallest > fourthSmallest\
    \ && thirdSmallest > fifthSmallest && thirdSmallest > sixthSmallest) {\n     \
    \       return Optional.of(thirdSmallest);\n        } else if (fourthSmallest\
    \ > smallest && fourthSmallest > secondSmallest && fourthSmallest > thirdSmallest\
    \ && fourthSmallest > fifthSmallest && fourthSmallest > sixthSmallest) {\n   \
    \         return Optional.of(fourthSmallest);\n        } else if (fifthSmallest\
    \ > smallest && fifthSmallest > secondSmallest && fifthSmallest > thirdSmallest\
    \ && fifthSmallest > fourthSmallest && fifthSmallest > sixthSmallest) {\n    \
    \        return Optional.of(fifthSmallest);\n        } else if (sixthSmallest\
    \ > smallest && sixthSmallest > secondSmallest && sixthSmallest > thirdSmallest\
    \ && sixthSmallest > fourthSmallest && sixthSmallest > fifthSmallest) {\n    \
    \        return Optional.of(sixthSmallest);\n        } else {\n            return\
    \ Optional.empty();\n        }", "        Collections.sort(lst);\n        if (lst.size()\
    \ > 1) {\n            return Optional.of(lst.get(1));\n        }\n        return\
    \ Optional.empty();", "        if (lst.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        long smallest = lst.get(0);\n        long secondSmallest =\
    \ lst.get(1);\n        for (int i = 2; i < lst.size(); i++) {\n            if\
    \ (lst.get(i) < smallest) {\n                secondSmallest = lst.get(i);\n  \
    \              smallest = lst.get(i);\n            } else if (lst.get(i) == smallest)\
    \ {\n                secondSmallest = lst.get(i);\n            }\n        }\n\
    \        return Optional.ofNullable(secondSmallest);", "        Optional<Long>\
    \ ret = Optional.empty();\n        if (lst.size() > 0) {\n            long smallest\
    \ = lst.get(0);\n            for (int i = 1; i < lst.size(); i++) {\n        \
    \        if (lst.get(i) < smallest) {\n                    ret = Optional.of(lst.get(i));\n\
    \                    smallest = lst.get(i);\n                }\n            }\n\
    \        }\n        return ret;", "        long smallest = lst.get(0);\n     \
    \   long secondSmallest = lst.get(1);\n        for(int i = 2; i < lst.size();\
    \ i++) {\n            if(lst.get(i) < smallest) {\n                secondSmallest\
    \ = lst.get(i);\n                smallest = lst.get(i);\n            }\n     \
    \   }\n        return Optional.ofNullable(secondSmallest);", "        long min\
    \ = lst.get(0);\n        long max = lst.get(lst.size() - 1);\n        long mid\
    \ = min + ((max - min) / 2);\n        if (mid == min) {\n            return Optional.of(mid);\n\
    \        } else if (mid == max) {\n            return Optional.of(mid);\n    \
    \    } else {\n            return Optional.of(mid);\n        }", "        Collections.sort(lst);\n\
    \        if (lst.size() <= 1) return Optional.empty();\n        Long secondSmallest\
    \ = lst.get(1);\n        lst.remove(lst.size() - 1);\n        return Optional.of(secondSmallest);",
  "        Optional<Long> res = lst.stream().sorted().skip(1).findFirst();\n     \
    \   if (res.isPresent()) {\n            return res;\n        }\n        return\
    \ Optional.empty();", "        long smallest = lst.get(0);\n        long secondSmallest\
    \ = lst.get(1);\n        for(int i = 2; i < lst.size(); i++) {\n            if(lst.get(i)\
    \ < smallest) {\n                secondSmallest = lst.get(i);\n              \
    \  smallest = lst.get(i);\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        long thirdSmallest = lst.get(2);\n        long fourthSmallest = lst.get(3);\n\
    \        long fifthSmallest = lst.get(4);\n        long sixthSmallest = lst.get(5);\n\
    \        long seventhSmallest = lst.get(6);\n        long eighthSmallest = lst.get(7);\n\
    \        long ninthSmallest = lst.get(8);\n        long tenthSmallest = lst.get(9);\n\
    \        long eleventhSmallest = lst.get(10);\n        long twelfthSmallest =\
    \ lst.get(11);\n        long thirteenthSmallest = lst.get(12);\n        long fourteenthSmallest\
    \ = lst.get(13);\n        long fifteenthSmallest = lst.get(14);\n        long\
    \ sixteenthSmallest = lst.get(15);\n        long seventeenthSmallest = lst.get(16);\n\
    \        long eighteenthSmallest = lst.get(17);\n        long nineteenthSmallest\
    \ = lst.get(18);\n        long twentiethSmallest = lst.get(19);\n        long\
    \ twentyFirstSmallest = lst.get(20);\n        long twentySecondSmallest = lst.get(21);\n\
    \        long twentyThirdSmallest = lst.get(22);\n        long twentyFourthSmallest\
    \ = lst.get(23);\n        long twentyFifthSmallest = lst.get(24);\n        long\
    \ twentySixthSmallest = lst.get(25);\n        long twentySeventhSmallest = lst.get(26);\n\
    \        long twentyEighthSmallest = lst.get(27);\n        long twentyNinthSmallest\
    \ = lst.get(28);\n        long thirtiethSmallest = lst.get(29);\n        long\
    \ thirtyFirstSmallest = lst.get(30);\n        long thirtySecondSmallest = lst.get(31);\n\
    \        long thirtyThirdSmallest = lst.get(32);\n        long thirtyFourthSmallest\
    \ = lst.get(33);\n        long thirtyFifthSmallest = lst.get(34);\n        long\
    \ thirtySixthSmallest = lst.get(35);\n        long thirtySeventhSmallest = lst.get(36);\n\
    \        long thirtyEighthSmallest = lst.get(37);\n        long thirtyNinthSmallest\
    \ = lst.get(38);", "        long smallest = lst.get(0);\n        long secondSmallest\
    \ = lst.get(1);\n        for(int i = 2; i < lst.size(); i++) {\n            if(lst.get(i)\
    \ < smallest) {\n                secondSmallest = lst.get(i);\n            }\n\
    \        }\n        return Optional.ofNullable(secondSmallest);", "        long\
    \ smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n        for(long\
    \ i : lst) {\n            if(i == smallest) {\n                secondSmallest\
    \ = i;\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        Optional<Long> result = Optional.empty();\n        for(Long val : lst)\
    \ {\n            if(result.isPresent() && result.orElse() == val) {\n        \
    \        return Optional.empty();\n            }\n            if(result.isPresent()\
    \ && result.orElse() > val) {\n                result = Optional.of(val);\n  \
    \          }\n        }\n        return result;", "        if (lst.size() == 0)\
    \ {\n            return Optional.empty();\n        }\n        Long smallest =\
    \ lst.get(0);\n        Long secondSmallest = lst.get(1);\n        for (int i =\
    \ 2; i < lst.size(); i++) {\n            if (lst.get(i) < smallest) {\n      \
    \          secondSmallest = lst.get(i);\n                smallest = lst.get(i);\n\
    \            } else if (lst.get(i) == smallest) {\n                if (lst.get(i)\
    \ < secondSmallest) {\n                    secondSmallest = lst.get(i);\n    \
    \            }\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        Optional<Long> res = lst.stream().sorted().skip(1).findFirst();\n     \
    \   if (res.isPresent()) {\n            return res;\n        }\n        return\
    \ Optional.empty();", "        Optional<Long> result = Optional.empty();\n   \
    \     if (lst.size() > 0) {\n            Long minValue = lst.get(0);\n       \
    \     for (int i = 1; i < lst.size(); i++) {\n                if (minValue > lst.get(i))\
    \ {\n                    minValue = lst.get(i);\n                }\n         \
    \   }\n            result = Optional.of(minValue);\n        }\n        return\
    \ result;", "        long min = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max = lst.stream().max(Comparator.naturalOrder()).get();\n     \
    \   if (min == max) {\n            return Optional.empty();\n        }\n     \
    \   return Optional.of(lst.get(lst.indexOf(min)));", "        if (lst.size() <=\
    \ 1) return Optional.empty();\n        long smallest = lst.get(0);\n        long\
    \ secondSmallest = lst.get(1);\n        for (int i = 2; i < lst.size(); i++) {\n\
    \            if (lst.get(i) < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst.get(i);\n            } else if (lst.get(i) ==\
    \ smallest) {\n                secondSmallest = lst.get(i);\n            }\n \
    \       }\n        return Optional.of(secondSmallest);", "        if (lst.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        long smallest\
    \ = lst.get(0);\n        long secondSmallest = lst.get(1);\n        for (int i\
    \ = 2; i < lst.size(); i++) {\n            if (lst.get(i) < smallest) {\n    \
    \            secondSmallest = lst.get(i);\n                smallest = secondSmallest;\n\
    \            } else if (lst.get(i) == smallest) {\n                secondSmallest\
    \ = lst.get(i);\n            }\n        }\n        return Optional.of(secondSmallest);",
  "        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for(int i = 2; i < lst.size(); i++) {\n            if(lst.get(i) < smallest)\
    \ {\n                secondSmallest = lst.get(i);\n                smallest =\
    \ lst.get(i);\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for (int i = 2; i < lst.size(); i++) {\n            if (lst.get(i) <\
    \ smallest) {\n                secondSmallest = lst.get(i);\n            }\n \
    \       }\n        return Optional.of(secondSmallest);", "        Collections.sort(lst);\n\
    \        if (lst.size() > 1) {\n            return Optional.of(lst.get(1));\n\
    \        }\n        return Optional.empty();", "        if (lst.isEmpty()) {\n\
    \            return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long max = lst.get(0);\n        for (long i : lst) {\n            if\
    \ (i < min) {\n                min = i;\n            }\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        return Optional.ofNullable(max);",
  "        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for(int i = 2; i < lst.size(); i++) {\n            if(lst.get(i) < smallest)\
    \ {\n                secondSmallest = lst.get(i);\n                smallest =\
    \ lst.get(i);\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        long thirdSmallest = lst.get(2);\n        long fourthSmallest = lst.get(3);\n\
    \        long fifthSmallest = lst.get(4);\n        long sixthSmallest = lst.get(5);\n\
    \        long seventhSmallest = lst.get(6);\n        long eighthSmallest = lst.get(7);\n\
    \        long ninthSmallest = lst.get(8);\n        long tenthSmallest = lst.get(9);\n\
    \        long eleventhSmallest = lst.get(10);\n        long twelfthSmallest =\
    \ lst.get(11);\n        long thirteenthSmallest = lst.get(12);\n        long fourteenthSmallest\
    \ = lst.get(13);\n        long fifteenthSmallest = lst.get(14);\n        long\
    \ sixteenthSmallest = lst.get(15);\n        long seventeenthSmallest = lst.get(16);\n\
    \        long eighteenthSmallest = lst.get(17);\n        long nineteenthSmallest\
    \ = lst.get(18);\n        long twentiethSmallest = lst.get(19);\n        long\
    \ twentyFirstSmallest = lst.get(20);\n        long twentySecondSmallest = lst.get(21);\n\
    \        long twentyThirdSmallest = lst.get(22);\n        long twentyFourthSmallest\
    \ = lst.get(23);\n        long twentyFifthSmallest = lst.get(24);\n        long\
    \ twentySixthSmallest = lst.get(25);\n        long twentySeventhSmallest = lst.get(26);\n\
    \        long twentyEighthSmallest = lst.get(27);\n        long twentyNinthSmallest\
    \ = lst.get(28);\n        long thirtiethSmallest = lst.get(29);\n        long\
    \ thirtyFirstSmallest = lst.get(30);\n        long thirtySecondSmallest = lst.get(31);\n\
    \        long thirtyThirdSmallest = lst.get(32);\n        long thirtyFourthSmallest\
    \ = lst.get(33);\n        long thirtyFifthSmallest = lst.get(34);\n        long\
    \ thirtySixthSmallest = lst.get(35);\n        long thirtySeventhSmallest = lst.get(36);\n\
    \        long thirtyEighthSmallest = lst.get(37);\n", "        Optional<Long>\
    \ result = Optional.empty();\n        if (lst.size() > 0) {\n            Long\
    \ smallest = lst.get(0);\n            for (int i = 1; i < lst.size(); i++) {\n\
    \                if (lst.get(i) < smallest) {\n                    result = Optional.of(lst.get(i));\n\
    \                    smallest = lst.get(i);\n                }\n            }\n\
    \        }\n        return result;", "        long min = lst.get(0);\n       \
    \ long max = lst.get(lst.size() - 1);\n        if (min == max) {\n           \
    \ return Optional.empty();\n        }\n        long mid = min + ((max - min) /\
    \ 2);\n        if (mid == min) {\n            return Optional.of(mid);\n     \
    \   }\n        if (mid == max) {\n            return Optional.of(mid);\n     \
    \   }\n        if (lst.get(lst.size() - 1) < mid) {\n            return nextSmallest(lst.subList(1,\
    \ lst.size() - 1));\n        }\n        return nextSmallest(lst.subList(0, lst.size()\
    \ - 1));", "        if (lst.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        long smallest = lst.get(0);\n        long secondSmallest =\
    \ lst.get(1);\n        long thirdSmallest = lst.get(2);\n        long fourthSmallest\
    \ = lst.get(3);\n        long fifthSmallest = lst.get(4);\n        if (smallest\
    \ > secondSmallest) {\n            if (smallest > thirdSmallest) {\n         \
    \       if (smallest > fourthSmallest) {\n                    if (smallest > fifthSmallest)\
    \ {\n                        return Optional.of(fifthSmallest);\n            \
    \        } else {\n                        return Optional.of(fourthSmallest);\n\
    \                    }\n                } else {\n                    return Optional.of(thirdSmallest);\n\
    \                }\n            } else {\n                return Optional.of(secondSmallest);\n\
    \            }\n        } else {\n            return Optional.of(smallest);\n\
    \        }", "        long min = lst.get(0);\n        long max = lst.get(0);\n\
    \        for (long i : lst) {\n            if (i < min) {\n                min\
    \ = i;\n            } else if (i > max) {\n                max = i;\n        \
    \    }\n        }\n        return Optional.ofNullable(max);", "        long smallest\
    \ = lst.get(0);\n        long secondSmallest = lst.get(1);\n        for(int i\
    \ = 2; i < lst.size(); i++) {\n            if(lst.get(i) < smallest) {\n     \
    \           secondSmallest = lst.get(i);\n                smallest = lst.get(i);\n\
    \            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        long min = lst.stream().min(Comparator.naturalOrder()).get();\n       \
    \ long max = lst.stream().max(Comparator.naturalOrder()).get();\n        return\
    \ lst.stream().filter(x -> x <= max && x >= min).findFirst();", "        Collections.sort(lst);\n\
    \        if (lst.size() <= 1) return Optional.empty();\n        return Optional.of(lst.get(2));",
  "        Collections.sort(lst);\n        if (lst.size() > 1) {\n            return\
    \ Optional.of(lst.get(1));\n        }\n        return Optional.empty();", "  \
    \      if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        long thirdSmallest = lst.get(2);\n        long fourthSmallest = lst.get(3);\n\
    \        long fifthSmallest = lst.get(4);\n        long sixthSmallest = lst.get(5);\n\
    \        long seventhSmallest = lst.get(6);\n        long eighthSmallest = lst.get(7);\n\
    \        long ninthSmallest = lst.get(8);\n        long tenthSmallest = lst.get(9);\n\
    \        long eleventhSmallest = lst.get(10);\n        long twelfthSmallest =\
    \ lst.get(11);\n        long thirteenthSmallest = lst.get(12);\n        long fourteenthSmallest\
    \ = lst.get(13);\n        long fifteenthSmallest = lst.get(14);\n        long\
    \ sixteenthSmallest = lst.get(15);\n        long seventeenthSmallest = lst.get(16);\n\
    \        long eighteenthSmallest = lst.get(17);\n        long nineteenthSmallest\
    \ = lst.get(18);\n        long twentiethSmallest = lst.get(19);\n        long\
    \ twentyFirstSmallest = lst.get(20);\n        long twentySecondSmallest = lst.get(21);\n\
    \        long twentyThirdSmallest = lst.get(22);\n        long twentyFourthSmallest\
    \ = lst.get(23);\n        long twentyFifthSmallest = lst.get(24);\n        long\
    \ twentySixthSmallest = lst.get(25);\n        long twentySeventhSmallest = lst.get(26);\n\
    \        long twentyEighthSmallest = lst.get(27);\n        long twentyNinthSmallest\
    \ = lst.get(28);\n        long thirtiethSmallest = lst.get(29);\n        long\
    \ thirtyFirstSmallest = lst.get(30);\n        long thirtySecondSmallest = lst.get(31);\n\
    \        long thirtyThirdSmallest = lst.get(32);\n        long thirtyFourthSmallest\
    \ = lst.get(33);\n        long thirtyFifthSmallest = lst.get(34);\n        long\
    \ thirtySixthSmallest = lst.get(35);\n        long thirtySeventhSmallest = lst.get(36);\n\
    \        long thirtyEighthSmallest = lst.get(37);\n", "        if (lst.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        Long min =\
    \ lst.get(0);\n        Long min2 = lst.get(1);\n        Long min3 = lst.get(2);\n\
    \        Long min4 = lst.get(3);\n        Long min5 = lst.get(4);\n        Long\
    \ min6 = lst.get(5);\n        Long min7 = lst.get(6);\n        Long min8 = lst.get(7);\n\
    \        Long min9 = lst.get(8);\n        Long min10 = lst.get(9);\n        Long\
    \ min11 = lst.get(10);\n        Long min12 = lst.get(11);\n        Long min13\
    \ = lst.get(12);\n        Long min14 = lst.get(13);\n        Long min15 = lst.get(14);\n\
    \        Long min16 = lst.get(15);\n        Long min17 = lst.get(16);\n      \
    \  Long min18 = lst.get(17);\n        Long min19 = lst.get(18);\n        Long\
    \ min20 = lst.get(19);\n        Long min21 = lst.get(20);\n        Long min22\
    \ = lst.get(21);\n        Long min23 = lst.get(22);\n        Long min24 = lst.get(23);\n\
    \        Long min25 = lst.get(24);\n        Long min26 = lst.get(25);\n      \
    \  Long min27 = lst.get(26);\n        Long min28 = lst.get(27);\n        Long\
    \ min29 = lst.get(28);\n        Long min30 = lst.get(29);\n        Long min31\
    \ = lst.get(30);\n        Long min32 = lst.get(31);\n        Long min33 = lst.get(32);\n\
    \        Long min34 = lst.get(33);\n        Long min35 = lst.get(34);\n      \
    \  Long min36 = lst.get(35);\n        Long min37 = lst.get(36);\n        Long\
    \ min38 = lst.get(37);\n        Long min39 = lst.get(38);\n        Long min40\
    \ = lst.get(39);\n        Long min41 = lst.get(40);\n        Long min42 = lst.get(41);\n\
    \        Long min43 = lst.get(42);\n        Long min44 = lst.get(43);\n      \
    \  Long min45 = lst.get(44);\n        Long min46 = lst.get(45);\n        Long\
    \ min47 = lst.get(46);\n        Long min48 = lst.get(47);\n        Long", "  \
    \      Optional<Long> result = Optional.empty();\n        for(Long i : lst) {\n\
    \            if(i.compareTo(result.orElse(Long.MAX_VALUE)) < 0)\n            \
    \    result = Optional.of(i);\n        }\n        return result;", "        long\
    \ min = lst.get(0);\n        long max = lst.get(lst.size()-1);\n        for(long\
    \ i = min; i <= max; i++) {\n            for(long j : lst) {\n               \
    \ if(j == i) {\n                    continue;\n                }\n           \
    \     if(j < i) {\n                    if(j > max) {\n                       \
    \ max = j;\n                    }\n                } else {\n                \
    \    if(j < min) {\n                        min = j;\n                    }\n\
    \                }\n            }\n        }\n        return Optional.ofNullable(max);",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for (int i = 2; i < lst.size(); i++) {\n            if (lst.get(i) <\
    \ smallest) {\n                secondSmallest = lst.get(i);\n                smallest\
    \ = secondSmallest;\n            } else if (lst.get(i) == smallest) {\n      \
    \          secondSmallest = lst.get(i);\n            }\n        }\n        return\
    \ Optional.of(secondSmallest);", "        long min = lst.get(0);\n        long\
    \ max = lst.get(0);\n        for(int i = 1; i < lst.size(); i++) {\n         \
    \   long cur = lst.get(i);\n            if(cur < min) {\n                min =\
    \ cur;\n            }\n            if(cur > max) {\n                max = cur;\n\
    \            }\n        }\n        if(min == max) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(max);", "        if (lst.size() < 2) {\n\
    \            return Optional.empty();\n        }\n        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        for (int i = 2; i < lst.size();\
    \ i++) {\n            if (lst.get(i) < smallest) {\n                secondSmallest\
    \ = lst.get(i);\n                smallest = lst.get(i);\n            } else if\
    \ (lst.get(i) == smallest) {\n                secondSmallest = lst.get(i);\n \
    \           }\n        }\n        return Optional.of(secondSmallest);", "    \
    \    if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for (int i = 2; i < lst.size(); i++) {\n            if (lst.get(i) <\
    \ smallest) {\n                secondSmallest = lst.get(i);\n                smallest\
    \ = secondSmallest;\n            } else if (lst.get(i) == smallest) {\n      \
    \          secondSmallest = lst.get(i);\n            }\n        }\n        return\
    \ Optional.of(secondSmallest);", "        long smallest = lst.get(0);\n      \
    \  long secondSmallest = lst.get(1);\n        for(long i : lst) {\n          \
    \  if(i<smallest) {\n                secondSmallest = smallest;\n            \
    \    smallest = i;\n            }\n            if(i>secondSmallest) {\n      \
    \          secondSmallest = i;\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for (int i = 2; i < lst.size(); i++) {\n            if (lst.get(i) <\
    \ smallest) {\n                secondSmallest = lst.get(i);\n            }\n \
    \       }\n        return Optional.of(secondSmallest);", "        if (lst.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        long smallest\
    \ = lst.get(0);\n        long secondSmallest = lst.get(1);\n        for (int i\
    \ = 2; i < lst.size(); i++) {\n            if (lst.get(i) < smallest) {\n    \
    \            secondSmallest = lst.get(i);\n                smallest = lst.get(i);\n\
    \            } else if (lst.get(i) == smallest) {\n                secondSmallest\
    \ = lst.get(i);\n            }\n        }\n        return Optional.of(secondSmallest);",
  "        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long max = lst.get(0);\n        for (long\
    \ i : lst) {\n            if (i < min) {\n                min = i;\n         \
    \   }\n            if (i > max) {\n                max = i;\n            }\n \
    \       }\n        return Optional.ofNullable(max);", "        Optional<Long>\
    \ result = Optional.empty();\n        if (lst.size() > 0) {\n            Long\
    \ min = lst.get(0);\n            for (int i = 1; i < lst.size(); i++) {\n    \
    \            if (lst.get(i) < min) {\n                    result = Optional.of(lst.get(i));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   Optional<Long> ret = Optional.empty();\n        if (lst.size() > 0) {\n  \
    \          Long min = lst.get(0);\n            for (int i = 1; i < lst.size();\
    \ i++) {\n                if (lst.get(i) < min) {\n                    ret = Optional.of(lst.get(i));\n\
    \                    min = lst.get(i);\n                }\n            }\n   \
    \     }\n        return ret;", "        if (lst.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        Long min = lst.get(0);\n        Long min2\
    \ = lst.get(1);\n        for (int i = 2; i < lst.size(); i++) {\n            if\
    \ (lst.get(i) < min) {\n                min = lst.get(i);\n                min2\
    \ = lst.get(i-1);\n            } else if (lst.get(i) == min) {\n             \
    \   min2 = lst.get(i-1);\n            }\n        }\n        return Optional.of(min2);",
  "        if (lst.isEmpty()) return Optional.empty();\n        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        for (int i = 2; i < lst.size();\
    \ i++) {\n            long current = lst.get(i);\n            if (current < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = current;\n\
    \            } else if (current < secondSmallest) {\n                secondSmallest\
    \ = current;\n            }\n        }\n        return Optional.of(secondSmallest);",
  "        Optional<Long> result = Optional.empty();\n        if (lst.size() > 0)\
    \ {\n            Long min = lst.get(0);\n            for (int i = 1; i < lst.size();\
    \ i++) {\n                if (lst.get(i) < min) {\n                    result\
    \ = Optional.of(lst.get(i));\n                    min = lst.get(i);\n        \
    \        }\n            }\n        }\n        return result;", "        Optional<Long>\
    \ res = lst.stream().min(Comparator.naturalOrder()).get();\n        if (res.isPresent())\
    \ {\n            return res;\n        }\n        return Optional.empty();", " \
    \       Optional<Long> result = Optional.empty();\n        if (lst.size() > 0)\
    \ {\n            long smallest = lst.get(0);\n            long secondSmallest\
    \ = lst.get(1);\n            for (int i = 2; i < lst.size(); i++) {\n        \
    \        if (lst.get(i) < smallest) {\n                    secondSmallest = lst.get(i);\n\
    \                    smallest = lst.get(i);\n                }\n            }\n\
    \            result = Optional.of(secondSmallest);\n        }\n        return\
    \ result;", "        Collections.sort(lst);\n        if (lst.size() == 0) {\n\
    \            return Optional.empty();\n        }\n        Long second = lst.get(1);\n\
    \        lst.remove(lst.size() - 1);\n        Collections.sort(lst);\n       \
    \ if (lst.size() == 0) {\n            return Optional.empty();\n        }\n  \
    \      Long first = lst.get(0);\n        if (first == second) {\n            return\
    \ Optional.of(first);\n        } else {\n            return Optional.of(second);\n\
    \        }", "        Collections.sort(lst);\n        if (lst.size() == 0) {\n\
    \            return Optional.empty();\n        }\n        return Optional.of(lst.get(2));",
  "        Optional<Long> result = Optional.empty();\n        if (lst.size() > 0)\
    \ {\n            Long smallest = lst.get(0);\n            for (int i = 1; i <\
    \ lst.size(); i++) {\n                if (lst.get(i) < smallest) {\n         \
    \           result = Optional.of(lst.get(i));\n                    smallest =\
    \ lst.get(i);\n                }\n            }\n        }\n        return result;",
  "        Collections.sort(lst);\n        if (lst.size() == 0) {\n            return\
    \ Optional.empty();\n        }\n        Long result = lst.get(1);\n        if\
    \ (lst.size() > 2) {\n            result = lst.get(2);\n        }\n        return\
    \ Optional.of(result);", "        if (lst.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        long smallest = lst.get(0);\n        long secondSmallest =\
    \ lst.get(1);\n        for (int i = 2; i < lst.size(); i++) {\n            long\
    \ current = lst.get(i);\n            if (current < smallest) {\n             \
    \   secondSmallest = smallest;\n                smallest = current;\n        \
    \    } else if (current > secondSmallest) {\n                secondSmallest =\
    \ current;\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for (int i = 2; i < lst.size(); i++) {\n            long current = lst.get(i);\n\
    \            if (current < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = current;\n            } else if (current < secondSmallest)\
    \ {\n                secondSmallest = current;\n            }\n        }\n   \
    \     return Optional.ofNullable(secondSmallest);", "        if (lst.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        long smallest =\
    \ lst.get(0);\n        long secondSmallest = lst.get(1);\n        long thirdSmallest\
    \ = lst.get(2);\n        long fourthSmallest = lst.get(3);\n        long fifthSmallest\
    \ = lst.get(4);\n        if (smallest < secondSmallest) {\n            if (secondSmallest\
    \ < thirdSmallest) {\n                if (thirdSmallest < fourthSmallest) {\n\
    \                    if (fourthSmallest < fifthSmallest) {\n                 \
    \       return Optional.of(fifthSmallest);\n                    } else {\n   \
    \                     return Optional.of(fourthSmallest);\n                  \
    \  }\n                } else {\n                    return Optional.of(thirdSmallest);\n\
    \                }\n            } else {\n                return Optional.of(secondSmallest);\n\
    \            }\n        } else {\n            return Optional.of(smallest);\n\
    \        }", "        long min = lst.get(0);\n        long max = lst.get(0);\n\
    \        for (long i : lst) {\n            if (i < min) {\n                min\
    \ = i;\n            }\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (min == max) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(lst.get(lst.indexOf(min) + 1));", "   \
    \     if (lst.size() <= 1) return Optional.empty();\n        Long smallest = lst.get(0);\n\
    \        Long secondSmallest = lst.get(1);\n        for (int i = 2; i < lst.size();\
    \ i++) {\n            if (lst.get(i) < smallest) {\n                secondSmallest\
    \ = lst.get(i);\n                smallest = secondSmallest;\n            } else\
    \ if (lst.get(i) == smallest) {\n                secondSmallest = lst.get(i);\n\
    \            }\n        }\n        return Optional.of(secondSmallest);", "   \
    \     long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for(int i = 2; i < lst.size(); i++) {\n            if(lst.get(i) < smallest)\
    \ {\n                secondSmallest = lst.get(i);\n                smallest =\
    \ lst.get(i);\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for(int i = 1; i < lst.size(); i++) {\n            if(lst.get(i) < smallest)\
    \ {\n                secondSmallest = lst.get(i);\n                smallest =\
    \ lst.get(i);\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        Collections.sort(lst);\n        if (lst.size() >= 2) {\n            return\
    \ Optional.of(lst.get(1));\n        }\n        return Optional.empty();", "  \
    \      if (lst.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long max = lst.get(0);\n        for (long\
    \ i : lst) {\n            if (i < min) {\n                min = i;\n         \
    \   }\n            if (i > max) {\n                max = i;\n            }\n \
    \       }\n        if (min == max) {\n            return Optional.empty();\n \
    \       }\n        long result = lst.get(lst.indexOf(max) + 1);\n        return\
    \ Optional.of(result);", "        long min = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max = lst.stream().max(Comparator.naturalOrder()).get();\n     \
    \   if (min == max) {\n            return Optional.empty();\n        }\n     \
    \   return Optional.of(lst.get(lst.indexOf(min)));", "        Collections.sort(lst);\n\
    \        if (lst.size() > 1) {\n            return Optional.of(lst.get(1));\n\
    \        }\n        return Optional.empty();", "        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        for(long i : lst) {\n    \
    \        if(i<smallest) {\n                secondSmallest = smallest;\n      \
    \          smallest = i;\n            }\n            if(i>secondSmallest) {\n\
    \                secondSmallest = i;\n            }\n        }\n        return\
    \ Optional.ofNullable(secondSmallest);", "        Collections.sort(lst);\n   \
    \     if (lst.size() > 1) {\n            return Optional.of(lst.get(1));\n   \
    \     }\n        return Optional.empty();", "        if (lst.isEmpty()) {\n  \
    \          return Optional.empty();\n        }\n        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        for (int i = 2; i < lst.size();\
    \ i++) {\n            if (lst.get(i) < smallest) {\n                secondSmallest\
    \ = lst.get(i);\n                smallest = secondSmallest;\n            } else\
    \ if (lst.get(i) == smallest) {\n                secondSmallest = lst.get(i);\n\
    \            }\n        }\n        return Optional.of(secondSmallest);", "   \
    \     if (lst.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        long thirdSmallest = lst.get(2);\n        long fourthSmallest = lst.get(3);\n\
    \        long fifthSmallest = lst.get(4);\n        long sixthSmallest = lst.get(5);\n\
    \        long seventhSmallest = lst.get(6);\n        long eighthSmallest = lst.get(7);\n\
    \        long ninthSmallest = lst.get(8);\n        long tenthSmallest = lst.get(9);\n\
    \        long eleventhSmallest = lst.get(10);\n        long twelfthSmallest =\
    \ lst.get(11);\n        long thirteenthSmallest = lst.get(12);\n        long fourteenthSmallest\
    \ = lst.get(13);\n        long fifteenthSmallest = lst.get(14);\n        long\
    \ sixteenthSmallest = lst.get(15);\n        long seventeenthSmallest = lst.get(16);\n\
    \        long eighteenthSmallest = lst.get(17);\n        long nineteenthSmallest\
    \ = lst.get(18);\n        long twentiethSmallest = lst.get(19);\n        long\
    \ twentyFirstSmallest = lst.get(20);\n        long twentySecondSmallest = lst.get(21);\n\
    \        long twentyThirdSmallest = lst.get(22);\n        long twentyFourthSmallest\
    \ = lst.get(23);\n        long twentyFifthSmallest = lst.get(24);\n        long\
    \ twentySixthSmallest = lst.get(25);\n        long twentySeventhSmallest = lst.get(26);\n\
    \        long twentyEighthSmallest = lst.get(27);\n        long twentyNinthSmallest\
    \ = lst.get(28);\n        long thirtiethSmallest = lst.get(29);\n        long\
    \ thirtyFirstSmallest = lst.get(30);\n        long thirtySecondSmallest = lst.get(31);\n\
    \        long thirtyThirdSmallest = lst.get(32);\n        long thirtyFourthSmallest\
    \ = lst.get(33);\n        long thirtyFifthSmallest = lst.get(34);\n        long\
    \ thirtySixthSmallest = lst.get(35);\n        long thirtySeventhSmallest = lst.get(36);\n\
    \        long thirtyEighthSmallest = lst.get(37);", "        Optional<Long> result\
    \ = Optional.empty();\n        for(Long i : lst) {\n            if(i.compareTo(result.orElse(Long.MAX_VALUE))\
    \ < 0)\n                result = Optional.of(i);\n        }\n        return result;",
  "        long min = lst.get(0);\n        long max = lst.get(0);\n        for(long\
    \ i : lst) {\n            if(i<min) {\n                min = i;\n            }\n\
    \            if(i>max) {\n                max = i;\n            }\n        }\n\
    \        if(min==max) {\n            return Optional.empty();\n        }\n   \
    \     return Optional.of(lst.get(lst.indexOf(min)+1));", "        if (lst.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        Long min = lst.get(0);\n\
    \        Long min2 = lst.get(1);\n        Long min3 = lst.get(2);\n        Long\
    \ min4 = lst.get(3);\n        Long min5 = lst.get(4);\n        Long min6 = lst.get(5);\n\
    \        Long min7 = lst.get(6);\n        Long min8 = lst.get(7);\n        Long\
    \ min9 = lst.get(8);\n        Long min10 = lst.get(9);\n        Long min11 = lst.get(10);\n\
    \        Long min12 = lst.get(11);\n        Long min13 = lst.get(12);\n      \
    \  Long min14 = lst.get(13);\n        Long min15 = lst.get(14);\n        Long\
    \ min16 = lst.get(15);\n        Long min17 = lst.get(16);\n        Long min18\
    \ = lst.get(17);\n        Long min19 = lst.get(18);\n        Long min20 = lst.get(19);\n\
    \        Long min21 = lst.get(20);\n        Long min22 = lst.get(21);\n      \
    \  Long min23 = lst.get(22);\n        Long min24 = lst.get(23);\n        Long\
    \ min25 = lst.get(24);\n        Long min26 = lst.get(25);\n        Long min27\
    \ = lst.get(26);\n        Long min28 = lst.get(27);\n        Long min29 = lst.get(28);\n\
    \        Long min30 = lst.get(29);\n        Long min31 = lst.get(30);\n      \
    \  Long min32 = lst.get(31);\n        Long min33 = lst.get(32);\n        Long\
    \ min34 = lst.get(33);\n        Long min35 = lst.get(34);\n        Long min36\
    \ = lst.get(35);\n        Long min37 = lst.get(36);\n        Long min38 = lst.get(37);\n\
    \        Long min39 = lst.get(38);\n        Long min40 = lst.get(39);\n      \
    \  Long min41 = lst.get(40);\n        Long min42 = lst.get(41);\n        Long\
    \ min43 = lst.get(42);\n        Long min44 = lst.get(43);\n        Long min45\
    \ = lst.get(44);\n        Long min46 = lst.get(45);\n        Long min47 = lst.get(46);\n\
    \        Long min48 = lst.get(47);\n        Long ", "        Optional<Long> result\
    \ = Optional.empty();\n        if (lst.size() > 0) {\n            Long min = lst.get(0);\n\
    \            for (int i = 1; i < lst.size(); i++) {\n                if (lst.get(i)\
    \ < min) {\n                    result = Optional.of(lst.get(i));\n          \
    \          min = lst.get(i);\n                }\n            }\n        }\n  \
    \      return result;", "        Optional<Long> result = Optional.empty();\n \
    \       if (lst.size() > 0) {\n            Long smallest = lst.get(0);\n     \
    \       Long second = smallest;\n            for (int i = 1; i < lst.size(); i++)\
    \ {\n                if (lst.get(i) < smallest) {\n                    second\
    \ = smallest;\n                    smallest = lst.get(i);\n                } else\
    \ if (lst.get(i) == smallest) {\n                    second = lst.get(i);\n  \
    \              }\n            }\n            result = Optional.of(second);\n \
    \       }\n        return result;", "        Optional<Long> ret = Optional.empty();\n\
    \        if (lst.size() > 0) {\n            Long smallest = lst.get(0);\n    \
    \        Long secondSmallest = lst.get(1);\n            for (int i = 2; i < lst.size();\
    \ i++) {\n                if (lst.get(i) < smallest) {\n                    secondSmallest\
    \ = smallest;\n                    smallest = lst.get(i);\n                } else\
    \ if (lst.get(i) == smallest) {\n                    secondSmallest = lst.get(i);\n\
    \                }\n            }\n            ret = Optional.of(secondSmallest);\n\
    \        }\n        return ret;", "        if (lst.size() == 0) {\n          \
    \  return Optional.empty();\n        }\n        Long minValue = lst.get(0);\n\
    \        Long minIndex = 0;\n        for (int i = 1; i < lst.size(); i++) {\n\
    \            if (minValue > lst.get(i)) {\n                minValue = lst.get(i);\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == lst.size() - 1) {\n            return Optional.of(lst.get(lst.size() - 1));\n\
    \        } else {\n            return Optional.of(lst.get(minIndex + 1));\n  \
    \      }", "        long smallest = lst.get(0);\n        long secondSmallest =\
    \ lst.get(1);\n        for(long i : lst) {\n            if(i<smallest) {\n   \
    \             secondSmallest = smallest;\n                smallest = i;\n    \
    \        }\n            if(i>smallest) {\n                secondSmallest = i;\n\
    \            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        long min = lst.get(0);\n        long max = lst.get(0);\n        for (long\
    \ i : lst) {\n            if (i < min) {\n                min = i;\n         \
    \   } else if (i > max) {\n                max = i;\n            }\n        }\n\
    \        return Optional.ofNullable(max);", "        Collections.sort(lst);\n\
    \        if (lst.size() >= 2) {\n            return Optional.of(lst.get(2));\n\
    \        }\n        return Optional.empty();", "        Collections.sort(lst);\n\
    \        if (lst.size() <= 1) return Optional.empty();\n        return Optional.of(lst.get(1));",
  "        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for(long i : lst) {\n            if(i<smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = i;\n            }\n            if(i>smallest)\
    \ {\n                secondSmallest = i;\n            }\n        }\n        return\
    \ Optional.ofNullable(secondSmallest);", "        Collections.sort(lst);\n   \
    \     if (lst.size() <= 1) return Optional.empty();\n        return Optional.of(lst.get(2));",
  "        long min = lst.get(0);\n        long max = lst.get(lst.size() - 1);\n \
    \       if (min > max) {\n            return Optional.empty();\n        }\n  \
    \      long mid = min + ((max - min) / 2);\n        if (mid == min) {\n      \
    \      return Optional.of(mid);\n        }\n        if (mid == max) {\n      \
    \      return Optional.of(mid);\n        }\n        return Optional.of(mid).filter(x\
    \ -> lst.contains(x));", "        if (lst.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        long smallest = lst.get(0);\n        long secondSmallest =\
    \ lst.get(1);\n        long thirdSmallest = lst.get(2);\n        long fourthSmallest\
    \ = lst.get(3);\n        long fifthSmallest = lst.get(4);\n        long sixthSmallest\
    \ = lst.get(5);\n        long seventhSmallest = lst.get(6);\n        long eighthSmallest\
    \ = lst.get(7);\n        long ninthSmallest = lst.get(8);\n        long tenthSmallest\
    \ = lst.get(9);\n        long eleventhSmallest = lst.get(10);\n        long twelfthSmallest\
    \ = lst.get(11);\n        long thirteenthSmallest = lst.get(12);\n        long\
    \ fourteenthSmallest = lst.get(13);\n        long fifteenthSmallest = lst.get(14);\n\
    \        long sixteenthSmallest = lst.get(15);\n        long seventeenthSmallest\
    \ = lst.get(16);\n        long eighteenthSmallest = lst.get(17);\n        long\
    \ nineteenthSmallest = lst.get(18);\n        long twentiethSmallest = lst.get(19);\n\
    \        long twentyFirstSmallest = lst.get(20);\n        long twentySecondSmallest\
    \ = lst.get(21);\n        long twentyThirdSmallest = lst.get(22);\n        long\
    \ twentyFourthSmallest = lst.get(23);\n        long twentyFifthSmallest = lst.get(24);\n\
    \        long twentySixthSmallest = lst.get(25);\n        long twentySeventhSmallest\
    \ = lst.get(26);\n        long twentyEighthSmallest = lst.get(27);\n        long\
    \ twentyNinthSmallest = lst.get(28);\n        long thirtiethSmallest = lst.get(29);\n\
    \        long thirtyFirstSmallest = lst.get(30);\n        long thirtySecondSmallest\
    \ = lst.get(31);\n        long thirtyThirdSmallest = lst.get(32);\n        long\
    \ thirtyFourthSmallest = lst.get(33);\n        long thirtyFifthSmallest = lst.get(34);\n\
    \        long thirtySixthSmallest = lst.get(35);\n        long thirtySeventhSmallest\
    \ = lst.get(36);\n        long thirtyEighthSmallest = lst.get(37);", "       \
    \ if (lst.size() == 0) {\n            return Optional.empty();\n        }\n  \
    \      long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for (int i = 2; i < lst.size(); i++) {\n            if (lst.get(i) <\
    \ smallest) {\n                secondSmallest = lst.get(i);\n                smallest\
    \ = lst.get(i);\n            } else if (lst.get(i) == smallest) {\n          \
    \      secondSmallest = lst.get(i);\n            }\n        }\n        return\
    \ Optional.of(secondSmallest);", "        if (lst.size() == 0) {\n           \
    \ return Optional.empty();\n        }\n        long smallest = lst.get(0);\n \
    \       long secondSmallest = lst.get(1);\n        for (int i = 2; i < lst.size();\
    \ i++) {\n            if (lst.get(i) < smallest) {\n                secondSmallest\
    \ = lst.get(i);\n                smallest = lst.get(i);\n            } else if\
    \ (lst.get(i) == smallest) {\n                secondSmallest = lst.get(i);\n \
    \           }\n        }\n        return Optional.of(secondSmallest);", "    \
    \    Optional<Long> smallest = lst.stream().min(Comparator.naturalOrder());\n\
    \        if (smallest.isPresent()) {\n            return smallest;\n        }\
    \ else {\n            return Optional.empty();\n        }", "        long smallest\
    \ = lst.get(0);\n        long secondSmallest = lst.get(1);\n        if (lst.size()\
    \ > 2) {\n            for (int i = 2; i < lst.size(); i++) {\n               \
    \ if (lst.get(i) < smallest) {\n                    secondSmallest = lst.get(i);\n\
    \                    smallest = lst.get(i);\n                }\n            }\n\
    \        }\n        return Optional.ofNullable(secondSmallest);", "        Optional<Long>\
    \ smallest = lst.stream().min(Comparator.naturalOrder());\n        if (smallest.isPresent())\
    \ {\n            return smallest;\n        }\n        return Optional.empty();",
  "        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        long thirdSmallest = lst.get(2);\n        long fourthSmallest = lst.get(3);\n\
    \        long fifthSmallest = lst.get(4);\n        if (smallest > secondSmallest)\
    \ {\n            if (secondSmallest > thirdSmallest) {\n                if (thirdSmallest\
    \ > fourthSmallest) {\n                    if (fourthSmallest > fifthSmallest)\
    \ {\n                        return Optional.of(fifthSmallest);\n            \
    \        } else {\n                        return Optional.of(fourthSmallest);\n\
    \                    }\n                } else {\n                    return Optional.of(thirdSmallest);\n\
    \                }\n            } else {\n                return Optional.of(secondSmallest);\n\
    \            }\n        } else {\n            return Optional.of(smallest);\n\
    \        }", "        Optional<Long> result = Optional.empty();\n        if (lst.size()\
    \ > 0) {\n            Long smallest = lst.get(0);\n            for (int i = 1;\
    \ i < lst.size(); i++) {\n                if (lst.get(i) < smallest) {\n     \
    \               result = Optional.of(lst.get(i));\n                    smallest\
    \ = lst.get(i);\n                }\n            }\n        }\n        return result;",
  "        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long max = lst.get(0);\n        for (long\
    \ i : lst) {\n            if (i < min) {\n                min = i;\n         \
    \   }\n            if (i > max) {\n                max = i;\n            }\n \
    \       }\n        if (min == max) {\n            return Optional.empty();\n \
    \       }\n        return Optional.of(lst.get(lst.indexOf(min) + 1));", "    \
    \    if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long max = lst.get(0);\n        for (long\
    \ i : lst) {\n            if (i < min) {\n                min = i;\n         \
    \   } else if (i > max) {\n                max = i;\n            }\n        }\n\
    \        return Optional.ofNullable(max);", "        Optional<Long> result = Optional.empty();\n\
    \        if (lst.size() > 0) {\n            Long smallest = lst.get(0);\n    \
    \        for (int i = 1; i < lst.size(); i++) {\n                if (lst.get(i)\
    \ < smallest) {\n                    smallest = lst.get(i);\n                }\n\
    \            }\n            result = Optional.of(smallest);\n        }\n     \
    \   return result;", "        Collections.sort(lst);\n        if (lst.size() ==\
    \ 0) {\n            return Optional.empty();\n        }\n        return Optional.of(lst.get(1));",
  "        long min = lst.get(0);\n        long max = lst.get(lst.size()-1);\n   \
    \     for(int i = 1; i < lst.size(); i++) {\n            if(lst.get(i) < min)\
    \ {\n                min = lst.get(i);\n            }\n            if(lst.get(i)\
    \ > max) {\n                max = lst.get(i);\n            }\n        }\n    \
    \    if(min == max) {\n            return Optional.empty();\n        }\n     \
    \   return Optional.of(max);", "        Optional<Long> res = null;\n        if\
    \ (lst.size() > 0) {\n            long min = lst.get(0);\n            for (int\
    \ i = 1; i < lst.size(); i++) {\n                if (lst.get(i) < min) {\n   \
    \                 min = lst.get(i);\n                }\n            }\n      \
    \      res = Optional.of(min);\n        }\n        return res;", "        Optional<Long>\
    \ result = Optional.empty();\n        for(Long i : lst) {\n            if(i.compareTo(result.orElse(Long.MAX_VALUE))\
    \ < 0)\n                result = Optional.of(i);\n        }\n        return result;",
  "        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for (int i = 2; i < lst.size(); i++) {\n            if (lst.get(i) <\
    \ smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst.get(i);\n            } else if (lst.get(i) == smallest) {\n          \
    \      secondSmallest = lst.get(i);\n            }\n        }\n        return\
    \ Optional.of(secondSmallest);", "        if (lst.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        long smallest = lst.get(0);\n        long\
    \ secondSmallest = lst.get(1);\n        long thirdSmallest = lst.get(2);\n   \
    \     long fourthSmallest = lst.get(3);\n        long fifthSmallest = lst.get(4);\n\
    \        if (smallest < secondSmallest) {\n            if (secondSmallest < thirdSmallest)\
    \ {\n                if (thirdSmallest < fourthSmallest) {\n                 \
    \   if (fourthSmallest < fifthSmallest) {\n                        return Optional.of(fifthSmallest);\n\
    \                    }\n                    return Optional.of(fourthSmallest);\n\
    \                }\n                return Optional.of(thirdSmallest);\n     \
    \       }\n            return Optional.of(secondSmallest);\n        }\n      \
    \  return Optional.of(smallest);", "        Optional<Long> smallest = lst.stream().min(Comparator.naturalOrder());\n\
    \        if (smallest.isPresent()) {\n            return smallest;\n        }\n\
    \        return Optional.empty();", "        long min = lst.get(0);\n        long\
    \ max = lst.get(lst.size() - 1);\n        long mid = min + (max - min) / 2;\n\
    \        if (mid < min) {\n            return Optional.empty();\n        }\n \
    \       if (mid > max) {\n            return Optional.empty();\n        }\n  \
    \      return Optional.of(mid);", "        if (lst.size() <= 1) return Optional.empty();\n\
    \        Long smallest = lst.get(0);\n        Long secondSmallest = lst.get(1);\n\
    \        for (int i = 2; i < lst.size(); i++) {\n            Long current = lst.get(i);\n\
    \            if (current < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = current;\n            } else if (current < secondSmallest)\
    \ {\n                secondSmallest = current;\n            }\n        }\n   \
    \     return Optional.of(secondSmallest);", "        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        for(int i = 2; i < lst.size();\
    \ i++) {\n            long current = lst.get(i);\n            if(current < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = current;\n\
    \            } else if(current < secondSmallest) {\n                secondSmallest\
    \ = current;\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        Optional<Long> smallest = lst.stream().min(Comparator.naturalOrder());\n\
    \        if (smallest.isPresent()) {\n            return smallest;\n        }\n\
    \        return Optional.empty();", "        if (lst.size() <= 1) return Optional.empty();\n\
    \        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for (int i = 2; i < lst.size(); i++) {\n            if (lst.get(i) <\
    \ smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst.get(i);\n            } else if (lst.get(i) == smallest) {\n          \
    \      secondSmallest = lst.get(i);\n            }\n        }\n        return\
    \ Optional.of(secondSmallest);", "        long min = lst.get(0);\n        long\
    \ max = lst.get(0);\n        for (long i : lst) {\n            if (i < min) {\n\
    \                min = i;\n            } else if (i > max) {\n               \
    \ max = i;\n            }\n        }\n        return Optional.ofNullable(max);",
  "        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for (int i = 2; i < lst.size(); i++) {\n            if (lst.get(i) <\
    \ smallest) {\n                secondSmallest = lst.get(i);\n                smallest\
    \ = secondSmallest;\n            } else if (lst.get(i) == smallest) {\n      \
    \          secondSmallest = lst.get(i);\n            }\n        }\n        return\
    \ Optional.of(secondSmallest);", "        if (lst.size() < 2) {\n            return\
    \ Optional.empty();\n        }\n        Long smallest = lst.get(0);\n        Long\
    \ secondSmallest = lst.get(1);\n        for (int i = 2; i < lst.size(); i++) {\n\
    \            if (lst.get(i) < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst.get(i);\n            } else if (lst.get(i) ==\
    \ smallest) {\n                secondSmallest = lst.get(i);\n            }\n \
    \       }\n        return Optional.of(secondSmallest);", "        Optional<Long>\
    \ result = Optional.empty();\n        if (lst.size() > 0) {\n            Long\
    \ smallest = lst.get(0);\n            for (int i = 1; i < lst.size(); i++) {\n\
    \                if (lst.get(i) < smallest) {\n                    result = Optional.of(lst.get(i));\n\
    \                    smallest = lst.get(i);\n                }\n            }\n\
    \        }\n        return result;", "        Collections.sort(lst);\n       \
    \ if (lst.size() >= 2) {\n            return Optional.of(lst.get(1));\n      \
    \  }\n        return Optional.empty();", "        long min = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max = lst.stream().max(Comparator.naturalOrder()).get();\n     \
    \   if (min == max) {\n            return Optional.empty();\n        }\n     \
    \   return Optional.of(lst.get(lst.indexOf(min)));", "        Collections.sort(lst);\n\
    \        if (lst.size() >= 2) {\n            return Optional.of(lst.get(1));\n\
    \        }\n        return Optional.empty();", "        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        for(int i = 2; i < lst.size();\
    \ i++) {\n            if(lst.get(i) < smallest) {\n                secondSmallest\
    \ = lst.get(i);\n                smallest = lst.get(i);\n            }\n     \
    \   }\n        return Optional.ofNullable(secondSmallest);", "        long smallest\
    \ = lst.get(0);\n        long secondSmallest = lst.get(1);\n        for(long i\
    \ : lst) {\n            if(i<smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = i;\n            } else if(i>smallest) {\n        \
    \        secondSmallest = i;\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for(long i : lst) {\n            if(i == smallest) {\n              \
    \  continue;\n            }\n            if(i == secondSmallest) {\n         \
    \       return Optional.of(i);\n            }\n            if(i<smallest) {\n\
    \                secondSmallest = i;\n            }\n            if(i>secondSmallest)\
    \ {\n                smallest = i;\n            }\n        }\n        return Optional.empty();",
  "        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n\
    \        Long min = lst.get(0);\n        Long max = lst.get(0);\n        for (Long\
    \ i : lst) {\n            if (i < min) {\n                min = i;\n         \
    \   }\n            if (i > max) {\n                max = i;\n            }\n \
    \       }\n        return Optional.ofNullable(max);", "        long smallest =\
    \ lst.get(0);\n        long secondSmallest = lst.get(1);\n        for(int i =\
    \ 1; i < lst.size(); i++) {\n            if(lst.get(i) < smallest) {\n       \
    \         secondSmallest = lst.get(i);\n                smallest = lst.get(i);\n\
    \            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for(int i = 2; i < lst.size(); i++) {\n            if(lst.get(i) < smallest)\
    \ {\n                secondSmallest = lst.get(i);\n                smallest =\
    \ lst.get(0);\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        Optional<Long> smallest = lst.stream().min(Comparator.naturalOrder());\n\
    \        if (smallest.isPresent()) {\n            return smallest;\n        }\n\
    \        return Optional.empty();", "        Optional<Long> result = Optional.empty();\n\
    \        for(Long l : lst) {\n            Optional<Long> next = Optional.ofNullable(l);\n\
    \            Optional<Long> prev = Optional.ofNullable(l-1);\n            if(next.isPresent()\
    \ && prev.isPresent()) {\n                if(next.get() < prev.get()) {\n    \
    \                result = next;\n                }\n            }\n        }\n\
    \        return result;", "        long smallest = lst.get(0);\n        long secondSmallest\
    \ = lst.get(1);\n        for(int i = 2; i < lst.size(); i++) {\n            if(lst.get(i)\
    \ < smallest) {\n                secondSmallest = lst.get(i);\n              \
    \  smallest = lst.get(i);\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        Optional<Long> result = Optional.empty();\n        if (lst.size() > 0)\
    \ {\n            Long minValue = lst.stream().min(Comparator.naturalOrder()).orElse(null);\n\
    \            result = lst.stream().filter(value -> value.longValue() == minValue).findFirst();\n\
    \        }\n        return result;", "        Optional<Long> result = Optional.empty();\n\
    \        for(Long val : lst) {\n            Optional<Long> nextVal = lst.stream().filter(x\
    \ -> x < val).findFirst();\n            if(nextVal.isPresent()) {\n          \
    \      result = Optional.of(nextVal.get());\n                break;\n        \
    \    }\n        }\n        return result;", "        if (lst.size() <= 1) return\
    \ Optional.empty();\n        long smallest = lst.get(0);\n        long secondSmallest\
    \ = lst.get(1);\n        for (int i = 2; i < lst.size(); i++) {\n            if\
    \ (lst.get(i) < smallest) {\n                secondSmallest = smallest;\n    \
    \            smallest = lst.get(i);\n            } else if (lst.get(i) == smallest)\
    \ {\n                secondSmallest = lst.get(i);\n            }\n        }\n\
    \        return Optional.of(secondSmallest);", "        Optional<Long> result\
    \ = Optional.empty();\n        long smallest = lst.get(0);\n        long secondSmallest\
    \ = lst.get(1);\n        if (lst.size() > 2) {\n            for (int i = 2; i\
    \ < lst.size(); i++) {\n                long current = lst.get(i);\n         \
    \       if (current < smallest) {\n                    secondSmallest = smallest;\n\
    \                    smallest = current;\n                } else if (current <\
    \ secondSmallest) {\n                    secondSmallest = current;\n         \
    \       }\n            }\n            result = Optional.of(secondSmallest);\n\
    \        }\n        return result;", "        if (lst.size() == 0) {\n       \
    \     return Optional.empty();\n        }\n        long min = lst.get(0);\n  \
    \      long max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n\
    \            long current = lst.get(i);\n            if (current < min) {\n  \
    \              min = current;\n            } else if (current > max) {\n     \
    \           max = current;\n            }\n        }\n        return Optional.ofNullable(max);",
  "        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        long thirdSmallest = lst.get(2);\n        long fourthSmallest = lst.get(3);\n\
    \        long fifthSmallest = lst.get(4);\n        if (smallest > secondSmallest\
    \ && smallest > thirdSmallest && smallest > fourthSmallest && smallest > fifthSmallest)\
    \ {\n            return Optional.of(smallest);\n        } else if (secondSmallest\
    \ > smallest && secondSmallest > thirdSmallest && secondSmallest > fourthSmallest\
    \ && secondSmallest > fifthSmallest) {\n            return Optional.of(secondSmallest);\n\
    \        } else if (thirdSmallest > smallest && thirdSmallest > secondSmallest\
    \ && thirdSmallest > fourthSmallest && thirdSmallest > fifthSmallest) {\n    \
    \        return Optional.of(thirdSmallest);\n        } else if (fourthSmallest\
    \ > smallest && fourthSmallest > secondSmallest && fourthSmallest > thirdSmallest\
    \ && fourthSmallest > fifthSmallest) {\n            return Optional.of(fourthSmallest);\n\
    \        } else if (fifthSmallest > smallest && fifthSmallest > secondSmallest\
    \ && fifthSmallest > thirdSmallest && fifthSmallest > fourthSmallest) {\n    \
    \        return Optional.of(fifthSmallest);\n        }\n        return Optional.empty();",
  "        Optional<Long> result = Optional.empty();\n        if (lst.size() > 0)\
    \ {\n            Long min = lst.get(0);\n            for (int i = 1; i < lst.size();\
    \ i++) {\n                if (lst.get(i) < min) {\n                    min = lst.get(i);\n\
    \                }\n            }\n            result = Optional.of(min);\n  \
    \      }\n        return result;", "        Optional<Long> result = Optional.empty();\n\
    \        if (lst.size() > 0) {\n            Long min = lst.get(0);\n         \
    \   for (int i = 1; i < lst.size(); i++) {\n                if (lst.get(i) < min)\
    \ {\n                    min = lst.get(i);\n                }\n            }\n\
    \            result = Optional.of(min);\n        }\n        return result;", " \
    \       if (lst.size() == 0) {\n            return Optional.empty();\n       \
    \ }\n        long min = lst.get(0);\n        long max = lst.get(0);\n        for\
    \ (int i = 1; i < lst.size(); i++) {\n            long current = lst.get(i);\n\
    \            if (current < min) {\n                min = current;\n          \
    \  } else if (current > max) {\n                max = current;\n            }\n\
    \        }\n        return Optional.ofNullable(max);", "        Optional<Long>\
    \ result = Optional.empty();\n        if (lst.size() > 0) {\n            Long\
    \ minValue = lst.get(0);\n            for (int i = 1; i < lst.size(); i++) {\n\
    \                if (minValue > lst.get(i)) {\n                    minValue =\
    \ lst.get(i);\n                }\n            }\n            result = Optional.of(minValue);\n\
    \        }\n        return result;", "        if (lst.size() < 2) return Optional.empty();\n\
    \        Long min2 = lst.get(0);\n        Long min1 = lst.get(1);\n        for\
    \ (int i = 2; i < lst.size(); i++) {\n            Long cur = lst.get(i);\n   \
    \         if (cur < min1) {\n                min2 = min1;\n                min1\
    \ = cur;\n            } else if (cur < min2) {\n                min2 = cur;\n\
    \            }\n        }\n        return Optional.of(min2);", "        long smallest\
    \ = lst.get(0);\n        long secondSmallest = lst.get(1);\n        for(int i\
    \ = 2; i < lst.size(); i++) {\n            if(lst.get(i) < smallest) {\n     \
    \           secondSmallest = lst.get(i);\n                smallest = lst.get(i);\n\
    \            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        Collections.sort(lst);\n        if (lst.size() == 0) {\n            return\
    \ Optional.empty();\n        }\n        Long second = lst.get(1);\n        if\
    \ (second == null) {\n            return Optional.empty();\n        }\n      \
    \  return Optional.of(second);", "        if (lst.size() == 0) {\n           \
    \ return Optional.empty();\n        }\n        long smallest = lst.get(0);\n \
    \       long secondSmallest = lst.get(1);\n        for (int i = 2; i < lst.size();\
    \ i++) {\n            if (lst.get(i) < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst.get(i);\n            } else if (lst.get(i)\
    \ == smallest) {\n                secondSmallest = lst.get(i);\n            }\n\
    \        }\n        return Optional.of(secondSmallest);", "        if (lst.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        long smallest =\
    \ lst.get(0);\n        long secondSmallest = lst.get(1);\n        for (int i =\
    \ 2; i < lst.size(); i++) {\n            if (lst.get(i) < smallest) {\n      \
    \          secondSmallest = lst.get(i);\n                smallest = lst.get(0);\n\
    \            }\n        }\n        return Optional.of(secondSmallest);", "   \
    \     long min = lst.get(0);\n        long max = lst.get(0);\n        for (long\
    \ i : lst) {\n            if (i < min) {\n                min = i;\n         \
    \   }\n            if (i > max) {\n                max = i;\n            }\n \
    \       }\n        return Optional.ofNullable(max);", "        if (lst.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long max = lst.get(0);\n        for (long i : lst) {\n            if\
    \ (i < min) {\n                min = i;\n            }\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        return Optional.ofNullable(max);",
  "        Optional<Long> result = Optional.empty();\n        if (lst.size() > 0)\
    \ {\n            Long smallest = lst.get(0);\n            for (int i = 1; i <\
    \ lst.size(); i++) {\n                if (lst.get(i) < smallest) {\n         \
    \           smallest = lst.get(i);\n                }\n            }\n       \
    \     result = Optional.of(smallest);\n        }\n        return result;", " \
    \       Optional<Long> result = Optional.empty();\n        if (lst.size() > 0)\
    \ {\n            Long smallest = lst.get(0);\n            for (int i = 1; i <\
    \ lst.size(); i++) {\n                if (lst.get(i) < smallest) {\n         \
    \           result = Optional.of(smallest);\n                    smallest = lst.get(i);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   Optional<Long> result = Optional.empty();\n        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        for (long element : lst) {\n\
    \            if (element < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = element;\n            } else if (element < secondSmallest)\
    \ {\n                secondSmallest = element;\n            }\n        }\n   \
    \     result = Optional.of(secondSmallest);\n        return result;", "      \
    \  if (lst.size() <= 1) return Optional.empty();\n        Long min1 = lst.get(0);\n\
    \        Long min2 = lst.get(1);\n        Long min3 = lst.get(2);\n        Long\
    \ min4 = lst.get(3);\n        Long min5 = lst.get(4);\n        Long min6 = lst.get(5);\n\
    \        Long min7 = lst.get(6);\n        Long min8 = lst.get(7);\n        Long\
    \ min9 = lst.get(8);\n        Long min10 = lst.get(9);\n        Long min11 = lst.get(10);\n\
    \        Long min12 = lst.get(11);\n        Long min13 = lst.get(12);\n      \
    \  Long min14 = lst.get(13);\n        Long min15 = lst.get(14);\n        Long\
    \ min16 = lst.get(15);\n        Long min17 = lst.get(16);\n        Long min18\
    \ = lst.get(17);\n        Long min19 = lst.get(18);\n        Long min20 = lst.get(19);\n\
    \        Long min21 = lst.get(20);\n        Long min22 = lst.get(21);\n      \
    \  Long min23 = lst.get(22);\n        Long min24 = lst.get(23);\n        Long\
    \ min25 = lst.get(24);\n        Long min26 = lst.get(25);\n        Long min27\
    \ = lst.get(26);\n        Long min28 = lst.get(27);\n        Long min29 = lst.get(28);\n\
    \        Long min30 = lst.get(29);\n        Long min31 = lst.get(30);\n      \
    \  Long min32 = lst.get(31);\n        Long min33 = lst.get(32);\n        Long\
    \ min34 = lst.get(33);\n        Long min35 = lst.get(34);\n        Long min36\
    \ = lst.get(35);\n        Long min37 = lst.get(36);\n        Long min38 = lst.get(37);\n\
    \        Long min39 = lst.get(38);\n        Long min40 = lst.get(39);\n      \
    \  Long min41 = lst.get(40);\n        Long min42 = lst.get(41);\n        Long\
    \ min43 = lst.get(42);\n        Long min44 = lst.get(43);\n        Long min45\
    \ = lst.get(44);\n        Long min46 = lst.get(45);\n        Long min47 = lst.get(46);\n\
    \        Long min48 = lst.get(47);\n        Long ", "        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        for(long i : lst) {\n    \
    \        if(i<smallest) {\n                secondSmallest = smallest;\n      \
    \          smallest = i;\n            }\n            if(i>smallest) {\n      \
    \          secondSmallest = i;\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long max = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n       \
    \         min = lst.get(i);\n            } else if (lst.get(i) > max) {\n    \
    \            max = lst.get(i);\n            }\n        }\n        return Optional.ofNullable(max);",
  "        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for(long i = 2; i < lst.size(); i++) {\n            if(lst.get(i) < smallest)\
    \ {\n                secondSmallest = lst.get(i);\n                smallest =\
    \ lst.get(i);\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        Collections.sort(lst);\n        if (lst.size() <= 1) return Optional.empty();\n\
    \        return Optional.of(lst.get(1));", "        if (lst.size() <= 1) return\
    \ Optional.empty();\n        long smallest = lst.get(0);\n        long secondSmallest\
    \ = lst.get(1);\n        for (int i = 2; i < lst.size(); i++) {\n            if\
    \ (lst.get(i) < smallest) {\n                secondSmallest = lst.get(i);\n  \
    \              smallest = lst.get(i);\n            } else if (lst.get(i) == smallest)\
    \ {\n                secondSmallest = lst.get(i);\n            }\n        }\n\
    \        return Optional.of(secondSmallest);", "        Optional<Long> result\
    \ = Optional.empty();\n        if (lst.size() > 0) {\n            Long minValue\
    \ = lst.get(0);\n            for (int i = 1; i < lst.size(); i++) {\n        \
    \        if (lst.get(i) < minValue) {\n                    minValue = lst.get(i);\n\
    \                }\n            }\n            result = Optional.of(minValue);\n\
    \        }\n        return result;", "        if (lst.size() == 0) {\n       \
    \     return Optional.empty();\n        }\n        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        for (int i = 2; i < lst.size();\
    \ i++) {\n            if (lst.get(i) < smallest) {\n                secondSmallest\
    \ = lst.get(i);\n                smallest = lst.get(i);\n            } else if\
    \ (lst.get(i) == smallest) {\n                secondSmallest = lst.get(i);\n \
    \           }\n        }\n        return Optional.of(secondSmallest);", "    \
    \    Optional<Long> result = Optional.empty();\n        if (lst.size() > 0) {\n\
    \            Long smallest = lst.get(0);\n            for (int i = 1; i < lst.size();\
    \ i++) {\n                if (lst.get(i) < smallest) {\n                    result\
    \ = Optional.of(lst.get(i));\n                    smallest = lst.get(i);\n   \
    \             }\n            }\n        }\n        return result;", "        if\
    \ (lst.size() == 0) {\n            return Optional.empty();\n        }\n     \
    \   long min = lst.get(0);\n        long max = lst.get(0);\n        for (int i\
    \ = 1; i < lst.size(); i++) {\n            long current = lst.get(i);\n      \
    \      if (current < min) {\n                min = current;\n            } else\
    \ if (current > max) {\n                max = current;\n            }\n      \
    \  }\n        return Optional.ofNullable(max);", "        Collections.sort(lst);\n\
    \        if (lst.size() > 1) {\n            return Optional.of(lst.get(1));\n\
    \        }\n        return Optional.empty();", "        Collections.sort(lst);\n\
    \        if (lst.size() > 1) {\n            return Optional.of(lst.get(1));\n\
    \        }\n        return Optional.empty();", "        Optional<Long> result\
    \ = Optional.empty();\n        if (lst.size() > 0) {\n            Long min = lst.get(0);\n\
    \            for (int i = 1; i < lst.size(); i++) {\n                if (lst.get(i)\
    \ < min) {\n                    min = lst.get(i);\n                }\n       \
    \     }\n            result = Optional.of(min);\n        }\n        return result;",
  "        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for(int i = 2; i < lst.size(); i++) {\n            if(lst.get(i) < smallest)\
    \ {\n                secondSmallest = lst.get(i);\n                smallest =\
    \ lst.get(i);\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long min = lst.get(0);\n        long max = lst.get(0);\n        for (long\
    \ i : lst) {\n            if (i < min) {\n                min = i;\n         \
    \   }\n            if (i > max) {\n                max = i;\n            }\n \
    \       }\n        if (min == max) {\n            return Optional.empty();\n \
    \       }\n        return Optional.of(max);", "        long min = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        if (lst.contains(min)) {\n            return Optional.of(min);\n    \
    \    }\n        return Optional.empty();", "        if (lst.size() <= 1) return\
    \ Optional.empty();\n        long min = lst.get(0);\n        long max = lst.get(0);\n\
    \        for (long i : lst) {\n            if (i < min) min = i;\n           \
    \ if (i > max) max = i;\n        }\n        return Optional.ofNullable(max);",
  "        Optional<Long> result = Optional.empty();\n        if (lst.size() > 0)\
    \ {\n            Long min = lst.get(0);\n            for (int i = 1; i < lst.size();\
    \ i++) {\n                if (lst.get(i) < min) {\n                    min = lst.get(i);\n\
    \                }\n            }\n            result = Optional.of(min);\n  \
    \      }\n        return result;"]
stop_tokens:
- "\n    }\n"
