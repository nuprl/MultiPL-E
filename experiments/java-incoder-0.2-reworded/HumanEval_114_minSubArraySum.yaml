name: HumanEval_114_minSubArraySum
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given an array array list of integers nums, find the minimum\
  \ sum of any non-empty sub-array array list\n    // of nums.\n    // Example\n \
  \   // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
  \ (long)4l, (long)1l, (long)2l, (long)4l))))\n    // (1l)\n    // >>> minSubArraySum((new\
  \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))\n    // (-6l)\n\
  \    public static long minSubArraySum(ArrayList<Long> nums) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(minSubArraySum((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l,\
  \ (long)4l)))) == (1l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)-2l, (long)-3l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)-2l, (long)-3l, (long)2l, (long)-10l)))) == (-14l));\n    assert(minSubArraySum((new\
  \ ArrayList<Long>(Arrays.asList((long)-9999999999999999l)))) == (-9999999999999999l));\n\
  \    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)0l, (long)10l,\
  \ (long)20l, (long)1000000l)))) == (0l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)-2l, (long)-3l, (long)10l, (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new\
  \ ArrayList<Long>(Arrays.asList((long)100l, (long)-1l, (long)-2l, (long)-3l, (long)10l,\
  \ (long)-5l)))) == (-6l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)10l,\
  \ (long)11l, (long)13l, (long)8l, (long)3l, (long)4l)))) == (3l));\n    assert(minSubArraySum((new\
  \ ArrayList<Long>(Arrays.asList((long)100l, (long)-33l, (long)32l, (long)-1l, (long)0l,\
  \ (long)-2l)))) == (-33l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-10l))))\
  \ == (-10l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)7l))))\
  \ == (7l));\n    assert(minSubArraySum((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)-1l)))) == (-1l));\n    }\n\n}\n"
completions: ["        long min = Long.MAX_VALUE;\n        long sum = 0;\n       \
    \ long sumOfSubArray = 0;\n        for(long i : nums) {\n            sum += i;\n\
    \            if(sum < min) {\n                min = sum;\n            }\n    \
    \        sumOfSubArray += i;\n        }\n        return sumOfSubArray;", "   \
    \     long minSum = Long.MAX_VALUE;\n        long sum = 0;\n        long minSumIndex\
    \ = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n\
    \            if(sum < minSum) {\n                minSum = sum;\n             \
    \   minSumIndex = i;\n            }\n        }\n        return nums.get(minSumIndex);",
  "        long sum = 0;\n        long min = Long.MAX_VALUE;\n        long max = Long.MIN_VALUE;\n\
    \        for (long num : nums) {\n            sum += num;\n            if (num\
    \ < min) {\n                min = num;\n            }\n            if (num > max)\
    \ {\n                max = num;\n            }\n        }\n        return sum\
    \ - min;", "        long min = Long.MAX_VALUE;\n        long sum = 0;\n      \
    \  for (long num : nums) {\n            sum += num;\n            if (sum < min)\
    \ {\n                min = sum;\n            }\n        }\n        return min;",
  "        long minSum = Long.MAX_VALUE;\n        long minSumIndex = 0;\n        long\
    \ sum = 0;\n        long sumIndex = 0;\n        long sumOfSubArraySum = 0;\n \
    \       for(long num : nums) {\n            sum += num;\n            sumOfSubArraySum\
    \ += num;\n            if(sumOfSubArraySum < minSum) {\n                minSum\
    \ = sumOfSubArraySum;\n                minSumIndex = sumIndex;\n            }\n\
    \            sumIndex++;\n        }\n        return minSum;", "        long minSum\
    \ = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArray = 0;\n\
    \        for(int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n\
    \            if(sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        for(int i = 0; i < nums.size(); i++) {\n            sumOfSubArray\
    \ += nums.get(i);\n            if(sumOfSubArray < minSum) {\n                minSum\
    \ = sumOfSubArray;\n            }\n        }\n        return minSum;", "     \
    \   long minSum = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArraySum\
    \ = 0;\n        long subArraySum = 0;\n        long subArraySumOfSubArraySum =\
    \ 0;\n        long sumOfSubArraySumOfSubArraySum = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum =\
    \ 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySumOfSubArraySum\
    \ = 0;\n        long sumOfSubArraySumOfSubArraySumOfSubArraySumOf", "        long\
    \ min = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = Math.min(min,\
    \ num);\n        }\n        return min;", "        long sum = 0;\n        long\
    \ min = Long.MAX_VALUE;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;", "        long minSum = Long.MAX_VALUE;\n      \
    \  long minSumIndex = 0;\n        long sum = 0;\n        long sumIndex = 0;\n\
    \        for(long i : nums) {\n            sum += i;\n            sumIndex++;\n\
    \            if(sum < minSum) {\n                minSum = sum;\n             \
    \   minSumIndex = sumIndex;\n            }\n        }\n        return minSum;",
  "        long min = Long.MAX_VALUE;\n        for (long num : nums) {\n         \
    \   min = Math.min(min, num);\n        }\n        return min;", "        long\
    \ minSum = Long.MAX_VALUE;\n        long sum = 0;\n        for (long num : nums)\
    \ {\n            sum += num;\n            if (sum < minSum) {\n              \
    \  minSum = sum;\n            }\n        }\n        return minSum;", "       \
    \ long min = Long.MAX_VALUE;\n        long sum = 0;\n        long sumOfSubArraySum\
    \ = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n\
    \            sumOfSubArraySum += nums.get(i);\n            if(sumOfSubArraySum\
    \ < min) {\n                min = sumOfSubArraySum;\n            }\n        }\n\
    \        return min;", "        long min = Long.MAX_VALUE;\n        long sum =\
    \ 0;\n        for (long num : nums) {\n            sum += num;\n            if\
    \ (sum < min) {\n                min = sum;\n            }\n        }\n      \
    \  return min;", "        long min = Long.MAX_VALUE;\n        long sum = 0;\n\
    \        for (long num : nums) {\n            sum += num;\n            if (sum\
    \ < min) {\n                min = sum;\n            }\n        }\n        return\
    \ min;", "        long min = Long.MAX_VALUE;\n        long sum = 0;\n        for\
    \ (long num : nums) {\n            sum += num;\n            if (sum < min) {\n\
    \                min = sum;\n            }\n        }\n        return min;", " \
    \       long sum = 0;\n        long min = Long.MAX_VALUE;\n        for (long num\
    \ : nums) {\n            sum += num;\n            if (sum < min) {\n         \
    \       min = sum;\n            }\n        }\n        return min;", "        long\
    \ minSum = Long.MAX_VALUE;\n        long sum = 0;\n        for(long num : nums)\
    \ {\n            sum += num;\n            if(sum < minSum) {\n               \
    \ minSum = sum;\n            }\n        }\n        return minSum;", "        long\
    \ min = Long.MAX_VALUE;\n        for (long num : nums) {\n            min = Math.min(min,\
    \ num);\n        }\n        return min;", "        long min = Long.MAX_VALUE;\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \     }\n        return min;"]
stop_tokens:
- "\n    }\n"
