name: HumanEval_59_largest_prime_factor
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is\
  \ not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n    // >>>\
  \ largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
  \ n) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
  \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
  \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
  \ == (29l));\n    }\n\n}\n"
completions: ["        long maxFactor = n;\n        long maxFactorPrime = 1;\n   \
    \     long factor = 2;\n        while (factor <= maxFactor) {\n            while\
    \ (n % factor == 0) {\n                maxFactorPrime = factor;\n            \
    \    n /= factor;\n            }\n            factor++;\n        }\n        return\
    \ maxFactorPrime;", "        long largestPrimeFactor = 0;\n        long currentPrime\
    \ = 1;\n        long currentFactor = 1;\n        long currentFactorFactor = 1;\n\
    \        long currentFactorFactorFactor = 1;\n        long currentFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactor = 1;\n        long\
    \ currentFactorFactorFactorFactorFactorFactor = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactor =\
    \ 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;", "        long largestPrimeFactor = n;\n        long primeFactor = 1;\n\
    \        while (primeFactor <= largestPrimeFactor) {\n            long nextPrimeFactor\
    \ = primeFactor * primeFactor;\n            if (nextPrimeFactor <= largestPrimeFactor)\
    \ {\n                largestPrimeFactor = nextPrimeFactor;\n            } else\
    \ {\n                largestPrimeFactor = primeFactor;\n            }\n      \
    \      primeFactor++;\n        }\n        return largestPrimeFactor;", "     \
    \   long largestPrimeFactor = n;\n        long i = 2;\n        while (i <= n /\
    \ 2) {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n            i += 2;\n        }\n     \
    \   return largestPrimeFactor;", "        long maxFactor = n;\n        long maxFactorFound\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        while (n % factor == 0) {\n                maxFactorFound = factor;\n\
    \                factor++;\n            }\n            n--;\n        }\n     \
    \   return maxFactorFound;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor < maxFactor) {\n            while (n % factor ==\
    \ 0) {\n                n /= factor;\n            }\n            if (n == 1) {\n\
    \                break;\n            }\n            maxFactor = factor;\n    \
    \        factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        if (n % factor == 0) {\n                maxFactor = factor;\n       \
    \     }\n            factor++;\n        }\n        return maxFactor;", "     \
    \   long largestPrimeFactor = 0;\n        long currentPrime = 2;\n        long\
    \ currentFactor = 1;\n        while (n > 1) {\n            while (n % currentPrime\
    \ == 0) {\n                currentPrime++;\n            }\n            currentFactor\
    \ = currentPrime;\n            while (n % currentPrime != 0) {\n             \
    \   currentPrime++;\n            }\n            largestPrimeFactor = currentPrime;\n\
    \            n = n / currentPrime;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long primeFactor = 2;\n        while\
    \ (primeFactor <= n / 2) {\n            if (n % primeFactor == 0) {\n        \
    \        largestPrimeFactor = primeFactor;\n                break;\n         \
    \   }\n            primeFactor++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long factor = 2;\n        while (factor <= n) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long largestPrimeFactor = n;\n\
    \        long factor = 2;\n        while (factor < n) {\n            if (n % factor\
    \ == 0) {\n                largestPrimeFactor = factor;\n                break;\n\
    \            }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;", "        long largestPrimeFactor = n;\n\
    \        long i = 2;\n        while (i <= largestPrimeFactor) {\n            if\
    \ (n % i == 0) {\n                largestPrimeFactor = i;\n            }\n   \
    \         i += 2;\n        }\n        return largestPrimeFactor;", "        long\
    \ maxFactor = n;\n        long factor = 2;\n        while (factor <= maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = 0;\n        long i = 2;\n        while (i <=\
    \ n / i) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;", "        long largestPrimeFactor = 0;\n \
    \       long i = 2;\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n            i++;\n        }\n        return largestPrimeFactor;", " \
    \       long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;"]
stop_tokens:
- "\n    }\n"
