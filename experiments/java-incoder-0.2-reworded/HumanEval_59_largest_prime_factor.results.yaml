language: java
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long maxFactorPrime = 1;\n      \
    \  long factor = 2;\n        while (factor <= maxFactor) {\n            while\
    \ (n % factor == 0) {\n                maxFactorPrime = factor;\n            \
    \    n /= factor;\n            }\n            factor++;\n        }\n        return\
    \ maxFactorPrime;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long currentPrime = 1;\n\
    \        long currentFactor = 1;\n        long currentFactorFactor = 1;\n    \
    \    long currentFactorFactorFactor = 1;\n        long currentFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactor = 1;\n        long\
    \ currentFactorFactorFactorFactorFactorFactor = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactor =\
    \ 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd57zfd5n.java:27: error: variable currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ is already defined in method largestPrimeFactor(long)\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n             ^\n/tmp/tmpd57zfd5n.java:31: error: variable currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ is already defined in method largestPrimeFactor(long)\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n             ^\n/tmp/tmpd57zfd5n.java:32: error: variable currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ is already defined in method largestPrimeFactor(long)\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n             ^\n/tmp/tmpd57zfd5n.java:34: error: variable currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ is already defined in method largestPrimeFactor(long)\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n             ^\n/tmp/tmpd57zfd5n.java:36: error: variable currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ is already defined in method largestPrimeFactor(long)\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n             ^\n/tmp/tmpd57zfd5n.java:37: error: variable currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ is already defined in method largestPrimeFactor(long)\n        long currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n             ^\n/tmp/tmpd57zfd5n.java:38: error: variable currentFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorF"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long primeFactor = 1;\n\
    \        while (primeFactor <= largestPrimeFactor) {\n            long nextPrimeFactor\
    \ = primeFactor * primeFactor;\n            if (nextPrimeFactor <= largestPrimeFactor)\
    \ {\n                largestPrimeFactor = nextPrimeFactor;\n            } else\
    \ {\n                largestPrimeFactor = primeFactor;\n            }\n      \
    \      primeFactor++;\n        }\n        return largestPrimeFactor;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvdlojih3.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (i <= n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i += 2;\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm2glv2w.java:27)\n"
  stdout: ''
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long maxFactorFound = n;\n      \
    \  long factor = 2;\n        while (factor <= maxFactor) {\n            while\
    \ (n % factor == 0) {\n                maxFactorFound = factor;\n            \
    \    factor++;\n            }\n            n--;\n        }\n        return maxFactorFound;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ < maxFactor) {\n            while (n % factor == 0) {\n                n /=\
    \ factor;\n            }\n            if (n == 1) {\n                break;\n\
    \            }\n            maxFactor = factor;\n            factor++;\n     \
    \   }\n        return maxFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpodg1bnxw.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long currentPrime = 2;\n\
    \        long currentFactor = 1;\n        while (n > 1) {\n            while (n\
    \ % currentPrime == 0) {\n                currentPrime++;\n            }\n   \
    \         currentFactor = currentPrime;\n            while (n % currentPrime !=\
    \ 0) {\n                currentPrime++;\n            }\n            largestPrimeFactor\
    \ = currentPrime;\n            n = n / currentPrime;\n        }\n        return\
    \ largestPrimeFactor;\n    }\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo2gim87b.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long primeFactor = 2;\n\
    \        while (primeFactor <= n / 2) {\n            if (n % primeFactor == 0)\
    \ {\n                largestPrimeFactor = primeFactor;\n                break;\n\
    \            }\n            primeFactor++;\n        }\n        return largestPrimeFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnye1lull.java:27)\n"
  stdout: ''
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = 1;\n        long factor = 2;\n        while (factor\
    \ <= n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpovb0_2_8.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long factor = 2;\n     \
    \   while (factor < n) {\n            if (n % factor == 0) {\n               \
    \ largestPrimeFactor = factor;\n                break;\n            }\n      \
    \      factor++;\n        }\n        return largestPrimeFactor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdaytrx4.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (i <= largestPrimeFactor) {\n            if (n % i == 0) {\n               \
    \ largestPrimeFactor = i;\n            }\n            i += 2;\n        }\n   \
    \     return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwnan5wg1.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long i = 2;\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyl75017c.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long i = 2;\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyl75017c.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (i <= Math.sqrt(n)) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i += 2;\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplv62gcor.java:27)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (i <= n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpax2yt4d2.java:27)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long factor = 2;\n     \
    \   while (factor <= largestPrimeFactor) {\n            if (n % factor == 0) {\n\
    \                largestPrimeFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return largestPrimeFactor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2smmiuay.java:26)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long maxFactor = n;\n  \
    \      long factor = 2;\n        while (factor <= maxFactor) {\n            if\
    \ (n % factor == 0) {\n                largestPrimeFactor = factor;\n        \
    \        break;\n            }\n            factor++;\n        }\n        return\
    \ largestPrimeFactor;\n    }\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv11jgofv.java:28)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long i = 2;\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyl75017c.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long currentPrime = 1;\n\
    \        long currentFactor = 1;\n        long currentFactorPrime = 1;\n     \
    \   long currentFactorPrimePrime = 1;\n        long currentFactorPrimePrimePrime\
    \ = 1;\n        long currentFactorPrimePrimePrimePrime = 1;\n        long currentFactorPrimePrimePrimePrimePrime\
    \ = 1;\n        long currentFactorPrimePrimePrimePrimePrimePrime = 1;\n      \
    \  long currentFactorPrimePrimePrimePrimePrimePrimePrime = 1;\n        long currentFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long currentFactorPrimePrimePrimePrimePrimePrimePrime = 1;\n \
    \       long currentFactorPrimePrimePrimePrimePrimePrimePrime = 1;\n        long\
    \ currentFactorPrimePrimePrimePrimePrimePrimePrimePrime = 1;\n        long currentFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long currentFactorPrimePrimePrimePrimePrimePrimePrimePrime = 1;\n\
    \        long currentFactorPrimePrimePrimePrimePrimePrimePrimePrime = 1;\n   \
    \     long currentFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 1;\n \
    \       long currentFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 1;\n\
    \        long currentFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 1;\n\
    \        long currentFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 1;\n\
    \        long currentFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 1;\n\
    \        long currentFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 1;\n\
    \        long currentFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 1;\n\
    \        long currentFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 1;\n\
    \        long currentFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 1;\n\
    \        long currentFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 1;\n\
    \        long currentFactor\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkrhuah9v.java:42: error: ';' expected\n        long currentFactor\n\
    \                          ^\n1 error\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ < maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnexwhdfq.java:26)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long factor = 2;\n     \
    \   while (factor <= largestPrimeFactor) {\n            while (n % factor == 0)\
    \ {\n                largestPrimeFactor = factor;\n            }\n           \
    \ factor++;\n        }\n        return largestPrimeFactor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659805545
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long largestPrimeFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactor = 2;\n        long largestPrimeFactorFactorFactorFactor\
    \ = 3;\n        long largestPrimeFactorFactorFactorFactorFactor = 4;\n       \
    \ long largestPrimeFactorFactorFactorFactorFactorFactor = 5;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactor\
    \ = 6;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactor =\
    \ 7;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 8;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 9;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 10;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 11;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 12;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 13;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 14;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 15;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 16;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 17;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 18;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 19;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 20;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 21;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 22;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 23;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 24;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 25;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 26;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 27;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcdjmrjba.java:43: error: ';' expected\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor\n\
    \                                                                         ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long i = 2;\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyl75017c.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ < maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnexwhdfq.java:26)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long factor = 2;\n     \
    \   while (factor <= largestPrimeFactor) {\n            if (n % factor == 0) {\n\
    \                largestPrimeFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return largestPrimeFactor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2smmiuay.java:26)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long factor = 2;\n     \
    \   while (factor <= largestPrimeFactor) {\n            if (n % factor == 0) {\n\
    \                largestPrimeFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return largestPrimeFactor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2smmiuay.java:26)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long currentPrime = 2;\n\
    \        while (currentPrime < largestPrimeFactor) {\n            while (n % currentPrime\
    \ == 0) {\n                largestPrimeFactor = currentPrime;\n            }\n\
    \            currentPrime++;\n        }\n        return largestPrimeFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659805545
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long currentPrime = 2;\n\
    \        while (currentPrime < largestPrimeFactor) {\n            while (n % currentPrime\
    \ == 0) {\n                largestPrimeFactor = currentPrime;\n            }\n\
    \            currentPrime++;\n        }\n        return largestPrimeFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659805545
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long maxFactor = n;\n  \
    \      long factor = 2;\n        while (factor <= maxFactor) {\n            if\
    \ (n % factor == 0) {\n                largestPrimeFactor = factor;\n        \
    \        maxFactor = factor * factor;\n            }\n            factor++;\n\
    \        }\n        return largestPrimeFactor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkh0b_tfr.java:28)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (largestPrimeFactor % i == 0) {\n            largestPrimeFactor = largestPrimeFactor\
    \ / i;\n            i++;\n        }\n        return largestPrimeFactor;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4zdc0uys.java:24)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long currentPrimeFactor\
    \ = 1;\n        while (n > 1) {\n            currentPrimeFactor = n % currentPrimeFactor;\n\
    \            if (currentPrimeFactor > largestPrimeFactor) {\n                largestPrimeFactor\
    \ = currentPrimeFactor;\n            }\n            n /= currentPrimeFactor;\n\
    \        }\n        return largestPrimeFactor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.largestPrimeFactor(tmp8lxcboi7.java:22)\n\tat Problem.main(tmp8lxcboi7.java:27)\n"
  stdout: ''
  timestamp: 1659805541
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long maxFactorPrime = n;\n      \
    \  long factor = 2;\n        while (factor <= maxFactor) {\n            if (n\
    \ % factor == 0) {\n                long primeFactor = factor;\n             \
    \   while (primeFactor <= maxFactorPrime) {\n                    if (n % primeFactor\
    \ == 0) {\n                        maxFactorPrime = primeFactor;\n           \
    \             break;\n                    }\n                    primeFactor++;\n\
    \                }\n                if (primeFactor > maxFactorPrime) {\n    \
    \                maxFactorPrime = primeFactor;\n                }\n          \
    \  }\n            factor++;\n        }\n        return maxFactorPrime;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn5mpcdm0.java:37)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long maxFactorPrime = 1;\n      \
    \  long maxFactorPrimePrime = 2;\n        long maxFactorPrimePrimePrime = 3;\n\
    \        long maxFactorPrimePrimePrimePrime = 4;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 5;\n        long maxFactorPrimePrimePrimePrimePrime = 6;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 7;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 8;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 9;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 10;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 11;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 12;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 13;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 14;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 15;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 16;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 17;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 18;\n      \
    \  long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 19;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrime = 20;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 21;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 22;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 23;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 24;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 25;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 26;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = \n    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyjez8osa.java:43: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long factor = 2;\n     \
    \   while (factor <= largestPrimeFactor) {\n            if (n % factor == 0) {\n\
    \                largestPrimeFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return largestPrimeFactor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2smmiuay.java:26)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long currentPrime = 2;\n\
    \        while (currentPrime <= largestPrimeFactor) {\n            while (n %\
    \ currentPrime == 0) {\n                largestPrimeFactor = currentPrime;\n \
    \           }\n            currentPrime++;\n        }\n        return largestPrimeFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659805545
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        long currentPrimeFactor\
    \ = 2;\n        while (currentPrimeFactor <= n) {\n            if (n % currentPrimeFactor\
    \ == 0) {\n                largestPrimeFactor = currentPrimeFactor;\n        \
    \    }\n            currentPrimeFactor++;\n        }\n        return largestPrimeFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt79imy01.java:26)\n"
  stdout: ''
  timestamp: 1659805541
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long factor = 2;\n     \
    \   while (factor <= n / 2) {\n            if (n % factor == 0) {\n          \
    \      largestPrimeFactor = factor;\n                break;\n            }\n \
    \           factor++;\n        }\n        return largestPrimeFactor;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprl5w_6mw.java:27)\n"
  stdout: ''
  timestamp: 1659805541
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = 0;\n        long factor = 2;\n        while (factor\
    \ <= n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmbmsksej.java:26)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long factor = 2;\n     \
    \   while (factor < largestPrimeFactor) {\n            if (n % factor == 0) {\n\
    \                largestPrimeFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return largestPrimeFactor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2nkkxb_0.java:26)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = 1;\n        long currentFactor = 2;\n       \
    \ while (currentFactor <= n) {\n            if (n % currentFactor == 0) {\n  \
    \              maxFactor = currentFactor;\n                break;\n          \
    \  }\n            currentFactor++;\n        }\n        return maxFactor;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmkcj2om_.java:27)\n"
  stdout: ''
  timestamp: 1659805541
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long maxFactorFactor = 1;\n     \
    \   long factor = 2;\n        while (factor <= maxFactor) {\n            if (n\
    \ % factor == 0) {\n                maxFactorFactor *= factor;\n            }\n\
    \            factor++;\n        }\n        return maxFactorFactor;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa8omk65o.java:27)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (i <= largestPrimeFactor) {\n            if (n % i == 0) {\n               \
    \ largestPrimeFactor = i;\n            }\n            i += 2;\n        }\n   \
    \     return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwnan5wg1.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = 0;\n        long i = 2;\n        while (i <=\
    \ n / i) {\n            if (n % i == 0) {\n                maxFactor = i;\n  \
    \          }\n            i++;\n        }\n        return maxFactor;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnevnk8yt.java:26)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659805546
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = 0;\n        long factor = 2;\n        while (factor\
    \ <= n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmbmsksej.java:26)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = 1;\n        long factor = 2;\n        while (factor\
    \ <= n / 2) {\n            if (n % factor == 0) {\n                maxFactor =\
    \ factor;\n                break;\n            }\n            factor++;\n    \
    \    }\n        return maxFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppio0wjwm.java:27)\n"
  stdout: ''
  timestamp: 1659805541
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (i <= largestPrimeFactor) {\n            while (n % i == 0) {\n            \
    \    largestPrimeFactor = i;\n            }\n            i++;\n        }\n   \
    \     return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659805546
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long largestPrimeFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactor = 1;\n        long largestPrimeFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactor = 1;\n       \
    \ long largestPrimeFactorFactorFactorFactorFactorFactor = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp22y5p__1.java:46: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp22y5p__1.java:46: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659805541
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (i <= n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i += 2;\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm2glv2w.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (i <= largestPrimeFactor) {\n            if (n % i == 0) {\n               \
    \ largestPrimeFactor = i;\n            }\n            i++;\n        }\n      \
    \  return largestPrimeFactor;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp06sfmiww.java:26)\n"
  stdout: ''
  timestamp: 1659805542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long factor = 2;\n     \
    \   while (factor <= largestPrimeFactor) {\n            if (n % factor == 0) {\n\
    \                largestPrimeFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return largestPrimeFactor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2smmiuay.java:26)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ < maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnexwhdfq.java:26)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long currentPrime = 2;\n\
    \        while (currentPrime <= largestPrimeFactor) {\n            if (n % currentPrime\
    \ == 0) {\n                largestPrimeFactor = currentPrime;\n            }\n\
    \            currentPrime++;\n        }\n        return largestPrimeFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpor0xu09p.java:26)\n"
  stdout: ''
  timestamp: 1659805542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (i <= largestPrimeFactor) {\n            if (n % i == 0) {\n               \
    \ largestPrimeFactor = i;\n            }\n            i += 2;\n        }\n   \
    \     return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwnan5wg1.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long currentPrimeFactor\
    \ = 1;\n        while (currentPrimeFactor <= largestPrimeFactor) {\n         \
    \   currentPrimeFactor = currentPrimeFactor * 2;\n            while (currentPrimeFactor\
    \ <= largestPrimeFactor) {\n                currentPrimeFactor = currentPrimeFactor\
    \ * 2;\n            }\n            largestPrimeFactor = largestPrimeFactor / currentPrimeFactor;\n\
    \        }\n        return largestPrimeFactor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpofoo0yyu.java:27)\n"
  stdout: ''
  timestamp: 1659805542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long factor = 2;\n     \
    \   while (factor <= n) {\n            if (n % factor == 0) {\n              \
    \  largestPrimeFactor = factor;\n                break;\n            }\n     \
    \       factor++;\n        }\n        return largestPrimeFactor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0l23jn6w.java:27)\n"
  stdout: ''
  timestamp: 1659805542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long currentPrimeFactor\
    \ = 1;\n        long currentPrimeFactorFactor = 1;\n        long currentPrimeFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactor = 1;\n        long currentPrimeFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactor = 1;\n \
    \       long currentPrimeFactorFactorFactorFactorFactorFactorFactor = 1;\n   \
    \     long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n\
    \        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp303l7d7c.java:42: error: ';' expected\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\n\
    \                                                                            \
    \                           ^\n1 error\n"
  stdout: ''
  timestamp: 1659805541
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long primeFactor = 2;\n\
    \        while (primeFactor * primeFactor <= n) {\n            if (n % primeFactor\
    \ == 0) {\n                largestPrimeFactor = primeFactor;\n               \
    \ break;\n            }\n            primeFactor++;\n        }\n        return\
    \ largestPrimeFactor;\n    }\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4txvfy1k.java:27)\n"
  stdout: ''
  timestamp: 1659805542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long factor = 2;\n     \
    \   while (factor < n) {\n            if (n % factor == 0) {\n               \
    \ largestPrimeFactor = factor;\n                break;\n            }\n      \
    \      factor++;\n        }\n        return largestPrimeFactor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdaytrx4.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long maxFactorPrime = 2;\n      \
    \  long factor = 2;\n        while (factor <= maxFactor) {\n            if (n\
    \ % factor == 0) {\n                long factorPrime = 2;\n                while\
    \ (factorPrime <= factor) {\n                    if (n % factorPrime == 0) {\n\
    \                        break;\n                    }\n                    factorPrime++;\n\
    \                }\n                if (factorPrime > maxFactorPrime) {\n    \
    \                maxFactorPrime = factorPrime;\n                    maxFactor\
    \ = factor;\n                }\n            }\n            factor++;\n       \
    \ }\n        return maxFactor;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqv4p5nu_.java:37)\n"
  stdout: ''
  timestamp: 1659805542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long factor = 2;\n     \
    \   while (factor <= largestPrimeFactor) {\n            if (n % factor == 0) {\n\
    \                largestPrimeFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return largestPrimeFactor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2smmiuay.java:26)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ < maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnexwhdfq.java:26)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        long i = 2;\n        while\
    \ (i <= n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2cvvtkuy.java:27)\n"
  stdout: ''
  timestamp: 1659805542
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long factor = 2;\n     \
    \   while (factor <= largestPrimeFactor) {\n            while (n % factor == 0)\
    \ {\n                largestPrimeFactor = factor;\n            }\n           \
    \ factor++;\n        }\n        return largestPrimeFactor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659805545
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (i <= n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpax2yt4d2.java:27)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        long factor = 2;\n     \
    \   while (factor <= n) {\n            if (n % factor == 0) {\n              \
    \  largestPrimeFactor = factor;\n                break;\n            }\n     \
    \       factor++;\n        }\n        return largestPrimeFactor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz1wdfa0p.java:27)\n"
  stdout: ''
  timestamp: 1659805542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long currentPrimeFactor\
    \ = 1;\n        long currentPrimeFactorFactor = 1;\n        long currentPrimeFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactor = 1;\n        long currentPrimeFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactor = 1;\n \
    \       long currentPrimeFactorFactorFactorFactorFactorFactorFactor = 1;\n   \
    \     long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n\
    \        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdko0kjbh.java:43: error: ';' expected\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\n\
    \                                                                            \
    \                                       ^\n1 error\n"
  stdout: ''
  timestamp: 1659805541
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (i <= largestPrimeFactor) {\n            if (n % i == 0) {\n               \
    \ largestPrimeFactor = i;\n            }\n            i += 2;\n        }\n   \
    \     return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwnan5wg1.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long currentPrime = 2;\n\
    \        while (currentPrime < largestPrimeFactor) {\n            while (n % currentPrime\
    \ == 0) {\n                largestPrimeFactor = currentPrime;\n            }\n\
    \            currentPrime++;\n        }\n        return largestPrimeFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659805545
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long factor = 2;\n     \
    \   while (factor <= largestPrimeFactor) {\n            if (n % factor == 0) {\n\
    \                largestPrimeFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return largestPrimeFactor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2smmiuay.java:26)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long factor = 2;\n     \
    \   while (factor < n) {\n            if (n % factor == 0) {\n               \
    \ largestPrimeFactor = factor;\n                break;\n            }\n      \
    \      factor++;\n        }\n        return largestPrimeFactor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdaytrx4.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long largestPrimeFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactor = 2;\n        long largestPrimeFactorFactorFactorFactor\
    \ = 3;\n        long largestPrimeFactorFactorFactorFactorFactor = 4;\n       \
    \ long largestPrimeFactorFactorFactorFactorFactorFactor = 5;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactor\
    \ = 6;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 7;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 8;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 9;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 10;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 11;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 12;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 13;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 14;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 15;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 16;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 17;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 18;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 19;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 20;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 21;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 22;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 23;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 24;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 25;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 26;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 27;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprgfjjo5m.java:43: error: ';' expected\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\n\
    \                                                                            \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1659805541
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long currentPrime = 2;\n\
    \        while (largestPrimeFactor % currentPrime == 0) {\n            largestPrimeFactor\
    \ = largestPrimeFactor / currentPrime;\n            currentPrime++;\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzgantfil.java:24)\n"
  stdout: ''
  timestamp: 1659805542
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659805546
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long primeFactor = 2;\n\
    \        while (primeFactor * primeFactor <= n) {\n            while (n % primeFactor\
    \ == 0) {\n                largestPrimeFactor = primeFactor;\n               \
    \ n /= primeFactor;\n            }\n            primeFactor++;\n        }\n  \
    \      return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptyobezud.java:27)\n"
  stdout: ''
  timestamp: 1659805542
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ < maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnexwhdfq.java:26)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n\
    \ / 2; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5_6_u1kn.java:25)\n"
  stdout: ''
  timestamp: 1659805542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long currentPrimeFactor\
    \ = 1;\n        long currentPrimeFactorFactor = 1;\n        long currentPrimeFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactor = 1;\n        long currentPrimeFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactor = 1;\n \
    \       long currentPrimeFactorFactorFactorFactorFactorFactorFactor = 1;\n   \
    \     long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n\
    \        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactor\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv5bztwae.java:45: error: ';' expected\n        long currentPrimeFactorFactor\n\
    \                                     ^\n1 error\n"
  stdout: ''
  timestamp: 1659805541
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n\
    \ / 2; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n        }\n        return largestPrimeFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5_6_u1kn.java:25)\n"
  stdout: ''
  timestamp: 1659805542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659805546
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long factor = 2;\n     \
    \   while (factor < n) {\n            if (n % factor == 0) {\n               \
    \ largestPrimeFactor = factor;\n                break;\n            }\n      \
    \      factor++;\n        }\n        return largestPrimeFactor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdaytrx4.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long factor = 2;\n     \
    \   while (factor <= largestPrimeFactor) {\n            if (n % factor == 0) {\n\
    \                largestPrimeFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return largestPrimeFactor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2smmiuay.java:26)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long i = 2;\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyl75017c.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long primeFactor = 1;\n\
    \        while (primeFactor < n) {\n            if (n % primeFactor == 0) {\n\
    \                largestPrimeFactor = primeFactor;\n            }\n          \
    \  primeFactor++;\n        }\n        return largestPrimeFactor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpylk709d_.java:27)\n"
  stdout: ''
  timestamp: 1659805542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long maxFactor = 1;\n  \
    \      long currentFactor = 2;\n        while (currentFactor <= largestPrimeFactor)\
    \ {\n            if (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n\
    \            }\n            currentFactor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79escboh.java:27)\n"
  stdout: ''
  timestamp: 1659805542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (i <= Math.sqrt(n)) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i += 1;\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi_zu7jiu.java:27)\n"
  stdout: ''
  timestamp: 1659805542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (i <= largestPrimeFactor) {\n            if (n % i == 0) {\n               \
    \ largestPrimeFactor = i;\n            }\n            i += 2;\n        }\n   \
    \     return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwnan5wg1.java:26)\n"
  stdout: ''
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long currentPrime = 2;\n\
    \        while (currentPrime < largestPrimeFactor) {\n            while (n % currentPrime\
    \ == 0) {\n                largestPrimeFactor = currentPrime;\n            }\n\
    \            currentPrime++;\n        }\n        return largestPrimeFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659805545
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (i <= n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i += 2;\n        }\n\
    \        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm2glv2w.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long factor = 2;\n     \
    \   while (factor <= largestPrimeFactor) {\n            if (n % factor == 0) {\n\
    \                largestPrimeFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return largestPrimeFactor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2smmiuay.java:26)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ < maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpku92dnx_.java:27)\n"
  stdout: ''
  timestamp: 1659805542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long factor = 2;\n     \
    \   while (factor < n) {\n            if (n % factor == 0) {\n               \
    \ largestPrimeFactor = factor;\n                break;\n            }\n      \
    \      factor++;\n        }\n        return largestPrimeFactor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdaytrx4.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (i <= Math.sqrt(n)) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp73d2kdzn.java:27)\n"
  stdout: ''
  timestamp: 1659805542
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long maxFactorPrime = 1;\n      \
    \  long factor = 2;\n        while (factor <= maxFactor) {\n            if (n\
    \ % factor == 0) {\n                maxFactorPrime = factor;\n               \
    \ while (n % factor == 0) {\n                    n /= factor;\n              \
    \  }\n            }\n            factor++;\n        }\n        return maxFactorPrime;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long maxFactorPrime = 1;\n      \
    \  long maxFactorPrimePrime = 2;\n        long maxFactorPrimePrimePrime = 3;\n\
    \        long maxFactorPrimePrimePrimePrime = 4;\n        long maxFactorPrimePrimePrimePrime\
    \ = 5;\n        long maxFactorPrimePrimePrimePrimePrime = 6;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 7;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 8;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 9;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 10;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 11;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 12;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 13;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 14;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 15;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 16;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 17;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 18;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 19;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 20;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 21;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 22;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 23;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 24;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 25;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 26;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 27;\n        long maxFactorPrimePri\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0mdw26k3.java:43: error: ';' expected\n        long maxFactorPrimePri\n\
    \                              ^\n1 error\n"
  stdout: ''
  timestamp: 1659805542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long currentPrime = 2;\n\
    \        while (currentPrime < n) {\n            if (n % currentPrime == 0) {\n\
    \                largestPrimeFactor = currentPrime;\n                break;\n\
    \            }\n            currentPrime++;\n        }\n        return largestPrimeFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqg7uo37g.java:27)\n"
  stdout: ''
  timestamp: 1659805542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (largestPrimeFactor % i == 0) {\n            largestPrimeFactor = largestPrimeFactor\
    \ / i;\n            i++;\n        }\n        return largestPrimeFactor;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4zdc0uys.java:24)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long maxFactorPrime = 2;\n      \
    \  long factor = 2;\n        while (factor <= maxFactor) {\n            if (n\
    \ % factor == 0) {\n                maxFactorPrime = factor;\n            }\n\
    \            factor++;\n        }\n        return maxFactorPrime;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzpujf972.java:27)\n"
  stdout: ''
  timestamp: 1659805543
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long maxFactor = n;\n  \
    \      long currentFactor = 1;\n        while (true) {\n            currentFactor\
    \ = maxFactor;\n            maxFactor = currentFactor * 2;\n            if (maxFactor\
    \ > largestPrimeFactor) {\n                largestPrimeFactor = maxFactor;\n \
    \           }\n            if (currentFactor == 2) {\n                break;\n\
    \            }\n        }\n        return largestPrimeFactor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659805548
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (i <= largestPrimeFactor) {\n            if (n % i == 0) {\n               \
    \ largestPrimeFactor = i;\n            }\n            i++;\n        }\n      \
    \  return largestPrimeFactor;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp06sfmiww.java:26)\n"
  stdout: ''
  timestamp: 1659805542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ < maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnexwhdfq.java:26)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long factor = 2;\n     \
    \   while (factor < n) {\n            if (n % factor == 0) {\n               \
    \ largestPrimeFactor = factor;\n                break;\n            }\n      \
    \      factor++;\n        }\n        return largestPrimeFactor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdaytrx4.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long primeFactor = 1;\n\
    \        while (primeFactor * primeFactor <= n) {\n            primeFactor++;\n\
    \            if (n % primeFactor == 0) {\n                largestPrimeFactor =\
    \ primeFactor;\n                break;\n            }\n        }\n        return\
    \ largestPrimeFactor;\n    }\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcwl4tb1v.java:27)\n"
  stdout: ''
  timestamp: 1659805543
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long currentPrime = 1;\n\
    \        long currentFactor = 1;\n        while (n > 1) {\n            currentPrime\
    \ = currentPrime * 2;\n            currentFactor = currentPrime / n;\n       \
    \     if (currentFactor > largestPrimeFactor) {\n                largestPrimeFactor\
    \ = currentFactor;\n            }\n            n = n - currentPrime;\n       \
    \ }\n        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfol0i9q7.java:29)\n"
  stdout: ''
  timestamp: 1659805543
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = 1;\n        long maxFactorIndex = 0;\n      \
    \  long currentFactor = 1;\n        long currentFactorIndex = 0;\n        long\
    \ currentPrime = 2;\n        long currentPrimeIndex = 0;\n        long currentPrimeFactor\
    \ = 1;\n        long currentPrimeFactorIndex = 0;\n        long currentPrimeFactorIndex2\
    \ = 1;\n        long currentPrimeFactorIndex3 = 1;\n        long currentPrimeFactorIndex4\
    \ = 1;\n        long currentPrimeFactorIndex5 = 1;\n        long currentPrimeFactorIndex6\
    \ = 1;\n        long currentPrimeFactorIndex7 = 1;\n        long currentPrimeFactorIndex8\
    \ = 1;\n        long currentPrimeFactorIndex9 = 1;\n        long currentPrimeFactorIndex10\
    \ = 1;\n        long currentPrimeFactorIndex11 = 1;\n        long currentPrimeFactorIndex12\
    \ = 1;\n        long currentPrimeFactorIndex13 = 1;\n        long currentPrimeFactorIndex14\
    \ = 1;\n        long currentPrimeFactorIndex15 = 1;\n        long currentPrimeFactorIndex16\
    \ = 1;\n        long currentPrimeFactorIndex17 = 1;\n        long currentPrimeFactorIndex18\
    \ = 1;\n        long currentPrimeFactorIndex19 = 1;\n        long currentPrimeFactorIndex20\
    \ = 1;\n        long currentPrimeFactorIndex21 = 1;\n        long currentPrimeFactorIndex22\
    \ = 1;\n        long currentPrimeFactorIndex23 = 1;\n        long currentPrimeFactorIndex24\
    \ = 1;\n        long currentPrimeFactorIndex25 = 1;\n        long currentPrimeFactorIndex26\
    \ = 1;\n        long currentPrimeFactorIndex27 = 1;\n        long currentPrimeFactorIndex28\
    \ = 1;\n        long currentPrimeFactorIndex29 = 1;\n        long currentPrimeFactorIndex30\
    \ = 1;\n        long currentPrimeFactorIndex31 = 1;\n        long currentPrimeFactorIndex32\
    \ = 1;\n        long currentPrimeFactorIndex33 = 1;\n        long currentPrimeFactorIndex34\
    \ = 1;\n        long currentPrimeFactorIndex35 = 1;\n        long currentPrimeFactorIndex36\
    \ = 1;\n        long currentPrimeFactorIndex37 = 1;\n        long currentPrimeFactorIndex38\
    \ = 1;\n        long currentPrimeFactorIndex39 = 1;\n        long currentPrimeFactorIndex40\
    \ = 1;\n        long currentPrimeFactorIndex41 = 1;\n        long currentPrimeFactorIndex42\
    \ = 1;\n        long currentPrimeFactorIndex43 = 1;\n        long currentPrimeFactorIndex44\
    \ = 1;\n        long currentPrimeFactorIndex45 = 1;\n        long currentPrimeFactorIndex46\
    \ = 1;\n        long current\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk75w0wv7.java:68: error: ';' expected\n        long current\n \
    \                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659805542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long maxFactorFactor = 1;\n     \
    \   long factor = 2;\n        while (factor <= maxFactor) {\n            if (n\
    \ % factor == 0) {\n                maxFactorFactor = factor;\n            }\n\
    \            factor++;\n        }\n        if (maxFactorFactor > maxFactor) {\n\
    \            maxFactor = maxFactorFactor;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpplf94dyz.java:30)\n"
  stdout: ''
  timestamp: 1659805543
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (largestPrimeFactor % i == 0) {\n            largestPrimeFactor = largestPrimeFactor\
    \ / i;\n            i++;\n        }\n        return largestPrimeFactor;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4zdc0uys.java:24)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = 1;\n        long factor = 2;\n        while (factor\
    \ <= n / 2) {\n            if (n % factor == 0) {\n                maxFactor =\
    \ factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6jmgve87.java:27)\n"
  stdout: ''
  timestamp: 1659805543
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long primeFactor = 2;\n\
    \        while (primeFactor * primeFactor <= n) {\n            if (n % primeFactor\
    \ == 0) {\n                largestPrimeFactor = primeFactor;\n               \
    \ break;\n            }\n            primeFactor++;\n        }\n        return\
    \ largestPrimeFactor;\n    }\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl8y8s1gs.java:27)\n"
  stdout: ''
  timestamp: 1659805543
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (i <= largestPrimeFactor) {\n            if (n % i == 0) {\n               \
    \ largestPrimeFactor = i;\n            }\n            i += 2;\n        }\n   \
    \     return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwnan5wg1.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long largestPrimeFactor2\
    \ = n;\n        long largestPrimeFactor3 = n;\n        long largestPrimeFactor4\
    \ = n;\n        long largestPrimeFactor5 = n;\n        long largestPrimeFactor6\
    \ = n;\n        long largestPrimeFactor7 = n;\n        long largestPrimeFactor8\
    \ = n;\n        long largestPrimeFactor9 = n;\n        long largestPrimeFactor10\
    \ = n;\n        long largestPrimeFactor11 = n;\n        long largestPrimeFactor12\
    \ = n;\n        long largestPrimeFactor13 = n;\n        long largestPrimeFactor14\
    \ = n;\n        long largestPrimeFactor15 = n;\n        long largestPrimeFactor16\
    \ = n;\n        long largestPrimeFactor17 = n;\n        long largestPrimeFactor18\
    \ = n;\n        long largestPrimeFactor19 = n;\n        long largestPrimeFactor20\
    \ = n;\n        long largestPrimeFactor21 = n;\n        long largestPrimeFactor22\
    \ = n;\n        long largestPrimeFactor23 = n;\n        long largestPrimeFactor24\
    \ = n;\n        long largestPrimeFactor25 = n;\n        long largestPrimeFactor26\
    \ = n;\n        long largestPrimeFactor27 = n;\n        long largestPrimeFactor28\
    \ = n;\n        long largestPrimeFactor29 = n;\n        long largestPrimeFactor30\
    \ = n;\n        long largestPrimeFactor31 = n;\n        long largestPrimeFactor32\
    \ = n;\n        long largestPrimeFactor33 = n;\n        long largestPrimeFactor34\
    \ = n;\n        long largestPrimeFactor35 = n;\n        long largestPrimeFactor36\
    \ = n;\n        long largestPrimeFactor37 = n;\n        long largestPrimeFactor38\
    \ = n;\n        long largestPrimeFactor39 = n;\n        long largestPrimeFactor40\
    \ = n;\n        long largestPrimeFactor41 = n;\n        long largestPrimeFactor42\
    \ = n;\n        long largestPrimeFactor43 = n;\n        long largestPrimeFactor44\
    \ = n;\n        long largestPrimeFactor45 = n;\n        long largestPrimeFactor46\
    \ = n;\n        long largestPrimeFactor47 = n;\n        long largestPrimeFactor\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpis5eww08.java:62: error: ';' expected\n        long largestPrimeFactor\n\
    \                               ^\n1 error\n"
  stdout: ''
  timestamp: 1659805542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long currentPrimeFactor\
    \ = 1;\n        while (currentPrimeFactor <= largestPrimeFactor) {\n         \
    \   currentPrimeFactor = currentPrimeFactor * 2;\n            if (isPrime(currentPrimeFactor))\
    \ {\n                largestPrimeFactor = currentPrimeFactor;\n            }\n\
    \        }\n        return largestPrimeFactor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp12nxao8b.java:19: error: cannot find symbol\n            if (isPrime(currentPrimeFactor))\
    \ {\n                ^\n  symbol:   method isPrime(long)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1659805543
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long factor = 2;\n     \
    \   while (factor <= largestPrimeFactor) {\n            if (n % factor == 0) {\n\
    \                largestPrimeFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return largestPrimeFactor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2smmiuay.java:26)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long i = 2;\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyl75017c.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (largestPrimeFactor % i == 0) {\n            largestPrimeFactor = largestPrimeFactor\
    \ / i;\n            i++;\n        }\n        return largestPrimeFactor;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4zdc0uys.java:24)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long maxFactorPrime = 1;\n      \
    \  long factor = 2;\n        while (factor <= maxFactor) {\n            if (n\
    \ % factor == 0) {\n                maxFactorPrime = factor;\n            }\n\
    \            factor++;\n        }\n        return maxFactorPrime;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpff00usmz.java:27)\n"
  stdout: ''
  timestamp: 1659805543
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ < maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnexwhdfq.java:26)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long factor = 2;\n     \
    \   while (factor < n) {\n            if (n % factor == 0) {\n               \
    \ largestPrimeFactor = factor;\n                break;\n            }\n      \
    \      factor++;\n        }\n        return largestPrimeFactor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppdaytrx4.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ < maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnexwhdfq.java:26)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long factor = 2;\n     \
    \   while (factor <= largestPrimeFactor) {\n            if (n % factor == 0) {\n\
    \                largestPrimeFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return largestPrimeFactor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2smmiuay.java:26)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (i <= largestPrimeFactor) {\n            if (n % i == 0) {\n               \
    \ largestPrimeFactor = i;\n            }\n            i += 2;\n        }\n   \
    \     return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwnan5wg1.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long largestPrimeFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactor = 1;\n        long largestPrimeFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactor = 1;\n       \
    \ long largestPrimeFactorFactorFactorFactorFactorFactor = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long \n    }\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp22y5p__1.java:46: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp22y5p__1.java:46: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659805541
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (i <= largestPrimeFactor) {\n            if (n % i == 0) {\n               \
    \ largestPrimeFactor = i;\n            }\n            i += 2;\n        }\n   \
    \     return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwnan5wg1.java:26)\n"
  stdout: ''
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (i <= largestPrimeFactor) {\n            if (n % i == 0) {\n               \
    \ largestPrimeFactor = i;\n            }\n            i++;\n        }\n      \
    \  return largestPrimeFactor;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp06sfmiww.java:26)\n"
  stdout: ''
  timestamp: 1659805542
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (i <= n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpax2yt4d2.java:27)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long largestPrimeFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactor = 1;\n        long largestPrimeFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactor = 1;\n       \
    \ long largestPrimeFactorFactorFactorFactorFactorFactor = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long lar\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1_p6sgea.java:46: error: ';' expected\n        long lar\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659805543
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xaubqeo.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long maxFactor = n;\n  \
    \      long factor = 2;\n        while (factor <= maxFactor) {\n            if\
    \ (n % factor == 0) {\n                largestPrimeFactor = factor;\n        \
    \        break;\n            }\n            factor++;\n        }\n        return\
    \ largestPrimeFactor;\n    }\n    public static void main(String[] args) {\n \
    \   assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv11jgofv.java:28)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long maxFactor = n;\n  \
    \      long currentFactor = 1;\n        while (currentFactor <= maxFactor) {\n\
    \            while (n % currentFactor == 0) {\n                largestPrimeFactor\
    \ = currentFactor;\n                maxFactor = n / currentFactor;\n         \
    \   }\n            currentFactor++;\n        }\n        return largestPrimeFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659805548
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long i = 2;\n        while\
    \ (i <= largestPrimeFactor) {\n            if (n % i == 0) {\n               \
    \ largestPrimeFactor = i;\n            }\n            i += 2;\n        }\n   \
    \     return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwnan5wg1.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ < maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
    \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnexwhdfq.java:26)\n"
  stdout: ''
  timestamp: 1659805540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = 0;\n        long i = 2;\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyl75017c.java:27)\n"
  stdout: ''
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long factor = 2;\n     \
    \   while (factor <= largestPrimeFactor) {\n            while (n % factor == 0)\
    \ {\n                largestPrimeFactor = factor;\n            }\n           \
    \ factor++;\n        }\n        return largestPrimeFactor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n\
    \    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
    \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
    \ == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659805545
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n   \
    \ // >>> largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
    \ n) {\n        long largestPrimeFactor = n;\n        long currentPrimeFactor\
    \ = 1;\n        while (currentPrimeFactor <= largestPrimeFactor) {\n         \
    \   while (n % currentPrimeFactor == 0) {\n                largestPrimeFactor\
    \ = currentPrimeFactor;\n            }\n            currentPrimeFactor++;\n  \
    \      }\n        return largestPrimeFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestPrimeFactor((15l)) == (5l));\n    assert(largestPrimeFactor((27l))\
    \ == (3l));\n    assert(largestPrimeFactor((63l)) == (7l));\n    assert(largestPrimeFactor((330l))\
    \ == (11l));\n    assert(largestPrimeFactor((13195l)) == (29l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659805548
