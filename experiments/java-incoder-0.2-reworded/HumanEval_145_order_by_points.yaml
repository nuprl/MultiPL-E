name: HumanEval_145_order_by_points
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function which sorts the given array list of integers\n\
  \    // in ascending order according to the sum of their digits.\n    // Note: if\
  \ there are several items with similar sum of their digits,\n    // order them based\
  \ on their index in original array list.\n    // For example:\n    // >>> orderByPoints((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
  \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
  \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
  \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
  \ orderByPoints(ArrayList<Long> nums) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
  \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
  \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
  \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
  \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
  \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
  \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l, (long)1l,\
  \ (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l,\
  \ (long)10l, (long)11l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)10l,\
  \ (long)2l, (long)11l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l,\
  \ (long)9l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)6l, (long)6l, (long)-76l, (long)-21l, (long)23l, (long)4l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-76l, (long)-21l, (long)0l, (long)4l, (long)23l,\
  \ (long)6l, (long)6l)))));\n    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<>();\n        long sum\
    \ = 0;\n        for (long num : nums) {\n            sum += num;\n           \
    \ result.add(sum);\n        }\n        Collections.sort(result);\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ sum = 0;\n        for (Long num : nums) {\n            sum += num;\n       \
    \     result.add(num);\n        }\n        Collections.sort(result, new Comparator<Long>()\
    \ {\n            public int compare(Long o1, Long o2) {\n                return\
    \ (int) (o1 - o2);\n            }\n        });\n        return result;", "   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n   \
    \     for (long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        long sum = 0;\n\
    \        for (Long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        long sum = 0;\n\
    \        for (long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n    \
    \    for (long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result, new Comparator<Long>() {\n      \
    \      public int compare(Long o1, Long o2) {\n                return o1.compareTo(o2);\n\
    \            }\n        });\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        for (long num\
    \ : nums) {\n            sum += num;\n            result.add(num);\n        }\n\
    \        Collections.sort(result, new Comparator<Long>() {\n            public\
    \ int compare(Long o1, Long o2) {\n                return (int) (o1 - o2);\n \
    \           }\n        });\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        for (Long num\
    \ : nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        for (long num\
    \ : nums) {\n            sum += num;\n            result.add(num);\n        }\n\
    \        Collections.sort(result, new Comparator<Long>() {\n            public\
    \ int compare(Long o1, Long o2) {\n                return (int) (o1 - o2);\n \
    \           }\n        });\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        for (long num\
    \ : nums) {\n            sum += num;\n            result.add(num);\n        }\n\
    \        Arrays.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n        }\n        Collections.sort(nums,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return (int) (o1 - o2);\n            }\n        });\n       \
    \ for (long num : nums) {\n            if (sum == num) {\n                result.add(num);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long sum = 0;\n        long maxSum = Long.MIN_VALUE;\n\
    \        long maxIndex = -1;\n        for (long num : nums) {\n            sum\
    \ += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n  \
    \              maxIndex = num;\n            }\n        }\n        for (long num\
    \ : nums) {\n            if (num == maxIndex) {\n                result.add(num);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result, new\
    \ Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n \
    \               return (int) (o1 - o2);\n            }\n        });\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ sum = 0;\n        for (long num : nums) {\n            sum += num;\n       \
    \     result.add(sum);\n        }\n        Collections.sort(result);\n       \
    \ return result;", "        ArrayList<Long> result = new ArrayList<>();\n    \
    \    long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \        }\n        long maxSum = sum;\n        long maxIndex = 0;\n        for\
    \ (long num : nums) {\n            sum += num;\n            if (sum > maxSum)\
    \ {\n                maxSum = sum;\n                maxIndex = num;\n        \
    \    }\n        }\n        for (long num : nums) {\n            if (num == maxIndex)\
    \ {\n                result.add(num);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ long sum = 0;\n        for (long num : nums) {\n            sum += num;\n  \
    \          result.add(sum);\n        }\n        Collections.sort(result);\n  \
    \      return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long sum = 0;\n        long maxSum = Long.MIN_VALUE;\n        long minSum\
    \ = Long.MAX_VALUE;\n        long maxIndex = -1;\n        long minIndex = -1;\n\
    \        long maxSumIndex = 0;\n        long minSumIndex = 0;\n        long maxSumIndex2\
    \ = 0;\n        long minSumIndex2 = 0;\n        long maxSumIndex3 = 0;\n     \
    \   long minSumIndex3 = 0;\n        long maxSumIndex4 = 0;\n        long minSumIndex4\
    \ = 0;\n        long maxSumIndex5 = 0;\n        long minSumIndex5 = 0;\n     \
    \   long maxSumIndex6 = 0;\n        long minSumIndex6 = 0;\n        long maxSumIndex7\
    \ = 0;\n        long minSumIndex7 = 0;\n        long maxSumIndex8 = 0;\n     \
    \   long minSumIndex8 = 0;\n        long maxSumIndex9 = 0;\n        long minSumIndex9\
    \ = 0;\n        long maxSumIndex10 = 0;\n        long minSumIndex10 = 0;\n   \
    \     long maxSumIndex11 = 0;\n        long minSumIndex11 = 0;\n        long maxSumIndex12\
    \ = 0;\n        long minSumIndex12 = 0;\n        long maxSumIndex13 = 0;\n   \
    \     long minSumIndex13 = 0;\n        long maxSumIndex14 = 0;\n        long minSumIndex14\
    \ = 0;\n        long maxSumIndex15 = 0;\n        long minSumIndex15 = 0;\n   \
    \     long maxSumIndex16 = 0;\n        long minSumIndex16 = 0;\n        long maxSumIndex17\
    \ = 0;\n        long minSumIndex17 = 0;\n        long maxSumIndex18 = 0;\n   \
    \     long minSumIndex18 = 0;\n        long maxSumIndex19 = 0;\n        long minSumIndex19\
    \ = 0;\n        long maxSumIndex20 = 0;\n        long minSumIndex20 = 0;\n   \
    \     long maxSumIndex21 = 0;\n        long minSumIndex21 = 0;\n        long maxSumIndex22\
    \ = 0;\n        long minSumIndex22 = 0;\n        long maxSumIndex23 = 0;\n   \
    \     long minSumIndex23 = 0;\n        long maxSumIndex24 = 0;\n        long minSumIndex24\
    \ = 0;\n        long maxSumIndex25 = 0;\n        long minSumIndex25 = 0;\n   \
    \     long maxSumIndex26 = 0;\n        long minSumIndex26 = 0;\n        long maxSumIndex27\
    \ = 0;\n        long minSumIndex27 = 0;\n        long maxSumIndex28 = 0;\n   \
    \     long minSumIndex28 = 0;\n        long maxSumIndex29 = 0;\n        long minSumIndex29\
    \ = 0;\n        long maxSumIndex30 = 0;\n        "]
stop_tokens:
- "\n    }\n"
