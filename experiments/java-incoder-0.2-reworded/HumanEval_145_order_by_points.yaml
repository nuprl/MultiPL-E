name: HumanEval_145_order_by_points
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function which sorts the given array list of integers\n\
  \    // in ascending order according to the sum of their digits.\n    // Note: if\
  \ there are several items with similar sum of their digits,\n    // order them based\
  \ on their index in original array list.\n    // For example:\n    // >>> orderByPoints((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
  \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
  \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
  \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
  \ orderByPoints(ArrayList<Long> nums) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
  \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
  \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
  \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
  \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
  \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
  \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l, (long)1l,\
  \ (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l,\
  \ (long)10l, (long)11l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)10l,\
  \ (long)2l, (long)11l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l,\
  \ (long)9l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)6l, (long)6l, (long)-76l, (long)-21l, (long)23l, (long)4l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-76l, (long)-21l, (long)0l, (long)4l, (long)23l,\
  \ (long)6l, (long)6l)))));\n    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<>();\n        long sum\
    \ = 0;\n        for (long num : nums) {\n            sum += num;\n           \
    \ result.add(sum);\n        }\n        Collections.sort(result);\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ sum = 0;\n        for (Long num : nums) {\n            sum += num;\n       \
    \     result.add(num);\n        }\n        Collections.sort(result, new Comparator<Long>()\
    \ {\n            public int compare(Long o1, Long o2) {\n                return\
    \ (int) (o1 - o2);\n            }\n        });\n        return result;", "   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n   \
    \     for (long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        long sum = 0;\n\
    \        for (Long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        long sum = 0;\n\
    \        for (long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n    \
    \    for (long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result, new Comparator<Long>() {\n      \
    \      public int compare(Long o1, Long o2) {\n                return o1.compareTo(o2);\n\
    \            }\n        });\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        for (long num\
    \ : nums) {\n            sum += num;\n            result.add(num);\n        }\n\
    \        Collections.sort(result, new Comparator<Long>() {\n            public\
    \ int compare(Long o1, Long o2) {\n                return (int) (o1 - o2);\n \
    \           }\n        });\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        for (Long num\
    \ : nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        for (long num\
    \ : nums) {\n            sum += num;\n            result.add(num);\n        }\n\
    \        Collections.sort(result, new Comparator<Long>() {\n            public\
    \ int compare(Long o1, Long o2) {\n                return (int) (o1 - o2);\n \
    \           }\n        });\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        for (long num\
    \ : nums) {\n            sum += num;\n            result.add(num);\n        }\n\
    \        Arrays.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n        }\n        Collections.sort(nums,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return (int) (o1 - o2);\n            }\n        });\n       \
    \ for (long num : nums) {\n            if (sum == num) {\n                result.add(num);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long sum = 0;\n        long maxSum = Long.MIN_VALUE;\n\
    \        long maxIndex = -1;\n        for (long num : nums) {\n            sum\
    \ += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n  \
    \              maxIndex = num;\n            }\n        }\n        for (long num\
    \ : nums) {\n            if (num == maxIndex) {\n                result.add(num);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result, new\
    \ Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n \
    \               return (int) (o1 - o2);\n            }\n        });\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ sum = 0;\n        for (long num : nums) {\n            sum += num;\n       \
    \     result.add(sum);\n        }\n        Collections.sort(result);\n       \
    \ return result;", "        ArrayList<Long> result = new ArrayList<>();\n    \
    \    long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \        }\n        long maxSum = sum;\n        long maxIndex = 0;\n        for\
    \ (long num : nums) {\n            sum += num;\n            if (sum > maxSum)\
    \ {\n                maxSum = sum;\n                maxIndex = num;\n        \
    \    }\n        }\n        for (long num : nums) {\n            if (num == maxIndex)\
    \ {\n                result.add(num);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ long sum = 0;\n        for (long num : nums) {\n            sum += num;\n  \
    \          result.add(sum);\n        }\n        Collections.sort(result);\n  \
    \      return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long sum = 0;\n        long maxSum = Long.MIN_VALUE;\n        long minSum\
    \ = Long.MAX_VALUE;\n        long maxIndex = -1;\n        long minIndex = -1;\n\
    \        long maxSumIndex = 0;\n        long minSumIndex = 0;\n        long maxSumIndex2\
    \ = 0;\n        long minSumIndex2 = 0;\n        long maxSumIndex3 = 0;\n     \
    \   long minSumIndex3 = 0;\n        long maxSumIndex4 = 0;\n        long minSumIndex4\
    \ = 0;\n        long maxSumIndex5 = 0;\n        long minSumIndex5 = 0;\n     \
    \   long maxSumIndex6 = 0;\n        long minSumIndex6 = 0;\n        long maxSumIndex7\
    \ = 0;\n        long minSumIndex7 = 0;\n        long maxSumIndex8 = 0;\n     \
    \   long minSumIndex8 = 0;\n        long maxSumIndex9 = 0;\n        long minSumIndex9\
    \ = 0;\n        long maxSumIndex10 = 0;\n        long minSumIndex10 = 0;\n   \
    \     long maxSumIndex11 = 0;\n        long minSumIndex11 = 0;\n        long maxSumIndex12\
    \ = 0;\n        long minSumIndex12 = 0;\n        long maxSumIndex13 = 0;\n   \
    \     long minSumIndex13 = 0;\n        long maxSumIndex14 = 0;\n        long minSumIndex14\
    \ = 0;\n        long maxSumIndex15 = 0;\n        long minSumIndex15 = 0;\n   \
    \     long maxSumIndex16 = 0;\n        long minSumIndex16 = 0;\n        long maxSumIndex17\
    \ = 0;\n        long minSumIndex17 = 0;\n        long maxSumIndex18 = 0;\n   \
    \     long minSumIndex18 = 0;\n        long maxSumIndex19 = 0;\n        long minSumIndex19\
    \ = 0;\n        long maxSumIndex20 = 0;\n        long minSumIndex20 = 0;\n   \
    \     long maxSumIndex21 = 0;\n        long minSumIndex21 = 0;\n        long maxSumIndex22\
    \ = 0;\n        long minSumIndex22 = 0;\n        long maxSumIndex23 = 0;\n   \
    \     long minSumIndex23 = 0;\n        long maxSumIndex24 = 0;\n        long minSumIndex24\
    \ = 0;\n        long maxSumIndex25 = 0;\n        long minSumIndex25 = 0;\n   \
    \     long maxSumIndex26 = 0;\n        long minSumIndex26 = 0;\n        long maxSumIndex27\
    \ = 0;\n        long minSumIndex27 = 0;\n        long maxSumIndex28 = 0;\n   \
    \     long minSumIndex28 = 0;\n        long maxSumIndex29 = 0;\n        long minSumIndex29\
    \ = 0;\n        long maxSumIndex30 = 0;\n        ", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums)\
    \ {\n            sum += num;\n        }\n        Collections.sort(nums, new Comparator<Long>()\
    \ {\n            public int compare(Long o1, Long o2) {\n                return\
    \ (int) (o1 - o2);\n            }\n        });\n        for (long num : nums)\
    \ {\n            if (sum == num) {\n                result.add(num);\n       \
    \     }\n        }\n        return result;", "        ArrayList<Long> result =\
    \ new ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums)\
    \ {\n            sum += num;\n            result.add(sum);\n        }\n      \
    \  Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n        }\n        Collections.sort(nums,\
    \ Comparator.comparingLong(num -> sum));\n        for (long num : nums) {\n  \
    \          result.add(num);\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (Long num :\
    \ nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        for (long num\
    \ : nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (Long num :\
    \ nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (Long num :\
    \ nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        for(long num\
    \ : nums) {\n            sum += num;\n            result.add(num);\n        }\n\
    \        Collections.sort(result, new Comparator<Long>() {\n            public\
    \ int compare(Long o1, Long o2) {\n                return sum - o1 - o2;\n   \
    \         }\n        });\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long sum = 0;\n        for(long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(num);\n        }\n        Collections.sort(result, new\
    \ Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n \
    \               long diff = o1 - o2;\n                if (diff == 0) {\n     \
    \               return 0;\n                }\n                if (diff < 0) {\n\
    \                    return -1;\n                }\n                return 1;\n\
    \            }\n        });\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        long maxSum\
    \ = 0;\n        long maxIndex = 0;\n        for (long num : nums) {\n        \
    \    sum += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n\
    \                maxIndex = num;\n            }\n        }\n        for (long\
    \ num : nums) {\n            if (num == maxIndex) {\n                result.add(num);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n\
    \            sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return sum - o1 - o2;\n            }\n        });\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ sum = 0;\n        for(long num : nums) {\n            sum += num;\n        \
    \    result.add(sum);\n        }\n        Collections.sort(result);\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ sum = 0;\n        for (long num : nums) {\n            sum += num;\n       \
    \     result.add(sum);\n        }\n        Collections.sort(result);\n       \
    \ return result;", "        ArrayList<Long> result = new ArrayList<>();\n    \
    \    long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(num);\n        }\n        Collections.sort(result, new\
    \ Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n \
    \               long diff = o1 - o2;\n                if (diff == 0) {\n     \
    \               return 0;\n                }\n                return diff < 0\
    \ ? -1 : 1;\n            }\n        });\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n            result.add(num);\n        }\n\
    \        Collections.sort(result, new Comparator<Long>() {\n            public\
    \ int compare(Long o1, Long o2) {\n                return (int) (o1 - o2);\n \
    \           }\n        });\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        long maxSum\
    \ = 0;\n        long maxSumIndex = 0;\n        for(long num : nums) {\n      \
    \      sum += num;\n            if(sum > maxSum) {\n                maxSum = sum;\n\
    \                maxSumIndex = num;\n            }\n        }\n        for(long\
    \ num : nums) {\n            if(num == maxSumIndex) {\n                result.add(num);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long sum = 0;\n        for (Long num : nums)\
    \ {\n            sum += num;\n            result.add(sum);\n        }\n      \
    \  Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (Long num :\
    \ nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long o1, Long o2) {\n                return o1.compareTo(o2);\n\
    \            }\n        });\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        for (long num\
    \ : nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        for (long num\
    \ : nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        for (long num\
    \ : nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        for (long num\
    \ : nums) {\n            sum += num;\n        }\n        Collections.sort(nums,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return (int) (o1 - o2);\n            }\n        });\n       \
    \ for (long num : nums) {\n            if (sum == num) {\n                result.add(num);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result, new\
    \ Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n \
    \               return o1.compareTo(o2);\n            }\n        });\n       \
    \ return result;", "        ArrayList<Long> result = new ArrayList<>();\n    \
    \    long sum = 0;\n        long maxSum = Long.MIN_VALUE;\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (Long num : nums) {\n            sum += num;\n\
    \            if (sum > maxSum) {\n                maxSum = sum;\n            }\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        long maxSumIndex = 0;\n        long minSumIndex = 0;\n   \
    \     for (Long num : nums) {\n            sum += num;\n            if (sum ==\
    \ maxSum) {\n                maxSumIndex = nums.indexOf(num);\n            }\n\
    \            if (sum == minSum) {\n                minSumIndex = nums.indexOf(num);\n\
    \            }\n        }\n        Collections.sort(nums, (a, b) -> {\n      \
    \      long aSum = sumOfDigits(a);\n            long bSum = sumOfDigits(b);\n\
    \            return aSum - bSum;\n        });\n        for (Long num : nums) {\n\
    \            sum += num;\n            if (sum == maxSum) {\n                maxSumIndex\
    \ = nums.indexOf(num);\n            }\n            if (sum == minSum) {\n    \
    \            minSumIndex = nums.indexOf(num);\n            }\n        }\n    \
    \    Collections.sort(nums, (a, b) -> {\n            long aSum = sumOfDigits(a);\n\
    \            long bSum = sumOfDigits(b);\n            return aSum - bSum;\n  \
    \      });\n        for (Long num : nums) {\n            sum += num;\n       \
    \     if (sum == maxSum) {\n                maxSumIndex = nums.indexOf(num);\n\
    \            }\n            if (sum == minSum) {\n                minSumIndex\
    \ = nums.indexOf(num);\n            }\n        }\n        Collections.sort(nums,\
    \ (a, b) -> {\n            long aSum = sumOfDigits(a);\n            long bSum\
    \ = sumOfDigits(b);\n            return aSum - bSum;\n        });\n        for\
    \ (Long num : nums) {\n            sum += num;\n            if (sum == maxSum)\
    \ {\n                maxSumIndex = nums.indexOf(num);\n            }\n       \
    \     if (sum == minSum) {\n                minSumIndex = nums.indexOf(num);\n\
    \            }\n        }\n        Collections.sort(nums, (a, b) -> {\n      \
    \      long aSum = sumOfDigits(a);\n            long bSum = sumOfDigits(b);\n\
    \            return aSum - bSum;\n        });\n        for (Long num : nums) {\n\
    \            sum += num;\n            if (sum == maxSum) {\n                maxSumIndex\
    \ = nums.indexOf(num);\n            }\n            if (sum == minSum) {\n", " \
    \       ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n \
    \       for (Long num : nums) {\n            sum += num;\n            result.add(num);\n\
    \        }\n        Collections.sort(result, new Comparator<Long>() {\n      \
    \      public int compare(Long o1, Long o2) {\n                return sum - o1.compareTo(o2);\n\
    \            }\n        });\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n            result.add(num);\n        }\n\
    \        Collections.sort(result, new Comparator<Long>() {\n            public\
    \ int compare(Long o1, Long o2) {\n                return (int) (o1 - o2);\n \
    \           }\n        });\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n            result.add(num);\n        }\n\
    \        Collections.sort(result, new Comparator<Long>() {\n            public\
    \ int compare(Long o1, Long o2) {\n                return (int) (o1 - o2);\n \
    \           }\n        });\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n            result.add(num);\n        }\n\
    \        Collections.sort(result, new Comparator<Long>() {\n            public\
    \ int compare(Long o1, Long o2) {\n                return (int) (o1 - o2);\n \
    \           }\n        });\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n            result.add(num);\n        }\n\
    \        Collections.sort(result, new Comparator<Long>() {\n            public\
    \ int compare(Long o1, Long o2) {\n                long diff = o1 - o2;\n    \
    \            if (diff == 0) {\n                    return 0;\n               \
    \ } else if (diff < 0) {\n                    return -1;\n                } else\
    \ {\n                    return 1;\n                }\n            }\n       \
    \ });\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        long maxSum = Long.MIN_VALUE;\n        long minSum\
    \ = Long.MAX_VALUE;\n        for (Long num : nums) {\n            sum += num;\n\
    \            if (sum > maxSum) {\n                maxSum = sum;\n            }\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        long maxSumIndex = 0;\n        long minSumIndex = 0;\n   \
    \     for (Long num : nums) {\n            sum += num;\n            if (sum ==\
    \ maxSum) {\n                maxSumIndex = nums.indexOf(num);\n            }\n\
    \            if (sum == minSum) {\n                minSumIndex = nums.indexOf(num);\n\
    \            }\n        }\n        Collections.sort(nums, (a, b) -> {\n      \
    \      long sumA = sum;\n            long sumB = sum;\n            int indexA\
    \ = nums.indexOf(a);\n            int indexB = nums.indexOf(b);\n            while\
    \ (indexA != indexB) {\n                sumA += nums.get(indexA);\n          \
    \      sumB += nums.get(indexB);\n                indexA++;\n                indexB++;\n\
    \            }\n            return sumA - sumB;\n        });\n        for (int\
    \ i = 0; i < nums.size(); i++) {\n            long num = nums.get(i);\n      \
    \      if (num == maxSum) {\n                result.add(maxSumIndex);\n      \
    \      } else if (num == minSum) {\n                result.add(minSumIndex);\n\
    \            } else {\n                result.add(i);\n            }\n       \
    \ }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(num);\n        }\n        Collections.sort(result, new\
    \ Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n \
    \               return (int) (o1 - o2);\n            }\n        });\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ sum = 0;\n        for (long num : nums) {\n            sum += num;\n       \
    \     result.add(sum);\n        }\n        Collections.sort(result);\n       \
    \ return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \        }\n        Collections.sort(nums, new Comparator<Long>() {\n        \
    \    public int compare(Long o1, Long o2) {\n                long diff = o1 -\
    \ o2;\n                if (diff == 0) {\n                    return 0;\n     \
    \           }\n                return diff < 0 ? -1 : 1;\n            }\n    \
    \    });\n        for (long num : nums) {\n            if (sum == num) {\n   \
    \             result.add(num);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long sum = 0;\n\
    \        for (long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n    \
    \    for (long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n    \
    \    for (long num : nums) {\n            sum += num;\n        }\n        Collections.sort(nums,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                return (int) (o1 - o2);\n            }\n   \
    \     });\n        for (long num : nums) {\n            if (sum == num) {\n  \
    \              result.add(num);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n  \
    \      for (Long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result, new Comparator<Long>() {\n      \
    \      public int compare(Long o1, Long o2) {\n                return o1.compareTo(o2);\n\
    \            }\n        });\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        for (Long num\
    \ : nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (Long num :\
    \ nums) {\n            sum += num;\n        }\n        Collections.sort(nums,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return (int) (o1 - o2);\n            }\n        });\n       \
    \ for (Long num : nums) {\n            if (sum == num) {\n                result.add(num);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \        }\n        Collections.sort(nums, new Comparator<Long>() {\n        \
    \    public int compare(Long o1, Long o2) {\n                return (int) (o1\
    \ - o2);\n            }\n        });\n        for (long num : nums) {\n      \
    \      if (sum == num) {\n                result.add(num);\n            }\n  \
    \      }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(num);\n        }\n        Collections.sort(result, new\
    \ Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n \
    \               return (int) (o1 - o2);\n            }\n        });\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ long sum = 0;\n        for(long num : nums) {\n            sum += num;\n   \
    \         result.add(sum);\n        }\n        Collections.sort(result);\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long sum = 0;\n        for(long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result, new\
    \ Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n \
    \               return (int) (o1 - o2);\n            }\n        });\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ sum = 0;\n        for (long num : nums) {\n            sum += num;\n       \
    \ }\n        Collections.sort(nums, Comparator.comparingLong(num -> num / sum));\n\
    \        for (long num : nums) {\n            result.add(num);\n        }\n  \
    \      return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        long maxSum = Long.MIN_VALUE;\n        for (long\
    \ num : nums) {\n            sum += num;\n            if (sum > maxSum) {\n  \
    \              maxSum = sum;\n            }\n        }\n        for (long num\
    \ : nums) {\n            sum += num;\n            if (sum == maxSum) {\n     \
    \           result.add(num);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n  \
    \      for (long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n    \
    \    for (long num : nums) {\n            sum += num;\n        }\n        Collections.sort(nums,\
    \ (a, b) -> sum - a);\n        for (long num : nums) {\n            result.add(num);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \        }\n        Collections.sort(nums, new Comparator<Long>() {\n        \
    \    @Override\n            public int compare(Long o1, Long o2) {\n         \
    \       long diff = o1 - o2;\n                if (diff == 0) {\n             \
    \       return 0;\n                }\n                if (diff < 0) {\n      \
    \              return -1;\n                }\n                return 1;\n    \
    \        }\n        });\n        for (long num : nums) {\n            if (sum\
    \ == num) {\n                result.add(num);\n            }\n        }\n    \
    \    return result;", "        ArrayList<Long> result = new ArrayList<>();\n \
    \       long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long sum = 0;\n        long maxSum = 0;\n        for (long num : nums)\
    \ {\n            sum += num;\n            if (sum > maxSum) {\n              \
    \  maxSum = sum;\n            }\n        }\n        Collections.sort(nums, new\
    \ Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n \
    \               return Long.compare(sum, o1 - o2);\n            }\n        });\n\
    \        for (long num : nums) {\n            if (sum == maxSum) {\n         \
    \       result.add(num);\n            }\n        }\n        return result;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        long sum = 0;\n\
    \        long maxSum = 0;\n        long maxIndex = 0;\n        for(long num :\
    \ nums) {\n            sum += num;\n            if(sum > maxSum) {\n         \
    \       maxSum = sum;\n                maxIndex = num;\n            }\n      \
    \  }\n        for(long num : nums) {\n            if(num == maxIndex) {\n    \
    \            result.add(num);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n  \
    \      for (long num : nums) {\n            sum += num;\n            result.add(num);\n\
    \        }\n        Collections.sort(result, new Comparator<Long>() {\n      \
    \      public int compare(Long o1, Long o2) {\n                long diff = o1\
    \ - o2;\n                return diff == 0 ? o1.compareTo(o2) : diff;\n       \
    \     }\n        });\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        long maxSum = 0;\n        long minSum = Long.MAX_VALUE;\n\
    \        long maxIndex = -1;\n        long minIndex = -1;\n        for (long num\
    \ : nums) {\n            sum += num;\n            if (sum > maxSum) {\n      \
    \          maxSum = sum;\n                maxIndex = num;\n            }\n   \
    \         if (sum < minSum) {\n                minSum = sum;\n               \
    \ minIndex = num;\n            }\n        }\n        for (long num : nums) {\n\
    \            if (num == maxIndex) {\n                result.add(num);\n      \
    \      } else if (num == minIndex) {\n                result.add(num);\n     \
    \       } else {\n                long sumOfDigits = num % 10;\n             \
    \   long sumOfDigitsSum = sumOfDigits * sumOfDigits;\n                if (sumOfDigitsSum\
    \ > maxSum) {\n                    result.add(num);\n                    maxSum\
    \ = sumOfDigitsSum;\n                    maxIndex = num;\n                } else\
    \ if (sumOfDigitsSum < minSum) {\n                    result.add(num);\n     \
    \               minSum = sumOfDigitsSum;\n                    minIndex = num;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n     \
    \   for (Long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result, new Comparator<Long>() {\n      \
    \      public int compare(Long o1, Long o2) {\n                return o1.compareTo(o2);\n\
    \            }\n        });\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (Long num :\
    \ nums) {\n            sum += num;\n        }\n        Collections.sort(nums,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                return (int) (o1 - o2);\n            }\n   \
    \     });\n        for (Long num : nums) {\n            if (sum == num) {\n  \
    \              result.add(num);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long sum = 0;\n\
    \        for (Long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        long sum = 0;\n\
    \        for (long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n    \
    \    for (long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n    \
    \    for (Long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        long sum = 0;\n\
    \        for (Long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        long sum = 0;\n\
    \        for (Long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n    \
    \    for (long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        long sum = 0;\n\
    \        for (Long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n    \
    \    for (long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n    \
    \    for (Long num : nums) {\n            sum += num;\n            result.add(num);\n\
    \        }\n        Collections.sort(result, new Comparator<Long>() {\n      \
    \      @Override\n            public int compare(Long o1, Long o2) {\n       \
    \         return (int) (o1 - o2);\n            }\n        });\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ sum = 0;\n        for (long num : nums) {\n            sum += num;\n       \
    \     result.add(sum);\n        }\n        Collections.sort(result);\n       \
    \ return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \        }\n        Collections.sort(nums, new Comparator<Long>() {\n        \
    \    public int compare(Long o1, Long o2) {\n                long diff = o1 -\
    \ o2;\n                if (diff == 0) {\n                    return 0;\n     \
    \           }\n                if (diff < 0) {\n                    return -1;\n\
    \                }\n                return 1;\n            }\n        });\n  \
    \      for (long num : nums) {\n            if (sum == num) {\n              \
    \  result.add(num);\n            }\n        }\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n    \
    \    for (long num : nums) {\n            sum += num;\n        }\n        Collections.sort(nums,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return (int) (o1 - o2);\n            }\n        });\n       \
    \ for (long num : nums) {\n            if (sum == num) {\n                result.add(num);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n        }\n        Collections.sort(nums, Comparator.comparingLong(num\
    \ -> sum % 10));\n        for (long num : nums) {\n            result.add(num);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \        }\n        Collections.sort(nums, new Comparator<Long>() {\n        \
    \    public int compare(Long o1, Long o2) {\n                return (int) (o1\
    \ - o2);\n            }\n        });\n        for (long num : nums) {\n      \
    \      if (sum == num) {\n                result.add(num);\n            }\n  \
    \      }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(num);\n        }\n        Collections.sort(result, new\
    \ Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n \
    \               return sum - o1.compareTo(o2);\n            }\n        });\n \
    \       return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        long maxSum = 0;\n        for (long num : nums)\
    \ {\n            sum += num;\n            if (sum > maxSum) {\n              \
    \  maxSum = sum;\n            }\n        }\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum == maxSum) {\n                result.add(num);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result, new\
    \ Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n \
    \               return o1.compareTo(o2);\n            }\n        });\n       \
    \ return result;", "        ArrayList<Long> result = new ArrayList<>();\n    \
    \    long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \        }\n        Collections.sort(nums, Comparator.comparingLong(num -> sum\
    \ % 10));\n        for (long num : nums) {\n            result.add(num);\n   \
    \     }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \        }\n        Collections.sort(nums, new Comparator<Long>() {\n        \
    \    @Override\n            public int compare(Long o1, Long o2) {\n         \
    \       return (int) (o1 - o2);\n            }\n        });\n        for (long\
    \ num : nums) {\n            if (sum == num) {\n                result.add(num);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        long maxSum = 0;\n        long maxIndex = 0;\n\
    \        for(long num : nums) {\n            sum += num;\n            if(sum >\
    \ maxSum) {\n                maxSum = sum;\n                maxIndex = num;\n\
    \            }\n        }\n        for(long num : nums) {\n            if(num\
    \ == maxIndex) {\n                result.add(num);\n            }\n        }\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        long maxSum = Long.MIN_VALUE;\n        for (long\
    \ num : nums) {\n            sum += num;\n            if (sum > maxSum) {\n  \
    \              maxSum = sum;\n            }\n        }\n        Collections.sort(nums,\
    \ Comparator.comparingLong(num -> sum - num));\n        for (long num : nums)\
    \ {\n            result.add(num);\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n     \
    \   for (long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n    \
    \    for (Long num : nums) {\n            sum += num;\n        }\n        Collections.sort(nums,\
    \ Comparator.comparingLong(num -> sum % 10));\n        for (Long num : nums) {\n\
    \            result.add(num);\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n            result.add(num);\n        }\n\
    \        Collections.sort(result, new Comparator<Long>() {\n            public\
    \ int compare(Long o1, Long o2) {\n                return (int) (o1 - o2);\n \
    \           }\n        });\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        for(long num\
    \ : nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        for (long num\
    \ : nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        long maxSum\
    \ = 0;\n        for (long num : nums) {\n            sum += num;\n           \
    \ if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n\
    \        long maxSumIndex = 0;\n        for (long num : nums) {\n            sum\
    \ += num;\n            if (sum == maxSum) {\n                result.add(num);\n\
    \                maxSumIndex++;\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n  \
    \      for (long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n    \
    \    for (long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n    \
    \    for (long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        long sum = 0;\n\
    \        for (long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n    \
    \    for (Long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n    \
    \    for(long num : nums) {\n            sum += num;\n            result.add(num);\n\
    \        }\n        Collections.sort(result, new Comparator<Long>() {\n      \
    \      public int compare(Long o1, Long o2) {\n                return (int) (o1\
    \ - o2);\n            }\n        });\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        for (Long num\
    \ : nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (Long num :\
    \ nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for(long num : nums)\
    \ {\n            sum += num;\n            result.add(num);\n        }\n      \
    \  Collections.sort(result, new Comparator<Long>() {\n            public int compare(Long\
    \ o1, Long o2) {\n                long diff = o1 - o2;\n                return\
    \ diff != 0 ? diff : o1 - o2;\n            }\n        });\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long sum = 0;\n\
    \        for(long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        long sum = 0;\n\
    \        for (Long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result, new\
    \ Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n \
    \               return o1.compareTo(o2);\n            }\n        });\n       \
    \ return result;", "        ArrayList<Long> result = new ArrayList<>();\n    \
    \    long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        long maxSum = 0;\n        long maxIndex = 0;\n\
    \        long maxSumIndex = 0;\n        long maxSumIndex2 = 0;\n        long maxSumIndex3\
    \ = 0;\n        long maxSumIndex4 = 0;\n        long maxSumIndex5 = 0;\n     \
    \   long maxSumIndex6 = 0;\n        long maxSumIndex7 = 0;\n        long maxSumIndex8\
    \ = 0;\n        long maxSumIndex9 = 0;\n        long maxSumIndex10 = 0;\n    \
    \    long maxSumIndex11 = 0;\n        long maxSumIndex12 = 0;\n        long maxSumIndex13\
    \ = 0;\n        long maxSumIndex14 = 0;\n        long maxSumIndex15 = 0;\n   \
    \     long maxSumIndex16 = 0;\n        long maxSumIndex17 = 0;\n        long maxSumIndex18\
    \ = 0;\n        long maxSumIndex19 = 0;\n        long maxSumIndex20 = 0;\n   \
    \     long maxSumIndex21 = 0;\n        long maxSumIndex22 = 0;\n        long maxSumIndex23\
    \ = 0;\n        long maxSumIndex24 = 0;\n        long maxSumIndex25 = 0;\n   \
    \     long maxSumIndex26 = 0;\n        long maxSumIndex27 = 0;\n        long maxSumIndex28\
    \ = 0;\n        long maxSumIndex29 = 0;\n        long maxSumIndex30 = 0;\n   \
    \     long maxSumIndex31 = 0;\n        long maxSumIndex32 = 0;\n        long maxSumIndex33\
    \ = 0;\n        long maxSumIndex34 = 0;\n        long maxSumIndex35 = 0;\n   \
    \     long maxSumIndex36 = 0;\n        long maxSumIndex37 = 0;\n        long maxSumIndex38\
    \ = 0;\n        long maxSumIndex39 = 0;\n        long maxSumIndex40 = 0;\n   \
    \     long maxSumIndex41 = 0;\n        long maxSumIndex42 = 0;\n        long maxSumIndex43\
    \ = 0;\n        long maxSumIndex44 = 0;\n        long maxSumIndex45 = 0;\n   \
    \     long maxSumIndex46 = 0;\n        long maxSumIndex47 = 0;\n        long maxSumIndex48\
    \ = 0;\n        long maxSumIndex49 = 0;\n        long maxSumIndex50 = 0;\n   \
    \     long maxSumIndex51 = 0;\n        long maxSumIndex52 = 0;\n        long maxSumIndex53\
    \ = 0;\n        long maxSumIndex54 = 0;\n        long maxSumIndex55 = 0;\n   \
    \     long maxSumIndex56 = 0;\n        long maxSumIndex57 = 0;\n        long maxSumIndex58\
    \ = 0;\n        long maxSumIndex59 = 0;\n        long maxSumIndex60 = 0;\n   \
    \     long maxSumIndex61 = 0;\n        long max", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums)\
    \ {\n            sum += num;\n            result.add(sum);\n        }\n      \
    \  Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        for (long num\
    \ : nums) {\n            sum += num;\n        }\n        Collections.sort(nums,\
    \ (a, b) -> sum - sum);\n        for (long num : nums) {\n            result.add(num);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            result.add(num);\n        }\n        Collections.sort(result, new\
    \ Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n \
    \               long diff = o1 - o2;\n                return diff != 0 ? diff\
    \ : o1.compareTo(o2);\n            }\n        });\n        return result;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        long sum = 0;\n\
    \        for (long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        long sum = 0;\n\
    \        for (long num : nums) {\n            sum += num;\n            result.add(num);\n\
    \        }\n        Collections.sort(result, new Comparator<Long>() {\n      \
    \      public int compare(Long o1, Long o2) {\n                long diff = o1\
    \ - o2;\n                return diff == 0 ? 0 : (diff < 0 ? -1 : 1);\n       \
    \     }\n        });\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long sum = 0;\n        for(long num : nums)\
    \ {\n            sum += num;\n            result.add(sum);\n        }\n      \
    \  Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        for (long num\
    \ : nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (Long num :\
    \ nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        for (long num\
    \ : nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        for (long num\
    \ : nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for(long num : nums)\
    \ {\n            sum += num;\n            result.add(sum);\n        }\n      \
    \  Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (Long num :\
    \ nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        for (Long num\
    \ : nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        long maxSum = 0;\n\
    \        long maxIndex = 0;\n        long maxSumIndex = 0;\n        long minSum\
    \ = Long.MAX_VALUE;\n        long minSumIndex = 0;\n        long minIndex = Long.MAX_VALUE;\n\
    \        long minIndexIndex = 0;\n        long maxPoint = Long.MAX_VALUE;\n  \
    \      long maxPointIndex = 0;\n        long minPoint = Long.MAX_VALUE;\n    \
    \    long minPointIndex = 0;\n        long maxPointSum = Long.MAX_VALUE;\n   \
    \     long maxPointSumIndex = 0;\n        long minPointSum = Long.MAX_VALUE;\n\
    \        long minPointSumIndex = 0;\n        long maxPointSumPoint = Long.MAX_VALUE;\n\
    \        long maxPointSumPointIndex = 0;\n        long minPointSumPoint = Long.MAX_VALUE;\n\
    \        long minPointSumPointIndex = 0;\n        long maxPointSumPointSum = Long.MAX_VALUE;\n\
    \        long maxPointSumPointSumIndex = 0;\n        long minPointSumPointSum\
    \ = Long.MAX_VALUE;\n        long minPointSumPointSumIndex = 0;\n        long\
    \ maxPointSumPointSumPoint = Long.MAX_VALUE;\n        long maxPointSumPointSumPointIndex\
    \ = 0;\n        long minPointSumPointSumPoint = Long.MAX_VALUE;\n        long\
    \ minPointSumPointSumPointIndex = 0;\n        long maxPointSumPointSumPointSum\
    \ = Long.MAX_VALUE;\n        long maxPointSumPointSumPointSumIndex = 0;\n    \
    \    long minPointSumPointSumPointSum = Long.MAX_VALUE;\n        long minPointSumPointSumPointSumIndex\
    \ = 0;\n        long maxPointSumPointSumPointSumPoint = Long.MAX_VALUE;\n    \
    \    long maxPointSumPointSumPointSumPointIndex = 0;\n        long minPointSumPointSumPointSumPoint\
    \ = Long.MAX_VALUE;\n        long minPointSumPointSumPointSumPointIndex = 0;\n\
    \        long maxPointSumPointSumPointSumPointSum = Long.MAX_VALUE;\n        long\
    \ maxPointSumPointSumPointSumPointIndex = 0;\n        long minPointSumPointSumPointSumPoint\
    \ = Long.MAX_VALUE;\n        long minPointSumPointSumPointSumPointIndex = 0;\n\
    \        long maxPointSumPointSumPointSumPointSum = Long.MAX_VALUE;\n        long\
    \ maxPointSumPointSumPointSumPointIndex = 0;\n        long minPointSumPointSumPointSumPointSum\
    \ = Long.MAX_VALUE", "        ArrayList<Long> result = new ArrayList<>();\n  \
    \      long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for(long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \        }\n        Collections.sort(nums, Comparator.comparingLong(num -> sum\
    \ % 10));\n        for (long num : nums) {\n            result.add(num);\n   \
    \     }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        long maxSum = Long.MIN_VALUE;\n        for (long\
    \ num : nums) {\n            sum += num;\n            if (sum > maxSum) {\n  \
    \              maxSum = sum;\n            }\n        }\n        Collections.sort(nums,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                long diff = o1 - o2;\n                return diff != 0 ? diff\
    \ : o1.compareTo(o2);\n            }\n        });\n        for (long num : nums)\
    \ {\n            sum += num;\n            if (sum > maxSum) {\n              \
    \  maxSum = sum;\n            }\n        }\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum > maxSum) {\n                maxSum\
    \ = sum;\n            }\n        }\n        for (long num : nums) {\n        \
    \    sum += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n\
    \            }\n        }\n        for (long num : nums) {\n            sum +=\
    \ num;\n            if (sum > maxSum) {\n                maxSum = sum;\n     \
    \       }\n        }\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum > maxSum) {\n                maxSum = sum;\n            }\n\
    \        }\n        for (long num : nums) {\n            sum += num;\n       \
    \     if (sum > maxSum) {\n                maxSum = sum;\n            }\n    \
    \    }\n        for (long num : nums) {\n            sum += num;\n           \
    \ if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n\
    \        for (long num : nums) {\n            sum += num;\n            if (sum\
    \ > maxSum) {\n                maxSum = sum;\n            }\n        }\n     \
    \   for (long num : nums) {\n            sum += num;\n            if (sum > maxSum)\
    \ {\n                maxSum = sum;\n            }\n        }\n        for (long\
    \ num : nums) {\n            sum += num;\n            if (sum > maxSum) {\n  \
    \              maxSum = sum;\n            }\n        }\n        for (long num\
    \ : nums) {\n            sum += num;\n            if (sum > maxSum) {\n      \
    \          maxSum = sum;\n            }\n        }\n        for (long num : nums)\
    \ {\n            sum += num;\n            if (sum > maxSum) {\n              \
    \  maxSum = sum;\n            }\n        }\n        for (long num : nums) {\n\
    \            sum += num;\n            if (sum > maxSum) {\n                maxSum\
    \ = sum;\n            }\n        }\n        for (long num : nums) {\n        \
    \    sum += num;\n            if (sum > max", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n        }\n        Collections.sort(nums, new Comparator<Long>()\
    \ {\n            public int compare(Long o1, Long o2) {\n                return\
    \ (int) (o1 - o2);\n            }\n        });\n        for (long num : nums)\
    \ {\n            if (sum == num) {\n                result.add(num);\n       \
    \     }\n        }\n        return result;", "        ArrayList<Long> result =\
    \ new ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums)\
    \ {\n            sum += num;\n            result.add(sum);\n        }\n      \
    \  Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long sum = 0;\n        for(long num\
    \ : nums) {\n            sum += num;\n            result.add(sum);\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = 0;\n        for (long num :\
    \ nums) {\n            sum += num;\n        }\n        Collections.sort(nums,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                long diff = o1 - o2;\n                if (diff > 0) {\n     \
    \               return 1;\n                } else if (diff < 0) {\n          \
    \          return -1;\n                } else {\n                    return 0;\n\
    \                }\n            }\n        });\n        for (long num : nums)\
    \ {\n            if (sum == num) {\n                result.add(num);\n       \
    \     }\n        }\n        return result;", "        ArrayList<Long> result =\
    \ new ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums)\
    \ {\n            sum += num;\n            result.add(num);\n        }\n      \
    \  Collections.sort(result, new Comparator<Long>() {\n            public int compare(Long\
    \ o1, Long o2) {\n                return (int) (o1 - o2);\n            }\n   \
    \     });\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long sum = 0;\n        long maxSum = 0;\n        long maxIndex = 0;\n\
    \        for(long num : nums) {\n            sum += num;\n            if(sum >\
    \ maxSum) {\n                maxSum = sum;\n                maxIndex = num;\n\
    \            }\n        }\n        for(long num : nums) {\n            if(num\
    \ == maxIndex) {\n                result.add(num);\n            }\n        }\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (Long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \        }\n        Collections.sort(nums, new Comparator<Long>() {\n        \
    \    public int compare(Long o1, Long o2) {\n                return (int) (o1\
    \ - o2);\n            }\n        });\n        for (long num : nums) {\n      \
    \      if (sum == num) {\n                result.add(num);\n            }\n  \
    \      }\n        return result;"]
stop_tokens:
- "\n    }\n"
