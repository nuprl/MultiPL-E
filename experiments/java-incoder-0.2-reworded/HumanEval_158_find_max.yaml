name: HumanEval_158_find_max
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function that accepts an array array list of strings.\n\
  \    // The array list contains different words. Return the word with maximum number\n\
  \    // of unique characters. If multiple strings have maximum number of unique\n\
  \    // characters, return the one which comes first in lexicographical order.\n\
  \    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
  of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
  name\", (String)\"enam\", (String)\"game\"))))\n    // (\"enam\")\n    // >>> findMax((new\
  \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
  cc\"))))\n    // (\"aaaaaaa\")\n    public static String findMax(ArrayList<String>\
  \ words) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(findMax((new\
  \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"string\"\
  )))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
  \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
  cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
  )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
  )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\", (String)\"\
  are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"nation\"\
  )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"this\",\
  \ (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n   \
  \ assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
  b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
  , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
completions: ["        Map<Character, Integer> counts = new HashMap<>();\n       \
    \ for (String word : words) {\n            for (char c : word.toCharArray()) {\n\
    \                if (counts.containsKey(c)) {\n                    counts.put(c,\
    \ counts.get(c) + 1);\n                } else {\n                    counts.put(c,\
    \ 1);\n                }\n            }\n        }\n        Integer maxCount =\
    \ Collections.max(counts.values());\n        for (Map.Entry<Character, Integer>\
    \ entry : counts.entrySet()) {\n            if (entry.getValue() == maxCount)\
    \ {\n                return entry.getKey();\n            }\n        }\n      \
    \  return null;", "        Map<String, Integer> map = new HashMap<>();\n     \
    \   for (String word : words) {\n            int count = 0;\n            for (int\
    \ i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Set<String> keySet\
    \ = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n  \
    \      iterator.next();\n        String maxKey = iterator.next();\n        int\
    \ maxValue = map.get(maxKey);\n        while (iterator.hasNext()) {\n        \
    \    String key = iterator.next();\n            if (map.get(key) > maxValue) {\n\
    \                maxKey = key;\n                maxValue = map.get(key);\n   \
    \         }\n        }\n        return maxKey;", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (map.size() > words.size())\
    \ {\n                return word;\n            }\n        }\n        return null;",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.containsKey(word) ? map.get(word) : 0;\n\
    \            map.put(word, count + 1);\n        }\n        Set<String> keySet\
    \ = map.keySet();\n        Integer maxValue = keySet.isEmpty() ? null : Collections.max(keySet);\n\
    \        for (String word : keySet) {\n            if (maxValue == null || maxValue.intValue()\
    \ < map.get(word).intValue()) {\n                maxValue = map.get(word);\n \
    \           }\n        }\n        return maxValue == null ? null : maxValue.intValue()\
    \ < 1 ? null : maxValue.intValue() + \"\";", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = 0;\n            for (int i = 0; i < word.length(); i++) {\n              \
    \  char c = word.charAt(i);\n                if (map.containsKey(c)) {\n     \
    \               count = map.get(c) + 1;\n                } else {\n          \
    \          map.put(c, 1);\n                }\n            }\n            if (count\
    \ > map.size()) {\n                map.put(word, count);\n            }\n    \
    \    }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Set<Map.Entry<String, Integer>> entrySet = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (char c : word.toCharArray()) {\n                if (map.containsKey(c))\
    \ {\n                    map.put(c, map.get(c) + 1);\n                } else {\n\
    \                    map.put(c, 1);\n                }\n                count++;\n\
    \            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        List<String> result = new ArrayList<>();\n\
    \        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n         \
    \   if (entry.getValue() == words.size()) {\n                result.add(entry.getKey());\n\
    \            }\n        }\n        if (result.size() > 1) {\n            return\
    \ findMax(result);\n        } else {\n            return result.get(0);\n    \
    \    }", "        Map<String, Integer> countMap = new HashMap<>();\n        for(String\
    \ word : words) {\n            int count = countMap.get(word);\n            countMap.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        \n        Collection<Map.Entry<String,\
    \ Integer>> entries = countMap.entrySet();\n        \n        Optional<Map.Entry<String,\
    \ Integer>> maxEntry = entries.stream().max(Comparator.comparing(Map.Entry::getValue));\n\
    \        \n        if(maxEntry.isPresent()) {\n            return maxEntry.get().getKey();\n\
    \        } else {\n            return null;\n        }", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Integer maxCount = keySet.isEmpty() ? null : Collections.max(keySet);\n\
    \        if (maxCount == null) {\n            return null;\n        }\n      \
    \  String maxWord = null;\n        for (String word : keySet) {\n            if\
    \ (maxCount.equals(map.get(word))) {\n                maxWord = word;\n      \
    \          break;\n            }\n        }\n        return maxWord;", "     \
    \   Map<Character, Integer> map = new HashMap<>();\n        words.forEach(w ->\
    \ {\n            for(char c : w.toCharArray()) {\n                Integer count\
    \ = map.get(c);\n                map.put(c, count == null ? 1 : count + 1);\n\
    \            }\n        });\n        \n        List<Map.Entry<Character, Integer>>\
    \ entries = map.entrySet().stream()\n                .sorted(Map.Entry.comparingByValue().reversed())\n\
    \                .collect(Collectors.toList());\n        \n        return entries.stream()\n\
    \                .filter(e -> e.getValue() == entries.stream().max(Map.Entry.comparingByValue()).getValue())\n\
    \                .map(Map.Entry::getKey)\n                .findFirst()\n     \
    \           .orElse(null);", "        Map<String, Integer> counts = new HashMap<>();\n\
    \        for (String word : words) {\n            Integer count = counts.get(word);\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            counts.put(word, count + 1);\n        }\n        Integer maxCount\
    \ = Collections.max(counts.values());\n        String maxWord = null;\n      \
    \  for (String word : counts.keySet()) {\n            if (counts.get(word) ==\
    \ maxCount) {\n                maxWord = word;\n                break;\n     \
    \       }\n        }\n        return maxWord;", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Collection<String> maxWords = map.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey();\n\
    \        return maxWords;", "        Map<Character, Integer> charCount = new HashMap<>();\n\
    \        for (String word : words) {\n            for (char c : word.toCharArray())\
    \ {\n                charCount.put(c, charCount.getOrDefault(c, 0) + 1);\n   \
    \         }\n        }\n        Integer maxCount = charCount.values().stream().max(Integer::compare).get();\n\
    \        List<String> maxWords = charCount.entrySet().stream().filter(e -> e.getValue()\
    \ == maxCount).collect(Collectors.toList());\n        if (maxWords.size() > 1)\
    \ {\n            return maxWords.get(0).getKey();\n        }\n        return maxWords.get(0).getKey().substring(0,\
    \ 1);", "        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n                count++;\n            }\n            if (map.size()\
    \ > words.size()) {\n                return word;\n            }\n        }\n\
    \        return words.get(0);", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > 1) {\n                String\
    \ key = \"\";\n                for (Map.Entry<String, Integer> entry : map.entrySet())\
    \ {\n                    if (entry.getValue() == count) {\n                  \
    \      key = entry.getKey();\n                    }\n                }\n     \
    \           return key;\n            }\n        }\n        return null;", "  \
    \      Map<Character, Integer> charCount = new HashMap<>();\n        for (String\
    \ word : words) {\n            for (char c : word.toCharArray()) {\n         \
    \       if (charCount.containsKey(c)) {\n                    charCount.put(c,\
    \ charCount.get(c) + 1);\n                } else {\n                    charCount.put(c,\
    \ 1);\n                }\n            }\n        }\n        Integer maxCount =\
    \ null;\n        for (Map.Entry<Character, Integer> entry : charCount.entrySet())\
    \ {\n            if (maxCount == null || entry.getValue() > maxCount) {\n    \
    \            maxCount = entry.getValue();\n            }\n        }\n        if\
    \ (maxCount == null) {\n            return null;\n        }\n        ArrayList<String>\
    \ wordList = new ArrayList<>();\n        for (String word : words) {\n       \
    \     boolean found = false;\n            for (char c : word.toCharArray()) {\n\
    \                if (charCount.containsKey(c)) {\n                    if (charCount.get(c)\
    \ == maxCount) {\n                        found = true;\n                    \
    \    break;\n                    }\n                }\n            }\n       \
    \     if (!found) {\n                wordList.add(word);\n            }\n    \
    \    }\n        return wordList.get(0);", "        Map<String, Integer> map =\
    \ new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = 0;\n            for (int i = 0; i < word.length(); i++) {\n              \
    \  char c = word.charAt(i);\n                if (map.containsKey(c)) {\n     \
    \               count = map.get(c) + 1;\n                } else {\n          \
    \          map.put(c, 1);\n                }\n            }\n            if (count\
    \ > map.size()) {\n                map.put(word, count);\n            }\n    \
    \    }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (char c : word.toCharArray()) {\n                if (map.containsKey(c))\
    \ {\n                    map.put(c, map.get(c) + 1);\n                } else {\n\
    \                    map.put(c, 1);\n                }\n                count++;\n\
    \            }\n            if (map.size() > words.size()) {\n               \
    \ return word;\n            }\n        }\n        return null;", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Integer maxValue = Collections.max(map.values());\n\
    \        if (maxValue == null) {\n            return null;\n        }\n      \
    \  for (String word : map.keySet()) {\n            if (maxValue == map.get(word))\
    \ {\n                return word;\n            }\n        }\n        return null;",
  "        Map<String, Integer> counts = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = counts.getOrDefault(word, 0);\n        \
    \    counts.put(word, count + 1);\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        for (String word : counts.keySet()) {\n            if (counts.get(word)\
    \ == maxCount) {\n                return word;\n            }\n        }\n   \
    \     return null;", "        Map<String, Integer> map = new HashMap<>();\n  \
    \      for (String word : words) {\n            int count = 0;\n            for\
    \ (char c : word.toCharArray()) {\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<String> keys = map.keySet();\n        String maxKey = keys.stream().max(Comparator.comparing(k\
    \ -> map.get(k))).get();\n        return maxKey;", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keys = map.keySet();\n        Collections.sort(keys,\
    \ new Comparator<String>() {\n            public int compare(String o1, String\
    \ o2) {\n                return map.get(o1).compareTo(map.get(o2));\n        \
    \    }\n        });\n        return keys.get(0);", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        words.forEach(w -> {\n            int count\
    \ = 0;\n            for (char c : w.toCharArray()) {\n                if (map.containsKey(c))\
    \ {\n                    map.put(c, map.get(c) + 1);\n                } else {\n\
    \                    map.put(c, 1);\n                }\n            }\n      \
    \  });\n        Integer maxValue = Collections.max(map.values());\n        Set<String>\
    \ keySet = map.keySet();\n        for (String key : keySet) {\n            if\
    \ (map.get(key) == maxValue) {\n                return key;\n            }\n \
    \       }\n        return null;", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Set<Map.Entry<String,\
    \ Integer>> entrySet = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = null;\n        for (Map.Entry<String, Integer> entry : entrySet) {\n     \
    \       if (maxEntry == null || entry.getValue() > maxEntry.getValue()) {\n  \
    \              maxEntry = entry;\n            }\n        }\n        return maxEntry.getKey();",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char c = word.charAt(i);\n                if (map.containsKey(c))\
    \ {\n                    count = map.get(c) + 1;\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \     if (count > map.size()) {\n                map.put(word, count);\n     \
    \       }\n        }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        while (iterator.hasNext()) {\n      \
    \      String key = iterator.next();\n            int value = map.get(key);\n\
    \            if (value > map.size()) {\n                return key;\n        \
    \    }\n        }\n        return null;", "        Map<String, Integer> map =\
    \ new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = 0;\n            for (char c : word.toCharArray()) {\n                map.putIfAbsent(String.valueOf(c),\
    \ 0);\n                map.put(String.valueOf(c), map.get(c) + 1);\n         \
    \   }\n        }\n        List<String> result = new ArrayList<>();\n        for\
    \ (Map.Entry<String, Integer> entry : map.entrySet()) {\n            if (entry.getValue()\
    \ > result.size()) {\n                result.add(entry.getKey());\n          \
    \  }\n        }\n        if (result.size() == 1) {\n            return result.get(0);\n\
    \        }\n        Collections.sort(result);\n        return result.get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for(String word :\
    \ words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count + 1);\n        }\n        \n        Set<String> keys = map.keySet();\n\
    \        \n        Collections.sort(keys, new Comparator<String>() {\n       \
    \     @Override\n            public int compare(String o1, String o2) {\n    \
    \            return map.get(o1).compareTo(map.get(o2));\n            }\n     \
    \   });\n        \n        return keys.get(0);", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        Collection<String> result = new ArrayList<>(map.keySet());\n\
    \        Collections.sort(result);\n        return result.iterator().next();",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                map.putIfAbsent(Character.toString(c), 0);\n            \
    \    map.putIfAbsent(Character.toString(c), map.get(c) + 1);\n               \
    \ count++;\n            }\n            if (map.size() > words.size()) {\n    \
    \            return word;\n            }\n            map.clear();\n        }\n\
    \        return null;", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<String> keys = map.keySet();\n        Collections.sort(keys,\
    \ new Comparator<String>() {\n            public int compare(String o1, String\
    \ o2) {\n                return map.get(o1).compareTo(map.get(o2));\n        \
    \    }\n        });\n        return keys.get(0);", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = set.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        List<String> result = new ArrayList<>(map.keySet());\n      \
    \  Collections.sort(result);\n        return result.isEmpty() ? null : result.get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                map.putIfAbsent(Character.toString(c), 0);\n            \
    \    map.putIfAbsent(Character.toString(c), map.get(c) + 1);\n               \
    \ count++;\n            }\n            if (count > map.size()) {\n           \
    \     map.put(word, count);\n            }\n        }\n        List<String> result\
    \ = new ArrayList<>(map.keySet());\n        Collections.sort(result);\n      \
    \  return result.isEmpty() ? null : result.get(0);", "        Map<String, Integer>\
    \ counts = new HashMap<>();\n        for (String word : words) {\n           \
    \ Integer count = counts.get(word);\n            if (count == null) {\n      \
    \          count = 0;\n            }\n            counts.put(word, count + 1);\n\
    \        }\n        Integer maxCount = null;\n        for (String word : counts.keySet())\
    \ {\n            Integer count = counts.get(word);\n            if (maxCount ==\
    \ null || count > maxCount) {\n                maxCount = count;\n           \
    \ }\n        }\n        if (maxCount == null) {\n            return null;\n  \
    \      }\n        ArrayList<String> wordList = new ArrayList<>(words);\n     \
    \   wordList.removeAll(Collections.singleton(maxCount));\n        return wordList.get(0);",
  "        Map<Character, Integer> map = new HashMap<>();\n        for (String word\
    \ : words) {\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n        }\n        Integer maxCount = Collections.max(map.values());\n\
    \        Set<Character> keySet = map.keySet();\n        Iterator<Character> iterator\
    \ = keySet.iterator();\n        while (iterator.hasNext()) {\n            Character\
    \ key = iterator.next();\n            if (maxCount == map.get(key)) {\n      \
    \          return word;\n            }\n        }\n        return null;", "  \
    \      Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                map.putIfAbsent(String.valueOf(c), 0);\n                map.putIfAbsent(String.valueOf(c),\
    \ map.getOrDefault(String.valueOf(c), 0) + 1);\n                count++;\n   \
    \         }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Collections.sort(map.entrySet(),\
    \ Map.Entry.comparingByValue());\n        return map.entrySet().stream().map(Map.Entry::getKey).collect(Collectors.toList()).get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.containsKey(word) ? map.get(word) : 0;\n\
    \            map.put(word, count + 1);\n        }\n        Set<Map.Entry<String,\
    \ Integer>> set = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = null;\n        for (Map.Entry<String, Integer> entry : set) {\n          \
    \  if (maxEntry == null || entry.getValue() > maxEntry.getValue()) {\n       \
    \         maxEntry = entry;\n            }\n        }\n        return maxEntry.getKey();",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                count = 1;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        Set<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();", "        Map<Character,\
    \ Integer> counts = new HashMap<>();\n        for (String word : words) {\n  \
    \          for (char c : word.toCharArray()) {\n                Integer count\
    \ = counts.get(c);\n                if (count == null) {\n                   \
    \ counts.put(c, 1);\n                } else {\n                    counts.put(c,\
    \ count + 1);\n                }\n            }\n        }\n        Integer maxCount\
    \ = Collections.max(counts.values());\n        String maxWord = null;\n      \
    \  for (String word : words) {\n            Integer count = counts.get(word.charAt(0));\n\
    \            if (count == maxCount) {\n                maxWord = word;\n     \
    \       }\n        }\n        return maxWord;", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        Collection<String> result = new ArrayList<>(map.keySet());\n\
    \        result.sort(Comparator.comparing(s -> map.get(s)));\n        return result.stream().findFirst().get();",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                map.put(word, 1);\n            } else {\n               \
    \ map.put(word, count + 1);\n            }\n        }\n        Collection<String>\
    \ result = new ArrayList<>(map.keySet());\n        result.sort(Comparator.comparing(s\
    \ -> map.get(s)));\n        return result.isEmpty() ? null : result.get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                map.put(word, 1);\n            } else {\n               \
    \ map.put(word, count + 1);\n            }\n        }\n        Set<String> keySet\
    \ = map.keySet();\n        int maxCount = keySet.size();\n        if (maxCount\
    \ == 1) {\n            return keySet.iterator().next();\n        }\n        Set<String>\
    \ maxSet = new HashSet<>();\n        for (String word : keySet) {\n          \
    \  if (map.get(word) == maxCount) {\n                maxSet.add(word);\n     \
    \       }\n        }\n        if (maxSet.size() == 1) {\n            return maxSet.iterator().next();\n\
    \        }\n        Set<String> minSet = new HashSet<>();\n        for (String\
    \ word : keySet) {\n            if (map.get(word) == 1) {\n                minSet.add(word);\n\
    \            }\n        }\n        if (minSet.size() == 1) {\n            return\
    \ minSet.iterator().next();\n        }\n        return null;", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Collections.sort(keySet);\n        String maxKey = keySet.get(0);\n \
    \       int maxCount = map.get(maxKey);\n        for (String key : keySet) {\n\
    \            if (map.get(key) == maxCount) {\n                maxKey = key;\n\
    \                maxCount = map.get(key);\n            }\n        }\n        return\
    \ maxKey;", "        Map<String, Integer> map = new HashMap<>();\n        for\
    \ (String word : words) {\n            int count = 0;\n            for (char c\
    \ : word.toCharArray()) {\n                if (map.containsKey(c)) {\n       \
    \             map.put(c, map.get(c) + 1);\n                } else {\n        \
    \            map.put(c, 1);\n                }\n                count++;\n   \
    \         }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Collection<Map.Entry<String, Integer>>\
    \ entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<String> keySet = map.keySet();\n        Integer maxValue\
    \ = keySet.isEmpty() ? null : Collections.max(keySet);\n        String maxWord\
    \ = maxValue == null ? null : map.get(maxValue);\n        return maxWord;", " \
    \       Map<String, Integer> map = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n                count++;\n            }\n            if (count\
    \ > map.size()) {\n                map.put(word, count);\n            }\n    \
    \    }\n        Collections.sort(map.entrySet());\n        Map.Entry<String, Integer>\
    \ maxEntry = map.entrySet().stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (char c : word.toCharArray()) {\n                map.putIfAbsent(String.valueOf(c),\
    \ 0);\n                map.putIfAbsent(String.valueOf(c), map.getOrDefault(String.valueOf(c),\
    \ 0) + 1);\n            }\n        }\n        List<String> result = new ArrayList<>();\n\
    \        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n         \
    \   if (entry.getValue() > result.size()) {\n                result.add(entry.getKey());\n\
    \            }\n        }\n        if (result.size() > 1) {\n            return\
    \ result.get(0);\n        }\n        return null;", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = set.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = 0;\n            for (char c : word.toCharArray()) {\n    \
    \            map.putIfAbsent(Character.toString(c), 0);\n                map.putIfAbsent(Character.toString(c),\
    \ map.get(c) + 1);\n                count++;\n            }\n            if (map.size()\
    \ > words.size()) {\n                return word;\n            }\n        }\n\
    \        return null;", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (char c : word.toCharArray()) {\n                if (map.containsKey(c))\
    \ {\n                    map.put(c, map.get(c) + 1);\n                } else {\n\
    \                    map.put(c, 1);\n                }\n                count++;\n\
    \            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Collections.sort(map.entrySet(),\
    \ Map.Entry.comparingByValue());\n        return map.entrySet().stream().findFirst().get().getKey();",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                map.put(word, 1);\n            } else {\n               \
    \ map.put(word, count + 1);\n            }\n        }\n        Set<Map.Entry<String,\
    \ Integer>> set = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = set.stream().max(Map.Entry.comparingByValue()).get();\n        return maxEntry.getKey();",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n                count++;\n            }\n            if (count\
    \ > map.size()) {\n                map.put(word, count);\n            }\n    \
    \    }\n        Collection<String> keys = map.keySet();\n        Collections.sort(keys,\
    \ new Comparator<String>() {\n            public int compare(String o1, String\
    \ o2) {\n                return map.get(o1).compareTo(map.get(o2));\n        \
    \    }\n        });\n        return keys.get(0);", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Collection<Map.Entry<String, Integer>> entries =\
    \ map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<String> keySet = map.keySet();\n        Integer maxCount\
    \ = keySet.isEmpty() ? null : Collections.max(keySet);\n        if (maxCount ==\
    \ null) {\n            return null;\n        }\n        String maxWord = null;\n\
    \        for (String word : keySet) {\n            if (maxCount.equals(map.get(word)))\
    \ {\n                maxWord = word;\n            }\n        }\n        return\
    \ maxWord;", "        Map<String, Integer> map = new HashMap<>();\n        for\
    \ (String word : words) {\n            int count = 0;\n            for (char c\
    \ : word.toCharArray()) {\n                map.putIfAbsent(Character.toString(c),\
    \ 0);\n                map.put(c, map.get(c) + 1);\n            }\n        }\n\
    \        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n  \
    \      Map.Entry<String, Integer> maxEntry = entries.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<Map.Entry<String, Integer>> entries = map.entrySet();\n \
    \       Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n    \
    \    return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for(String word : words) {\n            int count = map.containsKey(word)\
    \ ? map.get(word) : 0;\n            map.put(word, count + 1);\n        }\n   \
    \     \n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     \n        return maxEntry.getKey();", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = 0;\n            for (char c : word.toCharArray()) {\n                if (map.containsKey(c))\
    \ {\n                    map.put(c, map.get(c) + 1);\n                } else {\n\
    \                    map.put(c, 1);\n                }\n                count++;\n\
    \            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Collections.sort(map.entrySet());\n\
    \        Map.Entry<String, Integer> maxEntry = map.entrySet().stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n     \
    \   Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : set) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    map.put(c, map.get(c) + 1);\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \ }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        words.forEach(word -> map.put(word,\
    \ map.getOrDefault(word, 0) + 1));\n        Collection<Map.Entry<String, Integer>>\
    \ entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> counts = new\
    \ HashMap<>();\n        for (String word : words) {\n            int count = counts.get(word);\n\
    \            if (count == null) {\n                counts.put(word, 1);\n    \
    \        } else {\n                counts.put(word, count + 1);\n            }\n\
    \        }\n        Integer maxCount = null;\n        for (String word : counts.keySet())\
    \ {\n            if (maxCount == null || maxCount < counts.get(word)) {\n    \
    \            maxCount = counts.get(word);\n            }\n        }\n        if\
    \ (maxCount == null) {\n            return null;\n        }\n        List<String>\
    \ wordList = new ArrayList<>(words);\n        wordList.removeIf(word -> counts.get(word)\
    \ == maxCount);\n        return wordList.get(0);", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        List<String> result = new ArrayList<>();\n     \
    \   for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            if\
    \ (entry.getValue().equals(Collections.max(map.values()))) {\n               \
    \ result.add(entry.getKey());\n            }\n        }\n        if (result.size()\
    \ == 1) {\n            return result.get(0);\n        }\n        return Collections.max(result);",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        Collection<String> result\
    \ = new ArrayList<>(map.keySet());\n        result.sort(Comparator.comparing(s\
    \ -> map.get(s)));\n        return result.isEmpty() ? null : result.get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        words.forEach(w ->\
    \ map.put(w, map.getOrDefault(w, 0) + 1));\n        Collection<String> max = new\
    \ ArrayList<>(map.keySet());\n        Collections.sort(max);\n        return max.isEmpty()\
    \ ? null : max.iterator().next();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Integer maxValue = Collections.max(map.values());\n        Iterator<String>\
    \ iterator = map.keySet().iterator();\n        while (iterator.hasNext()) {\n\
    \            String key = iterator.next();\n            if (maxValue.equals(map.get(key)))\
    \ {\n                return key;\n            }\n        }\n        return null;",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = null;\n        for (Map.Entry<String, Integer> entry : entries) {\n      \
    \      if (maxEntry == null || entry.getValue() > maxEntry.getValue()) {\n   \
    \             maxEntry = entry;\n            }\n        }\n        return maxEntry.getKey();",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                map.put(word, 1);\n            } else {\n               \
    \ map.put(word, count + 1);\n            }\n        }\n        List<String> maxWords\
    \ = words.stream()\n                .filter(w -> map.get(w) == map.get(w))\n \
    \               .sorted(Comparator.comparing(w -> map.get(w)))\n             \
    \   .collect(Collectors.toList());\n        if (maxWords.size() > 1) {\n     \
    \       return maxWords.get(0);\n        } else {\n            return maxWords.get(0);\n\
    \        }", "        Map<String, Integer> map = new HashMap<>();\n        for\
    \ (String word : words) {\n            int count = 0;\n            for (char c\
    \ : word.toCharArray()) {\n                if (map.containsKey(c)) {\n       \
    \             map.put(c, map.get(c) + 1);\n                } else {\n        \
    \            map.put(c, 1);\n                }\n            }\n        }\n   \
    \     List<String> result = new ArrayList<>();\n        for (String word : words)\
    \ {\n            int maxCount = -1;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    if (maxCount\
    \ < map.get(c)) {\n                        maxCount = map.get(c);\n          \
    \          }\n                }\n            }\n            if (maxCount > -1)\
    \ {\n                result.add(word);\n            }\n        }\n        if (result.size()\
    \ > 1) {\n            return result.get(0);\n        } else {\n            return\
    \ result.get(0);\n        }", "        Map<String, Integer> counts = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = counts.getOrDefault(word,\
    \ 0);\n            counts.put(word, count + 1);\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = counts.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = 0;\n            for (int i = 0; i < word.length(); i++) {\n\
    \                char c = word.charAt(i);\n                if (map.containsKey(c))\
    \ {\n                    count = map.get(c) + 1;\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \     if (count > 1) {\n                map.put(word, count);\n            }\n\
    \        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n  \
    \      Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : set) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.containsKey(word) ? map.get(word) : 0;\n            map.put(word,\
    \ count + 1);\n        }\n        Set<String> keySet = map.keySet();\n       \
    \ Integer maxValue = keySet.isEmpty() ? null : Collections.max(keySet);\n    \
    \    if (maxValue != null) {\n            String maxKey = maxValue.toString();\n\
    \            for (String word : words) {\n                if (word.equals(maxKey))\
    \ {\n                    return word;\n                }\n            }\n    \
    \    }\n        return null;", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (char c : word.toCharArray()) {\n                if (map.containsKey(c))\
    \ {\n                    map.put(c, map.get(c) + 1);\n                } else {\n\
    \                    map.put(c, 1);\n                }\n                count++;\n\
    \            }\n            if (map.size() > words.size()) {\n               \
    \ return word;\n            }\n        }\n        return null;", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Set<String> keys = map.keySet();\n\
    \        Collections.sort(keys);\n        String maxKey = keys.get(0);\n     \
    \   int maxCount = map.get(maxKey);\n        for (String key : keys) {\n     \
    \       if (map.get(key) == maxCount) {\n                maxKey = key;\n     \
    \           maxCount = map.get(key);\n            }\n        }\n        return\
    \ maxKey;", "        Map<String, Integer> counts = new HashMap<>();\n        for\
    \ (String word : words) {\n            int count = counts.getOrDefault(word, 0);\n\
    \            counts.put(word, count + 1);\n        }\n        Integer maxCount\
    \ = Collections.max(counts.values());\n        if (maxCount == counts.size())\
    \ {\n            return words.get(0);\n        }\n        return words.stream().filter(w\
    \ -> counts.get(w) == maxCount).sorted().findFirst().get();", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = 0;\n            for (char c : word.toCharArray()) {\n    \
    \            map.putIfAbsent(Character.toString(c), 0);\n                map.putIfAbsent(Character.toString(c),\
    \ map.get(c) + 1);\n                count++;\n            }\n            if (count\
    \ > map.size()) {\n                map.put(word, count);\n            }\n    \
    \    }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = entries.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (char c : word.toCharArray()) {\n                if (map.containsKey(c))\
    \ {\n                    map.put(c, map.get(c) + 1);\n                } else {\n\
    \                    map.put(c, 1);\n                }\n                count++;\n\
    \            }\n            if (map.size() > words.size()) {\n               \
    \ return word;\n            }\n        }\n        return words.get(0);", "   \
    \     Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            Integer count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Integer\
    \ maxCount = Collections.max(map.values());\n        String maxWord = null;\n\
    \        for (String word : map.keySet()) {\n            if (map.get(word) ==\
    \ maxCount) {\n                maxWord = word;\n                break;\n     \
    \       }\n        }\n        return maxWord;", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for(String word : words) {\n            int\
    \ count = 0;\n            for(char c : word.toCharArray()) {\n               \
    \ if(map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n        }\n        Set<Map.Entry<String, Integer>> set =\
    \ map.entrySet();\n        Map.Entry<String, Integer> maxEntry = null;\n     \
    \   for(Map.Entry<String, Integer> entry : set) {\n            if(maxEntry ==\
    \ null || entry.getValue() > maxEntry.getValue()) {\n                maxEntry\
    \ = entry;\n            }\n        }\n        return maxEntry.getKey();", "  \
    \      Map<String, Integer> countMap = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = countMap.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            countMap.put(word, count);\n        }\n\
    \        Collection<Map.Entry<String, Integer>> entries = countMap.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for(String word : words) {\n            int count = 0;\n            for(char\
    \ c : word.toCharArray()) {\n                if(map.containsKey(c)) {\n      \
    \              map.put(c, map.get(c) + 1);\n                } else {\n       \
    \             map.put(c, 1);\n                }\n            }\n        }\n  \
    \      Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n    \
    \    Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n       \
    \ return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > 1) {\n                map.put(word,\
    \ count);\n            }\n        }\n        List<String> result = new ArrayList<>();\n\
    \        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n         \
    \   if (entry.getValue() > 1) {\n                result.add(entry.getKey());\n\
    \            }\n        }\n        if (result.isEmpty()) {\n            return\
    \ null;\n        }\n        return Collections.max(result);", "        Map<String,\
    \ Integer> counts = new HashMap<>();\n        for (String word : words) {\n  \
    \          int count = counts.get(word);\n            if (count == null) {\n \
    \               counts.put(word, 1);\n            } else {\n                counts.put(word,\
    \ count + 1);\n            }\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        if (maxCount == null) {\n            return null;\n        }\n      \
    \  Set<String> wordSet = counts.entrySet().stream().filter(e -> e.getValue() ==\
    \ maxCount).map(Map.Entry::getKey).collect(Collectors.toSet());\n        if (wordSet.size()\
    \ == 1) {\n            return wordSet.toArray(new String[]{wordSet.toArray()[0]})[0];\n\
    \        }\n        return wordSet.toArray(new String[]{wordSet.toArray()[0]})[1];",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char c = word.charAt(i);\n                if (map.containsKey(c))\
    \ {\n                    count = map.get(c) + 1;\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \     if (count > map.size()) {\n                map.put(word, count);\n     \
    \       }\n        }\n        Collection<String> result = new ArrayList<>(map.keySet());\n\
    \        Collections.sort(result);\n        return result.iterator().next();",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                map.put(word, 1);\n            } else {\n               \
    \ map.put(word, count + 1);\n            }\n        }\n        Collection<String>\
    \ result = new ArrayList<>();\n        for (String word : map.keySet()) {\n  \
    \          if (map.get(word) == words.size()) {\n                result.add(word);\n\
    \            }\n        }\n        if (result.size() == 1) {\n            return\
    \ result.get(0);\n        }\n        if (result.size() > 1) {\n            Collections.sort(result);\n\
    \            return result.get(0);\n        }\n        return null;", "      \
    \  Map<String, Integer> map = new HashMap<>();\n        for (String word : words)\
    \ {\n            int count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Collection<String> keys = map.keySet();\n\
    \        if (keys.size() == 1) {\n            return keys.get(0);\n        }\n\
    \        int maxCount = 0;\n        String maxWord = null;\n        for (String\
    \ word : keys) {\n            int count = map.get(word);\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = 0;\n            for (char c : word.toCharArray()) {\n    \
    \            map.putIfAbsent(Character.toString(c), 0);\n                map.putIfAbsent(Character.toString(c),\
    \ map.get(c) + 1);\n                count++;\n            }\n            if (map.size()\
    \ > words.size()) {\n                map.clear();\n            }\n        }\n\
    \        Collections.sort(words, Comparator.comparing(s -> map.get(s.charAt(0))));\n\
    \        return words.get(0);", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collections.sort(map.entrySet(),\
    \ Comparator.comparing(Map.Entry::getValue));\n        return map.entrySet().stream().map(Map.Entry::getKey).collect(Collectors.toList()).get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for(String word :\
    \ words) {\n            int count = map.get(word);\n            if(count == null)\
    \ {\n                map.put(word, 1);\n            } else {\n               \
    \ map.put(word, count + 1);\n            }\n        }\n        \n        List<String>\
    \ result = new ArrayList<>();\n        for(String word : map.keySet()) {\n   \
    \         int count = map.get(word);\n            if(count == 1) {\n         \
    \       result.add(word);\n            }\n        }\n        \n        if(result.size()\
    \ == 1) {\n            return result.get(0);\n        }\n        \n        Collections.sort(result);\n\
    \        return result.get(0);", "        Map<Character, Integer> counts = new\
    \ HashMap<>();\n        for (String word : words) {\n            for (char c :\
    \ word.toCharArray()) {\n                Integer count = counts.get(c);\n    \
    \            if (count == null) {\n                    counts.put(c, 1);\n   \
    \             } else {\n                    counts.put(c, count + 1);\n      \
    \          }\n            }\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        Integer maxKey = counts.entrySet().stream().filter(e -> e.getValue()\
    \ == maxCount).map(Map.Entry::getKey).collect(Collectors.toList()).get(0);\n \
    \       return words.stream().filter(w -> w.toCharArray().length == maxKey.length\
    \ && w.toCharArray().equals(maxKey)).findFirst().orElse(null);", "        Map<String,\
    \ Integer> counts = new HashMap<>();\n        for (String word : words) {\n  \
    \          int count = counts.get(word);\n            if (count == null) {\n \
    \               count = 0;\n            }\n            counts.put(word, count\
    \ + 1);\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        String maxWord = null;\n        for (String word : counts.keySet()) {\n\
    \            if (counts.get(word) == maxCount) {\n                maxWord = word;\n\
    \                break;\n            }\n        }\n        return maxWord;", " \
    \       Map<String, Integer> map = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = map.get(word);\n            if (count ==\
    \ null) {\n                map.put(word, 1);\n            } else {\n         \
    \       map.put(word, count + 1);\n            }\n        }\n        List<String>\
    \ result = new ArrayList<>(map.keySet());\n        Collections.sort(result);\n\
    \        return result.isEmpty() ? null : result.get(0);", "        Map<Character,\
    \ Integer> counts = new HashMap<>();\n        for (String word : words) {\n  \
    \          for (char c : word.toCharArray()) {\n                Integer count\
    \ = counts.get(c);\n                if (count == null) {\n                   \
    \ counts.put(c, 1);\n                } else {\n                    counts.put(c,\
    \ count + 1);\n                }\n            }\n        }\n        Integer maxCount\
    \ = Collections.max(counts.values());\n        if (maxCount == null) {\n     \
    \       return null;\n        }\n        Set<Character> chars = counts.keySet();\n\
    \        chars.sort(Comparator.comparing(c -> counts.get(c)));\n        for (Character\
    \ c : chars) {\n            if (counts.get(c) == maxCount) {\n               \
    \ return words.get(chars.indexOf(c));\n            }\n        }\n        return\
    \ null;", "        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();", "        Map<Character,\
    \ Integer> counts = new HashMap<>();\n        for (String word : words) {\n  \
    \          for (char c : word.toCharArray()) {\n                Integer count\
    \ = counts.get(c);\n                if (count == null) {\n                   \
    \ counts.put(c, 1);\n                } else {\n                    counts.put(c,\
    \ count + 1);\n                }\n            }\n        }\n        Integer maxCount\
    \ = Collections.max(counts.values());\n        String maxWord = null;\n      \
    \  for (String word : words) {\n            Integer count = counts.get(word.charAt(0));\n\
    \            if (count == maxCount) {\n                maxWord = word;\n     \
    \       }\n        }\n        return maxWord;", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.containsKey(word) ? map.get(word) + 1 : 1;\n            map.put(word,\
    \ count);\n        }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        int maxCount = keySet.size();\n     \
    \   String maxWord = null;\n        while (iterator.hasNext()) {\n           \
    \ String word = iterator.next();\n            int count = map.get(word);\n   \
    \         if (count > maxCount) {\n                maxCount = count;\n       \
    \         maxWord = word;\n            }\n        }\n        return maxWord;",
  "        Map<String, Integer> countMap = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = countMap.get(word);\n            if (count\
    \ == null) {\n                count = 1;\n            } else {\n             \
    \   count++;\n            }\n            countMap.put(word, count);\n        }\n\
    \        Integer maxCount = countMap.values().stream().max(Integer::compare).get();\n\
    \        return words.get(countMap.keySet().stream().filter(w -> countMap.get(w)\
    \ == maxCount).iterator().next());", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        List<String> result\
    \ = new ArrayList<>();\n        for (Map.Entry<String, Integer> entry : map.entrySet())\
    \ {\n            if (entry.getValue() == words.size()) {\n                result.add(entry.getKey());\n\
    \            }\n        }\n        if (result.size() > 1) {\n            return\
    \ findMax(result);\n        } else {\n            return result.get(0);\n    \
    \    }", "        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for(String word : words) {\n      \
    \      int count = 0;\n            for(char c : word.toCharArray()) {\n      \
    \          if(map.containsKey(c)) {\n                    map.put(c, map.get(c)\
    \ + 1);\n                } else {\n                    map.put(c, 1);\n      \
    \          }\n                count++;\n            }\n            if(map.size()\
    \ > words.size()) {\n                return word;\n            }\n        }\n\
    \        return words.get(0);", "        Map<String, Integer> countMap = new HashMap<>();\n\
    \        for (String word : words) {\n            Integer count = countMap.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            countMap.put(word, count);\n\
    \        }\n        Integer maxCount = Collections.max(countMap.values());\n \
    \       String maxWord = null;\n        for (String word : countMap.keySet())\
    \ {\n            if (countMap.get(word) == maxCount) {\n                maxWord\
    \ = word;\n                break;\n            }\n        }\n        return maxWord;",
  "        Map<String, Integer> map = new HashMap<>();\n        for(String word :\
    \ words) {\n            int count = 0;\n            for(char c : word.toCharArray())\
    \ {\n                if(map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n            }\n        }\n        for(String word : words)\
    \ {\n            int max = 0;\n            for(char c : word.toCharArray()) {\n\
    \                if(map.containsKey(c)) {\n                    if(map.get(c) >=\
    \ max) {\n                        max = map.get(c);\n                    }\n \
    \               }\n            }\n            if(max > 1) {\n                return\
    \ word;\n            }\n        }\n        return words.get(0);", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = 0;\n            for (char c : word.toCharArray()) {\n    \
    \            if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       Integer count = map.get(word);\n            if (count == null) {\n   \
    \             map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = 0;\n            for (char c : word.toCharArray()) {\n    \
    \            if (map.containsKey(c)) {\n                    map.put(c, map.get(c)\
    \ + 1);\n                } else {\n                    map.put(c, 1);\n      \
    \          }\n                count++;\n            }\n            if (map.size()\
    \ > words.size()) {\n                return word;\n            }\n        }\n\
    \        return null;", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.containsKey(word)\
    \ ? map.get(word) + 1 : 1;\n            map.put(word, count);\n        }\n   \
    \     Collection<String> result = new ArrayList<>(map.keySet());\n        result.sort(Comparator.comparing(s\
    \ -> map.get(s)));\n        return result.isEmpty() ? null : result.get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                count = 1;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        Collections.sort(words,\
    \ (a, b) -> map.get(b).compareTo(map.get(a)));\n        return words.get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.containsKey(word) ? map.get(word) : 0;\n\
    \            map.put(word, count + 1);\n        }\n        Collection<String>\
    \ maxWords = map.entrySet().stream()\n                .sorted(Map.Entry.comparingByValue())\n\
    \                .map(Map.Entry::getKey)\n                .collect(Collectors.toList());\n\
    \        return maxWords.get(0);", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                if (map.containsKey(c)) {\n                    map.put(c, map.get(c)\
    \ + 1);\n                } else {\n                    map.put(c, 1);\n      \
    \          }\n            }\n        }\n        Collection<Map.Entry<String, Integer>>\
    \ entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        String maxKey = iterator.next();\n  \
    \      int maxCount = map.get(maxKey);\n        while (iterator.hasNext()) {\n\
    \            String key = iterator.next();\n            int count = map.get(key);\n\
    \            if (count > maxCount) {\n                maxKey = key;\n        \
    \        maxCount = count;\n            }\n        }\n        return maxKey;",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            Integer count = map.get(word);\n            if (count\
    \ == null) {\n                map.put(word, 1);\n            } else {\n      \
    \          map.put(word, count + 1);\n            }\n        }\n        Set<String>\
    \ keySet = map.keySet();\n        Integer maxCount = keySet.isEmpty() ? null :\
    \ Collections.max(keySet);\n        if (maxCount == null) {\n            return\
    \ null;\n        }\n        List<String> result = new ArrayList<>();\n       \
    \ for (String word : keySet) {\n            if (map.get(word) == maxCount) {\n\
    \                result.add(word);\n            }\n        }\n        if (result.size()\
    \ == 1) {\n            return result.get(0);\n        }\n        Collections.sort(result);\n\
    \        return result.get(0);", "        Map<Character, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            for (char c : word.toCharArray())\
    \ {\n                Integer count = map.get(c);\n                if (count ==\
    \ null) {\n                    map.put(c, 1);\n                } else {\n    \
    \                map.put(c, count + 1);\n                }\n            }\n  \
    \      }\n        Integer maxCount = Collections.max(map.values());\n        String\
    \ maxWord = null;\n        for (String word : words) {\n            Integer count\
    \ = map.get(word.charAt(0));\n            if (count == maxCount) {\n         \
    \       maxWord = word;\n                break;\n            }\n        }\n  \
    \      return maxWord;", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (char c : word.toCharArray()) {\n                if (map.containsKey(c))\
    \ {\n                    map.put(c, map.get(c) + 1);\n                } else {\n\
    \                    map.put(c, 1);\n                }\n                count++;\n\
    \            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Collection<String> result = new ArrayList<>();\n\
    \        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n         \
    \   if (entry.getValue() == words.size()) {\n                result.add(entry.getKey());\n\
    \            }\n        }\n        if (result.size() > 1) {\n            return\
    \ findMax(result);\n        } else {\n            return result.get(0);\n    \
    \    }", "        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collections.sort(map.entrySet(),\
    \ Comparator.comparing(Map.Entry::getValue));\n        return map.entrySet().stream().map(Map.Entry::getKey).collect(Collectors.toList()).get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for(String word :\
    \ words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();", "        Map<Character,\
    \ Integer> counts = new HashMap<>();\n        for (String word : words) {\n  \
    \          for (char c : word.toCharArray()) {\n                Integer count\
    \ = counts.get(c);\n                if (count == null) {\n                   \
    \ counts.put(c, 1);\n                } else {\n                    counts.put(c,\
    \ count + 1);\n                }\n            }\n        }\n        Integer maxCount\
    \ = Collections.max(counts.values());\n        String maxWord = null;\n      \
    \  for (String word : words) {\n            Integer count = counts.get(word.charAt(0));\n\
    \            if (count == maxCount) {\n                maxWord = word;\n     \
    \       }\n        }\n        return maxWord;", "        Map<Character, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            for\
    \ (char c : word.toCharArray()) {\n                if (map.containsKey(c)) {\n\
    \                    map.put(c, map.get(c) + 1);\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \ }\n        Collections.sort(map.entrySet());\n        Map.Entry<Character, Integer>\
    \ maxEntry = map.entrySet().stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.containsKey(word)\
    \ ? map.get(word) + 1 : 1;\n            map.put(word, count);\n        }\n   \
    \     Set<Map.Entry<String, Integer>> entrySet = map.entrySet();\n        Map.Entry<String,\
    \ Integer> maxEntry = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        List<String> result = new ArrayList<>(map.keySet());\n      \
    \  Collections.sort(result);\n        return result.isEmpty() ? null : result.get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                map.put(word, 1);\n            } else {\n               \
    \ map.put(word, count + 1);\n            }\n        }\n        Set<Map.Entry<String,\
    \ Integer>> set = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = null;\n        for (Map.Entry<String, Integer> entry : set) {\n          \
    \  if (maxEntry == null || entry.getValue() > maxEntry.getValue()) {\n       \
    \         maxEntry = entry;\n            }\n        }\n        return maxEntry.getKey();",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.containsKey(word) ? map.get(word) : 0;\n\
    \            map.put(word, count + 1);\n        }\n        Collection<String>\
    \ keys = map.keySet();\n        if (keys.size() > 1) {\n            Collections.sort(keys,\
    \ Comparator.comparing(s -> map.get(s)));\n            return keys.get(0);\n \
    \       } else {\n            return keys.get(0);\n        }", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for(String word : words) {\n      \
    \      int count = 0;\n            for(char c : word.toCharArray()) {\n      \
    \          if(map.containsKey(c)) {\n                    map.put(c, map.get(c)\
    \ + 1);\n                } else {\n                    map.put(c, 1);\n      \
    \          }\n                count++;\n            }\n            if(map.size()\
    \ > words.size()) {\n                return word;\n            }\n        }\n\
    \        return null;", "        Map<Character, Integer> counts = new HashMap<>();\n\
    \        for(String word : words) {\n            for(char c : word.toCharArray())\
    \ {\n                Integer count = counts.get(c);\n                if(count\
    \ == null) {\n                    counts.put(c, 1);\n                } else {\n\
    \                    counts.put(c, count + 1);\n                }\n          \
    \  }\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        for(Map.Entry<Character, Integer> entry : counts.entrySet()) {\n    \
    \        if(entry.getValue() == maxCount) {\n                return entry.getKey();\n\
    \            }\n        }\n        return null;", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (count > map.size())\
    \ {\n                map.put(word, count);\n            }\n        }\n       \
    \ Collections.sort(map.entrySet(), Comparator.comparing(Map.Entry::getValue));\n\
    \        return map.entrySet().stream().map(Map.Entry::getKey).collect(Collectors.toList()).get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.containsKey(word) ? map.get(word) + 1\
    \ : 1;\n            map.put(word, count);\n        }\n        Set<String> keys\
    \ = map.keySet();\n        Collections.sort(keys, new Comparator<String>() {\n\
    \            public int compare(String o1, String o2) {\n                return\
    \ map.get(o1).compareTo(map.get(o2));\n            }\n        });\n        return\
    \ keys.get(0);", "        Map<String, Integer> map = new HashMap<>();\n      \
    \  for (String word : words) {\n            int count = 0;\n            for (int\
    \ i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                if (map.containsKey(c)) {\n                    map.put(c, map.get(c)\
    \ + 1);\n                } else {\n                    map.put(c, 1);\n      \
    \          }\n            }\n        }\n        List<String> sortedWords = words.stream().sorted((a,\
    \ b) -> map.get(b).compareTo(map.get(a))).collect(Collectors.toList());\n    \
    \    return sortedWords.get(0);", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Set<Map.Entry<String, Integer>> entrySet = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (char c : word.toCharArray()) {\n                map.putIfAbsent(Character.toString(c),\
    \ 0);\n                map.putIfAbsent(Character.toString(c), map.get(c) + 1);\n\
    \                count++;\n            }\n            if (count > map.size())\
    \ {\n                map.put(word, count);\n            }\n        }\n       \
    \ Set<Map.Entry<String, Integer>> set = map.entrySet();\n        Iterator<Map.Entry<String,\
    \ Integer>> iterator = set.iterator();\n        Map.Entry<String, Integer> entry\
    \ = iterator.next();\n        while (iterator.hasNext()) {\n            entry\
    \ = iterator.next();\n            if (entry.getValue() > entry.getKey().length())\
    \ {\n                return entry.getKey();\n            }\n        }\n      \
    \  return entry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        words.forEach(word -> map.merge(word, new Integer(0), Integer::sum));\n\
    \        Integer maxValue = map.values().stream().max(Integer::compare).get();\n\
    \        return words.stream().filter(word -> map.get(word) == maxValue).findFirst().get();",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char c = word.charAt(i);\n                if (map.containsKey(c))\
    \ {\n                    count = map.get(c) + 1;\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \     if (count > map.size()) {\n                map.put(word, count);\n     \
    \       }\n        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : set) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.containsKey(word) ? map.get(word) : 0;\n            map.put(word,\
    \ count + 1);\n        }\n        Set<String> keySet = map.keySet();\n       \
    \ if (keySet.size() == 1) {\n            return keySet.iterator().next();\n  \
    \      }\n        Set<String> maxSet = new TreeSet<>();\n        for (String word\
    \ : keySet) {\n            int count = map.get(word);\n            if (count >\
    \ maxSet.size()) {\n                maxSet.add(word);\n            }\n       \
    \ }\n        return maxSet.iterator().next();", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    map.put(c, map.get(c) + 1);\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \ }\n        Integer maxValue = Collections.max(map.values());\n        String\
    \ maxKey = map.entrySet().stream().filter(e -> e.getValue() == maxValue).map(Map.Entry::getKey).collect(Collectors.toList()).get(0);\n\
    \        return maxKey;", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        while (iterator.hasNext()) {\n      \
    \      String key = iterator.next();\n            int value = map.get(key);\n\
    \            if (value > map.size()) {\n                return key;\n        \
    \    }\n        }\n        return null;", "        Map<String, Integer> map =\
    \ new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = 0;\n            for (char c : word.toCharArray()) {\n                map.putIfAbsent(Character.toString(c),\
    \ 0);\n                map.putIfAbsent(Character.toString(c), map.get(c) + 1);\n\
    \            }\n        }\n        Collection<Map.Entry<String, Integer>> entries\
    \ = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (char c : word.toCharArray()) {\n                Integer count = map.get(c);\n\
    \                if (count == null) {\n                    count = 0;\n      \
    \          }\n                map.put(c, count + 1);\n            }\n        }\n\
    \        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n  \
    \      Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n     \
    \   return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (char c : word.toCharArray()) {\n                count += map.getOrDefault(String.valueOf(c),\
    \ 0);\n                map.put(String.valueOf(c), count + 1);\n            }\n\
    \        }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        while (iterator.hasNext()) {\n      \
    \      String key = iterator.next();\n            if (map.get(key).equals(keySet.size()))\
    \ {\n                return key;\n            }\n        }\n        return null;",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n                count++;\n            }\n            if (map.size()\
    \ > words.size()) {\n                return word;\n            }\n        }\n\
    \        return words.get(0);", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for(String word : words) {\n            int count = map.get(word);\n\
    \            map.put(word, count + 1);\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Set<Map.Entry<String, Integer>>\
    \ entrySet = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (char c : word.toCharArray()) {\n                if (map.containsKey(c))\
    \ {\n                    map.put(c, map.get(c) + 1);\n                } else {\n\
    \                    map.put(c, 1);\n                }\n                count++;\n\
    \            }\n            if (map.size() > words.size()) {\n               \
    \ return word;\n            }\n        }\n        return words.get(0);", "   \
    \     Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                count += map.get(c);\n                if (count > map.getOrDefault(c,\
    \ 0))\n                    map.put(c, count);\n            }\n        }\n    \
    \    Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n      \
    \  Map.Entry<String, Integer> maxEntry = entries.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (char c : word.toCharArray()) {\n                count += map.getOrDefault(Character.toString(c),\
    \ 0);\n                map.put(Character.toString(c), count + 1);\n          \
    \  }\n        }\n        Set<Map.Entry<String, Integer>> entrySet = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (char c : word.toCharArray()) {\n                if (map.containsKey(c))\
    \ {\n                    map.put(c, map.get(c) + 1);\n                } else {\n\
    \                    map.put(c, 1);\n                }\n                count++;\n\
    \            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Collection<Map.Entry<String, Integer>>\
    \ entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Set<String> keySet = map.keySet();\n        Collections.sort(keySet);\n\
    \        String maxKey = keySet.get(0);\n        int maxCount = map.get(maxKey);\n\
    \        for (String key : keySet) {\n            if (map.get(key) > maxCount)\
    \ {\n                maxKey = key;\n                maxCount = map.get(key);\n\
    \            }\n        }\n        return maxKey;", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            map.put(word, count == null ? 1 : count\
    \ + 1);\n        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : set) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keySet = map.keySet();\n        Collections.sort(keySet);\n\
    \        String maxKey = keySet.get(0);\n        int maxValue = map.get(maxKey);\n\
    \        for (String key : keySet) {\n            if (map.get(key) == maxValue)\
    \ {\n                maxKey = key;\n                maxValue = map.get(key);\n\
    \            }\n        }\n        return maxKey;", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : set) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        words.stream().forEach(w -> map.put(w, map.getOrDefault(w,\
    \ 0) + 1));\n        return words.stream().filter(w -> map.get(w) == map.getOrDefault(w,\
    \ 0)).findFirst().orElse(null);", "        Map<String, Integer> counts = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = counts.get(word);\n\
    \            if (count == null) {\n                counts.put(word, 1);\n    \
    \        } else {\n                counts.put(word, count + 1);\n            }\n\
    \        }\n        Integer maxCount = null;\n        for (String word : counts.keySet())\
    \ {\n            if (maxCount == null || counts.get(word).compareTo(maxCount)\
    \ < 0) {\n                maxCount = counts.get(word);\n            }\n      \
    \  }\n        return maxCount == null ? null : counts.entrySet().stream().filter(e\
    \ -> e.getValue().equals(maxCount)).map(e -> e.getKey()).findFirst().get();",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                map.putIfAbsent(String.valueOf(c), 0);\n                map.putIfAbsent(String.valueOf(c),\
    \ map.getOrDefault(String.valueOf(c), 0) + 1);\n                count++;\n   \
    \         }\n            if (count > map.getOrDefault(String.valueOf(word), 0))\
    \ {\n                map.put(String.valueOf(word), count);\n            }\n  \
    \      }\n        Collections.sort(map.entrySet(), Comparator.comparing(Map.Entry::getValue).reversed());\n\
    \        return map.entrySet().stream().findFirst().get().getKey();", "      \
    \  Map<String, Integer> map = new HashMap<>();\n        for (String word : words)\
    \ {\n            int count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for(String word : words) {\n      \
    \      int count = 0;\n            for(char c : word.toCharArray()) {\n      \
    \          if(map.containsKey(c)) {\n                    map.put(c, map.get(c)\
    \ + 1);\n                } else {\n                    map.put(c, 1);\n      \
    \          }\n                count++;\n            }\n            if(count >\
    \ map.size()) {\n                map.put(word, count);\n            }\n      \
    \  }\n        Collection<String> result = new ArrayList<>();\n        for(String\
    \ word : map.keySet()) {\n            if(map.get(word) == map.size()) {\n    \
    \            result.add(word);\n            }\n        }\n        if(result.size()\
    \ > 1) {\n            return findMax(result);\n        } else {\n            return\
    \ result.get(0);\n        }", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        List<String> result = new ArrayList<>(map.keySet());\n      \
    \  Collections.sort(result);\n        return result.isEmpty() ? null : result.get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                count = 1;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        Collection<String>\
    \ keys = map.keySet();\n        if (keys.size() == 1) {\n            return keys.get(0);\n\
    \        }\n        int maxCount = keys.size();\n        for (String key : keys)\
    \ {\n            if (map.get(key) > maxCount) {\n                maxCount = map.get(key);\n\
    \            }\n        }\n        return keys.get(0);", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         count = 1;\n            } else {\n                count++;\n       \
    \     }\n            map.put(word, count);\n        }\n        Collections.sort(words,\
    \ new Comparator<String>() {\n            public int compare(String o1, String\
    \ o2) {\n                return map.get(o2) - map.get(o1);\n            }\n  \
    \      });\n        return words.get(0);", "        Map<String, Integer> map =\
    \ new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Collection<String> maxWords = map.entrySet().stream()\n\
    \                .sorted(Map.Entry.comparingByValue())\n                .map(Map.Entry::getKey)\n\
    \                .collect(Collectors.toList());\n        return maxWords.get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                map.putIfAbsent(String.valueOf(c), 0);\n                map.put(String.valueOf(c),\
    \ map.get(c) + 1);\n                count++;\n            }\n            if (count\
    \ > map.size()) {\n                map.put(word, count);\n            }\n    \
    \    }\n        List<String> result = new ArrayList<>(map.keySet());\n       \
    \ Collections.sort(result);\n        return map.get(result.get(0));", "      \
    \  Map<String, Integer> map = new HashMap<>();\n        for (String word : words)\
    \ {\n            int count = map.get(word);\n            if (count == null) {\n\
    \                map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Iterator<String> iterator = keySet.iterator();\n        int maxCount\
    \ = 0;\n        String maxWord = null;\n        while (iterator.hasNext()) {\n\
    \            String word = iterator.next();\n            int count = map.get(word);\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                count = 1;\n            } else {\n                count++;\n\
    \            }\n            map.put(word, count);\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = 0;\n            for (char c : word.toCharArray()) {\n    \
    \            if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collections.sort(map.entrySet(),\
    \ Comparator.comparing(Map.Entry::getValue));\n        return map.entrySet().stream().map(Map.Entry::getKey).collect(Collectors.toList()).get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n            }\n        }\n        Set<Map.Entry<String, Integer>>\
    \ set = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = null;\n\
    \        for (Map.Entry<String, Integer> entry : set) {\n            if (maxEntry\
    \ == null || entry.getValue() > maxEntry.getValue()) {\n                maxEntry\
    \ = entry;\n            }\n        }\n        return maxEntry.getKey();", "  \
    \      Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char c = word.charAt(i);\n                if (map.containsKey(c))\
    \ {\n                    count = map.get(c) + 1;\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \     if (count > map.size()) {\n                map.put(word, count);\n     \
    \       }\n        }\n        Collection<Map.Entry<String, Integer>> entries =\
    \ map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (char c : word.toCharArray()) {\n                if (map.containsKey(c))\
    \ {\n                    map.put(c, map.get(c) + 1);\n                } else {\n\
    \                    map.put(c, 1);\n                }\n                count++;\n\
    \            }\n            if (map.size() > words.size()) {\n               \
    \ return word;\n            }\n        }\n        return null;", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        List<String> result = new ArrayList<>();\n\
    \        for (String word : map.keySet()) {\n            if (map.get(word) ==\
    \ map.get(word).max()) {\n                result.add(word);\n            }\n \
    \       }\n        if (result.size() == 1) {\n            return result.get(0);\n\
    \        }\n        Collections.sort(result);\n        return result.get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                map.putIfAbsent(Character.toString(c), 0);\n            \
    \    map.putIfAbsent(Character.toString(c), map.get(c) + 1);\n               \
    \ count++;\n            }\n            if (count > map.size()) {\n           \
    \     map.put(word, count);\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = entries.stream().max(Map.Entry.comparingByValue()).get();\n        return\
    \ maxEntry.getKey();", "        Map<Character, Integer> map = new HashMap<>();\n\
    \        words.forEach(word -> {\n            for (char c : word.toCharArray())\
    \ {\n                if (!map.containsKey(c)) {\n                    map.put(c,\
    \ 1);\n                } else {\n                    map.put(c, map.get(c) + 1);\n\
    \                }\n            }\n        });\n        Collection<Map.Entry<Character,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<Character, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         count = 1;\n            } else {\n                count++;\n       \
    \     }\n            map.put(word, count);\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Collection<String> keys = map.keySet();\n\
    \        if (keys.size() == 1) {\n            return keys.get(0);\n        }\n\
    \        Collections.sort(keys, new Comparator<String>() {\n            public\
    \ int compare(String o1, String o2) {\n                return map.get(o1).compareTo(map.get(o2));\n\
    \            }\n        });\n        return keys.get(0);", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        List<String> result = new ArrayList<>(map.keySet());\n\
    \        Collections.sort(result);\n        return result.isEmpty() ? null : result.get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                map.put(word, 1);\n            } else {\n               \
    \ map.put(word, count + 1);\n            }\n        }\n        Set<String> keySet\
    \ = map.keySet();\n        Iterator<String> iterator = keySet.iterator();\n  \
    \      int maxCount = keySet.size();\n        String maxWord = null;\n       \
    \ while (iterator.hasNext()) {\n            String word = iterator.next();\n \
    \           int count = map.get(word);\n            if (count > maxCount) {\n\
    \                maxCount = count;\n                maxWord = word;\n        \
    \    }\n        }\n        return maxWord;", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            int count\
    \ = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = set.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> counts = new\
    \ HashMap<>();\n        for (String word : words) {\n            Integer count\
    \ = counts.get(word);\n            if (count == null) {\n                counts.put(word,\
    \ 1);\n            } else {\n                counts.put(word, count + 1);\n  \
    \          }\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        String maxWord = null;\n        for (String word : counts.keySet()) {\n\
    \            if (counts.get(word) == maxCount) {\n                maxWord = word;\n\
    \                break;\n            }\n        }\n        return maxWord;", " \
    \       Map<String, Integer> map = new HashMap<>();\n        for (String word\
    \ : words) {\n            int count = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char c = word.charAt(i);\n                if (map.containsKey(c))\
    \ {\n                    count = map.get(c) + 1;\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \     if (count > map.size()) {\n                map.put(word, count);\n     \
    \       }\n        }\n        Collection<Map.Entry<String, Integer>> entries =\
    \ map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (char c : word.toCharArray()) {\n                map.putIfAbsent(String.valueOf(c),\
    \ 0);\n                map.putIfAbsent(String.valueOf(c), map.getOrDefault(String.valueOf(c),\
    \ 0) + 1);\n                count++;\n            }\n            if (count > map.size())\
    \ {\n                map.put(word, count);\n            }\n        }\n       \
    \ Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n        Map.Entry<String,\
    \ Integer> maxEntry = Collections.max(entries);\n        return maxEntry.getKey();",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = map.containsKey(word) ? map.get(word) : 0;\n\
    \            map.put(word, count + 1);\n        }\n        Integer maxValue =\
    \ Collections.max(map.values());\n        for (Map.Entry<String, Integer> entry\
    \ : map.entrySet()) {\n            if (entry.getValue() == maxValue) {\n     \
    \           return entry.getKey();\n            }\n        }\n        return null;",
  "        Map<String, Integer> count = new HashMap<>();\n        for (String word\
    \ : words) {\n            Integer count = count.get(word);\n            if (count\
    \ == null) {\n                count.put(word, 1);\n            } else {\n    \
    \            count.put(word, count + 1);\n            }\n        }\n        Integer\
    \ maxCount = count.values().stream().max(Integer::compareTo).get();\n        return\
    \ count.entrySet().stream().filter(entry -> entry.getValue() == maxCount).map(Map.Entry::getKey).findFirst().get();",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (map.containsKey(c)) {\n                    map.put(c,\
    \ map.get(c) + 1);\n                } else {\n                    map.put(c, 1);\n\
    \                }\n                count++;\n            }\n            if (count\
    \ > map.size()) {\n                map.put(word, count);\n            }\n    \
    \    }\n        Collection<String> result = new ArrayList<>();\n        for (Map.Entry<String,\
    \ Integer> entry : map.entrySet()) {\n            if (entry.getValue() > result.size())\
    \ {\n                result.add(entry.getKey());\n            }\n        }\n \
    \       if (result.size() > 1) {\n            return result.get(0);\n        }\
    \ else {\n            return result.get(0);\n        }", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Set<Map.Entry<String, Integer>>\
    \ entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n  \
    \      Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : set) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.containsKey(word) ? map.get(word) : 0;\n            map.put(word,\
    \ count + 1);\n        }\n        Integer maxValue = Collections.max(map.values());\n\
    \        String maxKey = map.entrySet().stream().filter(e -> e.getValue() == maxValue).map(Map.Entry::getKey).collect(Collectors.toList()).get(0);\n\
    \        return maxKey;", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Integer maxCount = Collections.max(map.values());\n        if\
    \ (maxCount == null) {\n            return null;\n        }\n        for (Map.Entry<String,\
    \ Integer> entry : map.entrySet()) {\n            if (entry.getValue() == maxCount)\
    \ {\n                return entry.getKey();\n            }\n        }\n      \
    \  return null;", "        Map<Character, Integer> counts = new HashMap<>();\n\
    \        for (String word : words) {\n            for (char c : word.toCharArray())\
    \ {\n                if (counts.containsKey(c)) {\n                    counts.put(c,\
    \ counts.get(c) + 1);\n                } else {\n                    counts.put(c,\
    \ 1);\n                }\n            }\n        }\n        Integer maxCount =\
    \ Collections.max(counts.values());\n        Integer maxCountKey = counts.entrySet().stream().filter(e\
    \ -> e.getValue() == maxCount).map(Map.Entry::getKey).findFirst().get();\n   \
    \     return words.stream().filter(w -> w.contains(maxCountKey)).findFirst().get();",
  "        Map<String, Integer> map = new HashMap<>();\n        for(String word :\
    \ words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        \n        Set<String> keySet\
    \ = map.keySet();\n        \n        Optional<String> maxKey = keySet.stream().max(Comparator.comparing(s\
    \ -> map.get(s)));\n        \n        if(maxKey.isPresent()) {\n            return\
    \ maxKey.get();\n        }\n        \n        return null;", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Set<String> uniqueWords = new\
    \ HashSet<>(map.keySet());\n        if (uniqueWords.size() == 1) {\n         \
    \   return uniqueWords.iterator().next();\n        }\n        Collections.sort(uniqueWords);\n\
    \        return uniqueWords.iterator().next();", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    map.put(c, map.get(c) + 1);\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \ }\n        Set<Map.Entry<String, Integer>> entrySet = map.entrySet();\n    \
    \    Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : entrySet) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : set) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  map.putIfAbsent(Character.toString(c), 0);\n                map.putIfAbsent(Character.toString(c),\
    \ map.get(c) + 1);\n                count++;\n            }\n            if (map.size()\
    \ > words.size()) {\n                return word;\n            }\n        }\n\
    \        return null;", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        while (iterator.hasNext()) {\n      \
    \      String key = iterator.next();\n            int value = map.get(key);\n\
    \            if (value > map.size()) {\n                return key;\n        \
    \    }\n        }\n        return null;", "        Map<Character, Integer> map\
    \ = new HashMap<>();\n        for (String word : words) {\n            for (char\
    \ c : word.toCharArray()) {\n                if (!map.containsKey(c)) {\n    \
    \                map.put(c, 1);\n                } else {\n                  \
    \  map.put(c, map.get(c) + 1);\n                }\n            }\n        }\n\
    \        Set<Map.Entry<Character, Integer>> set = map.entrySet();\n        Map.Entry<Character,\
    \ Integer> maxEntry = null;\n        for (Map.Entry<Character, Integer> entry\
    \ : set) {\n            if (maxEntry == null || entry.getValue() > maxEntry.getValue())\
    \ {\n                maxEntry = entry;\n            }\n        }\n        return\
    \ maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        List<String> result\
    \ = new ArrayList<>();\n        for (Map.Entry<String, Integer> entry : map.entrySet())\
    \ {\n            if (entry.getValue() > result.size()) {\n                result.add(entry.getKey());\n\
    \            }\n        }\n        if (result.size() > 1) {\n            return\
    \ result.get(0);\n        }\n        return result.get(0);", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       Integer count = map.get(word);\n            if (count == null) {\n   \
    \             map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Set<Map.Entry<String, Integer>>\
    \ entrySet = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Integer maxValue = Collections.max(map.values());\n        for\
    \ (String word : map.keySet()) {\n            if (maxValue == map.get(word)) {\n\
    \                return word;\n            }\n        }\n        return null;",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                map.putIfAbsent(Character.toString(c), 0);\n            \
    \    map.put(c, map.get(c) + 1);\n                count++;\n            }\n  \
    \          if (count > map.size()) {\n                map.put(word, count);\n\
    \            }\n        }\n        Collections.sort(map.entrySet(), Map.Entry.comparingByValue());\n\
    \        return map.entrySet().stream().findFirst().get().getKey();"]
stop_tokens:
- "\n    }\n"
