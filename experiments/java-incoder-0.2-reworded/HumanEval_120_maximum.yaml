name: HumanEval_120_maximum
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given an array array list arr of integers and a positive\
  \ integer k, return a sorted array list \n    // of length k with the maximum k\
  \ numbers in arr.\n    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
  \ (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l,\
  \ (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
  \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n    //\
  \ (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The length\
  \ of the array array list will be in the range of [1, 1000].\n    // 2. The elements\
  \ in the array array list will be in the range of [-1000, 1000].\n    // 3. 0 <=\
  \ k <= len(arr)\n    public static ArrayList<Long> maximum(ArrayList<Long> arr,\
  \ long k) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(maximum((new\
  \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
  \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
  \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
  \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
  \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
  \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
  \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
  \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
  \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))), (2l)).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n    assert(maximum((new\
  \ ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l,\
  \ (long)10l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new\
  \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<>();\n        long max\
    \ = 0;\n        long min = 0;\n        long sum = 0;\n        long count = 0;\n\
    \        for (long i : arr) {\n            sum += i;\n            if (sum > max)\
    \ {\n                max = sum;\n            }\n            if (sum < min) {\n\
    \                min = sum;\n            }\n            count++;\n        }\n\
    \        if (count > k) {\n            k = count;\n        }\n        long mid\
    \ = max / 2;\n        long mid2 = min / 2;\n        long mid3 = sum / 2;\n   \
    \     long mid4 = max / 3;\n        long mid5 = min / 3;\n        long mid6 =\
    \ sum / 3;\n        long mid7 = max / 4;\n        long mid8 = min / 4;\n     \
    \   long mid9 = sum / 4;\n        long mid10 = max / 5;\n        long mid11 =\
    \ min / 5;\n        long mid12 = sum / 5;\n        long mid13 = max / 6;\n   \
    \     long mid14 = min / 6;\n        long mid15 = sum / 6;\n        long mid16\
    \ = max / 7;\n        long mid17 = min / 7;\n        long mid18 = sum / 7;\n \
    \       long mid19 = max / 8;\n        long mid20 = min / 8;\n        long mid21\
    \ = sum / 8;\n        long mid22 = max / 9;\n        long mid23 = min / 9;\n \
    \       long mid24 = sum / 9;\n        long mid25 = max / 10;\n        long mid26\
    \ = min / 10;\n        long mid27 = sum / 10;\n        long mid28 = max / 11;\n\
    \        long mid29 = min / 11;\n        long mid30 = sum / 11;\n        long\
    \ mid31 = max / 12;\n        long mid32 = min / 12;\n        long mid33 = sum\
    \ / 12;\n        long mid34 = max / 13;\n        long mid35 = min / 13;\n    \
    \    long mid36 = sum / 13;\n        long mid37 = max / 14;\n        long mid38\
    \ = min / 14;\n        long mid39 = sum / 14;\n        long mid40 = max / 15;\n\
    \        long mid41 = min / 15;\n        long mid42 = sum / 15;\n        long\
    \ mid43 = max / 16;\n        long mid44 = min / 16;\n        long mid45 = sum\
    \ / 16;\n        long mid46 = max / 17;\n        long mid47 = min / 17;\n    \
    \    long mid48 = sum / 17;\n        long mid49 = max / 18;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long min = 0;\n\
    \        long sum = 0;\n        for (long i : arr) {\n            sum += i;\n\
    \            if (sum > max) {\n                max = sum;\n            }\n   \
    \         if (sum < min) {\n                min = sum;\n            }\n      \
    \  }\n        long count = 0;\n        for (long i : arr) {\n            if (i\
    \ == max) {\n                result.add(max);\n                count++;\n    \
    \        }\n            if (i == min) {\n                result.add(min);\n  \
    \              count++;\n            }\n        }\n        if (count > k) {\n\
    \            ArrayList<Long> temp = new ArrayList<>();\n            for (long\
    \ i : arr) {\n                if (result.size() < k) {\n                    temp.add(i);\n\
    \                }\n            }\n            result = temp;\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long max = 0;\n        for (long i : arr) {\n            if (max < i)\
    \ {\n                max = i;\n            }\n        }\n        long start =\
    \ max;\n        long end = max;\n        while (end < arr.size()) {\n        \
    \    end = end + k;\n            if (end > arr.size()) {\n                end\
    \ = arr.size();\n            }\n            if (arr.contains(start) && arr.contains(end))\
    \ {\n                result.add(start);\n                result.add(end);\n  \
    \              start = end;\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
    \        long max = 0;\n        long maxIndex = 0;\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            max = Math.max(max, arr.get(i));\n         \
    \   if(max > k) {\n                result.add(arr.get(i));\n                maxIndex\
    \ = i;\n            }\n        }\n        ArrayList<Long> newArr = new ArrayList<>(result);\n\
    \        newArr.add(arr.get(maxIndex));\n        return newArr;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long max = 0;\n        for (long i\
    \ : arr) {\n            if (max < i) {\n                max = i;\n           \
    \ }\n        }\n        if (max > k) {\n            max = k;\n        }\n    \
    \    for (long i : arr) {\n            if (max < i) {\n                result.add(i);\n\
    \                max = i;\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        long max = 0;\n  \
    \      for (long num : arr) {\n            if (num > max) {\n                max\
    \ = num;\n            }\n        }\n        if (max <= k) {\n            return\
    \ arr;\n        }\n        long mid = max / 2;\n        ArrayList<Long> left =\
    \ new ArrayList<>();\n        ArrayList<Long> right = new ArrayList<>();\n   \
    \     for (long num : arr) {\n            if (num < mid) {\n                left.add(num);\n\
    \            } else {\n                right.add(num);\n            }\n      \
    \  }\n        left = maximum(left, k);\n        right = maximum(right, k);\n \
    \       ArrayList<Long> leftMax = maximum(left, k - mid);\n        ArrayList<Long>\
    \ rightMax = maximum(right, k - mid);\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        result.addAll(leftMax);\n        result.addAll(rightMax);\n        result.addAll(left);\n\
    \        result.addAll(right);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long max = 0;\n        long min = Long.MAX_VALUE;\n\
    \        for (long num : arr) {\n            if (num > max) {\n              \
    \  max = num;\n            }\n            if (num < min) {\n                min\
    \ = num;\n            }\n        }\n        long mid = min + (max - min) / 2;\n\
    \        long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n        long mid4\
    \ = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n\
    \        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9\
    \ = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n\
    \        long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long\
    \ mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15\
    \ / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n   \
    \     long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21\
    \ = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 /\
    \ 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n     \
    \   long mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28\
    \ = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 /\
    \ 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n     \
    \   long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35\
    \ = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 /\
    \ 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n     \
    \   long mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42\
    \ = mid41 / 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 /\
    \ 2;\n        long mid45 = mid44 / 2;\n        long mid46 = mid45 / 2;\n     \
    \   long mid47", "        ArrayList<Long> result = new ArrayList<>();\n      \
    \  Arrays.sort(arr);\n        long max = 0;\n        for (long i : arr) {\n  \
    \          if (max < i) {\n                max = i;\n            }\n        }\n\
    \        if (max < k) {\n            k = max;\n        }\n        long count =\
    \ 0;\n        for (long i : arr) {\n            if (count < k) {\n           \
    \     result.add(i);\n                count++;\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long max = 0;\n        for (long i : arr) {\n            if (max < i)\
    \ {\n                max = i;\n            }\n        }\n        if (max < k)\
    \ {\n            k = max;\n        }\n        long start = 0;\n        long end\
    \ = arr.size() - 1;\n        while (start < end) {\n            long mid = (start\
    \ + end) / 2;\n            if (arr[mid] > k) {\n                end = mid - 1;\n\
    \            } else {\n                start = mid + 1;\n            }\n     \
    \   }\n        while (start < arr.size()) {\n            if (arr[start] > k) {\n\
    \                result.add(arr[start]);\n                start++;\n         \
    \   } else {\n                break;\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> res = new ArrayList<Long>();\n        long\
    \ max = 0;\n        long maxIndex = 0;\n        long min = 0;\n        long minIndex\
    \ = 0;\n        long sum = 0;\n        long sumIndex = 0;\n        long count\
    \ = 0;\n        long countIndex = 0;\n        long sumOfSquare = 0;\n        long\
    \ sumOfSquareIndex = 0;\n        long sumOfSquareOfSum = 0;\n        long sumOfSquareOfSumIndex\
    \ = 0;\n        long sumOfSquareOfSumOfSum = 0;\n        long sumOfSquareOfSumOfSumIndex\
    \ = 0;\n        long sumOfSquareOfSumOfSumOfSum = 0;\n        long sumOfSquareOfSumOfSumOfSumIndex\
    \ = 0;\n        long sumOfSquareOfSumOfSumOfSumOfSum = 0;\n        long sumOfSquareOfSumOfSumOfSumOfSumIndex\
    \ = 0;\n        long sumOfSquareOfSumOfSumOfSumOfSumOfSum = 0;\n        long sumOfSquareOfSumOfSumOfSumOfSumOfSumIndex\
    \ = 0;\n        long sumOfSquareOfSumOfSumOfSumOfSumOfSumOfSum = 0;\n        long\
    \ sumOfSquareOfSumOfSumOfSumOfSumOfSumOfSumIndex = 0;\n        long sumOfSquareOfSumOfSumOfSumOfSumOfSumOfSumOfSum\
    \ = 0;\n        long sumOfSquareOfSumOfSumOfSumOfSumOfSumOfSumOfSumIndex = 0;\n\
    \        long sumOfSquareOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSum = 0;\n     \
    \   long sumOfSquareOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumIndex = 0;\n     \
    \   long sumOfSquareOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSum = 0;\n     \
    \   long sumOfSquareOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumIndex = 0;\n\
    \        long sumOfSquareOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSum =\
    \ 0;\n        long sumOfSquareOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumIndex\
    \ = 0;\n        long sumOfSquareOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSum\
    \ = 0;\n        long sumOfSquareOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumIndex\
    \ = 0;\n        long sumOfSquareOfSumOfSumOfSumOfSumOfSum", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        Arrays.sort(arr);\n        long max\
    \ = 0;\n        long maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            if(arr.get(i) > max) {\n                max = arr.get(i);\n \
    \               maxIndex = i;\n            }\n        }\n        for(int i = maxIndex;\
    \ i < arr.size(); i++) {\n            if(arr.get(i) > max) {\n               \
    \ max = arr.get(i);\n            }\n        }\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            if(arr.get(i) == max) {\n                result.add(arr.get(i));\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long max = 0;\n        long min = 0;\n       \
    \ long maxIndex = 0;\n        long minIndex = 0;\n        long maxVal = 0;\n \
    \       long minVal = 0;\n        long maxIndex2 = 0;\n        long minIndex2\
    \ = 0;\n        long maxVal2 = 0;\n        long minVal2 = 0;\n        long maxIndex3\
    \ = 0;\n        long minIndex3 = 0;\n        long maxVal3 = 0;\n        long minVal3\
    \ = 0;\n        long maxIndex4 = 0;\n        long minIndex4 = 0;\n        long\
    \ maxVal4 = 0;\n        long minVal4 = 0;\n        long maxIndex5 = 0;\n     \
    \   long minIndex5 = 0;\n        long maxVal5 = 0;\n        long minVal5 = 0;\n\
    \        long maxIndex6 = 0;\n        long minIndex6 = 0;\n        long maxVal6\
    \ = 0;\n        long minVal6 = 0;\n        long maxIndex7 = 0;\n        long minIndex7\
    \ = 0;\n        long maxVal7 = 0;\n        long minVal7 = 0;\n        long maxIndex8\
    \ = 0;\n        long minIndex8 = 0;\n        long maxVal8 = 0;\n        long minVal8\
    \ = 0;\n        long maxIndex9 = 0;\n        long minIndex9 = 0;\n        long\
    \ maxVal9 = 0;\n        long minVal9 = 0;\n        long maxIndex10 = 0;\n    \
    \    long minIndex10 = 0;\n        long maxVal10 = 0;\n        long minVal10 =\
    \ 0;\n        long maxIndex11 = 0;\n        long minIndex11 = 0;\n        long\
    \ maxVal11 = 0;\n        long minVal11 = 0;\n        long maxIndex12 = 0;\n  \
    \      long minIndex12 = 0;\n        long maxVal12 = 0;\n        long minVal12\
    \ = 0;\n        long maxIndex13 = 0;\n        long minIndex13 = 0;\n        long\
    \ maxVal13 = 0;\n        long minVal13 = 0;\n        long maxIndex14 = 0;\n  \
    \      long minIndex14 = 0;\n        long maxVal14 = 0;\n        long minVal14\
    \ = 0;\n        long maxIndex15 = 0;\n        long minIndex15 = 0;\n        long\
    \ maxVal15 = 0;\n        long minVal15 = 0;\n        long maxIndex16 = 0;\n  \
    \      long minIndex16 = 0;\n        long maxVal16 = 0;\n        long minVal16\
    \ = 0;\n        long maxIndex17 = 0;\n        long minIndex17 = 0;\n        long\
    \ maxVal17 = 0;\n        long minVal17 = 0;\n        long maxIndex18 = 0;\n  \
    \      long minIndex18 = 0;\n        long maxVal18 = 0;\n        long minVal18\
    \ = 0;\n        long maxIndex19 = 0;\n        long ", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           if(arr.get(i) > max) {\n                max = arr.get(i);\n      \
    \          maxIndex = i;\n            }\n        }\n        result.add(max);\n\
    \        for(int i = maxIndex; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        result.add(max);\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
    \        long max = 0;\n        long cur = 0;\n        for(long i : arr) {\n \
    \           cur = i;\n            if(cur > max) {\n                max = cur;\n\
    \            }\n        }\n        while(max != 0) {\n            result.add(max);\n\
    \            max -= 1;\n        }\n        return result;", "        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long max = 0;\n        long min = Long.MAX_VALUE;\n\
    \        for (long i : arr) {\n            if (i < min) {\n                min\
    \ = i;\n            }\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (max > k) {\n            max = k;\n    \
    \    }\n        if (min < -k) {\n            min = -k;\n        }\n        if\
    \ (max < min) {\n            max = min;\n        }\n        if (max > k) {\n \
    \           max = k;\n        }\n        if (min < -k) {\n            min = -k;\n\
    \        }\n        if (max < min) {\n            max = min;\n        }\n    \
    \    if (max > k) {\n            max = k;\n        }\n        if (min < -k) {\n\
    \            min = -k;\n        }\n        if (max < min) {\n            max =\
    \ min;\n        }\n        if (max > k) {\n            max = k;\n        }\n \
    \       if (min < -k) {\n            min = -k;\n        }\n        if (max < min)\
    \ {\n            max = min;\n        }\n        if (max > k) {\n            max\
    \ = k;\n        }\n        if (min < -k) {\n            min = -k;\n        }\n\
    \        if (max < min) {\n            max = min;\n        }\n        if (max\
    \ > k) {\n            max = k;\n        }\n        if (min < -k) {\n         \
    \   min = -k;\n        }\n        if (max < min) {\n            max = min;\n \
    \       }\n        if (max > k) {\n            max = k;\n        }\n        if\
    \ (min < -k) {\n            min = -k;\n        }\n        if (max < min) {\n \
    \           max = min;\n        }\n        if (max > k) {\n            max = k;\n\
    \        }\n        if (min < -k) {\n            min = -k;\n        }\n      \
    \  if (max < min) {\n            max = min;\n        }\n        if (max > k) {\n\
    \            max = k;\n        }\n        if (min < -k) {\n            min = -k;\n\
    \        }\n        if (max < min) {\n            max = min;\n        }\n    \
    \    if (max > k) {\n            max = k;\n        }\n        if (min < -k) {\n\
    \            min = -k;\n        }\n        if (max < min) {\n            max =\
    \ min;\n        }\n        if (max > k) {\n            max = k;\n        }\n \
    \       if (min < -k) {\n            min = -k;\n        }\n        if (max < min)\
    \ {\n            max = min;\n        }\n        if (max > k) {\n            max\
    \ = k;\n        }\n        if (min < -k) {\n            min = -k;\n        }\n\
    \        if (max < ", "        ArrayList<Long> result = new ArrayList<>();\n \
    \       Arrays.sort(arr);\n        long max = arr.get(arr.size() - 1);\n     \
    \   long maxIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n     \
    \       if (arr.get(i) == max) {\n                maxIndex = i;\n            }\n\
    \        }\n        if (maxIndex - k >= 0) {\n            for (int i = maxIndex\
    \ - k; i < maxIndex; i++) {\n                result.add(arr.get(i));\n       \
    \     }\n        }\n        return result;", "        ArrayList<Long> result =\
    \ new ArrayList<Long>();\n        Arrays.sort(arr);\n        long max = 0;\n \
    \       long maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n  \
    \          if(arr.get(i) > max) {\n                max = arr.get(i);\n       \
    \         maxIndex = i;\n            }\n        }\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            if(arr.get(i) == max) {\n                result.add(arr.get(maxIndex));\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long max = 0;\n        for (long i : arr) {\n\
    \            if (max < i) {\n                max = i;\n            }\n       \
    \ }\n        if (max > 0) {\n            while (max >= k) {\n                result.add(max--);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> res\
    \ = new ArrayList<>();\n        Arrays.sort(arr);\n        long max = 0;\n   \
    \     long maxIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n   \
    \         if (arr.get(i) > max) {\n                max = arr.get(i);\n       \
    \         maxIndex = i;\n            }\n        }\n        if (maxIndex == arr.size()\
    \ - 1) {\n            while (maxIndex >= 0) {\n                res.add(arr.get(maxIndex--));\n\
    \            }\n        } else {\n            while (maxIndex < arr.size() - 1)\
    \ {\n                res.add(arr.get(maxIndex++));\n            }\n        }\n\
    \        if (k == res.size()) {\n            return res;\n        } else {\n \
    \           return res.subList(0, k);\n        }", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        Arrays.sort(arr);\n        long max = 0;\n\
    \        long maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           if(arr.get(i) > max) {\n                max = arr.get(i);\n      \
    \          maxIndex = i;\n            }\n        }\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            if(arr.get(i) == max) {\n                result.add(arr.get(maxIndex));\n\
    \            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
