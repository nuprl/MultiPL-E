language: java
name: HumanEval_11_string_xor
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            char ca = a.charAt(i);\n\
    \            char cb = b.charAt(i);\n            int res = ca ^ cb;\n        \
    \    if (res < '0' || res > '9') {\n                sb.append(\"0\");\n      \
    \      }\n            sb.append(Integer.toString(res, 2));\n        }\n      \
    \  return sb.toString();\n    }\n    public static void main(String[] args) {\n\
    \    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n   \
    \ assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr05tkfht.java:27)\n"
  stdout: ''
  timestamp: 1659792973
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            int aChar = a.charAt(i);\n\
    \            int bChar = b.charAt(i);\n            if (aChar != bChar) {\n   \
    \             sb.append(aChar);\n            } else {\n                sb.append(0);\n\
    \            }\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm3y9wt6s.java:27)\n"
  stdout: ''
  timestamp: 1659792973
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            int x = Integer.parseInt(a.substring(i,\
    \ i + 1), 2);\n            int y = Integer.parseInt(b.substring(i, i + 1), 2);\n\
    \            int z = x ^ y;\n            result.append(Integer.toBinaryString(z));\n\
    \        }\n        return result.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792973
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for(int i = 0; i < a.length(); i++) {\n            int val = Integer.parseInt(a.substring(i,\
    \ i+1), 2);\n            int val2 = Integer.parseInt(b.substring(i, i+1), 2);\n\
    \            int res = val ^ val2;\n            String res = Integer.toBinaryString(res);\n\
    \            sb.append(res);\n        }\n        return sb.toString();\n    }\n\
    \    public static void main(String[] args) {\n    assert(stringXor((\"111000\"\
    ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\"\
    )).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdo0rekwp.java:19: error: variable res is already defined in method\
    \ stringXor(String,String)\n            String res = Integer.toBinaryString(res);\n\
    \                   ^\n/tmp/tmpdo0rekwp.java:19: error: incompatible types: String\
    \ cannot be converted to int\n            String res = Integer.toBinaryString(res);\n\
    \                                                ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659792973
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for(int i = 0; i < a.length(); i++) {\n            int val = a.charAt(i)\
    \ - '0';\n            int val2 = b.charAt(i) - '0';\n            int res = val\
    \ ^ val2;\n            char ch = (char) res;\n            sb.append(ch);\n   \
    \     }\n        return sb.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpan01t6qp.java:25)\n"
  stdout: ''
  timestamp: 1659792973
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            String aChar = a;\n\
    \            String bChar = b;\n            int aIndex = i;\n            int bIndex\
    \ = i;\n            while (aIndex < a.length() && bIndex < b.length()) {\n   \
    \             aChar = aChar.substring(0, aIndex) + aChar.substring(aIndex + 1,\
    \ aIndex + 2);\n                bChar = bChar.substring(0, bIndex) + bChar.substring(bIndex\
    \ + 1, bIndex + 2);\n                aIndex += 2;\n                bIndex += 2;\n\
    \            }\n            result.append(aChar);\n            result.append(bChar);\n\
    \        }\n        return result.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end 2, length 1\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.stringXor(tmp8g7ckapz.java:21)\n\
    \tat Problem.main(tmp8g7ckapz.java:32)\n"
  stdout: ''
  timestamp: 1659792973
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            int aChar = Integer.parseInt(a.substring(i,\
    \ i + 1), 2);\n            int bChar = Integer.parseInt(b.substring(i, i + 1),\
    \ 2);\n            int xor = aChar ^ bChar;\n            result.append(Integer.toBinaryString(xor));\n\
    \        }\n        return result.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792973
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            char ca = a.charAt(i);\n\
    \            char cb = b.charAt(i);\n            int res = ca ^ cb;\n        \
    \    String s = Integer.toString(res);\n            sb.append(s);\n        }\n\
    \        return sb.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n\
    \    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792973
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i));\n\
    \        }\n        for (int i = 0; i < b.length(); i++) {\n            sb.append(b.charAt(i));\n\
    \        }\n        return sb.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyf0c7b84.java:24)\n"
  stdout: ''
  timestamp: 1659792973
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            int aChar = a.charAt(i);\n\
    \            int bChar = b.charAt(i);\n            int xor = aChar ^ bChar;\n\
    \            if (xor > 9) {\n                xor = xor - 10;\n            }\n\
    \            if (xor < 10) {\n                xor = xor + 10;\n            }\n\
    \            sb.append((char) xor);\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppg6ot_ul.java:30)\n"
  stdout: ''
  timestamp: 1659792973
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            int val = Integer.parseInt(a.substring(i,\
    \ i + 1), 2);\n            int val2 = Integer.parseInt(b.substring(i, i + 1),\
    \ 2);\n            sb.append((val ^ val2) > 9 ? \"\" + (val ^ val2) : \"0\" +\
    \ val ^ val2);\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxw5lwfpq.java:18: error: bad operand types for binary operator\
    \ '^'\n            sb.append((val ^ val2) > 9 ? \"\" + (val ^ val2) : \"0\" +\
    \ val ^ val2);\n                                                             \
    \          ^\n  first type:  String\n  second type: int\n1 error\n"
  stdout: ''
  timestamp: 1659792973
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            int aChar = Integer.parseInt(a.substring(i,\
    \ i + 1), 2);\n            int bChar = Integer.parseInt(b.substring(i, i + 1),\
    \ 2);\n            int xor = aChar ^ bChar;\n            result.append(Integer.toBinaryString(xor));\n\
    \        }\n        return result.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792973
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            int aChar = a.charAt(i);\n\
    \            int bChar = b.charAt(i);\n            int xor = aChar ^ bChar;\n\
    \            if (xor == 0) {\n                sb.append('0');\n            } else\
    \ {\n                sb.append(String.valueOf(xor));\n            }\n        }\n\
    \        return sb.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n\
    \    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792973
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            int aChar = a.charAt(i);\n\
    \            int bChar = b.charAt(i);\n            if (aChar != bChar) {\n   \
    \             result.append(aChar);\n            } else {\n                result.append(bChar);\n\
    \            }\n        }\n        return result.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\"\
    )).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\"\
    )));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrtr7ero.java:27)\n"
  stdout: ''
  timestamp: 1659792973
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            char ca = a.charAt(i);\n\
    \            char cb = b.charAt(i);\n            if (ca == '0' && cb == '0') {\n\
    \                sb.append('0');\n            } else if (ca == '1' && cb == '0')\
    \ {\n                sb.append('1');\n            } else if (ca == '0' && cb ==\
    \ '1') {\n                sb.append('1');\n            } else if (ca == '1' &&\
    \ cb == '1') {\n                sb.append('0');\n            } else {\n      \
    \          sb.append('0');\n            }\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792973
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            int aChar = a.charAt(i);\n\
    \            int bChar = b.charAt(i);\n            result.append(aChar ^ bChar);\n\
    \        }\n        return result.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792973
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            int x = a.charAt(i)\
    \ - '0';\n            int y = b.charAt(i) - '0';\n            int z = x ^ y;\n\
    \            sb.append((char) ('0' + z));\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792973
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            int aChar = a.charAt(i);\n\
    \            int bChar = b.charAt(i);\n            int xor = aChar ^ bChar;\n\
    \            result.append(Integer.toBinaryString(xor));\n        }\n        return\
    \ result.toString();\n    }\n    public static void main(String[] args) {\n  \
    \  assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"\
    1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792973
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            char aChar = a.getCharAt(i);\n\
    \            char bChar = b.getCharAt(i);\n            result.append(aChar ^ bChar);\n\
    \        }\n        return result.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"010010\"\
    )));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo9hb4bv0.java:16: error: cannot find symbol\n            char aChar\
    \ = a.getCharAt(i);\n                          ^\n  symbol:   method getCharAt(int)\n\
    \  location: variable a of type String\n/tmp/tmpo9hb4bv0.java:17: error: cannot\
    \ find symbol\n            char bChar = b.getCharAt(i);\n                    \
    \      ^\n  symbol:   method getCharAt(int)\n  location: variable b of type String\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659792973
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            int aChar = a.charAt(i);\n\
    \            int bChar = b.charAt(i);\n            if (aChar != bChar) {\n   \
    \             sb.append(aChar);\n            } else {\n                sb.append(aChar);\n\
    \            }\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmputox_b6e.java:27)\n"
  stdout: ''
  timestamp: 1659792973
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            int aChar = a.charAt(i);\n\
    \            int bChar = b.charAt(i);\n            if (aChar != bChar) {\n   \
    \             sb.append(aChar);\n            } else {\n                sb.append(aChar);\n\
    \            }\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(stringXor((\"111000\"), (\"101010\")).equals((\"\
    010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"0\")));\n    assert(stringXor((\"\
    0101\"), (\"0000\")).equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmputox_b6e.java:27)\n"
  stdout: ''
  timestamp: 1659792973
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            char c = a.charAt(i);\n\
    \            char d = b.charAt(i);\n            if (c == '0' && d == '0') {\n\
    \                sb.append('0');\n            } else if (c == '0' && d != '0')\
    \ {\n                sb.append('1');\n            } else if (c != '0' && d ==\
    \ '0') {\n                sb.append('1');\n            } else {\n            \
    \    sb.append('0');\n            }\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792973
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < a.length(); i++) {\n            result.append(a.charAt(i));\n\
    \            result.append(b.charAt(i));\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(stringXor((\"\
    111000\"), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"),\
    \ (\"1\")).equals((\"0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctrw9_pr.java:22)\n"
  stdout: ''
