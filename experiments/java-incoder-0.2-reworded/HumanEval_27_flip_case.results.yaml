language: java
name: HumanEval_27_flip_case
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static String flipCase(String string) {\n        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(c\
    \ -> string.setCharAt(charArray.indexOf(c), c));\n        return string;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\
    \")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp777gvuoj.java:14: error: no suitable method found for stream(char[])\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(c -> string.setCharAt(charArray.indexOf(c),\
    \ c));\n              ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n\
    \      (inference variable T#1 has incompatible bounds\n        equality constraints:\
    \ char\n        upper bounds: Object)\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to int[])\n\
    \    method Arrays.stream(long[]) is not applicable\n      (argument mismatch;\
    \ char[] cannot be converted to long[])\n    method Arrays.stream(double[]) is\
    \ not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(c\
    \ -> (char) (c == (char) 'a' ? 'A' : 'a'))\n                .collect(Collectors.joining(\"\
    \"));\n    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\
    \")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
    \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi2tjtkag.java:14: error: no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \                .collect(Collectors.joining(\"\"));\n                ^\n    method\
    \ Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,? super Character>,BiConsumer<R#1,R#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) R#1\n        (actual\
    \ and formal argument lists differ in length))\n    method Stream.<R#2,A>collect(Collector<?\
    \ super Character,A,R#2>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#1,String> cannot\
    \ be converted to Collector<? super Character,A,R#2>))\n  where R#1,T,R#2,A are\
    \ type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture\
    \ of ?\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static String flipCase(String string) {\n        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpavql82cm.java:14: error: no suitable method found for stream(char[])\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n              ^\n\
    \    method Arrays.<T#1>stream(T#1[]) is not applicable\n      (inference variable\
    \ T#1 has incompatible bounds\n        equality constraints: char\n        upper\
    \ bounds: Object)\n    method Arrays.<T#2>stream(T#2[],int,int) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (actual and formal argument\
    \ lists differ in length))\n    method Arrays.stream(int[]) is not applicable\n\
    \      (argument mismatch; char[] cannot be converted to int[])\n    method Arrays.stream(long[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to long[])\n\
    \    method Arrays.stream(double[]) is not applicable\n      (argument mismatch;\
    \ char[] cannot be converted to double[])\n  where T#1,T#2 are type-variables:\n\
    \    T#1 extends Object declared in method <T#1>stream(T#1[])\n    T#2 extends\
    \ Object declared in method <T#2>stream(T#2[],int,int)\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static String flipCase(String string) {\n        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).map(c -> (char) (c\
    \ == (char) c ? Character.toUpperCase(c) : Character.toLowerCase(c))).toArray();\n\
    \        return new String(charArray);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppglsi8wo.java:14: error: no suitable method found for stream(char[])\n\
    \        Arrays.stream(charArray).map(c -> (char) (c == (char) c ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c))).toArray();\n              ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (inference variable T#1 has incompatible bounds\n \
    \       equality constraints: char\n        upper bounds: Object)\n    method\
    \ Arrays.<T#2>stream(T#2[],int,int) is not applicable\n      (cannot infer type-variable(s)\
    \ T#2\n        (actual and formal argument lists differ in length))\n    method\
    \ Arrays.stream(int[]) is not applicable\n      (argument mismatch; char[] cannot\
    \ be converted to int[])\n    method Arrays.stream(long[]) is not applicable\n\
    \      (argument mismatch; char[] cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static String flipCase(String string) {\n        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpavql82cm.java:14: error: no suitable method found for stream(char[])\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n              ^\n\
    \    method Arrays.<T#1>stream(T#1[]) is not applicable\n      (inference variable\
    \ T#1 has incompatible bounds\n        equality constraints: char\n        upper\
    \ bounds: Object)\n    method Arrays.<T#2>stream(T#2[],int,int) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (actual and formal argument\
    \ lists differ in length))\n    method Arrays.stream(int[]) is not applicable\n\
    \      (argument mismatch; char[] cannot be converted to int[])\n    method Arrays.stream(long[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to long[])\n\
    \    method Arrays.stream(double[]) is not applicable\n      (argument mismatch;\
    \ char[] cannot be converted to double[])\n  where T#1,T#2 are type-variables:\n\
    \    T#1 extends Object declared in method <T#1>stream(T#1[])\n    T#2 extends\
    \ Object declared in method <T#2>stream(T#2[],int,int)\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static String flipCase(String string) {\n        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).map(c -> (char) (c\
    \ == (char) c ? Character.toUpperCase(c) : Character.toLowerCase(c))).toArray();\n\
    \        return new String(charArray);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppglsi8wo.java:14: error: no suitable method found for stream(char[])\n\
    \        Arrays.stream(charArray).map(c -> (char) (c == (char) c ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c))).toArray();\n              ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (inference variable T#1 has incompatible bounds\n \
    \       equality constraints: char\n        upper bounds: Object)\n    method\
    \ Arrays.<T#2>stream(T#2[],int,int) is not applicable\n      (cannot infer type-variable(s)\
    \ T#2\n        (actual and formal argument lists differ in length))\n    method\
    \ Arrays.stream(int[]) is not applicable\n      (argument mismatch; char[] cannot\
    \ be converted to int[])\n    method Arrays.stream(long[]) is not applicable\n\
    \      (argument mismatch; char[] cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static String flipCase(String string) {\n        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpavql82cm.java:14: error: no suitable method found for stream(char[])\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n              ^\n\
    \    method Arrays.<T#1>stream(T#1[]) is not applicable\n      (inference variable\
    \ T#1 has incompatible bounds\n        equality constraints: char\n        upper\
    \ bounds: Object)\n    method Arrays.<T#2>stream(T#2[],int,int) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (actual and formal argument\
    \ lists differ in length))\n    method Arrays.stream(int[]) is not applicable\n\
    \      (argument mismatch; char[] cannot be converted to int[])\n    method Arrays.stream(long[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to long[])\n\
    \    method Arrays.stream(double[]) is not applicable\n      (argument mismatch;\
    \ char[] cannot be converted to double[])\n  where T#1,T#2 are type-variables:\n\
    \    T#1 extends Object declared in method <T#1>stream(T#1[])\n    T#2 extends\
    \ Object declared in method <T#2>stream(T#2[],int,int)\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static String flipCase(String string) {\n        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjeriwtsj.java:14: error: no suitable method found for stream(char[])\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \              ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n   \
    \   (inference variable T#1 has incompatible bounds\n        equality constraints:\
    \ char\n        upper bounds: Object)\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to int[])\n\
    \    method Arrays.stream(long[]) is not applicable\n      (argument mismatch;\
    \ char[] cannot be converted to long[])\n    method Arrays.stream(double[]) is\
    \ not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(c\
    \ -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n\
    \    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\"\
    )).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
    \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu3sdzwo2.java:13: error: no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \        return string.chars().mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n\
    \                                                                            \
    \                                                             ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Character>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer\
    \ type-variable(s) R#1\n        (actual and formal argument lists differ in length))\n\
    \    method Stream.<R#2,A>collect(Collector<? super Character,A,R#2>) is not applicable\n\
    \      (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#1,String>\
    \ cannot be converted to Collector<? super Character,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture\
    \ of ?\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static String flipCase(String string) {\n        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return String.valueOf(charArray);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjeriwtsj.java:14: error: no suitable method found for stream(char[])\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::print);\n\
    \              ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n   \
    \   (inference variable T#1 has incompatible bounds\n        equality constraints:\
    \ char\n        upper bounds: Object)\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to int[])\n\
    \    method Arrays.stream(long[]) is not applicable\n      (argument mismatch;\
    \ char[] cannot be converted to long[])\n    method Arrays.stream(double[]) is\
    \ not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static String flipCase(String string) {\n        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).map(c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvye0nfm9.java:14: error: no suitable method found for stream(char[])\n\
    \        Arrays.stream(charArray).map(c -> Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c)).collect(Collectors.joining());\n              ^\n\
    \    method Arrays.<T#1>stream(T#1[]) is not applicable\n      (inference variable\
    \ T#1 has incompatible bounds\n        equality constraints: char\n        upper\
    \ bounds: Object)\n    method Arrays.<T#2>stream(T#2[],int,int) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (actual and formal argument\
    \ lists differ in length))\n    method Arrays.stream(int[]) is not applicable\n\
    \      (argument mismatch; char[] cannot be converted to int[])\n    method Arrays.stream(long[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to long[])\n\
    \    method Arrays.stream(double[]) is not applicable\n      (argument mismatch;\
    \ char[] cannot be converted to double[])\n  where T#1,T#2 are type-variables:\n\
    \    T#1 extends Object declared in method <T#1>stream(T#1[])\n    T#2 extends\
    \ Object declared in method <T#2>stream(T#2[],int,int)\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static String flipCase(String string) {\n        return string.chars().mapToObj(c\
    \ -> (char) (c == Character.toLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n\
    \    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\"\
    )).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
    \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu3sdzwo2.java:13: error: no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \        return string.chars().mapToObj(c -> (char) (c == Character.toLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c))).collect(Collectors.joining());\n\
    \                                                                            \
    \                                                             ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Character>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer\
    \ type-variable(s) R#1\n        (actual and formal argument lists differ in length))\n\
    \    method Stream.<R#2,A>collect(Collector<? super Character,A,R#2>) is not applicable\n\
    \      (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#1,String>\
    \ cannot be converted to Collector<? super Character,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture\
    \ of ?\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static String flipCase(String string) {\n        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::println);\n\
    \        return String.valueOf(charArray);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkoq5q4h7.java:14: error: no suitable method found for stream(char[])\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.toList()).forEach(System.out::println);\n\
    \              ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n   \
    \   (inference variable T#1 has incompatible bounds\n        equality constraints:\
    \ char\n        upper bounds: Object)\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to int[])\n\
    \    method Arrays.stream(long[]) is not applicable\n      (argument mismatch;\
    \ char[] cannot be converted to long[])\n    method Arrays.stream(double[]) is\
    \ not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static String flipCase(String string) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        String uc = Character.toString((char) c);\n            String lc = Character.toString((char)\
    \ Character.toLowerCase(c));\n            String uclc = Character.toString((char)\
    \ Character.toUpperCase(c));\n            sb.append(uclc);\n            sb.append(lc);\n\
    \            sb.append(uc);\n        }\n        return sb.toString();\n    }\n\
    \    public static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\
    \")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0750apk8.java:26)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static String flipCase(String string) {\n        char[] charArray\
    \ = string.toCharArray();\n        Arrays.sort(charArray);\n        return new\
    \ String(charArray);\n    }\n    public static void main(String[] args) {\n  \
    \  assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"\
    hELLO!\")));\n    assert(flipCase((\"These violent delights have violent ends\"\
    )).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3lsu7guf.java:19)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static String flipCase(String string) {\n        StringBuilder builder\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        builder.append(Character.isLowerCase(c) ? Character.toUpperCase(c) :\
    \ Character.toLowerCase(c));\n        }\n        return builder.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\"\
    )).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
    \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static String flipCase(String string) {\n        char[] charArray\
    \ = string.toCharArray();\n        Arrays.sort(charArray);\n        StringBuilder\
    \ builder = new StringBuilder();\n        for (int i = 0; i < charArray.length;\
    \ i++) {\n            if (charArray[i] >= 'a' && charArray[i] <= 'z') {\n    \
    \            builder.append(charArray[i] - 'a' + 'A');\n            } else {\n\
    \                builder.append(charArray[i]);\n            }\n        }\n   \
    \     return builder.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpok3xlay8.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static String flipCase(String string) {\n        char[] charArray\
    \ = string.toCharArray();\n        Arrays.sort(charArray);\n        return new\
    \ String(charArray);\n    }\n    public static void main(String[] args) {\n  \
    \  assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"\
    hELLO!\")));\n    assert(flipCase((\"These violent delights have violent ends\"\
    )).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3lsu7guf.java:19)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static String flipCase(String string) {\n        char[] charArray\
    \ = string.toCharArray();\n        Arrays.sort(charArray);\n        StringBuilder\
    \ builder = new StringBuilder();\n        for (char c : charArray) {\n       \
    \     if (Character.isLowerCase(c)) {\n                builder.append(Character.toUpperCase(c));\n\
    \            } else {\n                builder.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return builder.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(flipCase((\"\")).equals((\"\"\
    )));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
    These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa475kd7m.java:27)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\"\
    )\n    public static String flipCase(String string) {\n        char[] charArray\
    \ = string.toCharArray();\n        Arrays.stream(charArray).map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());\n\
    \        return new String(charArray);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(flipCase((\"\")).equals((\"\")));\n    assert(flipCase((\"\
    Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"These violent delights\
    \ have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpavql82cm.java:14: error: no suitable method found for stream(char[])\n\
    \        Arrays.stream(charArray).map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(Collectors.joining());\n              ^\n\
    \    method Arrays.<T#1>stream(T#1[]) is not applicable\n      (inference variable\
    \ T#1 has incompatible bounds\n        equality constraints: char\n        upper\
    \ bounds: Object)\n    method Arrays.<T#2>stream(T#2[],int,int) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (actual and formal argument\
    \ lists differ in length))\n    method Arrays.stream(int[]) is not applicable\n\
    \      (argument mismatch; char[] cannot be converted to int[])\n    method Arrays.stream(long[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to long[])\n\
    \    method Arrays.stream(double[]) is not applicable\n      (argument mismatch;\
    \ char[] cannot be converted to double[])\n  where T#1,T#2 are type-variables:\n\
    \    T#1 extends Object declared in method <T#1>stream(T#1[])\n    T#2 extends\
    \ Object declared in method <T#2>stream(T#2[],int,int)\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
