name: HumanEval_22_filter_integers
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Filter given array list of any javathon values only for\
  \ integers\n    // >>> filterIntegers((new ArrayList<Object>(Arrays.asList((String)\"\
  a\", (String)3.14f, (String)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l)))\n\
  \    // >>> filterIntegers((new ArrayList<Object>(Arrays.asList(1l, 2l, 3l, \"abc\"\
  , new HashMap<Long,Long>(Map.of()), new ArrayList<Long>(Arrays.asList())))))\n \
  \   // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))\n    public\
  \ static ArrayList<Long> filterIntegers(ArrayList<Object> values) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(filterIntegers((new\
  \ ArrayList<Object>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    assert(filterIntegers((new ArrayList<Object>(Arrays.asList(4l, new HashMap<Long,Long>(Map.of()),\
  \ new ArrayList<Long>(Arrays.asList()), 23.2f, 9l, \"adasd\")))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)9l)))));\n    assert(filterIntegers((new ArrayList<Object>(Arrays.asList(3l,\
  \ \"c\", 3l, 3l, \"a\", \"b\")))).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
  \ (long)3l, (long)3l)))));\n    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<Long>();\n        for\
    \ (Object value : values) {\n            if (value instanceof Long) {\n      \
    \          result.add((Long)value);\n            } else if (value instanceof Number)\
    \ {\n                result.add(((Number)value).longValue());\n            }\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        for (Object value : values) {\n            if (value instanceof Long)\
    \ {\n                result.add((Long) value);\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> filtered = new ArrayList<>();\n\
    \        for (Object value : values) {\n            if (value instanceof Long)\
    \ {\n                filtered.add((Long) value);\n            }\n        }\n \
    \       return filtered;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        for (Object value : values) {\n            if (value instanceof Long)\
    \ {\n                result.add((Long) value);\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Object o : values) {\n            if (o instanceof Long) {\n   \
    \             result.add((Long)o);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        for (Object o\
    \ : values) {\n            if (o instanceof Long) {\n                result.add((Long)o);\n\
    \            }\n        }\n        return result;", '        return values.stream().filter(v
    -> v.getClass().isInstance(v)).map(v -> (Long)v).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<Long> filtered = new ArrayList<Long>();\n        for (Object\
    \ value : values) {\n            if (value instanceof Long) {\n              \
    \  filtered.add((Long) value);\n            }\n        }\n        return filtered;",
  "        ArrayList<Long> result = new ArrayList<>();\n        values.stream().filter(value\
    \ -> value instanceof Long).forEach(value -> result.add((Long)value));\n     \
    \   return result;", '        return values.stream().filter(v -> v.getClass().isAssignableFrom(Long.class)).map(v
    -> (Long)v).collect(Collectors.toList());', "        ArrayList<Long> filtered\
    \ = new ArrayList<Long>();\n        for (Object value : values) {\n          \
    \  if (value instanceof Long) {\n                filtered.add((Long) value);\n\
    \            }\n        }\n        return filtered;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Object value : values) {\n   \
    \         if (value instanceof Long) {\n                result.add((Long)value);\n\
    \            } else if (value instanceof Integer) {\n                result.add((Long)value);\n\
    \            } else if (value instanceof Number) {\n                result.add(((Number)value).longValue());\n\
    \            } else if (value instanceof String) {\n                result.add(((String)value).longValue());\n\
    \            } else if (value instanceof Map) {\n                result.add(((Map)value).entrySet().stream().flatMap(e\
    \ -> e.getValue().stream()).collect(Collectors.toList()).stream().mapToLong(Long::longValue).collect(Collectors.toList()));\n\
    \            } else if (value instanceof List) {\n                result.add(((List)value).stream().flatMap(e\
    \ -> e).collect(Collectors.toList()).stream().mapToLong(Long::longValue).collect(Collectors.toList()));\n\
    \            } else {\n                result.add(0);\n            }\n       \
    \ }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        for (Object value : values) {\n            if (value instanceof Long)\
    \ {\n                result.add((Long)value);\n            }\n        }\n    \
    \    return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Object o : values) {\n            if (o instanceof Long) {\n   \
    \             result.add((Long)o);\n            } else if (o instanceof Number)\
    \ {\n                result.add(((Number)o).longValue());\n            } else\
    \ {\n                result.add(0l);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        for\
    \ (Object o : values) {\n            if (o instanceof Long) {\n              \
    \  result.add((Long)o);\n            }\n        }\n        return result;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        for(Object o\
    \ : values) {\n            if(o instanceof Long) {\n                result.add((Long)o);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        for (Object value : values) {\n            if\
    \ (value instanceof Long) {\n                result.add((Long) value);\n     \
    \       }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        for (Object value : values) {\n            if\
    \ (value instanceof Long) {\n                result.add((Long) value);\n     \
    \       } else if (value instanceof Integer) {\n                result.add((Long)\
    \ value);\n            } else if (value instanceof String) {\n               \
    \ result.add((Long) value);\n            } else if (value instanceof Map) {\n\
    \                result.add((Long) value);\n            } else if (value instanceof\
    \ List) {\n                result.add((Long) value);\n            }\n        }\n\
    \        return result;", "        ArrayList<Long> filtered = new ArrayList<Long>();\n\
    \        for (Object value : values) {\n            if (value instanceof Long)\
    \ {\n                filtered.add((Long) value);\n            }\n        }\n \
    \       return filtered;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        for (Object value : values) {\n            if (value instanceof Long)\
    \ {\n                result.add((Long) value);\n            }\n        }\n   \
    \     return result;"]
stop_tokens:
- "\n    }\n"
