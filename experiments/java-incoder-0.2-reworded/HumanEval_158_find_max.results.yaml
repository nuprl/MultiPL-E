language: java
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<Character, Integer>\
    \ counts = new HashMap<>();\n        for (String word : words) {\n           \
    \ for (char c : word.toCharArray()) {\n                if (counts.containsKey(c))\
    \ {\n                    counts.put(c, counts.get(c) + 1);\n                }\
    \ else {\n                    counts.put(c, 1);\n                }\n         \
    \   }\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        for (Map.Entry<Character, Integer> entry : counts.entrySet()) {\n   \
    \         if (entry.getValue() == maxCount) {\n                return entry.getKey();\n\
    \            }\n        }\n        return null;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3xe0dru.java:33: error: incompatible types: Character cannot be\
    \ converted to String\n                return entry.getKey();\n              \
    \                     ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        iterator.next();\n        String maxKey\
    \ = iterator.next();\n        int maxValue = map.get(maxKey);\n        while (iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            if (map.get(key) >\
    \ maxValue) {\n                maxKey = key;\n                maxValue = map.get(key);\n\
    \            }\n        }\n        return maxKey;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0m3iqszc.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (map.size() > words.size())\
    \ {\n                return word;\n            }\n        }\n        return null;\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp98y8o6n_.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmp98y8o6n_.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.containsKey(word) ? map.get(word) : 0;\n            map.put(word,\
    \ count + 1);\n        }\n        Set<String> keySet = map.keySet();\n       \
    \ Integer maxValue = keySet.isEmpty() ? null : Collections.max(keySet);\n    \
    \    for (String word : keySet) {\n            if (maxValue == null || maxValue.intValue()\
    \ < map.get(word).intValue()) {\n                maxValue = map.get(word);\n \
    \           }\n        }\n        return maxValue == null ? null : maxValue.intValue()\
    \ < 1 ? null : maxValue.intValue() + \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi3q22g71.java:26: error: incompatible types: bad type in conditional\
    \ expression\n        Integer maxValue = keySet.isEmpty() ? null : Collections.max(keySet);\n\
    \                                                                    ^\n    inference\
    \ variable T has incompatible upper bounds Integer,String,Object,Comparable<?\
    \ super T>\n  where T is a type-variable:\n    T extends Object,Comparable<? super\
    \ T> declared in method <T>max(Collection<? extends T>)\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuyxcc3wu.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpuyxcc3wu.java:36: error: no suitable method found for max(Collection<Entry<String,Integer>>)\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \                                                      ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inferred type does not conform to upper\
    \ bound(s)\n        inferred: Entry<String,Integer>\n        upper bound(s): Comparable<?\
    \ super Entry<String,Integer>>,Object)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                count\
    \ = 1;\n            } else {\n                count++;\n            }\n      \
    \      map.put(word, count);\n        }\n        Set<Map.Entry<String, Integer>>\
    \ entrySet = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj8ugx6sb.java:23: error: incomparable types: int and <null>\n \
    \           if (count == null) {\n                      ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (count > map.size())\
    \ {\n                map.put(word, count);\n            }\n        }\n       \
    \ List<String> result = new ArrayList<>();\n        for (Map.Entry<String, Integer>\
    \ entry : map.entrySet()) {\n            if (entry.getValue() == words.size())\
    \ {\n                result.add(entry.getKey());\n            }\n        }\n \
    \       if (result.size() > 1) {\n            return findMax(result);\n      \
    \  } else {\n            return result.get(0);\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpybpqdaed.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmpybpqdaed.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\n/tmp/tmpybpqdaed.java:42: error: incompatible types: List<String>\
    \ cannot be converted to ArrayList<String>\n            return findMax(result);\n\
    \                           ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ countMap = new HashMap<>();\n        for(String word : words) {\n          \
    \  int count = countMap.get(word);\n            countMap.put(word, count == null\
    \ ? 1 : count + 1);\n        }\n        \n        Collection<Map.Entry<String,\
    \ Integer>> entries = countMap.entrySet();\n        \n        Optional<Map.Entry<String,\
    \ Integer>> maxEntry = entries.stream().max(Comparator.comparing(Map.Entry::getValue));\n\
    \        \n        if(maxEntry.isPresent()) {\n            return maxEntry.get().getKey();\n\
    \        } else {\n            return null;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4krczfb5.java:23: error: incomparable types: int and <null>\n \
    \           countMap.put(word, count == null ? 1 : count + 1);\n             \
    \                        ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keySet = map.keySet();\n        Integer\
    \ maxCount = keySet.isEmpty() ? null : Collections.max(keySet);\n        if (maxCount\
    \ == null) {\n            return null;\n        }\n        String maxWord = null;\n\
    \        for (String word : keySet) {\n            if (maxCount.equals(map.get(word)))\
    \ {\n                maxWord = word;\n                break;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplaluj8wd.java:23: error: incomparable types: int and <null>\n \
    \           if (count == null) {\n                      ^\n/tmp/tmplaluj8wd.java:30:\
    \ error: incompatible types: bad type in conditional expression\n        Integer\
    \ maxCount = keySet.isEmpty() ? null : Collections.max(keySet);\n            \
    \                                                        ^\n    inference variable\
    \ T has incompatible upper bounds Integer,String,Object,Comparable<? super T>\n\
    \  where T is a type-variable:\n    T extends Object,Comparable<? super T> declared\
    \ in method <T>max(Collection<? extends T>)\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<Character, Integer>\
    \ map = new HashMap<>();\n        words.forEach(w -> {\n            for(char c\
    \ : w.toCharArray()) {\n                Integer count = map.get(c);\n        \
    \        map.put(c, count == null ? 1 : count + 1);\n            }\n        });\n\
    \        \n        List<Map.Entry<Character, Integer>> entries = map.entrySet().stream()\n\
    \                .sorted(Map.Entry.comparingByValue().reversed())\n          \
    \      .collect(Collectors.toList());\n        \n        return entries.stream()\n\
    \                .filter(e -> e.getValue() == entries.stream().max(Map.Entry.comparingByValue()).getValue())\n\
    \                .map(Map.Entry::getKey)\n                .findFirst()\n     \
    \           .orElse(null);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn215pzp8.java:29: error: incompatible types: Comparator<Entry<Object,V>>\
    \ cannot be converted to Comparator<? super Entry<Character,Integer>>\n      \
    \          .sorted(Map.Entry.comparingByValue().reversed())\n                \
    \                                             ^\n  where V is a type-variable:\n\
    \    V extends Comparable<? super V>\n/tmp/tmpn215pzp8.java:33: error: cannot\
    \ find symbol\n                .filter(e -> e.getValue() == entries.stream().max(Map.Entry.comparingByValue()).getValue())\n\
    \                                                                            \
    \                   ^\n  symbol:   method getValue()\n  location: class Optional<Entry<Character,Integer>>\n\
    /tmp/tmpn215pzp8.java:36: error: incompatible types: Character cannot be converted\
    \ to String\n                .orElse(null);\n                       ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ counts = new HashMap<>();\n        for (String word : words) {\n           \
    \ Integer count = counts.get(word);\n            if (count == null) {\n      \
    \          count = 0;\n            }\n            counts.put(word, count + 1);\n\
    \        }\n        Integer maxCount = Collections.max(counts.values());\n   \
    \     String maxWord = null;\n        for (String word : counts.keySet()) {\n\
    \            if (counts.get(word) == maxCount) {\n                maxWord = word;\n\
    \                break;\n            }\n        }\n        return maxWord;\n \
    \   }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0a7hg38w.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Collection<String> maxWords = map.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey();\n\
    \        return maxWords;\n    }\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp17mi1c17.java:23: error: incomparable types: int and <null>\n \
    \           if (count == null) {\n                      ^\n/tmp/tmp17mi1c17.java:29:\
    \ error: incompatible types: String cannot be converted to Collection<String>\n\
    \        Collection<String> maxWords = map.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey();\n\
    \                                                                            \
    \                                ^\n/tmp/tmp17mi1c17.java:30: error: incompatible\
    \ types: Collection<String> cannot be converted to String\n        return maxWords;\n\
    \               ^\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<Character, Integer>\
    \ charCount = new HashMap<>();\n        for (String word : words) {\n        \
    \    for (char c : word.toCharArray()) {\n                charCount.put(c, charCount.getOrDefault(c,\
    \ 0) + 1);\n            }\n        }\n        Integer maxCount = charCount.values().stream().max(Integer::compare).get();\n\
    \        List<String> maxWords = charCount.entrySet().stream().filter(e -> e.getValue()\
    \ == maxCount).collect(Collectors.toList());\n        if (maxWords.size() > 1)\
    \ {\n            return maxWords.get(0).getKey();\n        }\n        return maxWords.get(0).getKey().substring(0,\
    \ 1);\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj0220mmj.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        List<String> maxWords = charCount.entrySet().stream().filter(e\
    \ -> e.getValue() == maxCount).collect(Collectors.toList());\n               \
    \                                                                            \
    \                ^\n    equality constraints: String\n    lower bounds: Entry<Character,Integer>\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>toList()\n\
    /tmp/tmpj0220mmj.java:29: error: cannot find symbol\n            return maxWords.get(0).getKey();\n\
    \                                  ^\n  symbol:   method getKey()\n  location:\
    \ class String\n/tmp/tmpj0220mmj.java:31: error: cannot find symbol\n        return\
    \ maxWords.get(0).getKey().substring(0, 1);\n                              ^\n\
    \  symbol:   method getKey()\n  location: class String\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (map.size() > words.size())\
    \ {\n                return word;\n            }\n        }\n        return words.get(0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_kemonwm.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmp_kemonwm.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > 1) {\n                String key = \"\";\n                for (Map.Entry<String,\
    \ Integer> entry : map.entrySet()) {\n                    if (entry.getValue()\
    \ == count) {\n                        key = entry.getKey();\n               \
    \     }\n                }\n                return key;\n            }\n     \
    \   }\n        return null;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnh5iafdh.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<Character, Integer>\
    \ charCount = new HashMap<>();\n        for (String word : words) {\n        \
    \    for (char c : word.toCharArray()) {\n                if (charCount.containsKey(c))\
    \ {\n                    charCount.put(c, charCount.get(c) + 1);\n           \
    \     } else {\n                    charCount.put(c, 1);\n                }\n\
    \            }\n        }\n        Integer maxCount = null;\n        for (Map.Entry<Character,\
    \ Integer> entry : charCount.entrySet()) {\n            if (maxCount == null ||\
    \ entry.getValue() > maxCount) {\n                maxCount = entry.getValue();\n\
    \            }\n        }\n        if (maxCount == null) {\n            return\
    \ null;\n        }\n        ArrayList<String> wordList = new ArrayList<>();\n\
    \        for (String word : words) {\n            boolean found = false;\n   \
    \         for (char c : word.toCharArray()) {\n                if (charCount.containsKey(c))\
    \ {\n                    if (charCount.get(c) == maxCount) {\n               \
    \         found = true;\n                        break;\n                    }\n\
    \                }\n            }\n            if (!found) {\n               \
    \ wordList.add(word);\n            }\n        }\n        return wordList.get(0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp09x7njzt.java:57)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuyxcc3wu.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpuyxcc3wu.java:36: error: no suitable method found for max(Collection<Entry<String,Integer>>)\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \                                                      ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inferred type does not conform to upper\
    \ bound(s)\n        inferred: Entry<String,Integer>\n        upper bound(s): Comparable<?\
    \ super Entry<String,Integer>>,Object)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (map.size() > words.size())\
    \ {\n                return word;\n            }\n        }\n        return null;\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp98y8o6n_.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmp98y8o6n_.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Integer maxValue = Collections.max(map.values());\n\
    \        if (maxValue == null) {\n            return null;\n        }\n      \
    \  for (String word : map.keySet()) {\n            if (maxValue == map.get(word))\
    \ {\n                return word;\n            }\n        }\n        return null;\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb0erv2j.java:23: error: incomparable types: int and <null>\n \
    \           if (count == null) {\n                      ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ counts = new HashMap<>();\n        for (String word : words) {\n           \
    \ int count = counts.getOrDefault(word, 0);\n            counts.put(word, count\
    \ + 1);\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        for (String word : counts.keySet()) {\n            if (counts.get(word)\
    \ == maxCount) {\n                return word;\n            }\n        }\n   \
    \     return null;\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw3yzmjy9.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n  \
    \              } else {\n                    map.put(c, 1);\n                }\n\
    \            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Collection<Map.Entry<String, Integer>>\
    \ entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpemmkd6ay.java:27: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpemmkd6ay.java:35: error: no suitable method found for max(Collection<Entry<String,Integer>>)\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \                                                      ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keys = map.keySet();\n        String\
    \ maxKey = keys.stream().max(Comparator.comparing(k -> map.get(k))).get();\n \
    \       return maxKey;\n    }\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpukx768ia.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keys = map.keySet();\n        Collections.sort(keys,\
    \ new Comparator<String>() {\n            public int compare(String o1, String\
    \ o2) {\n                return map.get(o1).compareTo(map.get(o2));\n        \
    \    }\n        });\n        return keys.get(0);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9hlf_u79.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmp9hlf_u79.java:30: error: no suitable method\
    \ found for sort(Set<String>,<anonymous Comparator<String>>)\n        Collections.sort(keys,\
    \ new Comparator<String>() {\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (actual\
    \ and formal argument lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Set<String> cannot be converted to List<T#2>))\n  where\
    \ T#1,T#2 are type-variables:\n    T#1 extends Comparable<? super T#1> declared\
    \ in method <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmp9hlf_u79.java:35: error: cannot find symbol\n        return\
    \ keys.get(0);\n                   ^\n  symbol:   method get(int)\n  location:\
    \ variable keys of type Set<String>\n3 errors\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        words.forEach(w -> {\n            int count\
    \ = 0;\n            for (char c : w.toCharArray()) {\n                if (map.containsKey(c))\
    \ {\n                    map.put(c, map.get(c) + 1);\n                } else {\n\
    \                    map.put(c, 1);\n                }\n            }\n      \
    \  });\n        Integer maxValue = Collections.max(map.values());\n        Set<String>\
    \ keySet = map.keySet();\n        for (String key : keySet) {\n            if\
    \ (map.get(key) == maxValue) {\n                return key;\n            }\n \
    \       }\n        return null;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp61451uxb.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmp61451uxb.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        Set<Map.Entry<String, Integer>> entrySet = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : entrySet) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_tcymtr2.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        while (iterator.hasNext()) {\n      \
    \      String key = iterator.next();\n            int value = map.get(key);\n\
    \            if (value > map.size()) {\n                return key;\n        \
    \    }\n        }\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm7qlcfav.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  map.putIfAbsent(String.valueOf(c), 0);\n                map.put(String.valueOf(c),\
    \ map.get(c) + 1);\n            }\n        }\n        List<String> result = new\
    \ ArrayList<>();\n        for (Map.Entry<String, Integer> entry : map.entrySet())\
    \ {\n            if (entry.getValue() > result.size()) {\n                result.add(entry.getKey());\n\
    \            }\n        }\n        if (result.size() == 1) {\n            return\
    \ result.get(0);\n        }\n        Collections.sort(result);\n        return\
    \ result.get(0);\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.findMax(tmp7r8zolzj.java:25)\n\tat Problem.main(tmp7r8zolzj.java:41)\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for(String word : words) {\n            int\
    \ count = map.get(word);\n            map.put(word, count + 1);\n        }\n \
    \       \n        Set<String> keys = map.keySet();\n        \n        Collections.sort(keys,\
    \ new Comparator<String>() {\n            @Override\n            public int compare(String\
    \ o1, String o2) {\n                return map.get(o1).compareTo(map.get(o2));\n\
    \            }\n        });\n        \n        return keys.get(0);\n    }\n  \
    \  public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptwmftd7l.java:28: error: no suitable method found for sort(Set<String>,<anonymous\
    \ Comparator<String>>)\n        Collections.sort(keys, new Comparator<String>()\
    \ {\n                   ^\n    method Collections.<T#1>sort(List<T#1>) is not\
    \ applicable\n      (cannot infer type-variable(s) T#1\n        (actual and formal\
    \ argument lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Set<String> cannot be converted to List<T#2>))\n  where\
    \ T#1,T#2 are type-variables:\n    T#1 extends Comparable<? super T#1> declared\
    \ in method <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmptwmftd7l.java:35: error: cannot find symbol\n        return\
    \ keys.get(0);\n                   ^\n  symbol:   method get(int)\n  location:\
    \ variable keys of type Set<String>\n2 errors\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        Collection<String> result = new ArrayList<>(map.keySet());\n\
    \        Collections.sort(result);\n        return result.iterator().next();\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3h02oau6.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmp3h02oau6.java:36: error: no suitable method found for sort(Collection<String>)\n\
    \        Collections.sort(result);\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; Collection<String> cannot be converted to List<T#1>))\n    method\
    \ Collections.<T#2>sort(List<T#2>,Comparator<? super T#2>) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (actual and formal argument\
    \ lists differ in length))\n  where T#1,T#2 are type-variables:\n    T#1 extends\
    \ Comparable<? super T#1> declared in method <T#1>sort(List<T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>sort(List<T#2>,Comparator<? super T#2>)\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  map.putIfAbsent(Character.toString(c), 0);\n                map.putIfAbsent(Character.toString(c),\
    \ map.get(c) + 1);\n                count++;\n            }\n            if (map.size()\
    \ > words.size()) {\n                return word;\n            }\n           \
    \ map.clear();\n        }\n        return null;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.findMax(tmpm9ljjm8m.java:25)\n\tat Problem.main(tmpm9ljjm8m.java:36)\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keys = map.keySet();\n        Collections.sort(keys,\
    \ new Comparator<String>() {\n            public int compare(String o1, String\
    \ o2) {\n                return map.get(o1).compareTo(map.get(o2));\n        \
    \    }\n        });\n        return keys.get(0);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9hlf_u79.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmp9hlf_u79.java:30: error: no suitable method\
    \ found for sort(Set<String>,<anonymous Comparator<String>>)\n        Collections.sort(keys,\
    \ new Comparator<String>() {\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (actual\
    \ and formal argument lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Set<String> cannot be converted to List<T#2>))\n  where\
    \ T#1,T#2 are type-variables:\n    T#1 extends Comparable<? super T#1> declared\
    \ in method <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmp9hlf_u79.java:35: error: cannot find symbol\n        return\
    \ keys.get(0);\n                   ^\n  symbol:   method get(int)\n  location:\
    \ variable keys of type Set<String>\n3 errors\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = set.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7z24ecnu.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        List<String> result = new ArrayList<>(map.keySet());\n\
    \        Collections.sort(result);\n        return result.isEmpty() ? null : result.get(0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzgpu5i9i.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  map.putIfAbsent(Character.toString(c), 0);\n                map.putIfAbsent(Character.toString(c),\
    \ map.get(c) + 1);\n                count++;\n            }\n            if (count\
    \ > map.size()) {\n                map.put(word, count);\n            }\n    \
    \    }\n        List<String> result = new ArrayList<>(map.keySet());\n       \
    \ Collections.sort(result);\n        return result.isEmpty() ? null : result.get(0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.findMax(tmpvnj1q31q.java:25)\n\tat Problem.main(tmpvnj1q31q.java:37)\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ counts = new HashMap<>();\n        for (String word : words) {\n           \
    \ Integer count = counts.get(word);\n            if (count == null) {\n      \
    \          count = 0;\n            }\n            counts.put(word, count + 1);\n\
    \        }\n        Integer maxCount = null;\n        for (String word : counts.keySet())\
    \ {\n            Integer count = counts.get(word);\n            if (maxCount ==\
    \ null || count > maxCount) {\n                maxCount = count;\n           \
    \ }\n        }\n        if (maxCount == null) {\n            return null;\n  \
    \      }\n        ArrayList<String> wordList = new ArrayList<>(words);\n     \
    \   wordList.removeAll(Collections.singleton(maxCount));\n        return wordList.get(0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq1wi0qjj.java:43)\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<Character, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            for\
    \ (char c : word.toCharArray()) {\n                if (map.containsKey(c)) {\n\
    \                    map.put(c, map.get(c) + 1);\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \ }\n        Integer maxCount = Collections.max(map.values());\n        Set<Character>\
    \ keySet = map.keySet();\n        Iterator<Character> iterator = keySet.iterator();\n\
    \        while (iterator.hasNext()) {\n            Character key = iterator.next();\n\
    \            if (maxCount == map.get(key)) {\n                return word;\n \
    \           }\n        }\n        return null;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqhcn0x5i.java:36: error: cannot find symbol\n                return\
    \ word;\n                       ^\n  symbol:   variable word\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  map.putIfAbsent(String.valueOf(c), 0);\n                map.putIfAbsent(String.valueOf(c),\
    \ map.getOrDefault(String.valueOf(c), 0) + 1);\n                count++;\n   \
    \         }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Collections.sort(map.entrySet(),\
    \ Map.Entry.comparingByValue());\n        return map.entrySet().stream().map(Map.Entry::getKey).collect(Collectors.toList()).get(0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt1m5xka4.java:32: error: no suitable method found for sort(Set<Entry<String,Integer>>,Comparator<Entry<Object,V>>)\n\
    \        Collections.sort(map.entrySet(), Map.Entry.comparingByValue());\n   \
    \                ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (actual and formal argument\
    \ lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Set<Entry<String,Integer>> cannot be converted to List<T#2>))\n\
    \  where V,T#1,T#2 are type-variables:\n    V extends Comparable<? super V>\n\
    \    T#1 extends Comparable<? super T#1> declared in method <T#1>sort(List<T#1>)\n\
    \    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<? super\
    \ T#2>)\n1 error\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.containsKey(word) ? map.get(word) : 0;\n            map.put(word,\
    \ count + 1);\n        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : set) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt1do9vfr.java:36)\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                count\
    \ = 1;\n            } else {\n                count++;\n            }\n      \
    \      map.put(word, count);\n        }\n        Set<Map.Entry<String, Integer>>\
    \ entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8xc1mtb9.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmp8xc1mtb9.java:31: error: no suitable method\
    \ found for max(Set<Entry<String,Integer>>)\n        Map.Entry<String, Integer>\
    \ maxEntry = Collections.max(entries);\n                                     \
    \                    ^\n    method Collections.<T#1>max(Collection<? extends T#1>)\
    \ is not applicable\n      (inference variable T#1 has incompatible bounds\n \
    \       lower bounds: Object,Comparable<? super T#1>\n        lower bounds: Entry<String,Integer>)\n\
    \    method Collections.<T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n  where T#1,T#2 are type-variables:\n\
    \    T#1 extends Object,Comparable<? super T#1> declared in method <T#1>max(Collection<?\
    \ extends T#1>)\n    T#2 extends Object declared in method <T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>)\n2 errors\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<Character, Integer>\
    \ counts = new HashMap<>();\n        for (String word : words) {\n           \
    \ for (char c : word.toCharArray()) {\n                Integer count = counts.get(c);\n\
    \                if (count == null) {\n                    counts.put(c, 1);\n\
    \                } else {\n                    counts.put(c, count + 1);\n   \
    \             }\n            }\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        String maxWord = null;\n        for (String word : words) {\n       \
    \     Integer count = counts.get(word.charAt(0));\n            if (count == maxCount)\
    \ {\n                maxWord = word;\n            }\n        }\n        return\
    \ maxWord;\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcxx4j6m8.java:42)\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        Collection<String> result = new ArrayList<>(map.keySet());\n\
    \        result.sort(Comparator.comparing(s -> map.get(s)));\n        return result.stream().findFirst().get();\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6z_ryyh.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpg6z_ryyh.java:36: error: cannot find symbol\n        result.sort(Comparator.comparing(s\
    \ -> map.get(s)));\n              ^\n  symbol:   method sort(Comparator<Object>)\n\
    \  location: variable result of type Collection<String>\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Collection<String> result = new ArrayList<>(map.keySet());\n\
    \        result.sort(Comparator.comparing(s -> map.get(s)));\n        return result.isEmpty()\
    \ ? null : result.get(0);\n    }\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi2odj2r7.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpi2odj2r7.java:30: error: cannot find symbol\n\
    \        result.sort(Comparator.comparing(s -> map.get(s)));\n              ^\n\
    \  symbol:   method sort(Comparator<Object>)\n  location: variable result of type\
    \ Collection<String>\n/tmp/tmpi2odj2r7.java:31: error: cannot find symbol\n  \
    \      return result.isEmpty() ? null : result.get(0);\n                     \
    \                          ^\n  symbol:   method get(int)\n  location: variable\
    \ result of type Collection<String>\n3 errors\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keySet = map.keySet();\n        int\
    \ maxCount = keySet.size();\n        if (maxCount == 1) {\n            return\
    \ keySet.iterator().next();\n        }\n        Set<String> maxSet = new HashSet<>();\n\
    \        for (String word : keySet) {\n            if (map.get(word) == maxCount)\
    \ {\n                maxSet.add(word);\n            }\n        }\n        if (maxSet.size()\
    \ == 1) {\n            return maxSet.iterator().next();\n        }\n        Set<String>\
    \ minSet = new HashSet<>();\n        for (String word : keySet) {\n          \
    \  if (map.get(word) == 1) {\n                minSet.add(word);\n            }\n\
    \        }\n        if (minSet.size() == 1) {\n            return minSet.iterator().next();\n\
    \        }\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjwphsvx7.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keySet = map.keySet();\n        Collections.sort(keySet);\n\
    \        String maxKey = keySet.get(0);\n        int maxCount = map.get(maxKey);\n\
    \        for (String key : keySet) {\n            if (map.get(key) == maxCount)\
    \ {\n                maxKey = key;\n                maxCount = map.get(key);\n\
    \            }\n        }\n        return maxKey;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqk28ubds.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpqk28ubds.java:30: error: no suitable method\
    \ found for sort(Set<String>)\n        Collections.sort(keySet);\n           \
    \        ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n  \
    \    (cannot infer type-variable(s) T#1\n        (argument mismatch; Set<String>\
    \ cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmpqk28ubds.java:31: error: cannot find symbol\n        String\
    \ maxKey = keySet.get(0);\n                              ^\n  symbol:   method\
    \ get(int)\n  location: variable keySet of type Set<String>\n3 errors\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (count > map.size())\
    \ {\n                map.put(word, count);\n            }\n        }\n       \
    \ Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n        Map.Entry<String,\
    \ Integer> maxEntry = Collections.max(entries);\n        return maxEntry.getKey();\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv2a3kle2.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmpv2a3kle2.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\n/tmp/tmpv2a3kle2.java:36: error: no suitable method found for\
    \ max(Collection<Entry<String,Integer>>)\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n                                              \
    \           ^\n    method Collections.<T#1>max(Collection<? extends T#1>) is not\
    \ applicable\n      (inference variable T#1 has incompatible bounds\n        lower\
    \ bounds: Object,Comparable<? super T#1>\n        lower bounds: Entry<String,Integer>)\n\
    \    method Collections.<T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n  where T#1,T#2 are type-variables:\n\
    \    T#1 extends Object,Comparable<? super T#1> declared in method <T#1>max(Collection<?\
    \ extends T#1>)\n    T#2 extends Object declared in method <T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659798440
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keySet = map.keySet();\n        Integer\
    \ maxValue = keySet.isEmpty() ? null : Collections.max(keySet);\n        String\
    \ maxWord = maxValue == null ? null : map.get(maxValue);\n        return maxWord;\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt161224d.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpt161224d.java:30: error: incompatible types:\
    \ bad type in conditional expression\n        Integer maxValue = keySet.isEmpty()\
    \ ? null : Collections.max(keySet);\n                                        \
    \                            ^\n    inference variable T has incompatible bounds\n\
    \      lower bounds: Integer,String,Object,Comparable<? super T>\n      lower\
    \ bounds: String\n  where T is a type-variable:\n    T extends Object,Comparable<?\
    \ super T> declared in method <T>max(Collection<? extends T>)\n/tmp/tmpt161224d.java:31:\
    \ error: incompatible types: Integer cannot be converted to String\n        String\
    \ maxWord = maxValue == null ? null : map.get(maxValue);\n                   \
    \                       ^\n3 errors\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (count > map.size())\
    \ {\n                map.put(word, count);\n            }\n        }\n       \
    \ Collections.sort(map.entrySet());\n        Map.Entry<String, Integer> maxEntry\
    \ = map.entrySet().stream().max(Map.Entry.comparingByValue()).get();\n       \
    \ return maxEntry.getKey();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7h62t3f7.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmp7h62t3f7.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\n/tmp/tmp7h62t3f7.java:35: error: no suitable method found for\
    \ sort(Set<Entry<String,Integer>>)\n        Collections.sort(map.entrySet());\n\
    \                   ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (argument mismatch; Set<Entry<String,Integer>>\
    \ cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  map.putIfAbsent(String.valueOf(c), 0);\n                map.putIfAbsent(String.valueOf(c),\
    \ map.getOrDefault(String.valueOf(c), 0) + 1);\n            }\n        }\n   \
    \     List<String> result = new ArrayList<>();\n        for (Map.Entry<String,\
    \ Integer> entry : map.entrySet()) {\n            if (entry.getValue() > result.size())\
    \ {\n                result.add(entry.getKey());\n            }\n        }\n \
    \       if (result.size() > 1) {\n            return result.get(0);\n        }\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.findMax(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmp7bmjxml3.java:40)\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = set.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7z24ecnu.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuyxcc3wu.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpuyxcc3wu.java:36: error: no suitable method found for max(Collection<Entry<String,Integer>>)\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \                                                      ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inferred type does not conform to upper\
    \ bound(s)\n        inferred: Entry<String,Integer>\n        upper bound(s): Comparable<?\
    \ super Entry<String,Integer>>,Object)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  map.putIfAbsent(Character.toString(c), 0);\n                map.putIfAbsent(Character.toString(c),\
    \ map.get(c) + 1);\n                count++;\n            }\n            if (map.size()\
    \ > words.size()) {\n                return word;\n            }\n        }\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.findMax(tmpwwf391s9.java:25)\n\tat Problem.main(tmpwwf391s9.java:35)\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (count > map.size())\
    \ {\n                map.put(word, count);\n            }\n        }\n       \
    \ Collections.sort(map.entrySet(), Map.Entry.comparingByValue());\n        return\
    \ map.entrySet().stream().findFirst().get().getKey();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7uctpk1f.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmp7uctpk1f.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\n/tmp/tmp7uctpk1f.java:35: error: no suitable method found for\
    \ sort(Set<Entry<String,Integer>>,Comparator<Entry<Object,V>>)\n        Collections.sort(map.entrySet(),\
    \ Map.Entry.comparingByValue());\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (actual\
    \ and formal argument lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Set<Entry<String,Integer>> cannot be converted to List<T#2>))\n\
    \  where V,T#1,T#2 are type-variables:\n    V extends Comparable<? super V>\n\
    \    T#1 extends Comparable<? super T#1> declared in method <T#1>sort(List<T#1>)\n\
    \    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = set.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7z24ecnu.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (count > map.size())\
    \ {\n                map.put(word, count);\n            }\n        }\n       \
    \ Collection<String> keys = map.keySet();\n        Collections.sort(keys, new\
    \ Comparator<String>() {\n            public int compare(String o1, String o2)\
    \ {\n                return map.get(o1).compareTo(map.get(o2));\n            }\n\
    \        });\n        return keys.get(0);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpntsrbwiy.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmpntsrbwiy.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\n/tmp/tmpntsrbwiy.java:36: error: no suitable method found for\
    \ sort(Collection<String>,<anonymous Comparator<String>>)\n        Collections.sort(keys,\
    \ new Comparator<String>() {\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (actual\
    \ and formal argument lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Collection<String> cannot be converted to List<T#2>))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Comparable<? super T#1>\
    \ declared in method <T#1>sort(List<T#1>)\n    T#2 extends Object declared in\
    \ method <T#2>sort(List<T#2>,Comparator<? super T#2>)\n/tmp/tmpntsrbwiy.java:41:\
    \ error: cannot find symbol\n        return keys.get(0);\n                   ^\n\
    \  symbol:   method get(int)\n  location: variable keys of type Collection<String>\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n4 errors\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Collection<Map.Entry<String, Integer>> entries =\
    \ map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpha1_3od2.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpha1_3od2.java:30: error: no suitable method\
    \ found for max(Collection<Entry<String,Integer>>)\n        Map.Entry<String,\
    \ Integer> maxEntry = Collections.max(entries);\n                            \
    \                             ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n2 errors\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keySet = map.keySet();\n        Integer\
    \ maxCount = keySet.isEmpty() ? null : Collections.max(keySet);\n        if (maxCount\
    \ == null) {\n            return null;\n        }\n        String maxWord = null;\n\
    \        for (String word : keySet) {\n            if (maxCount.equals(map.get(word)))\
    \ {\n                maxWord = word;\n            }\n        }\n        return\
    \ maxWord;\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxx2ppga4.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpxx2ppga4.java:30: error: incompatible types:\
    \ bad type in conditional expression\n        Integer maxCount = keySet.isEmpty()\
    \ ? null : Collections.max(keySet);\n                                        \
    \                            ^\n    inference variable T has incompatible bounds\n\
    \      lower bounds: Integer,String,Object,Comparable<? super T>\n      lower\
    \ bounds: String\n  where T is a type-variable:\n    T extends Object,Comparable<?\
    \ super T> declared in method <T>max(Collection<? extends T>)\n2 errors\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  map.putIfAbsent(Character.toString(c), 0);\n                map.put(c, map.get(c)\
    \ + 1);\n            }\n        }\n        Collection<Map.Entry<String, Integer>>\
    \ entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = entries.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmxsntxyj.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                map.put(c, map.get(c) + 1);\n                   \
    \     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzi77nu6x.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpzi77nu6x.java:30: error: no suitable method\
    \ found for max(Set<Entry<String,Integer>>)\n        Map.Entry<String, Integer>\
    \ maxEntry = Collections.max(entries);\n                                     \
    \                    ^\n    method Collections.<T#1>max(Collection<? extends T#1>)\
    \ is not applicable\n      (inference variable T#1 has incompatible bounds\n \
    \       lower bounds: Object,Comparable<? super T#1>\n        lower bounds: Entry<String,Integer>)\n\
    \    method Collections.<T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n  where T#1,T#2 are type-variables:\n\
    \    T#1 extends Object,Comparable<? super T#1> declared in method <T#1>max(Collection<?\
    \ extends T#1>)\n    T#2 extends Object declared in method <T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>)\n2 errors\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for(String word : words) {\n            int\
    \ count = map.containsKey(word) ? map.get(word) : 0;\n            map.put(word,\
    \ count + 1);\n        }\n        \n        Collection<Map.Entry<String, Integer>>\
    \ entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        \n        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmukilfs1.java:27: error: no suitable method found for max(Collection<Entry<String,Integer>>)\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \                                                      ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n1 error\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (count > map.size())\
    \ {\n                map.put(word, count);\n            }\n        }\n       \
    \ Collections.sort(map.entrySet());\n        Map.Entry<String, Integer> maxEntry\
    \ = map.entrySet().stream().max(Map.Entry.comparingByValue()).get();\n       \
    \ return maxEntry.getKey();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7h62t3f7.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmp7h62t3f7.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\n/tmp/tmp7h62t3f7.java:35: error: no suitable method found for\
    \ sort(Set<Entry<String,Integer>>)\n        Collections.sort(map.entrySet());\n\
    \                   ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (argument mismatch; Set<Entry<String,Integer>>\
    \ cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : set) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4dps_qgu.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    map.put(c, map.get(c) + 1);\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \ }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpctj32jd4.java:26: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmpctj32jd4.java:28: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\n/tmp/tmpctj32jd4.java:33: error: no suitable method found for\
    \ max(Collection<Entry<String,Integer>>)\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n                                              \
    \           ^\n    method Collections.<T#1>max(Collection<? extends T#1>) is not\
    \ applicable\n      (inference variable T#1 has incompatible bounds\n        lower\
    \ bounds: Object,Comparable<? super T#1>\n        lower bounds: Entry<String,Integer>)\n\
    \    method Collections.<T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n  where T#1,T#2 are type-variables:\n\
    \    T#1 extends Object,Comparable<? super T#1> declared in method <T#1>max(Collection<?\
    \ extends T#1>)\n    T#2 extends Object declared in method <T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuyxcc3wu.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpuyxcc3wu.java:36: error: no suitable method found for max(Collection<Entry<String,Integer>>)\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \                                                      ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inferred type does not conform to upper\
    \ bound(s)\n        inferred: Entry<String,Integer>\n        upper bound(s): Comparable<?\
    \ super Entry<String,Integer>>,Object)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        words.forEach(word -> map.put(word, map.getOrDefault(word,\
    \ 0) + 1));\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0s56f9cm.java:23: error: no suitable method found for max(Collection<Entry<String,Integer>>)\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \                                                      ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n1 error\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ counts = new HashMap<>();\n        for (String word : words) {\n           \
    \ int count = counts.get(word);\n            if (count == null) {\n          \
    \      counts.put(word, 1);\n            } else {\n                counts.put(word,\
    \ count + 1);\n            }\n        }\n        Integer maxCount = null;\n  \
    \      for (String word : counts.keySet()) {\n            if (maxCount == null\
    \ || maxCount < counts.get(word)) {\n                maxCount = counts.get(word);\n\
    \            }\n        }\n        if (maxCount == null) {\n            return\
    \ null;\n        }\n        List<String> wordList = new ArrayList<>(words);\n\
    \        wordList.removeIf(word -> counts.get(word) == maxCount);\n        return\
    \ wordList.get(0);\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpayknn9gk.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        List<String> result = new ArrayList<>();\n     \
    \   for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            if\
    \ (entry.getValue().equals(Collections.max(map.values()))) {\n               \
    \ result.add(entry.getKey());\n            }\n        }\n        if (result.size()\
    \ == 1) {\n            return result.get(0);\n        }\n        return Collections.max(result);\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbswdszv6.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            map.put(word, count == null ? 1 : count\
    \ + 1);\n        }\n        Collection<String> result = new ArrayList<>(map.keySet());\n\
    \        result.sort(Comparator.comparing(s -> map.get(s)));\n        return result.isEmpty()\
    \ ? null : result.get(0);\n    }\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5f8a54oi.java:23: error: bad operand types for binary operator\
    \ '=='\n            map.put(word, count == null ? 1 : count + 1);\n          \
    \                      ^\n  first type:  int\n  second type: <null>\n/tmp/tmp5f8a54oi.java:26:\
    \ error: cannot find symbol\n        result.sort(Comparator.comparing(s -> map.get(s)));\n\
    \              ^\n  symbol:   method sort(Comparator<Object>)\n  location: variable\
    \ result of type Collection<String>\n/tmp/tmp5f8a54oi.java:27: error: cannot find\
    \ symbol\n        return result.isEmpty() ? null : result.get(0);\n          \
    \                                     ^\n  symbol:   method get(int)\n  location:\
    \ variable result of type Collection<String>\n3 errors\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        words.forEach(w -> map.put(w, map.getOrDefault(w,\
    \ 0) + 1));\n        Collection<String> max = new ArrayList<>(map.keySet());\n\
    \        Collections.sort(max);\n        return max.isEmpty() ? null : max.iterator().next();\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0qbe_u9b.java:23: error: no suitable method found for sort(Collection<String>)\n\
    \        Collections.sort(max);\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; Collection<String> cannot be converted to List<T#1>))\n    method\
    \ Collections.<T#2>sort(List<T#2>,Comparator<? super T#2>) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (actual and formal argument\
    \ lists differ in length))\n  where T#1,T#2 are type-variables:\n    T#1 extends\
    \ Comparable<? super T#1> declared in method <T#1>sort(List<T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>sort(List<T#2>,Comparator<? super T#2>)\n1 error\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Integer maxValue = Collections.max(map.values());\n\
    \        Iterator<String> iterator = map.keySet().iterator();\n        while (iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            if (maxValue.equals(map.get(key)))\
    \ {\n                return key;\n            }\n        }\n        return null;\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp15lxne26.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n        }\n        Collection<Map.Entry<String, Integer>>\
    \ entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = null;\n\
    \        for (Map.Entry<String, Integer> entry : entries) {\n            if (maxEntry\
    \ == null || entry.getValue() > maxEntry.getValue()) {\n                maxEntry\
    \ = entry;\n            }\n        }\n        return maxEntry.getKey();\n    }\n\
    \    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0sdgrm_n.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmp0sdgrm_n.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        List<String> maxWords = words.stream()\n       \
    \         .filter(w -> map.get(w) == map.get(w))\n                .sorted(Comparator.comparing(w\
    \ -> map.get(w)))\n                .collect(Collectors.toList());\n        if\
    \ (maxWords.size() > 1) {\n            return maxWords.get(0);\n        } else\
    \ {\n            return maxWords.get(0);\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeyphvbpx.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n        }\n        List<String> result = new ArrayList<>();\n\
    \        for (String word : words) {\n            int maxCount = -1;\n       \
    \     for (char c : word.toCharArray()) {\n                if (map.containsKey(c))\
    \ {\n                    if (maxCount < map.get(c)) {\n                      \
    \  maxCount = map.get(c);\n                    }\n                }\n        \
    \    }\n            if (maxCount > -1) {\n                result.add(word);\n\
    \            }\n        }\n        if (result.size() > 1) {\n            return\
    \ result.get(0);\n        } else {\n            return result.get(0);\n      \
    \  }\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo7_gd8la.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmpo7_gd8la.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ counts = new HashMap<>();\n        for (String word : words) {\n           \
    \ int count = counts.getOrDefault(word, 0);\n            counts.put(word, count\
    \ + 1);\n        }\n        Collection<Map.Entry<String, Integer>> entries = counts.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgo2ko35f.java:26: error: no suitable method found for max(Collection<Entry<String,Integer>>)\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \                                                      ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n1 error\n"
  stdout: ''
  timestamp: 1659798442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > 1) {\n                map.put(word, count);\n            }\n   \
    \     }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n     \
    \   Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : set) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5jijtje.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.containsKey(word) ? map.get(word) : 0;\n            map.put(word,\
    \ count + 1);\n        }\n        Set<String> keySet = map.keySet();\n       \
    \ Integer maxValue = keySet.isEmpty() ? null : Collections.max(keySet);\n    \
    \    if (maxValue != null) {\n            String maxKey = maxValue.toString();\n\
    \            for (String word : words) {\n                if (word.equals(maxKey))\
    \ {\n                    return word;\n                }\n            }\n    \
    \    }\n        return null;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprvzbp1lp.java:26: error: incompatible types: bad type in conditional\
    \ expression\n        Integer maxValue = keySet.isEmpty() ? null : Collections.max(keySet);\n\
    \                                                                    ^\n    inference\
    \ variable T has incompatible bounds\n      lower bounds: Integer,String,Object,Comparable<?\
    \ super T>\n      lower bounds: String\n  where T is a type-variable:\n    T extends\
    \ Object,Comparable<? super T> declared in method <T>max(Collection<? extends\
    \ T>)\n1 error\n"
  stdout: ''
  timestamp: 1659798442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (map.size() > words.size())\
    \ {\n                return word;\n            }\n        }\n        return null;\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp98y8o6n_.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmp98y8o6n_.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keys = map.keySet();\n        Collections.sort(keys);\n\
    \        String maxKey = keys.get(0);\n        int maxCount = map.get(maxKey);\n\
    \        for (String key : keys) {\n            if (map.get(key) == maxCount)\
    \ {\n                maxKey = key;\n                maxCount = map.get(key);\n\
    \            }\n        }\n        return maxKey;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3kkfkrr9.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmp3kkfkrr9.java:30: error: no suitable method\
    \ found for sort(Set<String>)\n        Collections.sort(keys);\n             \
    \      ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n    \
    \  (cannot infer type-variable(s) T#1\n        (argument mismatch; Set<String>\
    \ cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmp3kkfkrr9.java:31: error: cannot find symbol\n        String\
    \ maxKey = keys.get(0);\n                            ^\n  symbol:   method get(int)\n\
    \  location: variable keys of type Set<String>\n3 errors\n"
  stdout: ''
  timestamp: 1659798442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ counts = new HashMap<>();\n        for (String word : words) {\n           \
    \ int count = counts.getOrDefault(word, 0);\n            counts.put(word, count\
    \ + 1);\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        if (maxCount == counts.size()) {\n            return words.get(0);\n\
    \        }\n        return words.stream().filter(w -> counts.get(w) == maxCount).sorted().findFirst().get();\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp8yt_qg1.java:32)\n"
  stdout: ''
  timestamp: 1659798442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  map.putIfAbsent(Character.toString(c), 0);\n                map.putIfAbsent(Character.toString(c),\
    \ map.get(c) + 1);\n                count++;\n            }\n            if (count\
    \ > map.size()) {\n                map.put(word, count);\n            }\n    \
    \    }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = entries.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.findMax(tmpbd_1oa01.java:25)\n\tat Problem.main(tmpbd_1oa01.java:37)\n"
  stdout: ''
  timestamp: 1659798442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (map.size() > words.size())\
    \ {\n                return word;\n            }\n        }\n        return words.get(0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_kemonwm.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmp_kemonwm.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            Integer\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Integer maxCount = Collections.max(map.values());\n\
    \        String maxWord = null;\n        for (String word : map.keySet()) {\n\
    \            if (map.get(word) == maxCount) {\n                maxWord = word;\n\
    \                break;\n            }\n        }\n        return maxWord;\n \
    \   }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph3ttga83.java:41)\n"
  stdout: ''
  timestamp: 1659798442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for(String word : words) {\n            int\
    \ count = 0;\n            for(char c : word.toCharArray()) {\n               \
    \ if(map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n        }\n        Set<Map.Entry<String, Integer>> set =\
    \ map.entrySet();\n        Map.Entry<String, Integer> maxEntry = null;\n     \
    \   for(Map.Entry<String, Integer> entry : set) {\n            if(maxEntry ==\
    \ null || entry.getValue() > maxEntry.getValue()) {\n                maxEntry\
    \ = entry;\n            }\n        }\n        return maxEntry.getKey();\n    }\n\
    \    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyqw3kbt6.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmpyqw3kbt6.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ countMap = new HashMap<>();\n        for (String word : words) {\n         \
    \   int count = countMap.get(word);\n            if (count == null) {\n      \
    \          count = 1;\n            } else {\n                count++;\n      \
    \      }\n            countMap.put(word, count);\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = countMap.entrySet();\n        Map.Entry<String, Integer>\
    \ maxEntry = Collections.max(entries);\n        return maxEntry.getKey();\n  \
    \  }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu5up02bb.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpu5up02bb.java:31: error: no suitable method\
    \ found for max(Collection<Entry<String,Integer>>)\n        Map.Entry<String,\
    \ Integer> maxEntry = Collections.max(entries);\n                            \
    \                             ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n2 errors\n"
  stdout: ''
  timestamp: 1659798442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for(String word : words) {\n            int\
    \ count = 0;\n            for(char c : word.toCharArray()) {\n               \
    \ if(map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n        }\n        Collection<Map.Entry<String, Integer>>\
    \ entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnj3bx6u4.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmpnj3bx6u4.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\n/tmp/tmpnj3bx6u4.java:32: error: no suitable method found for\
    \ max(Collection<Entry<String,Integer>>)\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n                                              \
    \           ^\n    method Collections.<T#1>max(Collection<? extends T#1>) is not\
    \ applicable\n      (inference variable T#1 has incompatible bounds\n        lower\
    \ bounds: Object,Comparable<? super T#1>\n        lower bounds: Entry<String,Integer>)\n\
    \    method Collections.<T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n  where T#1,T#2 are type-variables:\n\
    \    T#1 extends Object,Comparable<? super T#1> declared in method <T#1>max(Collection<?\
    \ extends T#1>)\n    T#2 extends Object declared in method <T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659798442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > 1) {\n                map.put(word, count);\n            }\n   \
    \     }\n        List<String> result = new ArrayList<>();\n        for (Map.Entry<String,\
    \ Integer> entry : map.entrySet()) {\n            if (entry.getValue() > 1) {\n\
    \                result.add(entry.getKey());\n            }\n        }\n     \
    \   if (result.isEmpty()) {\n            return null;\n        }\n        return\
    \ Collections.max(result);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz40eglgc.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ counts = new HashMap<>();\n        for (String word : words) {\n           \
    \ int count = counts.get(word);\n            if (count == null) {\n          \
    \      counts.put(word, 1);\n            } else {\n                counts.put(word,\
    \ count + 1);\n            }\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        if (maxCount == null) {\n            return null;\n        }\n      \
    \  Set<String> wordSet = counts.entrySet().stream().filter(e -> e.getValue() ==\
    \ maxCount).map(Map.Entry::getKey).collect(Collectors.toSet());\n        if (wordSet.size()\
    \ == 1) {\n            return wordSet.toArray(new String[]{wordSet.toArray()[0]})[0];\n\
    \        }\n        return wordSet.toArray(new String[]{wordSet.toArray()[0]})[1];\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqiql69cc.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpqiql69cc.java:35: error: incompatible types:\
    \ Object cannot be converted to String\n            return wordSet.toArray(new\
    \ String[]{wordSet.toArray()[0]})[0];\n                                      \
    \                           ^\n/tmp/tmpqiql69cc.java:37: error: incompatible types:\
    \ Object cannot be converted to String\n        return wordSet.toArray(new String[]{wordSet.toArray()[0]})[1];\n\
    \                                                             ^\n3 errors\n"
  stdout: ''
  timestamp: 1659798442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        Collection<String> result = new ArrayList<>(map.keySet());\n\
    \        Collections.sort(result);\n        return result.iterator().next();\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3h02oau6.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmp3h02oau6.java:36: error: no suitable method found for sort(Collection<String>)\n\
    \        Collections.sort(result);\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; Collection<String> cannot be converted to List<T#1>))\n    method\
    \ Collections.<T#2>sort(List<T#2>,Comparator<? super T#2>) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (actual and formal argument\
    \ lists differ in length))\n  where T#1,T#2 are type-variables:\n    T#1 extends\
    \ Comparable<? super T#1> declared in method <T#1>sort(List<T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>sort(List<T#2>,Comparator<? super T#2>)\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Collection<String> result = new ArrayList<>();\n\
    \        for (String word : map.keySet()) {\n            if (map.get(word) ==\
    \ words.size()) {\n                result.add(word);\n            }\n        }\n\
    \        if (result.size() == 1) {\n            return result.get(0);\n      \
    \  }\n        if (result.size() > 1) {\n            Collections.sort(result);\n\
    \            return result.get(0);\n        }\n        return null;\n    }\n \
    \   public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpulcf0c3l.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpulcf0c3l.java:36: error: cannot find symbol\n\
    \            return result.get(0);\n                         ^\n  symbol:   method\
    \ get(int)\n  location: variable result of type Collection<String>\n/tmp/tmpulcf0c3l.java:39:\
    \ error: no suitable method found for sort(Collection<String>)\n            Collections.sort(result);\n\
    \                       ^\n    method Collections.<T#1>sort(List<T#1>) is not\
    \ applicable\n      (cannot infer type-variable(s) T#1\n        (argument mismatch;\
    \ Collection<String> cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmpulcf0c3l.java:40: error: cannot find symbol\n         \
    \   return result.get(0);\n                         ^\n  symbol:   method get(int)\n\
    \  location: variable result of type Collection<String>\n4 errors\n"
  stdout: ''
  timestamp: 1659798442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Collection<String> keys = map.keySet();\n      \
    \  if (keys.size() == 1) {\n            return keys.get(0);\n        }\n     \
    \   int maxCount = 0;\n        String maxWord = null;\n        for (String word\
    \ : keys) {\n            int count = map.get(word);\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyzj_mfgw.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpyzj_mfgw.java:31: error: cannot find symbol\n\
    \            return keys.get(0);\n                       ^\n  symbol:   method\
    \ get(int)\n  location: variable keys of type Collection<String>\n2 errors\n"
  stdout: ''
  timestamp: 1659798442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  map.putIfAbsent(Character.toString(c), 0);\n                map.putIfAbsent(Character.toString(c),\
    \ map.get(c) + 1);\n                count++;\n            }\n            if (map.size()\
    \ > words.size()) {\n                map.clear();\n            }\n        }\n\
    \        Collections.sort(words, Comparator.comparing(s -> map.get(s.charAt(0))));\n\
    \        return words.get(0);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.findMax(tmpb5age5pw.java:25)\n\tat Problem.main(tmpb5age5pw.java:36)\n"
  stdout: ''
  timestamp: 1659798443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        Collections.sort(map.entrySet(), Comparator.comparing(Map.Entry::getValue));\n\
    \        return map.entrySet().stream().map(Map.Entry::getKey).collect(Collectors.toList()).get(0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbiyd1ax1.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpbiyd1ax1.java:35: error: no suitable method found for sort(Set<Entry<String,Integer>>,Comparator<Object>)\n\
    \        Collections.sort(map.entrySet(), Comparator.comparing(Map.Entry::getValue));\n\
    \                   ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (actual and formal argument\
    \ lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Set<Entry<String,Integer>> cannot be converted to List<T#2>))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Comparable<? super T#1>\
    \ declared in method <T#1>sort(List<T#1>)\n    T#2 extends Object declared in\
    \ method <T#2>sort(List<T#2>,Comparator<? super T#2>)\n/tmp/tmpbiyd1ax1.java:35:\
    \ error: incompatible types: cannot infer type-variable(s) T,U\n        Collections.sort(map.entrySet(),\
    \ Comparator.comparing(Map.Entry::getValue));\n                              \
    \                               ^\n    (argument mismatch; invalid method reference\n\
    \      method getValue in interface Entry<K,V> cannot be applied to given types\n\
    \        required: no arguments\n        found:    Object\n        reason: actual\
    \ and formal argument lists differ in length)\n  where T,U,K,V are type-variables:\n\
    \    T extends Object declared in method <T,U>comparing(Function<? super T,? extends\
    \ U>)\n    U extends Comparable<? super U> declared in method <T,U>comparing(Function<?\
    \ super T,? extends U>)\n    K extends Object declared in interface Entry\n  \
    \  V extends Object declared in interface Entry\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659798443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for(String word : words) {\n            int\
    \ count = map.get(word);\n            if(count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        \n        List<String> result = new ArrayList<>();\n\
    \        for(String word : map.keySet()) {\n            int count = map.get(word);\n\
    \            if(count == 1) {\n                result.add(word);\n           \
    \ }\n        }\n        \n        if(result.size() == 1) {\n            return\
    \ result.get(0);\n        }\n        \n        Collections.sort(result);\n   \
    \     return result.get(0);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpavcxdyyl.java:23: error: bad operand types for binary operator\
    \ '=='\n            if(count == null) {\n                     ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<Character, Integer>\
    \ counts = new HashMap<>();\n        for (String word : words) {\n           \
    \ for (char c : word.toCharArray()) {\n                Integer count = counts.get(c);\n\
    \                if (count == null) {\n                    counts.put(c, 1);\n\
    \                } else {\n                    counts.put(c, count + 1);\n   \
    \             }\n            }\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        Integer maxKey = counts.entrySet().stream().filter(e -> e.getValue()\
    \ == maxCount).map(Map.Entry::getKey).collect(Collectors.toList()).get(0);\n \
    \       return words.stream().filter(w -> w.toCharArray().length == maxKey.length\
    \ && w.toCharArray().equals(maxKey)).findFirst().orElse(null);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpro8kicct.java:32: error: incompatible types: Character cannot be\
    \ converted to Integer\n        Integer maxKey = counts.entrySet().stream().filter(e\
    \ -> e.getValue() == maxCount).map(Map.Entry::getKey).collect(Collectors.toList()).get(0);\n\
    \                                                                            \
    \                                                                     ^\n/tmp/tmpro8kicct.java:33:\
    \ error: cannot find symbol\n        return words.stream().filter(w -> w.toCharArray().length\
    \ == maxKey.length && w.toCharArray().equals(maxKey)).findFirst().orElse(null);\n\
    \                                                                          ^\n\
    \  symbol:   variable length\n  location: variable maxKey of type Integer\n2 errors\n"
  stdout: ''
  timestamp: 1659798442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ counts = new HashMap<>();\n        for (String word : words) {\n           \
    \ int count = counts.get(word);\n            if (count == null) {\n          \
    \      count = 0;\n            }\n            counts.put(word, count + 1);\n \
    \       }\n        Integer maxCount = Collections.max(counts.values());\n    \
    \    String maxWord = null;\n        for (String word : counts.keySet()) {\n \
    \           if (counts.get(word) == maxCount) {\n                maxWord = word;\n\
    \                break;\n            }\n        }\n        return maxWord;\n \
    \   }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp38es0gqp.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        List<String> result = new ArrayList<>(map.keySet());\n\
    \        Collections.sort(result);\n        return result.isEmpty() ? null : result.get(0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzgpu5i9i.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<Character, Integer>\
    \ counts = new HashMap<>();\n        for (String word : words) {\n           \
    \ for (char c : word.toCharArray()) {\n                Integer count = counts.get(c);\n\
    \                if (count == null) {\n                    counts.put(c, 1);\n\
    \                } else {\n                    counts.put(c, count + 1);\n   \
    \             }\n            }\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        if (maxCount == null) {\n            return null;\n        }\n      \
    \  Set<Character> chars = counts.keySet();\n        chars.sort(Comparator.comparing(c\
    \ -> counts.get(c)));\n        for (Character c : chars) {\n            if (counts.get(c)\
    \ == maxCount) {\n                return words.get(chars.indexOf(c));\n      \
    \      }\n        }\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6t62x3ty.java:36: error: cannot find symbol\n        chars.sort(Comparator.comparing(c\
    \ -> counts.get(c)));\n             ^\n  symbol:   method sort(Comparator<Object>)\n\
    \  location: variable chars of type Set<Character>\n/tmp/tmp6t62x3ty.java:39:\
    \ error: cannot find symbol\n                return words.get(chars.indexOf(c));\n\
    \                                      ^\n  symbol:   method indexOf(Character)\n\
    \  location: variable chars of type Set<Character>\n2 errors\n"
  stdout: ''
  timestamp: 1659798443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n  \
    \              } else {\n                    map.put(c, 1);\n                }\n\
    \            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Collection<Map.Entry<String, Integer>>\
    \ entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpemmkd6ay.java:27: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpemmkd6ay.java:35: error: no suitable method found for max(Collection<Entry<String,Integer>>)\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \                                                      ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<Character, Integer>\
    \ counts = new HashMap<>();\n        for (String word : words) {\n           \
    \ for (char c : word.toCharArray()) {\n                Integer count = counts.get(c);\n\
    \                if (count == null) {\n                    counts.put(c, 1);\n\
    \                } else {\n                    counts.put(c, count + 1);\n   \
    \             }\n            }\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        String maxWord = null;\n        for (String word : words) {\n       \
    \     Integer count = counts.get(word.charAt(0));\n            if (count == maxCount)\
    \ {\n                maxWord = word;\n            }\n        }\n        return\
    \ maxWord;\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcxx4j6m8.java:42)\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.containsKey(word) ? map.get(word) + 1 : 1;\n            map.put(word,\
    \ count);\n        }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        int maxCount = keySet.size();\n     \
    \   String maxWord = null;\n        while (iterator.hasNext()) {\n           \
    \ String word = iterator.next();\n            int count = map.get(word);\n   \
    \         if (count > maxCount) {\n                maxCount = count;\n       \
    \         maxWord = word;\n            }\n        }\n        return maxWord;\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.findMax(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpkjesdxq1.java:40)\n"
  stdout: ''
  timestamp: 1659798443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ countMap = new HashMap<>();\n        for (String word : words) {\n         \
    \   int count = countMap.get(word);\n            if (count == null) {\n      \
    \          count = 1;\n            } else {\n                count++;\n      \
    \      }\n            countMap.put(word, count);\n        }\n        Integer maxCount\
    \ = countMap.values().stream().max(Integer::compare).get();\n        return words.get(countMap.keySet().stream().filter(w\
    \ -> countMap.get(w) == maxCount).iterator().next());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxu3x70g2.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpxu3x70g2.java:31: error: incompatible types:\
    \ String cannot be converted to int\n        return words.get(countMap.keySet().stream().filter(w\
    \ -> countMap.get(w) == maxCount).iterator().next());\n                      \
    \                                                                            \
    \          ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        List<String> result = new ArrayList<>();\n        for\
    \ (Map.Entry<String, Integer> entry : map.entrySet()) {\n            if (entry.getValue()\
    \ == words.size()) {\n                result.add(entry.getKey());\n          \
    \  }\n        }\n        if (result.size() > 1) {\n            return findMax(result);\n\
    \        } else {\n            return result.get(0);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7qoymhwa.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmp7qoymhwa.java:42: error: incompatible types: List<String> cannot be converted\
    \ to ArrayList<String>\n            return findMax(result);\n                \
    \           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n  \
    \              } else {\n                    map.put(c, 1);\n                }\n\
    \            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Collection<Map.Entry<String, Integer>>\
    \ entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpemmkd6ay.java:27: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpemmkd6ay.java:35: error: no suitable method found for max(Collection<Entry<String,Integer>>)\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \                                                      ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for(String word : words) {\n            int\
    \ count = 0;\n            for(char c : word.toCharArray()) {\n               \
    \ if(map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if(map.size() > words.size())\
    \ {\n                return word;\n            }\n        }\n        return words.get(0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpachv7rbj.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmpachv7rbj.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798443
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ countMap = new HashMap<>();\n        for (String word : words) {\n         \
    \   Integer count = countMap.get(word);\n            if (count == null) {\n  \
    \              count = 1;\n            } else {\n                count++;\n  \
    \          }\n            countMap.put(word, count);\n        }\n        Integer\
    \ maxCount = Collections.max(countMap.values());\n        String maxWord = null;\n\
    \        for (String word : countMap.keySet()) {\n            if (countMap.get(word)\
    \ == maxCount) {\n                maxWord = word;\n                break;\n  \
    \          }\n        }\n        return maxWord;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7wn76q3_.java:42)\n"
  stdout: ''
  timestamp: 1659798444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for(String word : words) {\n            int\
    \ count = 0;\n            for(char c : word.toCharArray()) {\n               \
    \ if(map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n        }\n        for(String word : words) {\n         \
    \   int max = 0;\n            for(char c : word.toCharArray()) {\n           \
    \     if(map.containsKey(c)) {\n                    if(map.get(c) >= max) {\n\
    \                        max = map.get(c);\n                    }\n          \
    \      }\n            }\n            if(max > 1) {\n                return word;\n\
    \            }\n        }\n        return words.get(0);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdrrs7111.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmpdrrs7111.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n  \
    \              } else {\n                    map.put(c, 1);\n                }\n\
    \            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Collection<Map.Entry<String, Integer>>\
    \ entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpemmkd6ay.java:27: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpemmkd6ay.java:35: error: no suitable method found for max(Collection<Entry<String,Integer>>)\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \                                                      ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            Integer\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Collection<Map.Entry<String, Integer>> entries =\
    \ map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0cps4ky1.java:30: error: no suitable method found for max(Collection<Entry<String,Integer>>)\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \                                                      ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n1 error\n"
  stdout: ''
  timestamp: 1659798444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (map.size() > words.size())\
    \ {\n                return word;\n            }\n        }\n        return null;\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp98y8o6n_.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmp98y8o6n_.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Collection<Map.Entry<String, Integer>> entries =\
    \ map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpha1_3od2.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpha1_3od2.java:30: error: no suitable method\
    \ found for max(Collection<Entry<String,Integer>>)\n        Map.Entry<String,\
    \ Integer> maxEntry = Collections.max(entries);\n                            \
    \                             ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n2 errors\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.containsKey(word) ? map.get(word) + 1 : 1;\n            map.put(word,\
    \ count);\n        }\n        Collection<String> result = new ArrayList<>(map.keySet());\n\
    \        result.sort(Comparator.comparing(s -> map.get(s)));\n        return result.isEmpty()\
    \ ? null : result.get(0);\n    }\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmcapdlvi.java:26: error: cannot find symbol\n        result.sort(Comparator.comparing(s\
    \ -> map.get(s)));\n              ^\n  symbol:   method sort(Comparator<Object>)\n\
    \  location: variable result of type Collection<String>\n/tmp/tmpmcapdlvi.java:27:\
    \ error: cannot find symbol\n        return result.isEmpty() ? null : result.get(0);\n\
    \                                               ^\n  symbol:   method get(int)\n\
    \  location: variable result of type Collection<String>\n2 errors\n"
  stdout: ''
  timestamp: 1659798444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                count\
    \ = 1;\n            } else {\n                count++;\n            }\n      \
    \      map.put(word, count);\n        }\n        Collections.sort(words, (a, b)\
    \ -> map.get(b).compareTo(map.get(a)));\n        return words.get(0);\n    }\n\
    \    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzmts5dg0.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.containsKey(word) ? map.get(word) : 0;\n            map.put(word,\
    \ count + 1);\n        }\n        Collection<String> maxWords = map.entrySet().stream()\n\
    \                .sorted(Map.Entry.comparingByValue())\n                .map(Map.Entry::getKey)\n\
    \                .collect(Collectors.toList());\n        return maxWords.get(0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprb8zjq46.java:29: error: cannot find symbol\n        return maxWords.get(0);\n\
    \                       ^\n  symbol:   method get(int)\n  location: variable maxWords\
    \ of type Collection<String>\n1 error\n"
  stdout: ''
  timestamp: 1659798444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    map.put(c, map.get(c) + 1);\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \ }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpctj32jd4.java:26: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmpctj32jd4.java:28: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\n/tmp/tmpctj32jd4.java:33: error: no suitable method found for\
    \ max(Collection<Entry<String,Integer>>)\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n                                              \
    \           ^\n    method Collections.<T#1>max(Collection<? extends T#1>) is not\
    \ applicable\n      (inference variable T#1 has incompatible bounds\n        lower\
    \ bounds: Object,Comparable<? super T#1>\n        lower bounds: Entry<String,Integer>)\n\
    \    method Collections.<T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n  where T#1,T#2 are type-variables:\n\
    \    T#1 extends Object,Comparable<? super T#1> declared in method <T#1>max(Collection<?\
    \ extends T#1>)\n    T#2 extends Object declared in method <T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        String maxKey = iterator.next();\n  \
    \      int maxCount = map.get(maxKey);\n        while (iterator.hasNext()) {\n\
    \            String key = iterator.next();\n            int count = map.get(key);\n\
    \            if (count > maxCount) {\n                maxKey = key;\n        \
    \        maxCount = count;\n            }\n        }\n        return maxKey;\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdskft_jr.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            Integer\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keySet = map.keySet();\n        Integer\
    \ maxCount = keySet.isEmpty() ? null : Collections.max(keySet);\n        if (maxCount\
    \ == null) {\n            return null;\n        }\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : keySet) {\n            if (map.get(word)\
    \ == maxCount) {\n                result.add(word);\n            }\n        }\n\
    \        if (result.size() == 1) {\n            return result.get(0);\n      \
    \  }\n        Collections.sort(result);\n        return result.get(0);\n    }\n\
    \    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfypl2dz5.java:30: error: incompatible types: bad type in conditional\
    \ expression\n        Integer maxCount = keySet.isEmpty() ? null : Collections.max(keySet);\n\
    \                                                                    ^\n    inference\
    \ variable T has incompatible bounds\n      lower bounds: Integer,String,Object,Comparable<?\
    \ super T>\n      lower bounds: String\n  where T is a type-variable:\n    T extends\
    \ Object,Comparable<? super T> declared in method <T>max(Collection<? extends\
    \ T>)\n1 error\n"
  stdout: ''
  timestamp: 1659798444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<Character, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            for\
    \ (char c : word.toCharArray()) {\n                Integer count = map.get(c);\n\
    \                if (count == null) {\n                    map.put(c, 1);\n  \
    \              } else {\n                    map.put(c, count + 1);\n        \
    \        }\n            }\n        }\n        Integer maxCount = Collections.max(map.values());\n\
    \        String maxWord = null;\n        for (String word : words) {\n       \
    \     Integer count = map.get(word.charAt(0));\n            if (count == maxCount)\
    \ {\n                maxWord = word;\n                break;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd7rgmxzx.java:43)\n"
  stdout: ''
  timestamp: 1659798444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (count > map.size())\
    \ {\n                map.put(word, count);\n            }\n        }\n       \
    \ Collection<String> result = new ArrayList<>();\n        for (Map.Entry<String,\
    \ Integer> entry : map.entrySet()) {\n            if (entry.getValue() == words.size())\
    \ {\n                result.add(entry.getKey());\n            }\n        }\n \
    \       if (result.size() > 1) {\n            return findMax(result);\n      \
    \  } else {\n            return result.get(0);\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm49grkr0.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmpm49grkr0.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\n/tmp/tmpm49grkr0.java:42: error: incompatible types: Collection<String>\
    \ cannot be converted to ArrayList<String>\n            return findMax(result);\n\
    \                           ^\n/tmp/tmpm49grkr0.java:44: error: cannot find symbol\n\
    \            return result.get(0);\n                         ^\n  symbol:   method\
    \ get(int)\n  location: variable result of type Collection<String>\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    4 errors\n"
  stdout: ''
  timestamp: 1659798444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n  \
    \              } else {\n                    map.put(c, 1);\n                }\n\
    \            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Collections.sort(map.entrySet(),\
    \ Comparator.comparing(Map.Entry::getValue));\n        return map.entrySet().stream().map(Map.Entry::getKey).collect(Collectors.toList()).get(0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfeyj7vn8.java:27: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpfeyj7vn8.java:34: error: no suitable method found for sort(Set<Entry<String,Integer>>,Comparator<Object>)\n\
    \        Collections.sort(map.entrySet(), Comparator.comparing(Map.Entry::getValue));\n\
    \                   ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (actual and formal argument\
    \ lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Set<Entry<String,Integer>> cannot be converted to List<T#2>))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Comparable<? super T#1>\
    \ declared in method <T#1>sort(List<T#1>)\n    T#2 extends Object declared in\
    \ method <T#2>sort(List<T#2>,Comparator<? super T#2>)\n/tmp/tmpfeyj7vn8.java:34:\
    \ error: incompatible types: cannot infer type-variable(s) T,U\n        Collections.sort(map.entrySet(),\
    \ Comparator.comparing(Map.Entry::getValue));\n                              \
    \                               ^\n    (argument mismatch; invalid method reference\n\
    \      method getValue in interface Entry<K,V> cannot be applied to given types\n\
    \        required: no arguments\n        found:    Object\n        reason: actual\
    \ and formal argument lists differ in length)\n  where T,U,K,V are type-variables:\n\
    \    T extends Object declared in method <T,U>comparing(Function<? super T,? extends\
    \ U>)\n    U extends Comparable<? super U> declared in method <T,U>comparing(Function<?\
    \ super T,? extends U>)\n    K extends Object declared in interface Entry\n  \
    \  V extends Object declared in interface Entry\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659798444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for(String word : words) {\n            int\
    \ count = map.get(word);\n            map.put(word, count == null ? 1 : count\
    \ + 1);\n        }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgl_1s6uc.java:23: error: bad operand types for binary operator\
    \ '=='\n            map.put(word, count == null ? 1 : count + 1);\n          \
    \                      ^\n  first type:  int\n  second type: <null>\n/tmp/tmpgl_1s6uc.java:26:\
    \ error: no suitable method found for max(Collection<Entry<String,Integer>>)\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \                                                      ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n2 errors\n"
  stdout: ''
  timestamp: 1659798444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Collection<Map.Entry<String, Integer>> entries =\
    \ map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpha1_3od2.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpha1_3od2.java:30: error: no suitable method\
    \ found for max(Collection<Entry<String,Integer>>)\n        Map.Entry<String,\
    \ Integer> maxEntry = Collections.max(entries);\n                            \
    \                             ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n2 errors\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<Character, Integer>\
    \ counts = new HashMap<>();\n        for (String word : words) {\n           \
    \ for (char c : word.toCharArray()) {\n                Integer count = counts.get(c);\n\
    \                if (count == null) {\n                    counts.put(c, 1);\n\
    \                } else {\n                    counts.put(c, count + 1);\n   \
    \             }\n            }\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        String maxWord = null;\n        for (String word : words) {\n       \
    \     Integer count = counts.get(word.charAt(0));\n            if (count == maxCount)\
    \ {\n                maxWord = word;\n            }\n        }\n        return\
    \ maxWord;\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcxx4j6m8.java:42)\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<Character, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            for\
    \ (char c : word.toCharArray()) {\n                if (map.containsKey(c)) {\n\
    \                    map.put(c, map.get(c) + 1);\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \ }\n        Collections.sort(map.entrySet());\n        Map.Entry<Character, Integer>\
    \ maxEntry = map.entrySet().stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplbdpbzv6.java:30: error: no suitable method found for sort(Set<Entry<Character,Integer>>)\n\
    \        Collections.sort(map.entrySet());\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; Set<Entry<Character,Integer>> cannot be converted to List<T#1>))\n\
    \    method Collections.<T#2>sort(List<T#2>,Comparator<? super T#2>) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (actual and formal argument\
    \ lists differ in length))\n  where T#1,T#2 are type-variables:\n    T#1 extends\
    \ Comparable<? super T#1> declared in method <T#1>sort(List<T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>sort(List<T#2>,Comparator<? super T#2>)\n/tmp/tmplbdpbzv6.java:32:\
    \ error: incompatible types: Character cannot be converted to String\n       \
    \ return maxEntry.getKey();\n                              ^\n2 errors\n"
  stdout: ''
  timestamp: 1659798444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.containsKey(word) ? map.get(word) + 1 : 1;\n            map.put(word,\
    \ count);\n        }\n        Set<Map.Entry<String, Integer>> entrySet = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnj3kkzv6.java:31)\n"
  stdout: ''
  timestamp: 1659798444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        List<String> result = new ArrayList<>(map.keySet());\n\
    \        Collections.sort(result);\n        return result.isEmpty() ? null : result.get(0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzgpu5i9i.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : set) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4dps_qgu.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.containsKey(word) ? map.get(word) : 0;\n            map.put(word,\
    \ count + 1);\n        }\n        Collection<String> keys = map.keySet();\n  \
    \      if (keys.size() > 1) {\n            Collections.sort(keys, Comparator.comparing(s\
    \ -> map.get(s)));\n            return keys.get(0);\n        } else {\n      \
    \      return keys.get(0);\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8420zoh3.java:27: error: no suitable method found for sort(Collection<String>,Comparator<Object>)\n\
    \            Collections.sort(keys, Comparator.comparing(s -> map.get(s)));\n\
    \                       ^\n    method Collections.<T#1>sort(List<T#1>) is not\
    \ applicable\n      (cannot infer type-variable(s) T#1\n        (actual and formal\
    \ argument lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Collection<String> cannot be converted to List<T#2>))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Comparable<? super T#1>\
    \ declared in method <T#1>sort(List<T#1>)\n    T#2 extends Object declared in\
    \ method <T#2>sort(List<T#2>,Comparator<? super T#2>)\n/tmp/tmp8420zoh3.java:28:\
    \ error: cannot find symbol\n            return keys.get(0);\n               \
    \        ^\n  symbol:   method get(int)\n  location: variable keys of type Collection<String>\n\
    /tmp/tmp8420zoh3.java:30: error: cannot find symbol\n            return keys.get(0);\n\
    \                       ^\n  symbol:   method get(int)\n  location: variable keys\
    \ of type Collection<String>\n3 errors\n"
  stdout: ''
  timestamp: 1659798444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for(String word : words) {\n            int\
    \ count = 0;\n            for(char c : word.toCharArray()) {\n               \
    \ if(map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if(map.size() > words.size())\
    \ {\n                return word;\n            }\n        }\n        return null;\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf5914au1.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmpf5914au1.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<Character, Integer>\
    \ counts = new HashMap<>();\n        for(String word : words) {\n            for(char\
    \ c : word.toCharArray()) {\n                Integer count = counts.get(c);\n\
    \                if(count == null) {\n                    counts.put(c, 1);\n\
    \                } else {\n                    counts.put(c, count + 1);\n   \
    \             }\n            }\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        for(Map.Entry<Character, Integer> entry : counts.entrySet()) {\n    \
    \        if(entry.getValue() == maxCount) {\n                return entry.getKey();\n\
    \            }\n        }\n        return null;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgqc_v_n2.java:34: error: incompatible types: Character cannot be\
    \ converted to String\n                return entry.getKey();\n              \
    \                     ^\n1 error\n"
  stdout: ''
  timestamp: 1659798444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (count > map.size())\
    \ {\n                map.put(word, count);\n            }\n        }\n       \
    \ Collections.sort(map.entrySet(), Comparator.comparing(Map.Entry::getValue));\n\
    \        return map.entrySet().stream().map(Map.Entry::getKey).collect(Collectors.toList()).get(0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpml9ws3se.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmpml9ws3se.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\n/tmp/tmpml9ws3se.java:35: error: no suitable method found for\
    \ sort(Set<Entry<String,Integer>>,Comparator<Object>)\n        Collections.sort(map.entrySet(),\
    \ Comparator.comparing(Map.Entry::getValue));\n                   ^\n    method\
    \ Collections.<T#1>sort(List<T#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ T#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Collections.<T#2>sort(List<T#2>,Comparator<? super T#2>) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (argument mismatch; Set<Entry<String,Integer>>\
    \ cannot be converted to List<T#2>))\n  where T#1,T#2 are type-variables:\n  \
    \  T#1 extends Comparable<? super T#1> declared in method <T#1>sort(List<T#1>)\n\
    \    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<? super\
    \ T#2>)\n/tmp/tmpml9ws3se.java:35: error: incompatible types: cannot infer type-variable(s)\
    \ T,U\n        Collections.sort(map.entrySet(), Comparator.comparing(Map.Entry::getValue));\n\
    \                                                             ^\n    (argument\
    \ mismatch; invalid method reference\n      method getValue in interface Entry<K,V>\
    \ cannot be applied to given types\n        required: no arguments\n        found:\
    \    Object\n        reason: actual and formal argument lists differ in length)\n\
    \  where T,U,K,V are type-variables:\n    T extends Object declared in method\
    \ <T,U>comparing(Function<? super T,? extends U>)\n    U extends Comparable<?\
    \ super U> declared in method <T,U>comparing(Function<? super T,? extends U>)\n\
    \    K extends Object declared in interface Entry\n    V extends Object declared\
    \ in interface Entry\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659798444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.containsKey(word) ? map.get(word) + 1 : 1;\n            map.put(word,\
    \ count);\n        }\n        Set<String> keys = map.keySet();\n        Collections.sort(keys,\
    \ new Comparator<String>() {\n            public int compare(String o1, String\
    \ o2) {\n                return map.get(o1).compareTo(map.get(o2));\n        \
    \    }\n        });\n        return keys.get(0);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1isa33g4.java:26: error: no suitable method found for sort(Set<String>,<anonymous\
    \ Comparator<String>>)\n        Collections.sort(keys, new Comparator<String>()\
    \ {\n                   ^\n    method Collections.<T#1>sort(List<T#1>) is not\
    \ applicable\n      (cannot infer type-variable(s) T#1\n        (actual and formal\
    \ argument lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Set<String> cannot be converted to List<T#2>))\n  where\
    \ T#1,T#2 are type-variables:\n    T#1 extends Comparable<? super T#1> declared\
    \ in method <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmp1isa33g4.java:31: error: cannot find symbol\n        return\
    \ keys.get(0);\n                   ^\n  symbol:   method get(int)\n  location:\
    \ variable keys of type Set<String>\n2 errors\n"
  stdout: ''
  timestamp: 1659798444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    map.put(c, map.get(c) + 1);\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \ }\n        List<String> sortedWords = words.stream().sorted((a, b) -> map.get(b).compareTo(map.get(a))).collect(Collectors.toList());\n\
    \        return sortedWords.get(0);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd4ksxzzg.java:26: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmpd4ksxzzg.java:28: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                count\
    \ = 1;\n            } else {\n                count++;\n            }\n      \
    \      map.put(word, count);\n        }\n        Set<Map.Entry<String, Integer>>\
    \ entrySet = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj8ugx6sb.java:23: error: incomparable types: int and <null>\n \
    \           if (count == null) {\n                      ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  map.putIfAbsent(Character.toString(c), 0);\n                map.putIfAbsent(Character.toString(c),\
    \ map.get(c) + 1);\n                count++;\n            }\n            if (count\
    \ > map.size()) {\n                map.put(word, count);\n            }\n    \
    \    }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n      \
    \  Iterator<Map.Entry<String, Integer>> iterator = set.iterator();\n        Map.Entry<String,\
    \ Integer> entry = iterator.next();\n        while (iterator.hasNext()) {\n  \
    \          entry = iterator.next();\n            if (entry.getValue() > entry.getKey().length())\
    \ {\n                return entry.getKey();\n            }\n        }\n      \
    \  return entry.getKey();\n    }\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.findMax(tmpykj43cka.java:25)\n\tat Problem.main(tmpykj43cka.java:44)\n"
  stdout: ''
  timestamp: 1659798444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        words.forEach(word -> map.merge(word, new Integer(0),\
    \ Integer::sum));\n        Integer maxValue = map.values().stream().max(Integer::compare).get();\n\
    \        return words.stream().filter(word -> map.get(word) == maxValue).findFirst().get();\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpynf7hue0.java:27)\n"
  stdout: ''
  timestamp: 1659798445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : set) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj87hirmn.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.containsKey(word) ? map.get(word) : 0;\n            map.put(word,\
    \ count + 1);\n        }\n        Set<String> keySet = map.keySet();\n       \
    \ if (keySet.size() == 1) {\n            return keySet.iterator().next();\n  \
    \      }\n        Set<String> maxSet = new TreeSet<>();\n        for (String word\
    \ : keySet) {\n            int count = map.get(word);\n            if (count >\
    \ maxSet.size()) {\n                maxSet.add(word);\n            }\n       \
    \ }\n        return maxSet.iterator().next();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbx99fx11.java:40)\n"
  stdout: ''
  timestamp: 1659798445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    map.put(c, map.get(c) + 1);\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \ }\n        Integer maxValue = Collections.max(map.values());\n        String\
    \ maxKey = map.entrySet().stream().filter(e -> e.getValue() == maxValue).map(Map.Entry::getKey).collect(Collectors.toList()).get(0);\n\
    \        return maxKey;\n    }\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppli582gk.java:26: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmppli582gk.java:28: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        while (iterator.hasNext()) {\n      \
    \      String key = iterator.next();\n            int value = map.get(key);\n\
    \            if (value > map.size()) {\n                return key;\n        \
    \    }\n        }\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4e083zha.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  map.putIfAbsent(Character.toString(c), 0);\n                map.putIfAbsent(Character.toString(c),\
    \ map.get(c) + 1);\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdlsp6p_k.java:29: error: no suitable method found for max(Collection<Entry<String,Integer>>)\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \                                                      ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n1 error\n"
  stdout: ''
  timestamp: 1659798445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  Integer count = map.get(c);\n                if (count == null) {\n       \
    \             count = 0;\n                }\n                map.put(c, count\
    \ + 1);\n            }\n        }\n        Collection<Map.Entry<String, Integer>>\
    \ entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3d5y7n1i.java:24: error: variable count is already defined in method\
    \ findMax(ArrayList<String>)\n                Integer count = map.get(c);\n  \
    \                      ^\n/tmp/tmp3d5y7n1i.java:28: error: incompatible types:\
    \ char cannot be converted to String\n                map.put(c, count + 1);\n\
    \                        ^\n/tmp/tmp3d5y7n1i.java:32: error: no suitable method\
    \ found for max(Collection<Entry<String,Integer>>)\n        Map.Entry<String,\
    \ Integer> maxEntry = Collections.max(entries);\n                            \
    \                             ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659798445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  count += map.getOrDefault(String.valueOf(c), 0);\n                map.put(String.valueOf(c),\
    \ count + 1);\n            }\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Iterator<String> iterator = keySet.iterator();\n        while (iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            if (map.get(key).equals(keySet.size()))\
    \ {\n                return key;\n            }\n        }\n        return null;\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"String.equals(Object)\" because the return value of \"Problem.findMax(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmphipuzifp.java:39)\n"
  stdout: ''
  timestamp: 1659798446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (map.size() > words.size())\
    \ {\n                return word;\n            }\n        }\n        return words.get(0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_kemonwm.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmp_kemonwm.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Collection<Map.Entry<String, Integer>> entries =\
    \ map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpha1_3od2.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpha1_3od2.java:30: error: no suitable method\
    \ found for max(Collection<Entry<String,Integer>>)\n        Map.Entry<String,\
    \ Integer> maxEntry = Collections.max(entries);\n                            \
    \                             ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n2 errors\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for(String word : words) {\n            int\
    \ count = map.get(word);\n            map.put(word, count + 1);\n        }\n \
    \       Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n   \
    \     Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n      \
    \  return maxEntry.getKey();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6mdeke6q.java:26: error: no suitable method found for max(Collection<Entry<String,Integer>>)\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \                                                      ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n1 error\n"
  stdout: ''
  timestamp: 1659798445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<Map.Entry<String, Integer>> entrySet = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2wo1ip5x.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (map.size() > words.size())\
    \ {\n                return word;\n            }\n        }\n        return words.get(0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_kemonwm.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmp_kemonwm.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  count += map.get(c);\n                if (count > map.getOrDefault(c, 0))\n\
    \                    map.put(c, count);\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = entries.stream().max(Map.Entry.comparingByValue()).get();\n        return\
    \ maxEntry.getKey();\n    }\n    public static void main(String[] args) {\n  \
    \  assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo5rpd2qm.java:26: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, count);\n                        \
    \    ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659798446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Collection<Map.Entry<String, Integer>> entries =\
    \ map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpha1_3od2.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpha1_3od2.java:30: error: no suitable method\
    \ found for max(Collection<Entry<String,Integer>>)\n        Map.Entry<String,\
    \ Integer> maxEntry = Collections.max(entries);\n                            \
    \                             ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n2 errors\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  count += map.getOrDefault(Character.toString(c), 0);\n                map.put(Character.toString(c),\
    \ count + 1);\n            }\n        }\n        Set<Map.Entry<String, Integer>>\
    \ entrySet = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0aw5nnpu.java:33)\n"
  stdout: ''
  timestamp: 1659798446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (count > map.size())\
    \ {\n                map.put(word, count);\n            }\n        }\n       \
    \ Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n        Map.Entry<String,\
    \ Integer> maxEntry = Collections.max(entries);\n        return maxEntry.getKey();\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv2a3kle2.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmpv2a3kle2.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\n/tmp/tmpv2a3kle2.java:36: error: no suitable method found for\
    \ max(Collection<Entry<String,Integer>>)\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n                                              \
    \           ^\n    method Collections.<T#1>max(Collection<? extends T#1>) is not\
    \ applicable\n      (inference variable T#1 has incompatible bounds\n        lower\
    \ bounds: Object,Comparable<? super T#1>\n        lower bounds: Entry<String,Integer>)\n\
    \    method Collections.<T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n  where T#1,T#2 are type-variables:\n\
    \    T#1 extends Object,Comparable<? super T#1> declared in method <T#1>max(Collection<?\
    \ extends T#1>)\n    T#2 extends Object declared in method <T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659798440
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                count\
    \ = 1;\n            } else {\n                count++;\n            }\n      \
    \      map.put(word, count);\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Collections.sort(keySet);\n        String maxKey = keySet.get(0);\n \
    \       int maxCount = map.get(maxKey);\n        for (String key : keySet) {\n\
    \            if (map.get(key) > maxCount) {\n                maxKey = key;\n \
    \               maxCount = map.get(key);\n            }\n        }\n        return\
    \ maxKey;\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpagahlgna.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpagahlgna.java:31: error: no suitable method\
    \ found for sort(Set<String>)\n        Collections.sort(keySet);\n           \
    \        ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n  \
    \    (cannot infer type-variable(s) T#1\n        (argument mismatch; Set<String>\
    \ cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmpagahlgna.java:32: error: cannot find symbol\n        String\
    \ maxKey = keySet.get(0);\n                              ^\n  symbol:   method\
    \ get(int)\n  location: variable keySet of type Set<String>\n3 errors\n"
  stdout: ''
  timestamp: 1659798446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            map.put(word, count == null ? 1 : count\
    \ + 1);\n        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : set) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7lw5cf_p.java:23: error: bad operand types for binary operator\
    \ '=='\n            map.put(word, count == null ? 1 : count + 1);\n          \
    \                      ^\n  first type:  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798445
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keySet = map.keySet();\n        Collections.sort(keySet);\n\
    \        String maxKey = keySet.get(0);\n        int maxValue = map.get(maxKey);\n\
    \        for (String key : keySet) {\n            if (map.get(key) == maxValue)\
    \ {\n                maxKey = key;\n                maxValue = map.get(key);\n\
    \            }\n        }\n        return maxKey;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgcf24uho.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpgcf24uho.java:30: error: no suitable method\
    \ found for sort(Set<String>)\n        Collections.sort(keySet);\n           \
    \        ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n  \
    \    (cannot infer type-variable(s) T#1\n        (argument mismatch; Set<String>\
    \ cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmpgcf24uho.java:31: error: cannot find symbol\n        String\
    \ maxKey = keySet.get(0);\n                              ^\n  symbol:   method\
    \ get(int)\n  location: variable keySet of type Set<String>\n3 errors\n"
  stdout: ''
  timestamp: 1659798446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : set) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4dps_qgu.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        words.stream().forEach(w -> map.put(w, map.getOrDefault(w,\
    \ 0) + 1));\n        return words.stream().filter(w -> map.get(w) == map.getOrDefault(w,\
    \ 0)).findFirst().orElse(null);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplddx4rwt.java:25)\n"
  stdout: ''
  timestamp: 1659798446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ counts = new HashMap<>();\n        for (String word : words) {\n           \
    \ int count = counts.get(word);\n            if (count == null) {\n          \
    \      counts.put(word, 1);\n            } else {\n                counts.put(word,\
    \ count + 1);\n            }\n        }\n        Integer maxCount = null;\n  \
    \      for (String word : counts.keySet()) {\n            if (maxCount == null\
    \ || counts.get(word).compareTo(maxCount) < 0) {\n                maxCount = counts.get(word);\n\
    \            }\n        }\n        return maxCount == null ? null : counts.entrySet().stream().filter(e\
    \ -> e.getValue().equals(maxCount)).map(e -> e.getKey()).findFirst().get();\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkr5j42co.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  map.putIfAbsent(String.valueOf(c), 0);\n                map.putIfAbsent(String.valueOf(c),\
    \ map.getOrDefault(String.valueOf(c), 0) + 1);\n                count++;\n   \
    \         }\n            if (count > map.getOrDefault(String.valueOf(word), 0))\
    \ {\n                map.put(String.valueOf(word), count);\n            }\n  \
    \      }\n        Collections.sort(map.entrySet(), Comparator.comparing(Map.Entry::getValue).reversed());\n\
    \        return map.entrySet().stream().findFirst().get().getKey();\n    }\n \
    \   public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmh__ear6.java:32: error: incompatible types: cannot infer type-variable(s)\
    \ T,U\n        Collections.sort(map.entrySet(), Comparator.comparing(Map.Entry::getValue).reversed());\n\
    \                                                             ^\n    (argument\
    \ mismatch; invalid method reference\n      method getValue in interface Entry<K,V>\
    \ cannot be applied to given types\n        required: no arguments\n        found:\
    \    Object\n        reason: actual and formal argument lists differ in length)\n\
    \  where T,U,K,V are type-variables:\n    T extends Object declared in method\
    \ <T,U>comparing(Function<? super T,? extends U>)\n    U extends Comparable<?\
    \ super U> declared in method <T,U>comparing(Function<? super T,? extends U>)\n\
    \    K extends Object declared in interface Entry\n    V extends Object declared\
    \ in interface Entry\n1 error\n"
  stdout: ''
  timestamp: 1659798446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Collection<Map.Entry<String, Integer>> entries =\
    \ map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpha1_3od2.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpha1_3od2.java:30: error: no suitable method\
    \ found for max(Collection<Entry<String,Integer>>)\n        Map.Entry<String,\
    \ Integer> maxEntry = Collections.max(entries);\n                            \
    \                             ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n2 errors\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for(String word : words) {\n            int\
    \ count = 0;\n            for(char c : word.toCharArray()) {\n               \
    \ if(map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if(count > map.size())\
    \ {\n                map.put(word, count);\n            }\n        }\n       \
    \ Collection<String> result = new ArrayList<>();\n        for(String word : map.keySet())\
    \ {\n            if(map.get(word) == map.size()) {\n                result.add(word);\n\
    \            }\n        }\n        if(result.size() > 1) {\n            return\
    \ findMax(result);\n        } else {\n            return result.get(0);\n    \
    \    }\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpauupf7uj.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmpauupf7uj.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\n/tmp/tmpauupf7uj.java:42: error: incompatible types: Collection<String>\
    \ cannot be converted to ArrayList<String>\n            return findMax(result);\n\
    \                           ^\n/tmp/tmpauupf7uj.java:44: error: cannot find symbol\n\
    \            return result.get(0);\n                         ^\n  symbol:   method\
    \ get(int)\n  location: variable result of type Collection<String>\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    4 errors\n"
  stdout: ''
  timestamp: 1659798446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        List<String> result = new ArrayList<>(map.keySet());\n\
    \        Collections.sort(result);\n        return result.isEmpty() ? null : result.get(0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzgpu5i9i.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                count\
    \ = 1;\n            } else {\n                count++;\n            }\n      \
    \      map.put(word, count);\n        }\n        Collection<String> keys = map.keySet();\n\
    \        if (keys.size() == 1) {\n            return keys.get(0);\n        }\n\
    \        int maxCount = keys.size();\n        for (String key : keys) {\n    \
    \        if (map.get(key) > maxCount) {\n                maxCount = map.get(key);\n\
    \            }\n        }\n        return keys.get(0);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplhlhiz5p.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmplhlhiz5p.java:32: error: cannot find symbol\n\
    \            return keys.get(0);\n                       ^\n  symbol:   method\
    \ get(int)\n  location: variable keys of type Collection<String>\n/tmp/tmplhlhiz5p.java:40:\
    \ error: cannot find symbol\n        return keys.get(0);\n                   ^\n\
    \  symbol:   method get(int)\n  location: variable keys of type Collection<String>\n\
    3 errors\n"
  stdout: ''
  timestamp: 1659798446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                count\
    \ = 1;\n            } else {\n                count++;\n            }\n      \
    \      map.put(word, count);\n        }\n        Collections.sort(words, new Comparator<String>()\
    \ {\n            public int compare(String o1, String o2) {\n                return\
    \ map.get(o2) - map.get(o1);\n            }\n        });\n        return words.get(0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdy__qon9.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Collection<String> maxWords = map.entrySet().stream()\n\
    \                .sorted(Map.Entry.comparingByValue())\n                .map(Map.Entry::getKey)\n\
    \                .collect(Collectors.toList());\n        return maxWords.get(0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp50uiy87t.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmp50uiy87t.java:33: error: cannot find symbol\n\
    \        return maxWords.get(0);\n                       ^\n  symbol:   method\
    \ get(int)\n  location: variable maxWords of type Collection<String>\n2 errors\n"
  stdout: ''
  timestamp: 1659798446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  map.putIfAbsent(String.valueOf(c), 0);\n                map.put(String.valueOf(c),\
    \ map.get(c) + 1);\n                count++;\n            }\n            if (count\
    \ > map.size()) {\n                map.put(word, count);\n            }\n    \
    \    }\n        List<String> result = new ArrayList<>(map.keySet());\n       \
    \ Collections.sort(result);\n        return map.get(result.get(0));\n    }\n \
    \   public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpucdye9q8.java:34: error: incompatible types: Integer cannot be\
    \ converted to String\n        return map.get(result.get(0));\n              \
    \        ^\n1 error\n"
  stdout: ''
  timestamp: 1659798446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        int maxCount = 0;\n        String maxWord\
    \ = null;\n        while (iterator.hasNext()) {\n            String word = iterator.next();\n\
    \            int count = map.get(word);\n            if (count > maxCount) {\n\
    \                maxCount = count;\n                maxWord = word;\n        \
    \    }\n        }\n        return maxWord;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkefelgyf.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                count\
    \ = 1;\n            } else {\n                count++;\n            }\n      \
    \      map.put(word, count);\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi_1smyt2.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpi_1smyt2.java:31: error: no suitable method\
    \ found for max(Collection<Entry<String,Integer>>)\n        Map.Entry<String,\
    \ Integer> maxEntry = Collections.max(entries);\n                            \
    \                             ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n2 errors\n"
  stdout: ''
  timestamp: 1659798446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    count = map.get(c) + 1;\n  \
    \              } else {\n                    map.put(c, 1);\n                }\n\
    \            }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Collections.sort(map.entrySet(),\
    \ Comparator.comparing(Map.Entry::getValue));\n        return map.entrySet().stream().map(Map.Entry::getKey).collect(Collectors.toList()).get(0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfeyj7vn8.java:27: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpfeyj7vn8.java:34: error: no suitable method found for sort(Set<Entry<String,Integer>>,Comparator<Object>)\n\
    \        Collections.sort(map.entrySet(), Comparator.comparing(Map.Entry::getValue));\n\
    \                   ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (actual and formal argument\
    \ lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Set<Entry<String,Integer>> cannot be converted to List<T#2>))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Comparable<? super T#1>\
    \ declared in method <T#1>sort(List<T#1>)\n    T#2 extends Object declared in\
    \ method <T#2>sort(List<T#2>,Comparator<? super T#2>)\n/tmp/tmpfeyj7vn8.java:34:\
    \ error: incompatible types: cannot infer type-variable(s) T,U\n        Collections.sort(map.entrySet(),\
    \ Comparator.comparing(Map.Entry::getValue));\n                              \
    \                               ^\n    (argument mismatch; invalid method reference\n\
    \      method getValue in interface Entry<K,V> cannot be applied to given types\n\
    \        required: no arguments\n        found:    Object\n        reason: actual\
    \ and formal argument lists differ in length)\n  where T,U,K,V are type-variables:\n\
    \    T extends Object declared in method <T,U>comparing(Function<? super T,? extends\
    \ U>)\n    U extends Comparable<? super U> declared in method <T,U>comparing(Function<?\
    \ super T,? extends U>)\n    K extends Object declared in interface Entry\n  \
    \  V extends Object declared in interface Entry\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659798444
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n        }\n        Set<Map.Entry<String, Integer>> set =\
    \ map.entrySet();\n        Map.Entry<String, Integer> maxEntry = null;\n     \
    \   for (Map.Entry<String, Integer> entry : set) {\n            if (maxEntry ==\
    \ null || entry.getValue() > maxEntry.getValue()) {\n                maxEntry\
    \ = entry;\n            }\n        }\n        return maxEntry.getKey();\n    }\n\
    \    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9_36h2nw.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmp9_36h2nw.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuyxcc3wu.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpuyxcc3wu.java:36: error: no suitable method found for max(Collection<Entry<String,Integer>>)\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \                                                      ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inferred type does not conform to upper\
    \ bound(s)\n        inferred: Entry<String,Integer>\n        upper bound(s): Comparable<?\
    \ super Entry<String,Integer>>,Object)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (map.size() > words.size())\
    \ {\n                return word;\n            }\n        }\n        return null;\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp98y8o6n_.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmp98y8o6n_.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        List<String> result = new ArrayList<>();\n     \
    \   for (String word : map.keySet()) {\n            if (map.get(word) == map.get(word).max())\
    \ {\n                result.add(word);\n            }\n        }\n        if (result.size()\
    \ == 1) {\n            return result.get(0);\n        }\n        Collections.sort(result);\n\
    \        return result.get(0);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxtbdoj2e.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpxtbdoj2e.java:31: error: method max in\
    \ class Integer cannot be applied to given types;\n            if (map.get(word)\
    \ == map.get(word).max()) {\n                                              ^\n\
    \  required: int,int\n  found:    no arguments\n  reason: actual and formal argument\
    \ lists differ in length\n2 errors\n"
  stdout: ''
  timestamp: 1659798447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  map.putIfAbsent(Character.toString(c), 0);\n                map.putIfAbsent(Character.toString(c),\
    \ map.get(c) + 1);\n                count++;\n            }\n            if (count\
    \ > map.size()) {\n                map.put(word, count);\n            }\n    \
    \    }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = entries.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.findMax(tmpbd_1oa01.java:25)\n\tat Problem.main(tmpbd_1oa01.java:37)\n"
  stdout: ''
  timestamp: 1659798442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<Character, Integer>\
    \ map = new HashMap<>();\n        words.forEach(word -> {\n            for (char\
    \ c : word.toCharArray()) {\n                if (!map.containsKey(c)) {\n    \
    \                map.put(c, 1);\n                } else {\n                  \
    \  map.put(c, map.get(c) + 1);\n                }\n            }\n        });\n\
    \        Collection<Map.Entry<Character, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<Character, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps8tk8gbi.java:31: error: no suitable method found for max(Collection<Entry<Character,Integer>>)\n\
    \        Map.Entry<Character, Integer> maxEntry = Collections.max(entries);\n\
    \                                                            ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<Character,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n/tmp/tmps8tk8gbi.java:32: error: incompatible types: Character cannot\
    \ be converted to String\n        return maxEntry.getKey();\n                \
    \              ^\n2 errors\n"
  stdout: ''
  timestamp: 1659798447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                count\
    \ = 1;\n            } else {\n                count++;\n            }\n      \
    \      map.put(word, count);\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi_1smyt2.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpi_1smyt2.java:31: error: no suitable method\
    \ found for max(Collection<Entry<String,Integer>>)\n        Map.Entry<String,\
    \ Integer> maxEntry = Collections.max(entries);\n                            \
    \                             ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n2 errors\n"
  stdout: ''
  timestamp: 1659798446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Collection<String> keys = map.keySet();\n      \
    \  if (keys.size() == 1) {\n            return keys.get(0);\n        }\n     \
    \   Collections.sort(keys, new Comparator<String>() {\n            public int\
    \ compare(String o1, String o2) {\n                return map.get(o1).compareTo(map.get(o2));\n\
    \            }\n        });\n        return keys.get(0);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphe0_rj13.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmphe0_rj13.java:31: error: cannot find symbol\n\
    \            return keys.get(0);\n                       ^\n  symbol:   method\
    \ get(int)\n  location: variable keys of type Collection<String>\n/tmp/tmphe0_rj13.java:33:\
    \ error: no suitable method found for sort(Collection<String>,<anonymous Comparator<String>>)\n\
    \        Collections.sort(keys, new Comparator<String>() {\n                 \
    \  ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n      (cannot\
    \ infer type-variable(s) T#1\n        (actual and formal argument lists differ\
    \ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<? super T#2>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (argument\
    \ mismatch; Collection<String> cannot be converted to List<T#2>))\n  where T#1,T#2\
    \ are type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmphe0_rj13.java:38: error: cannot find symbol\n        return\
    \ keys.get(0);\n                   ^\n  symbol:   method get(int)\n  location:\
    \ variable keys of type Collection<String>\n4 errors\n"
  stdout: ''
  timestamp: 1659798447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        List<String> result = new ArrayList<>(map.keySet());\n\
    \        Collections.sort(result);\n        return result.isEmpty() ? null : result.get(0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzgpu5i9i.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        int maxCount = keySet.size();\n     \
    \   String maxWord = null;\n        while (iterator.hasNext()) {\n           \
    \ String word = iterator.next();\n            int count = map.get(word);\n   \
    \         if (count > maxCount) {\n                maxCount = count;\n       \
    \         maxWord = word;\n            }\n        }\n        return maxWord;\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9y55wvs.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = set.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7z24ecnu.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ counts = new HashMap<>();\n        for (String word : words) {\n           \
    \ Integer count = counts.get(word);\n            if (count == null) {\n      \
    \          counts.put(word, 1);\n            } else {\n                counts.put(word,\
    \ count + 1);\n            }\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        String maxWord = null;\n        for (String word : counts.keySet()) {\n\
    \            if (counts.get(word) == maxCount) {\n                maxWord = word;\n\
    \                break;\n            }\n        }\n        return maxWord;\n \
    \   }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpisof4gzl.java:41)\n"
  stdout: ''
  timestamp: 1659798447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuyxcc3wu.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpuyxcc3wu.java:36: error: no suitable method found for max(Collection<Entry<String,Integer>>)\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \                                                      ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inferred type does not conform to upper\
    \ bound(s)\n        inferred: Entry<String,Integer>\n        upper bound(s): Comparable<?\
    \ super Entry<String,Integer>>,Object)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  map.putIfAbsent(String.valueOf(c), 0);\n                map.putIfAbsent(String.valueOf(c),\
    \ map.getOrDefault(String.valueOf(c), 0) + 1);\n                count++;\n   \
    \         }\n            if (count > map.size()) {\n                map.put(word,\
    \ count);\n            }\n        }\n        Collection<Map.Entry<String, Integer>>\
    \ entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp88sa_l76.java:33: error: no suitable method found for max(Collection<Entry<String,Integer>>)\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \                                                      ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inference variable T#1 has incompatible\
    \ bounds\n        lower bounds: Object,Comparable<? super T#1>\n        lower\
    \ bounds: Entry<String,Integer>)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\n1 error\n"
  stdout: ''
  timestamp: 1659798447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.containsKey(word) ? map.get(word) : 0;\n            map.put(word,\
    \ count + 1);\n        }\n        Integer maxValue = Collections.max(map.values());\n\
    \        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n         \
    \   if (entry.getValue() == maxValue) {\n                return entry.getKey();\n\
    \            }\n        }\n        return null;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6k7lw0x7.java:35)\n"
  stdout: ''
  timestamp: 1659798447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ count = new HashMap<>();\n        for (String word : words) {\n            Integer\
    \ count = count.get(word);\n            if (count == null) {\n               \
    \ count.put(word, 1);\n            } else {\n                count.put(word, count\
    \ + 1);\n            }\n        }\n        Integer maxCount = count.values().stream().max(Integer::compareTo).get();\n\
    \        return count.entrySet().stream().filter(entry -> entry.getValue() ==\
    \ maxCount).map(Map.Entry::getKey).findFirst().get();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp90ihgbze.java:22: error: variable count is already defined in method\
    \ findMax(ArrayList<String>)\n            Integer count = count.get(word);\n \
    \                   ^\n/tmp/tmp90ihgbze.java:22: error: cannot find symbol\n \
    \           Integer count = count.get(word);\n                               \
    \  ^\n  symbol:   method get(String)\n  location: variable count of type Integer\n\
    /tmp/tmp90ihgbze.java:24: error: cannot find symbol\n                count.put(word,\
    \ 1);\n                     ^\n  symbol:   method put(String,int)\n  location:\
    \ variable count of type Integer\n/tmp/tmp90ihgbze.java:26: error: cannot find\
    \ symbol\n                count.put(word, count + 1);\n                     ^\n\
    \  symbol:   method put(String,int)\n  location: variable count of type Integer\n\
    4 errors\n"
  stdout: ''
  timestamp: 1659798447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (count > map.size())\
    \ {\n                map.put(word, count);\n            }\n        }\n       \
    \ Collection<String> result = new ArrayList<>();\n        for (Map.Entry<String,\
    \ Integer> entry : map.entrySet()) {\n            if (entry.getValue() > result.size())\
    \ {\n                result.add(entry.getKey());\n            }\n        }\n \
    \       if (result.size() > 1) {\n            return result.get(0);\n        }\
    \ else {\n            return result.get(0);\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcr8g32mk.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmpcr8g32mk.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\n/tmp/tmpcr8g32mk.java:42: error: cannot find symbol\n       \
    \     return result.get(0);\n                         ^\n  symbol:   method get(int)\n\
    \  location: variable result of type Collection<String>\n/tmp/tmpcr8g32mk.java:44:\
    \ error: cannot find symbol\n            return result.get(0);\n             \
    \            ^\n  symbol:   method get(int)\n  location: variable result of type\
    \ Collection<String>\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659798447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzi77nu6x.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpzi77nu6x.java:30: error: no suitable method\
    \ found for max(Set<Entry<String,Integer>>)\n        Map.Entry<String, Integer>\
    \ maxEntry = Collections.max(entries);\n                                     \
    \                    ^\n    method Collections.<T#1>max(Collection<? extends T#1>)\
    \ is not applicable\n      (inference variable T#1 has incompatible bounds\n \
    \       lower bounds: Object,Comparable<? super T#1>\n        lower bounds: Entry<String,Integer>)\n\
    \    method Collections.<T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n  where T#1,T#2 are type-variables:\n\
    \    T#1 extends Object,Comparable<? super T#1> declared in method <T#1>max(Collection<?\
    \ extends T#1>)\n    T#2 extends Object declared in method <T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>)\n2 errors\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                count\
    \ = 1;\n            } else {\n                count++;\n            }\n      \
    \      map.put(word, count);\n        }\n        Set<Map.Entry<String, Integer>>\
    \ set = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = null;\n\
    \        for (Map.Entry<String, Integer> entry : set) {\n            if (maxEntry\
    \ == null || entry.getValue() > maxEntry.getValue()) {\n                maxEntry\
    \ = entry;\n            }\n        }\n        return maxEntry.getKey();\n    }\n\
    \    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4o6mmty4.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.containsKey(word) ? map.get(word) : 0;\n            map.put(word,\
    \ count + 1);\n        }\n        Integer maxValue = Collections.max(map.values());\n\
    \        String maxKey = map.entrySet().stream().filter(e -> e.getValue() == maxValue).map(Map.Entry::getKey).collect(Collectors.toList()).get(0);\n\
    \        return maxKey;\n    }\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoajygcgt.java:31)\n"
  stdout: ''
  timestamp: 1659798448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Integer maxCount = Collections.max(map.values());\n\
    \        if (maxCount == null) {\n            return null;\n        }\n      \
    \  for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            if (entry.getValue()\
    \ == maxCount) {\n                return entry.getKey();\n            }\n    \
    \    }\n        return null;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3snxm81x.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<Character, Integer>\
    \ counts = new HashMap<>();\n        for (String word : words) {\n           \
    \ for (char c : word.toCharArray()) {\n                if (counts.containsKey(c))\
    \ {\n                    counts.put(c, counts.get(c) + 1);\n                }\
    \ else {\n                    counts.put(c, 1);\n                }\n         \
    \   }\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        Integer maxCountKey = counts.entrySet().stream().filter(e -> e.getValue()\
    \ == maxCount).map(Map.Entry::getKey).findFirst().get();\n        return words.stream().filter(w\
    \ -> w.contains(maxCountKey)).findFirst().get();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpof2n6vzs.java:31: error: incompatible types: Character cannot be\
    \ converted to Integer\n        Integer maxCountKey = counts.entrySet().stream().filter(e\
    \ -> e.getValue() == maxCount).map(Map.Entry::getKey).findFirst().get();\n   \
    \                                                                            \
    \                                                      ^\n/tmp/tmpof2n6vzs.java:32:\
    \ error: incompatible types: Integer cannot be converted to CharSequence\n   \
    \     return words.stream().filter(w -> w.contains(maxCountKey)).findFirst().get();\n\
    \                                                     ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for(String word : words) {\n            int\
    \ count = map.get(word);\n            map.put(word, count == null ? 1 : count\
    \ + 1);\n        }\n        \n        Set<String> keySet = map.keySet();\n   \
    \     \n        Optional<String> maxKey = keySet.stream().max(Comparator.comparing(s\
    \ -> map.get(s)));\n        \n        if(maxKey.isPresent()) {\n            return\
    \ maxKey.get();\n        }\n        \n        return null;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2460j2ut.java:23: error: bad operand types for binary operator\
    \ '=='\n            map.put(word, count == null ? 1 : count + 1);\n          \
    \                      ^\n  first type:  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> uniqueWords = new HashSet<>(map.keySet());\n\
    \        if (uniqueWords.size() == 1) {\n            return uniqueWords.iterator().next();\n\
    \        }\n        Collections.sort(uniqueWords);\n        return uniqueWords.iterator().next();\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu5t0qk4l.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpu5t0qk4l.java:33: error: no suitable method\
    \ found for sort(Set<String>)\n        Collections.sort(uniqueWords);\n      \
    \             ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (argument mismatch; Set<String>\
    \ cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n2 errors\n"
  stdout: ''
  timestamp: 1659798447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    map.put(c, map.get(c) + 1);\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \ }\n        Set<Map.Entry<String, Integer>> entrySet = map.entrySet();\n    \
    \    Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : entrySet) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3hjdxjx1.java:26: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmp3hjdxjx1.java:28: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<Map.Entry<String, Integer>> set = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = null;\n        for (Map.Entry<String,\
    \ Integer> entry : set) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4dps_qgu.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  map.putIfAbsent(Character.toString(c), 0);\n                map.putIfAbsent(Character.toString(c),\
    \ map.get(c) + 1);\n                count++;\n            }\n            if (map.size()\
    \ > words.size()) {\n                return word;\n            }\n        }\n\
    \        return null;\n    }\n    public static void main(String[] args) {\n \
    \   assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.findMax(tmpwwf391s9.java:25)\n\tat Problem.main(tmpwwf391s9.java:35)\n"
  stdout: ''
  timestamp: 1659798441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                count\
    \ = 1;\n            } else {\n                count++;\n            }\n      \
    \      map.put(word, count);\n        }\n        Set<String> keySet = map.keySet();\n\
    \        Iterator<String> iterator = keySet.iterator();\n        while (iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            int value = map.get(key);\n\
    \            if (value > map.size()) {\n                return key;\n        \
    \    }\n        }\n        return null;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9o5tmmtx.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<Character, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            for\
    \ (char c : word.toCharArray()) {\n                if (!map.containsKey(c)) {\n\
    \                    map.put(c, 1);\n                } else {\n              \
    \      map.put(c, map.get(c) + 1);\n                }\n            }\n       \
    \ }\n        Set<Map.Entry<Character, Integer>> set = map.entrySet();\n      \
    \  Map.Entry<Character, Integer> maxEntry = null;\n        for (Map.Entry<Character,\
    \ Integer> entry : set) {\n            if (maxEntry == null || entry.getValue()\
    \ > maxEntry.getValue()) {\n                maxEntry = entry;\n            }\n\
    \        }\n        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc36512fp.java:37: error: incompatible types: Character cannot be\
    \ converted to String\n        return maxEntry.getKey();\n                   \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659798447
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        List<String> result = new ArrayList<>();\n        for\
    \ (Map.Entry<String, Integer> entry : map.entrySet()) {\n            if (entry.getValue()\
    \ > result.size()) {\n                result.add(entry.getKey());\n          \
    \  }\n        }\n        if (result.size() > 1) {\n            return result.get(0);\n\
    \        }\n        return result.get(0);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqqg_5cmc.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            Integer\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<Map.Entry<String, Integer>> entrySet = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvuih4b7e.java:35)\n"
  stdout: ''
  timestamp: 1659798448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Integer maxValue = Collections.max(map.values());\n\
    \        for (String word : map.keySet()) {\n            if (maxValue == map.get(word))\
    \ {\n                return word;\n            }\n        }\n        return null;\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkzb5yz5l.java:23: error: bad operand types for binary operator\
    \ '=='\n            if (count == null) {\n                      ^\n  first type:\
    \  int\n  second type: <null>\n1 error\n"
  stdout: ''
  timestamp: 1659798448
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  map.putIfAbsent(Character.toString(c), 0);\n                map.put(c, map.get(c)\
    \ + 1);\n                count++;\n            }\n            if (count > map.size())\
    \ {\n                map.put(word, count);\n            }\n        }\n       \
    \ Collections.sort(map.entrySet(), Map.Entry.comparingByValue());\n        return\
    \ map.entrySet().stream().findFirst().get().getKey();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj0q956f0.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                map.put(c, map.get(c) + 1);\n                   \
    \     ^\n/tmp/tmpj0q956f0.java:32: error: no suitable method found for sort(Set<Entry<String,Integer>>,Comparator<Entry<Object,V>>)\n\
    \        Collections.sort(map.entrySet(), Map.Entry.comparingByValue());\n   \
    \                ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (actual and formal argument\
    \ lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Set<Entry<String,Integer>> cannot be converted to List<T#2>))\n\
    \  where V,T#1,T#2 are type-variables:\n    V extends Comparable<? super V>\n\
    \    T#1 extends Comparable<? super T#1> declared in method <T#1>sort(List<T#1>)\n\
    \    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798448
