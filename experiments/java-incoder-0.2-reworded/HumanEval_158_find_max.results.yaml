language: java
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<Character, Integer>\
    \ counts = new HashMap<>();\n        for (String word : words) {\n           \
    \ for (char c : word.toCharArray()) {\n                if (counts.containsKey(c))\
    \ {\n                    counts.put(c, counts.get(c) + 1);\n                }\
    \ else {\n                    counts.put(c, 1);\n                }\n         \
    \   }\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        for (Map.Entry<Character, Integer> entry : counts.entrySet()) {\n   \
    \         if (entry.getValue() == maxCount) {\n                return entry.getKey();\n\
    \            }\n        }\n        return null;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3xe0dru.java:33: error: incompatible types: Character cannot be\
    \ converted to String\n                return entry.getKey();\n              \
    \                     ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        Set<String> keySet = map.keySet();\n        Iterator<String>\
    \ iterator = keySet.iterator();\n        iterator.next();\n        String maxKey\
    \ = iterator.next();\n        int maxValue = map.get(maxKey);\n        while (iterator.hasNext())\
    \ {\n            String key = iterator.next();\n            if (map.get(key) >\
    \ maxValue) {\n                maxKey = key;\n                maxValue = map.get(key);\n\
    \            }\n        }\n        return maxKey;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0m3iqszc.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (map.size() > words.size())\
    \ {\n                return word;\n            }\n        }\n        return null;\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp98y8o6n_.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmp98y8o6n_.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.containsKey(word) ? map.get(word) : 0;\n            map.put(word,\
    \ count + 1);\n        }\n        Set<String> keySet = map.keySet();\n       \
    \ Integer maxValue = keySet.isEmpty() ? null : Collections.max(keySet);\n    \
    \    for (String word : keySet) {\n            if (maxValue == null || maxValue.intValue()\
    \ < map.get(word).intValue()) {\n                maxValue = map.get(word);\n \
    \           }\n        }\n        return maxValue == null ? null : maxValue.intValue()\
    \ < 1 ? null : maxValue.intValue() + \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi3q22g71.java:26: error: incompatible types: bad type in conditional\
    \ expression\n        Integer maxValue = keySet.isEmpty() ? null : Collections.max(keySet);\n\
    \                                                                    ^\n    inference\
    \ variable T has incompatible upper bounds Integer,String,Object,Comparable<?\
    \ super T>\n  where T is a type-variable:\n    T extends Object,Comparable<? super\
    \ T> declared in method <T>max(Collection<? extends T>)\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuyxcc3wu.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpuyxcc3wu.java:36: error: no suitable method found for max(Collection<Entry<String,Integer>>)\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \                                                      ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inferred type does not conform to upper\
    \ bound(s)\n        inferred: Entry<String,Integer>\n        upper bound(s): Comparable<?\
    \ super Entry<String,Integer>>,Object)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                count\
    \ = 1;\n            } else {\n                count++;\n            }\n      \
    \      map.put(word, count);\n        }\n        Set<Map.Entry<String, Integer>>\
    \ entrySet = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj8ugx6sb.java:23: error: incomparable types: int and <null>\n \
    \           if (count == null) {\n                      ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (count > map.size())\
    \ {\n                map.put(word, count);\n            }\n        }\n       \
    \ List<String> result = new ArrayList<>();\n        for (Map.Entry<String, Integer>\
    \ entry : map.entrySet()) {\n            if (entry.getValue() == words.size())\
    \ {\n                result.add(entry.getKey());\n            }\n        }\n \
    \       if (result.size() > 1) {\n            return findMax(result);\n      \
    \  } else {\n            return result.get(0);\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpybpqdaed.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmpybpqdaed.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\n/tmp/tmpybpqdaed.java:42: error: incompatible types: List<String>\
    \ cannot be converted to ArrayList<String>\n            return findMax(result);\n\
    \                           ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ countMap = new HashMap<>();\n        for(String word : words) {\n          \
    \  int count = countMap.get(word);\n            countMap.put(word, count == null\
    \ ? 1 : count + 1);\n        }\n        \n        Collection<Map.Entry<String,\
    \ Integer>> entries = countMap.entrySet();\n        \n        Optional<Map.Entry<String,\
    \ Integer>> maxEntry = entries.stream().max(Comparator.comparing(Map.Entry::getValue));\n\
    \        \n        if(maxEntry.isPresent()) {\n            return maxEntry.get().getKey();\n\
    \        } else {\n            return null;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4krczfb5.java:23: error: incomparable types: int and <null>\n \
    \           countMap.put(word, count == null ? 1 : count + 1);\n             \
    \                        ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Set<String> keySet = map.keySet();\n        Integer\
    \ maxCount = keySet.isEmpty() ? null : Collections.max(keySet);\n        if (maxCount\
    \ == null) {\n            return null;\n        }\n        String maxWord = null;\n\
    \        for (String word : keySet) {\n            if (maxCount.equals(map.get(word)))\
    \ {\n                maxWord = word;\n                break;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplaluj8wd.java:23: error: incomparable types: int and <null>\n \
    \           if (count == null) {\n                      ^\n/tmp/tmplaluj8wd.java:30:\
    \ error: incompatible types: bad type in conditional expression\n        Integer\
    \ maxCount = keySet.isEmpty() ? null : Collections.max(keySet);\n            \
    \                                                        ^\n    inference variable\
    \ T has incompatible upper bounds Integer,String,Object,Comparable<? super T>\n\
    \  where T is a type-variable:\n    T extends Object,Comparable<? super T> declared\
    \ in method <T>max(Collection<? extends T>)\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<Character, Integer>\
    \ map = new HashMap<>();\n        words.forEach(w -> {\n            for(char c\
    \ : w.toCharArray()) {\n                Integer count = map.get(c);\n        \
    \        map.put(c, count == null ? 1 : count + 1);\n            }\n        });\n\
    \        \n        List<Map.Entry<Character, Integer>> entries = map.entrySet().stream()\n\
    \                .sorted(Map.Entry.comparingByValue().reversed())\n          \
    \      .collect(Collectors.toList());\n        \n        return entries.stream()\n\
    \                .filter(e -> e.getValue() == entries.stream().max(Map.Entry.comparingByValue()).getValue())\n\
    \                .map(Map.Entry::getKey)\n                .findFirst()\n     \
    \           .orElse(null);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn215pzp8.java:29: error: incompatible types: Comparator<Entry<Object,V>>\
    \ cannot be converted to Comparator<? super Entry<Character,Integer>>\n      \
    \          .sorted(Map.Entry.comparingByValue().reversed())\n                \
    \                                             ^\n  where V is a type-variable:\n\
    \    V extends Comparable<? super V>\n/tmp/tmpn215pzp8.java:33: error: cannot\
    \ find symbol\n                .filter(e -> e.getValue() == entries.stream().max(Map.Entry.comparingByValue()).getValue())\n\
    \                                                                            \
    \                   ^\n  symbol:   method getValue()\n  location: class Optional<Entry<Character,Integer>>\n\
    /tmp/tmpn215pzp8.java:36: error: incompatible types: Character cannot be converted\
    \ to String\n                .orElse(null);\n                       ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ counts = new HashMap<>();\n        for (String word : words) {\n           \
    \ Integer count = counts.get(word);\n            if (count == null) {\n      \
    \          count = 0;\n            }\n            counts.put(word, count + 1);\n\
    \        }\n        Integer maxCount = Collections.max(counts.values());\n   \
    \     String maxWord = null;\n        for (String word : counts.keySet()) {\n\
    \            if (counts.get(word) == maxCount) {\n                maxWord = word;\n\
    \                break;\n            }\n        }\n        return maxWord;\n \
    \   }\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0a7hg38w.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Collection<String> maxWords = map.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey();\n\
    \        return maxWords;\n    }\n    public static void main(String[] args) {\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
    of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp17mi1c17.java:23: error: incomparable types: int and <null>\n \
    \           if (count == null) {\n                      ^\n/tmp/tmp17mi1c17.java:29:\
    \ error: incompatible types: String cannot be converted to Collection<String>\n\
    \        Collection<String> maxWords = map.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey();\n\
    \                                                                            \
    \                                ^\n/tmp/tmp17mi1c17.java:30: error: incompatible\
    \ types: Collection<String> cannot be converted to String\n        return maxWords;\n\
    \               ^\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<Character, Integer>\
    \ charCount = new HashMap<>();\n        for (String word : words) {\n        \
    \    for (char c : word.toCharArray()) {\n                charCount.put(c, charCount.getOrDefault(c,\
    \ 0) + 1);\n            }\n        }\n        Integer maxCount = charCount.values().stream().max(Integer::compare).get();\n\
    \        List<String> maxWords = charCount.entrySet().stream().filter(e -> e.getValue()\
    \ == maxCount).collect(Collectors.toList());\n        if (maxWords.size() > 1)\
    \ {\n            return maxWords.get(0).getKey();\n        }\n        return maxWords.get(0).getKey().substring(0,\
    \ 1);\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj0220mmj.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        List<String> maxWords = charCount.entrySet().stream().filter(e\
    \ -> e.getValue() == maxCount).collect(Collectors.toList());\n               \
    \                                                                            \
    \                ^\n    equality constraints: String\n    lower bounds: Entry<Character,Integer>\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>toList()\n\
    /tmp/tmpj0220mmj.java:29: error: cannot find symbol\n            return maxWords.get(0).getKey();\n\
    \                                  ^\n  symbol:   method getKey()\n  location:\
    \ class String\n/tmp/tmpj0220mmj.java:31: error: cannot find symbol\n        return\
    \ maxWords.get(0).getKey().substring(0, 1);\n                              ^\n\
    \  symbol:   method getKey()\n  location: class String\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (map.size() > words.size())\
    \ {\n                return word;\n            }\n        }\n        return words.get(0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_kemonwm.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmp_kemonwm.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > 1) {\n                String key = \"\";\n                for (Map.Entry<String,\
    \ Integer> entry : map.entrySet()) {\n                    if (entry.getValue()\
    \ == count) {\n                        key = entry.getKey();\n               \
    \     }\n                }\n                return key;\n            }\n     \
    \   }\n        return null;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnh5iafdh.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<Character, Integer>\
    \ charCount = new HashMap<>();\n        for (String word : words) {\n        \
    \    for (char c : word.toCharArray()) {\n                if (charCount.containsKey(c))\
    \ {\n                    charCount.put(c, charCount.get(c) + 1);\n           \
    \     } else {\n                    charCount.put(c, 1);\n                }\n\
    \            }\n        }\n        Integer maxCount = null;\n        for (Map.Entry<Character,\
    \ Integer> entry : charCount.entrySet()) {\n            if (maxCount == null ||\
    \ entry.getValue() > maxCount) {\n                maxCount = entry.getValue();\n\
    \            }\n        }\n        if (maxCount == null) {\n            return\
    \ null;\n        }\n        ArrayList<String> wordList = new ArrayList<>();\n\
    \        for (String word : words) {\n            boolean found = false;\n   \
    \         for (char c : word.toCharArray()) {\n                if (charCount.containsKey(c))\
    \ {\n                    if (charCount.get(c) == maxCount) {\n               \
    \         found = true;\n                        break;\n                    }\n\
    \                }\n            }\n            if (!found) {\n               \
    \ wordList.add(word);\n            }\n        }\n        return wordList.get(0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp09x7njzt.java:57)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
    abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuyxcc3wu.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, 1);\n                            ^\n\
    /tmp/tmpuyxcc3wu.java:36: error: no suitable method found for max(Collection<Entry<String,Integer>>)\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \                                                      ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (inferred type does not conform to upper\
    \ bound(s)\n        inferred: Entry<String,Integer>\n        upper bound(s): Comparable<?\
    \ super Entry<String,Integer>>,Object)\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object,Comparable<? super\
    \ T#1> declared in method <T#1>max(Collection<? extends T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>max(Collection<? extends T#2>,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n                count++;\n            }\n            if (map.size() > words.size())\
    \ {\n                return word;\n            }\n        }\n        return null;\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp98y8o6n_.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                    map.put(c, map.get(c) + 1);\n               \
    \             ^\n/tmp/tmp98y8o6n_.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                    map.put(c, 1);\n               \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                map.put(word,\
    \ 1);\n            } else {\n                map.put(word, count + 1);\n     \
    \       }\n        }\n        Integer maxValue = Collections.max(map.values());\n\
    \        if (maxValue == null) {\n            return null;\n        }\n      \
    \  for (String word : map.keySet()) {\n            if (maxValue == map.get(word))\
    \ {\n                return word;\n            }\n        }\n        return null;\n\
    \    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb0erv2j.java:23: error: incomparable types: int and <null>\n \
    \           if (count == null) {\n                      ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function that accepts an array array list of strings.\n\
    \    // The array list contains different words. Return the word with maximum\
    \ number\n    // of unique characters. If multiple strings have maximum number\
    \ of unique\n    // characters, return the one which comes first in lexicographical\
    \ order.\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\"\
    , (String)\"of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
    game\"))))\n    // (\"enam\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
    aaaaaaa\", (String)\"bb\", (String)\"cc\"))))\n    // (\"aaaaaaa\")\n    public\
    \ static String findMax(ArrayList<String> words) {\n        Map<String, Integer>\
    \ counts = new HashMap<>();\n        for (String word : words) {\n           \
    \ int count = counts.getOrDefault(word, 0);\n            counts.put(word, count\
    \ + 1);\n        }\n        Integer maxCount = Collections.max(counts.values());\n\
    \        for (String word : counts.keySet()) {\n            if (counts.get(word)\
    \ == maxCount) {\n                return word;\n            }\n        }\n   \
    \     return null;\n    }\n    public static void main(String[] args) {\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"\
    string\")))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
    \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
    cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
    )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
    )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\",\
    \ (String)\"are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"\
    nation\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
    this\", (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n\
    \    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
    b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
    , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw3yzmjy9.java:35)\n"
  stdout: ''
