language: java
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = new ArrayList<>();\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd_ow2fhw.java:98: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Set<String>\
    \ vowels = new HashSet<>();\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuauotq26.java:97: error: not a statement\n        vowels.add\n\
    \              ^\n/tmp/tmpuauotq26.java:97: error: ';' expected\n        vowels.add\n\
    \                  ^\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        char[] chars\
    \ = word.toCharArray();\n        Arrays.sort(chars);\n        char[] vowels =\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        Arrays.sort(vowels);\n        char[] consonants\
    \ = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        Arrays.sort(consonants);\n        int\
    \ start = 0;\n        int end = chars.length - 1;\n        while (start < end)\
    \ {\n            int mid = (start + end) / 2;\n            if (chars[mid] >= 'a'\
    \ && chars[mid] <= 'z') {\n                if (vowels.contains(chars[mid])) {\n\
    \                    end = mid - 1;\n                } else {\n              \
    \      start = mid + 1;\n                }\n            } else if (chars[mid]\
    \ >= 'A' && chars[mid] <= 'Z') {\n                if (vowels.contains(chars[mid]))\
    \ {\n                    start = mid + 1;\n                } else {\n        \
    \            end = mid - 1;\n                }\n            } else {\n       \
    \         if (consonants.contains(chars[mid])) {\n                    start =\
    \ mid + 1;\n                } else {\n                    end = mid - 1;\n   \
    \             }\n            }\n        }\n        if (start == end) {\n     \
    \       return \"\";\n        }\n        return chars[start];\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiykumz4s.java:35: error: cannot find symbol\n                if\
    \ (vowels.contains(chars[mid])) {\n                          ^\n  symbol:   method\
    \ contains(char)\n  location: variable vowels of type char[]\n/tmp/tmpiykumz4s.java:41:\
    \ error: cannot find symbol\n                if (vowels.contains(chars[mid]))\
    \ {\n                          ^\n  symbol:   method contains(char)\n  location:\
    \ variable vowels of type char[]\n/tmp/tmpiykumz4s.java:47: error: cannot find\
    \ symbol\n                if (consonants.contains(chars[mid])) {\n           \
    \                   ^\n  symbol:   method contains(char)\n  location: variable\
    \ consonants of type char[]\n/tmp/tmpiykumz4s.java:57: error: incompatible types:\
    \ char cannot be converted to String\n        return chars[start];\n         \
    \           ^\n4 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Set<Character>\
    \ vowels = new HashSet<>();\n        vowels.add('a');\n        vowels.add('e');\n\
    \        vowels.add('i');\n        vowels.add('o');\n        vowels.add('u');\n\
    \        vowels.add('y');\n        vowels.add('\xE6');\n        vowels.add('\xF8\
    ');\n        vowels.add('\xDF');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xE6');\n        vowels.add('\xF8');\n        vowels.add('\xDF\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xE6');\n        vowels.add('\xF8\
    ');\n        vowels.add('\xDF');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xE6');\n        vowels.add('\xF8');\n        vowels.add('\xDF\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xE6');\n        vowels.add('\xF8\
    ');\n        vowels.add('\xDF');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xE6');\n        vowels.add('\xF8');\n        vowels.add('\xDF\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xE6');\n        vowels.add('\xF8\
    ');\n        vowels.add('\xDF');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xE6');\n        vowels.add('\xF8');\n        vowels.add('\xDF\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xE6');\n        vowels.add('\xF8\
    ');\n        vowels.add('\xDF');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xE6');\n        vowels.add('\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdjz5t63v.java:88: error: illegal line end in character literal\n\
    \        vowels.add('\n                   ^\n/tmp/tmpdjz5t63v.java:89: error:\
    \ ';' expected\n    }\n^\n/tmp/tmpdjz5t63v.java:90: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpdjz5t63v.java:90:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpdjz5t63v.java:90: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpdjz5t63v.java:90:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpdjz5t63v.java:90: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpdjz5t63v.java:106: error: reached end of file while parsing\n}\n\
    \ ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n        List<String>\
    \ consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants = Arrays.asList(vowels,\
    \ consonants);\n        List<String> vowelsAndConsonantsReversed = Arrays.asList(vowels.stream().reverse().collect(Collectors.toList()),\
    \ consonants.stream().reverse().collect(Collectors.toList()));\n        List<String>\
    \ vowelsAndConsonantsReversedAndConsonants = Arrays.asList(vowelsAndConsonants,\
    \ consonants.stream().collect(Collectors.toList()));\n        List<String> vowelsAndConsonantsReversedAndConsonantsReversed\
    \ = Arrays.asList(vowelsAndConsonantsReversed, consonants.stream().reverse().collect(Collectors.toList()));\n\
    \        List<String> vowelsAndConsonantsReversedAndConsonantsReversedAndConsonants\
    \ = Arrays.asList(vowelsAndConsonantsReversedAndConsonants, consonants.stream().reverse().collect(Collectors.toList()));\n\
    \        List<String> vowelsAndConsonantsReversedAndConsonantsReversedAndConsonantsReversed\
    \ = Arrays.asList(vowelsAndConsonantsReversedAndConsonantsReversed, consonants.stream().reverse().collect(Collectors.toList()));\n\
    \        List<String> vowelsAndConsonantsReversedAndConsonantsReversedAndConsonantsReversedAndConsonants\
    \ = Arrays.asList(vowelsAndConsonantsReversedAndConsonantsReversedAndConsonants,\
    \ consonants.stream().reverse().collect(Collectors.toList()));\n        List<String>\
    \ vowelsAndConsonantsReversedAndConsonantsReversedAndConsonantsReversedAndConsonantsReversed\
    \ = Arrays.asList(vowelsAndConsonantsReversedAndConsonantsReversedAndConsonants,\
    \ consonants.stream().reverse().collect(Collectors.toList()));\n        List<String>\
    \ vowelsAndConsonantsReversedAndConsonantsReversedAndConsonantsReversedAndConsonantsReversedAndConsonants\
    \ = Arrays.asList(vowelsAndConsonantsReversedAndConsonantsReversedAndConsonantsReversed,\
    \ consonants.stream\n    }\n    public static void main(String[] args) {\n   \
    \ assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg3b_yu0i.java:34: error: ')' expected\n        List<String> vowelsAndConsonantsReversedAndConsonantsReversedAndConsonantsReversedAndConsonantsReversedAndConsonants\
    \ = Arrays.asList(vowelsAndConsonantsReversedAndConsonantsReversedAndConsonantsReversed,\
    \ consonants.stream\n                                                        \
    \                                                                            \
    \                                                                            \
    \                     ^\n/tmp/tmpg3b_yu0i.java:36: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpg3b_yu0i.java:36:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpg3b_yu0i.java:36: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpg3b_yu0i.java:36:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpg3b_yu0i.java:36: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpg3b_yu0i.java:52: error: reached end of file while parsing\n}\n ^\n\
    7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        List<String>\
    \ consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"z\");\n        List<String> vowelsAndConsonants = Arrays.asList(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"b\", \"c\", \"d\", \"f\", \"g\", \"\
    h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    v\", \"w\", \"x\", \"z\");\n        List<String> consonantsAndVowels = Arrays.asList(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\", \"a\", \"e\", \"\
    i\", \"o\", \"u\", \"y\");\n        List<String> vowelsAndConsonantsAndVowels\
    \ = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"\
    , \"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"e\", \"i\", \"o\", \"u\"\
    , \"y\");\n        List<String> vowelsAndConsonantsAndVowelsAndConsonants = Arrays.asList(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\", \"a\", \"e\", \"\
    i\", \"o\", \"u\", \"y\", \"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        List<String> vowelsAndConsonantsAndVowelsAndConsonantsAndVowels\
    \ = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"\
    , \"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"e\", \"i\", \"o\", \"u\"\
    , \"y\", \"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"b\", \"c\", \"d\", \"f\"\
    , \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"z\", \"a\", \"e\", \"i\", \"o\", \"u\", \"y\"\
    );\n        List<String> vowelsAndConsonantsAndVowelsAndConsonantsAndVowel\n \
    \   }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiector8o.java:31: error: ';' expected\n        List<String> vowelsAndConsonantsAndVowelsAndConsonantsAndVowel\n\
    \                                                                      ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = new ArrayList<>();\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd_ow2fhw.java:98: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = new ArrayList<>();\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd_ow2fhw.java:98: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Set<Character>\
    \ vowels = Arrays.stream(word.split(\"\")).map(Character::toLowerCase)\n     \
    \           .filter(c -> c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u')\n                .collect(Collectors.toSet());\n        Set<Character>\
    \ consonants = Arrays.stream(word.split(\"\")).map(Character::toLowerCase)\n \
    \               .filter(c -> c != 'a' && c != 'e' && c != 'i' && c != 'o' && c\
    \ != 'u')\n                .collect(Collectors.toSet());\n        Set<Character>\
    \ vowelsBefore = Arrays.stream(word.split(\"\")).map(Character::toLowerCase)\n\
    \                .filter(c -> c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u')\n                .collect(Collectors.toSet());\n        Set<Character>\
    \ vowelsAfter = Arrays.stream(word.split(\"\")).map(Character::toLowerCase)\n\
    \                .filter(c -> c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u')\n                .collect(Collectors.toSet());\n        Set<Character>\
    \ consonantsBefore = Arrays.stream(word.split(\"\")).map(Character::toLowerCase)\n\
    \                .filter(c -> c != 'a' && c != 'e' && c != 'i' && c != 'o' &&\
    \ c != 'u')\n                .collect(Collectors.toSet());\n        Set<Character>\
    \ consonantsAfter = Arrays.stream(word.split(\"\")).map(Character::toLowerCase)\n\
    \                .filter(c -> c != 'a' && c != 'e' && c != 'i' && c != 'o' &&\
    \ c != 'u')\n                .collect(Collectors.toSet());\n        Set<Character>\
    \ vowelsBeforeConsonants = vowelsBefore.stream()\n                .filter(c ->\
    \ consonants.contains(c))\n                .collect(Collectors.toSet());\n   \
    \     Set<Character> vowelsAfterConsonants = vowelsAfter.stream()\n          \
    \      .filter(c -> consonants.contains(c))\n                .collect(Collectors.toSet());\n\
    \        Set<Character> consonantsBeforeConsonants = consonantsBefore.stream()\n\
    \                .filter(c -> vowels.contains(c))\n                .collect(Collectors.toSet());\n\
    \        Set<Character> consonantsAfterConsonants = consonantsAfter.stream()\n\
    \                .filter(c -> vowels.contains(c))\n                .collect(Collectors.toSet());\n\
    \        Set<Character> vowelsBeforeConsonantsConsonant\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps6l20jry.java:54: error: ';' expected\n        Set<Character> vowelsBeforeConsonantsConsonant\n\
    \                                                      ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n        List<String>\
    \ consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\");\n        List<String> consonants2 = Arrays.asList(\"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String>\
    \ consonants3 = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\");\n        List<String> consonants4 = Arrays.asList(\"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String>\
    \ consonants5 = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\");\n        List<String> consonants6 = Arrays.asList(\"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String>\
    \ consonants7 = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\");\n        List<String> consonants8 = Arrays.asList(\"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String>\
    \ consonants9 = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\");\n        List<String> consonants10 = Arrays.asList(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n       \
    \ List<String> consonants11 = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1rxf16sw.java:35: error: unclosed string literal\n        List<String>\
    \ consonants11 = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\n\
    \                                                                            \
    \    ^\n/tmp/tmp1rxf16sw.java:35: error: ';' expected\n        List<String> consonants11\
    \ = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\n            \
    \                                                                      ^\n/tmp/tmp1rxf16sw.java:37:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmp1rxf16sw.java:37: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmp1rxf16sw.java:37: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp1rxf16sw.java:37: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp1rxf16sw.java:37:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp1rxf16sw.java:53: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = new ArrayList<>();\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd_ow2fhw.java:98: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n        List<String>\
    \ consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\");\n        List<String> vowelsBefore = Arrays.asList(\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n        List<String> vowelsAfter = Arrays.asList(\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n        List<String> consonantsBefore = Arrays.asList(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n       \
    \ List<String> consonantsAfter = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String> vowelsBeforeConsonants\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n        List<String> vowelsAfterConsonants\
    \ = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n        List<String> consonantsBeforeConsonants\
    \ = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\");\n        List<String> consonantsAfterConsonants = Arrays.asList(\"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String>\
    \ vowelsBeforeConsonantsAfter = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\"\
    );\n        List<String> vowelsAfterConsonantsAfter = Arrays.asList(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n        List<String> consonantsBeforeConsonantsAfter\
    \ = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\");\n        List<String> consonantsAfterConsonantsAfter = Arrays.asList(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_0c2p5f9.java:37: error: unclosed string literal\n        List<String>\
    \ consonantsAfterConsonantsAfter = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"\n                                        \
    \                                                                            \
    \                                                    ^\n/tmp/tmp_0c2p5f9.java:37:\
    \ error: ';' expected\n        List<String> consonantsAfterConsonantsAfter = Arrays.asList(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"\n            \
    \                                                                            \
    \                                                                            \
    \     ^\n/tmp/tmp_0c2p5f9.java:39: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp_0c2p5f9.java:39: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmp_0c2p5f9.java:39:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmp_0c2p5f9.java:39: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmp_0c2p5f9.java:39:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp_0c2p5f9.java:55: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = new ArrayList<>();\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd_ow2fhw.java:98: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Set<Character>\
    \ vowels = new HashSet<>();\n        vowels.add('a');\n        vowels.add('e');\n\
    \        vowels.add('i');\n        vowels.add('o');\n        vowels.add('u');\n\
    \        vowels.add('y');\n        vowels.add('\xE6');\n        vowels.add('\xF8\
    ');\n        vowels.add('\xDF');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xE6');\n        vowels.add('\xF8');\n        vowels.add('\xDF\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xE6');\n        vowels.add('\xF8\
    ');\n        vowels.add('\xDF');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xE6');\n        vowels.add('\xF8');\n        vowels.add('\xDF\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xE6');\n        vowels.add('\xF8\
    ');\n        vowels.add('\xDF');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xE6');\n        vowels.add('\xF8');\n        vowels.add('\xDF\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xE6');\n        vowels.add('\xF8\
    ');\n        vowels.add('\xDF');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xE6');\n        vowels.add('\xF8');\n        vowels.add('\xDF\
    ');\n        vowels.add('\xFE');\n        vowels.add('\xE6');\n        vowels.add('\xF8\
    ');\n        vowels.add('\xDF');\n        vowels.add('\xFE');\n        vowels.add('\xE6\
    ');\n        vowels.add('\xF8');\n        vowels.add('\xDF');\n        vowels.add('\xFE\
    ');\n        vowels.add('\xE6');\n        vowels.add('\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdjz5t63v.java:88: error: illegal line end in character literal\n\
    \        vowels.add('\n                   ^\n/tmp/tmpdjz5t63v.java:89: error:\
    \ ';' expected\n    }\n^\n/tmp/tmpdjz5t63v.java:90: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpdjz5t63v.java:90:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpdjz5t63v.java:90: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpdjz5t63v.java:90:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpdjz5t63v.java:90: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpdjz5t63v.java:106: error: reached end of file while parsing\n}\n\
    \ ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        List<String>\
    \ consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"z\");\n        List<String> vowelsAndConsonants = Arrays.asList(vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants2 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants);\n        List<String> vowelsAndConsonants3\
    \ = Arrays.asList(vowels, consonants, vowels, consonants, vowels, consonants);\n\
    \        List<String> vowelsAndConsonants4 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants);\n        List<String>\
    \ vowelsAndConsonants5 = Arrays.asList(vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants);\n        List<String>\
    \ vowelsAndConsonants6 = Arrays.asList(vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants);\n\
    \        List<String> vowelsAndConsonants7 = Arrays.asList(vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants);\n        List<String> vowelsAndConsonants8\
    \ = Arrays.asList(vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants, vowels, consonants, vowels, consonants, vowels, consonants,\
    \ vowels, consonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants10 = Arrays.asList(vowels,\
    \ consonants, vowels, consonants, vowels, consonants, vowels, consonants, vowels,\
    \ consonants, vowels, consonants, \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpavagn92b.java:36: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpavagn92b.java:36: error: ';' expected\n    }\n     ^\n/tmp/tmpavagn92b.java:37:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpavagn92b.java:37: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpavagn92b.java:37: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpavagn92b.java:37: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpavagn92b.java:53: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n        List<String>\
    \ consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\");\n        List<String> vowelsAndConsonants = Arrays.asList(vowels,\
    \ consonants);\n        List<String> vowelsAndConsonants2 = Arrays.asList(vowels,\
    \ consonants, vowelsAndConsonants);\n        List<String> vowelsAndConsonants3\
    \ = Arrays.asList(vowelsAndConsonants2, vowelsAndConsonants);\n        List<String>\
    \ vowelsAndConsonants4 = Arrays.asList(vowelsAndConsonants3, vowelsAndConsonants);\n\
    \        List<String> vowelsAndConsonants5 = Arrays.asList(vowelsAndConsonants4,\
    \ vowelsAndConsonants);\n        List<String> vowelsAndConsonants6 = Arrays.asList(vowelsAndConsonants5,\
    \ vowelsAndConsonants);\n        List<String> vowelsAndConsonants7 = Arrays.asList(vowelsAndConsonants6,\
    \ vowelsAndConsonants);\n        List<String> vowelsAndConsonants8 = Arrays.asList(vowelsAndConsonants7,\
    \ vowelsAndConsonants);\n        List<String> vowelsAndConsonants9 = Arrays.asList(vowelsAndConsonants8,\
    \ vowelsAndConsonants);\n        List<String> vowelsAndConsonants10 = Arrays.asList(vowelsAndConsonants9,\
    \ vowelsAndConsonants);\n        List<String> vowelsAndConsonants11 = Arrays.asList(vowelsAndConsonants10,\
    \ vowelsAndConsonants);\n        List<String> vowelsAndConsonants12 = Arrays.asList(vowelsAndConsonants11,\
    \ vowelsAndConsonants);\n        List<String> vowelsAndConsonants13 = Arrays.asList(vowelsAndConsonants12,\
    \ vowelsAndConsonants);\n        List<String> vowelsAndConsonants14 = Arrays.asList(vowelsAndConsonants13,\
    \ vowelsAndConsonants);\n        List<String> vowelsAndConsonants15 = Arrays.asList(vowelsAndConsonants14,\
    \ vowelsAndConsonants);\n        List<String> vowelsAndConsonants16 = Arrays.asList(vowelsAndConsonants15,\
    \ vowelsAndConsonants);\n        List<String> vowelsAndConsonants17 = Arrays.asList(vowelsAndConsonants16,\
    \ vowelsAndConsonants);\n        List<String> vowel\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1mky3qsb.java:43: error: ';' expected\n        List<String> vowel\n\
    \                          ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = new ArrayList<>();\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd_ow2fhw.java:98: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = new ArrayList<>();\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd_ow2fhw.java:98: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = new ArrayList<>();\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd_ow2fhw.java:98: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n        List<String>\
    \ consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\");\n        List<String> consonants2 = Arrays.asList(\"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String>\
    \ consonants3 = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\");\n        List<String> consonants4 = Arrays.asList(\"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String>\
    \ consonants5 = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\");\n        List<String> consonants6 = Arrays.asList(\"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String>\
    \ consonants7 = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\");\n        List<String> consonants8 = Arrays.asList(\"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        List<String>\
    \ consonants9 = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\");\n        List<String> consonants10 = Arrays.asList(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n       \
    \ List<String> consonants11 = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1rxf16sw.java:35: error: unclosed string literal\n        List<String>\
    \ consonants11 = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\n\
    \                                                                            \
    \    ^\n/tmp/tmp1rxf16sw.java:35: error: ';' expected\n        List<String> consonants11\
    \ = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\n            \
    \                                                                      ^\n/tmp/tmp1rxf16sw.java:37:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmp1rxf16sw.java:37: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmp1rxf16sw.java:37: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp1rxf16sw.java:37: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp1rxf16sw.java:37:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp1rxf16sw.java:53: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
