language: java
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long a = 1;\n     \
    \   long b = 2;\n        long c = 1;\n        long d = 1;\n        long e = 1;\n\
    \        long f = 1;\n        long g = 1;\n        long h = 1;\n        long i\
    \ = 1;\n        long j = 1;\n        long k = 1;\n        long l = 1;\n      \
    \  long m = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n\
    \        long q = 1;\n        long r = 1;\n        long s = 1;\n        long t\
    \ = 1;\n        long u = 1;\n        long v = 1;\n        long w = 1;\n      \
    \  long x = 1;\n        long y = 1;\n        long z = 1;\n        long a = 1;\n\
    \        long b = 2;\n        long c = 1;\n        long d = 1;\n        long e\
    \ = 1;\n        long f = 1;\n        long g = 1;\n        long h = 1;\n      \
    \  long i = 1;\n        long j = 1;\n        long k = 1;\n        long l = 1;\n\
    \        long m = 1;\n        long n = 1;\n        long o = 1;\n        long p\
    \ = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n      \
    \  long t = 1;\n        long u = 1;\n        long v = 1;\n        long w = 1;\n\
    \        long x = 1;\n        long y = 1;\n        long z = 1;\n        long a\
    \ = 1;\n        long b = 2;\n        long c = 1;\n        long d = 1;\n      \
    \  long e = 1;\n        long f = 1;\n        long g = 1;\n        long h = 1;\n\
    \        long i = 1;\n        long j = 1;\n        long k = 1;\n        long l\
    \ = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n      \
    \  long p = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n\
    \        long t = 1;\n        long u = 1;\n        long v = 1;\n        long w\
    \ = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n      \
    \  long a = 1;\n        long b = 2;\n        long c = 1;\n        long d = 1;\n\
    \        long e = 1;\n        long f = 1;\n        long g = 1;\n        long h\
    \ = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n      \
    \  long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaj36ollq.java:127: error: ';' expected\n        long w\n      \
    \        ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n == 1l) {\n    \
    \        list.add(1l);\n            list.add(3l);\n            list.add(2l);\n\
    \            list.add(8l);\n            return list;\n        }\n        if (n\
    \ % 2 == 0) {\n            list.add(tri(n - 1l));\n            list.add(tri(n\
    \ - 2l));\n            list.add(tri(n + 1l));\n        } else {\n            list.add(tri(n\
    \ - 1l));\n            list.add(tri(n - 2l));\n            list.add(tri(n + 1l));\n\
    \            list.add(tri(n - 3l));\n        }\n        return list;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_e69zp2v.java:35: error: no suitable method found for add(ArrayList<Long>)\n\
    \            list.add(tri(n - 1l));\n                ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method List.add(Long) is not applicable\n      (argument mismatch;\
    \ ArrayList<Long> cannot be converted to Long)\n    method AbstractCollection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method AbstractList.add(Long) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Long)\n    method ArrayList.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n/tmp/tmp_e69zp2v.java:36: error: no suitable method found for add(ArrayList<Long>)\n\
    \            list.add(tri(n - 2l));\n                ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method List.add(Long) is not applicable\n      (argument mismatch;\
    \ ArrayList<Long> cannot be converted to Long)\n    method AbstractCollection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method AbstractList.add(Long) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Long)\n    method ArrayList.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n/tmp/tmp_e69zp2v.java:37: error: no suitable method found for add(ArrayList<Long>)\n\
    \            list.add(tri(n + 1l));\n                ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method List.add(Long) is not applicable\n      (argument mismatch;\
    \ ArrayList<Long> cannot be converted to Long)\n    method AbstractCollection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method AbstractList.add(Long) is not applicable\n      ("
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n == 1l) {\n    \
    \        list.add(1l);\n            list.add(3l);\n            list.add(2l);\n\
    \            list.add(8l);\n            return list;\n        }\n        if (n\
    \ % 2 == 0) {\n            list.add(tri(n - 1l));\n            list.add(tri(n\
    \ - 2l));\n            list.add(tri(n + 1l));\n            return list;\n    \
    \    } else {\n            list.add(tri(n - 1l));\n            list.add(tri(n\
    \ - 2l));\n            list.add(tri(n + 1l));\n            list.add(tri(n - 3l));\n\
    \            return list;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpae6itts_.java:35: error: no suitable method found for add(ArrayList<Long>)\n\
    \            list.add(tri(n - 1l));\n                ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method List.add(Long) is not applicable\n      (argument mismatch;\
    \ ArrayList<Long> cannot be converted to Long)\n    method AbstractCollection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method AbstractList.add(Long) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Long)\n    method ArrayList.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n/tmp/tmpae6itts_.java:36: error: no suitable method found for add(ArrayList<Long>)\n\
    \            list.add(tri(n - 2l));\n                ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method List.add(Long) is not applicable\n      (argument mismatch;\
    \ ArrayList<Long> cannot be converted to Long)\n    method AbstractCollection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method AbstractList.add(Long) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Long)\n    method ArrayList.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n/tmp/tmpae6itts_.java:37: error: no suitable method found for add(ArrayList<Long>)\n\
    \            list.add(tri(n + 1l));\n                ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method List.add(Long) is not applicable\n      (argument mismatch;\
    \ ArrayList<Long> cannot be converted to Long)\n    method AbstractCollection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method AbstractList.add(Long) is not applicable\n      ("
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     if (n == 1l) {\n            return new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        }\n        if (n == 2l) {\n            return new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l));\n        }\n        if (n % 2 == 0) {\n            return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1);\n        } else {\n            return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n + 2);\n   \
    \     }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg72jrc_3.java:33: error: bad operand types for binary operator\
    \ '+'\n            return tri(n - 1) + tri(n - 2) + tri(n + 1);\n            \
    \                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpg72jrc_3.java:35: error: bad operand types for binary operator '+'\n \
    \           return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4) + tri(n + 2);\n                              ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 2) {\n   \
    \         result.add(1l);\n            result.add(2l);\n            return result;\n\
    \        }\n        ArrayList<Long> first = new ArrayList<>();\n        ArrayList<Long>\
    \ second = new ArrayList<>();\n        ArrayList<Long> third = new ArrayList<>();\n\
    \        first.add(1l);\n        second.add(2l);\n        third.add(3l);\n   \
    \     third.add(1l);\n        third.add(2l);\n        third.add(3l);\n       \
    \ third.add(1l);\n        third.add(2l);\n        third.add(3l);\n        third.add(1l);\n\
    \        third.add(2l);\n        third.add(3l);\n        third.add(1l);\n    \
    \    third.add(2l);\n        third.add(3l);\n        third.add(1l);\n        third.add(2l);\n\
    \        third.add(3l);\n        third.add(1l);\n        third.add(2l);\n    \
    \    third.add(3l);\n        third.add(1l);\n        third.add(2l);\n        third.add(3l);\n\
    \        third.add(1l);\n        third.add(2l);\n        third.add(3l);\n    \
    \    third.add(1l);\n        third.add(2l);\n        third.add(3l);\n        third.add(1l);\n\
    \        third.add(2l);\n        third.add(3l);\n        third.add(1l);\n    \
    \    third.add(2l);\n        third.add(3l);\n        third.add(1l);\n        third.add(2l);\n\
    \        third.add(3l);\n        third.add(1l);\n        third.add(2l);\n    \
    \    third.add(3l);\n        third.add(1l);\n        third.add(2l);\n        third.add(3l);\n\
    \        third.add(1l);\n        third.add(2l);\n        third.add(3l);\n    \
    \    third.add(1l);\n        third.add(2l);\n        third.add(3l);\n        third.add(1l);\n\
    \        third.add(2l);\n        third.add(3l);\n        third.add(1l);\n    \
    \    third.add(2l);\n        third.add(3l);\n        third.add(1l);\n        third.add(2l);\n\
    \        third.add(3l);\n        third.add(1l);\n        third.add(2l);\n    \
    \    third.add(3l);\n        third.add(1l);\n        third.add(2l);\n        thir\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppobz9zyu.java:100: error: not a statement\n        thir\n     \
    \   ^\n/tmp/tmppobz9zyu.java:100: error: ';' expected\n        thir\n        \
    \    ^\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n == 1) {\n     \
    \       list.add(1l);\n            list.add(3l);\n            list.add(2l);\n\
    \            list.add(8l);\n        } else {\n            list.add(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1));\n        }\n        return list;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8cg89af2.java:33: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     if (n == 1) {\n            return new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        }\n        if (n == 2) {\n            return new ArrayList<Long>(Arrays.asList((long)3l));\n\
    \        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        long\
    \ tri1 = tri(n - 1);\n        long tri2 = tri(n - 2);\n        long tri3 = tri(n\
    \ - 3);\n        result.add(tri1);\n        result.add(tri2);\n        result.add(tri3);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdcs4kqgq.java:33: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1);\n                    \
    \   ^\n/tmp/tmpdcs4kqgq.java:34: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2);\n                    \
    \   ^\n/tmp/tmpdcs4kqgq.java:35: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n - 3);\n                    \
    \   ^\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<Long>();\n        if (n == 1) {\n \
    \           list.add(1l);\n            return list;\n        }\n        if (n\
    \ % 2 == 0) {\n            list.add(tri(n - 1) + tri(n - 2));\n        } else\
    \ {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        }\n\
    \        return list;\n    }\n    public static void main(String[] args) {\n \
    \   assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxon4slep.java:32: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2));\n                      \
    \          ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpxon4slep.java:34: error: bad operand types for binary operator '+'\n \
    \           list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                \
    \                ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long tri1 = (long)3;\n\
    \        long tri2 = (long)1;\n        long tri3 = (long)2;\n        long tri4\
    \ = (long)3;\n        long tri5 = (long)1;\n        long tri6 = (long)2;\n   \
    \     long tri7 = (long)3;\n        long tri8 = (long)1;\n        long tri9 =\
    \ (long)2;\n        long tri10 = (long)3;\n        long tri11 = (long)1;\n   \
    \     long tri12 = (long)2;\n        long tri13 = (long)3;\n        long tri14\
    \ = (long)1;\n        long tri15 = (long)2;\n        long tri16 = (long)3;\n \
    \       long tri17 = (long)1;\n        long tri18 = (long)2;\n        long tri19\
    \ = (long)3;\n        long tri20 = (long)1;\n        long tri21 = (long)2;\n \
    \       long tri22 = (long)3;\n        long tri23 = (long)1;\n        long tri24\
    \ = (long)2;\n        long tri25 = (long)3;\n        long tri26 = (long)1;\n \
    \       long tri27 = (long)2;\n        long tri28 = (long)3;\n        long tri29\
    \ = (long)1;\n        long tri30 = (long)2;\n        long tri31 = (long)3;\n \
    \       long tri32 = (long)1;\n        long tri33 = (long)2;\n        long tri34\
    \ = (long)3;\n        long tri35 = (long)1;\n        long tri36 = (long)2;\n \
    \       long tri37 = (long)3;\n        long tri38 = (long)1;\n        long tri39\
    \ = (long)2;\n        long tri40 = (long)3;\n        long tri41 = (long)1;\n \
    \       long tri42 = (long)2;\n        long tri43 = (long)3;\n        long tri44\
    \ = (long)1;\n        long tri45 = (long)2;\n        long tri46 = (long)3;\n \
    \       long tri47 = (long)1;\n        long tri48 = (long)2;\n        long tri49\
    \ = (long)3;\n        long tri50 = (long)1;\n        long tri51 = (long)2;\n \
    \       long tri52 = (long)3;\n        long tri53 = (long)1;\n        long tri54\
    \ = (long)2;\n        long tri55 = (long)3;\n        long tri56 = (long)1;\n \
    \       long tri57 = (long)2;\n        long tri58 = (long)3;\n        long tri59\
    \ = (long)1;\n        long tri60 = (long)2;\n        long tri61 = (long)3;\n \
    \       long tri62 = (long)1;\n        long tri\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpupyzbkew.java:89: error: ';' expected\n        long tri\n     \
    \           ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     if (n == 0) return new ArrayList<Long>(Arrays.asList((long)1l));\n     \
    \   if (n == 1) return new ArrayList<Long>(Arrays.asList((long)3l));\n       \
    \ if (n % 2 == 0) {\n            return tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \        } else {\n            return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8) + tri(n\
    \ - 9) + tri(n - 10) + tri(n - 11) + tri(n - 12) + tri(n - 13) + tri(n - 14) +\
    \ tri(n - 15) + tri(n - 16) + tri(n - 17) + tri(n - 18) + tri(n - 19) + tri(n\
    \ - 20) + tri(n - 21);\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq5miz4ay.java:29: error: bad operand types for binary operator\
    \ '+'\n            return tri(n - 1) + tri(n - 2) + tri(n + 1);\n            \
    \                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpq5miz4ay.java:31: error: bad operand types for binary operator '+'\n \
    \           return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8) + tri(n - 9) + tri(n\
    \ - 10) + tri(n - 11) + tri(n - 12) + tri(n - 13) + tri(n - 14) + tri(n - 15)\
    \ + tri(n - 16) + tri(n - 17) + tri(n - 18) + tri(n - 19) + tri(n - 20) + tri(n\
    \ - 21);\n                              ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 2) {\n   \
    \         result.add(1l);\n            result.add(2l);\n            result.add(1l);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1l);\n        second.add(1l);\n\
    \        third.add(1l);\n        if (n % 2 == 0) {\n            third.add(1l);\n\
    \        }\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(\n    }\n    public static void main(String[] args) {\n   \
    \ assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_d0f8t3.java:102: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmp7_d0f8t3.java:102: error: ';' expected\n    }\n     ^\n/tmp/tmp7_d0f8t3.java:103:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp7_d0f8t3.java:103: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                 ^\n/tmp/tmp7_d0f8t3.java:103:\
    \ error: '.class' expected\n    public static void main(String[] args) {\n   \
    \                                  ^\n/tmp/tmp7_d0f8t3.java:103: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp7_d0f8t3.java:116: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        if (n\
    \ % 2 == 0) {\n            result.add(tri(n - 1) + tri(n - 2));\n        } else\
    \ {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyfqvtzi9.java:32: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2));\n                    \
    \              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpyfqvtzi9.java:34: error: bad operand types for binary operator '+'\n \
    \           result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n              \
    \                    ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long tri1 = (long)3;\n\
    \        long tri2 = (long)1;\n        long tri3 = (long)2;\n        long tri4\
    \ = (long)3;\n        long tri5 = (long)1;\n        long tri6 = (long)2;\n   \
    \     long tri7 = (long)3;\n        long tri8 = (long)1;\n        long tri9 =\
    \ (long)2;\n        long tri10 = (long)3;\n        long tri11 = (long)1;\n   \
    \     long tri12 = (long)2;\n        long tri13 = (long)3;\n        long tri14\
    \ = (long)1;\n        long tri15 = (long)2;\n        long tri16 = (long)3;\n \
    \       long tri17 = (long)1;\n        long tri18 = (long)2;\n        long tri19\
    \ = (long)3;\n        long tri20 = (long)1;\n        long tri21 = (long)2;\n \
    \       long tri22 = (long)3;\n        long tri23 = (long)1;\n        long tri24\
    \ = (long)2;\n        long tri25 = (long)3;\n        long tri26 = (long)1;\n \
    \       long tri27 = (long)2;\n        long tri28 = (long)3;\n        long tri29\
    \ = (long)1;\n        long tri30 = (long)2;\n        long tri31 = (long)3;\n \
    \       long tri32 = (long)1;\n        long tri33 = (long)2;\n        long tri34\
    \ = (long)3;\n        long tri35 = (long)1;\n        long tri36 = (long)2;\n \
    \       long tri37 = (long)3;\n        long tri38 = (long)1;\n        long tri39\
    \ = (long)2;\n        long tri40 = (long)3;\n        long tri41 = (long)1;\n \
    \       long tri42 = (long)2;\n        long tri43 = (long)3;\n        long tri44\
    \ = (long)1;\n        long tri45 = (long)2;\n        long tri46 = (long)3;\n \
    \       long tri47 = (long)1;\n        long tri48 = (long)2;\n        long tri49\
    \ = (long)3;\n        long tri50 = (long)1;\n        long tri51 = (long)2;\n \
    \       long tri52 = (long)3;\n        long tri53 = (long)1;\n        long tri54\
    \ = (long)2;\n        long tri55 = (long)3;\n        long tri56 = (long)1;\n \
    \       long tri57 = (long)2;\n        long tri58 = (long)3;\n        long tri59\
    \ = (long)1;\n        long tri60 = (long)2;\n        long tri61 = (long)3;\n \
    \       long tri62 = (long)1;\n        long tri\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpupyzbkew.java:89: error: ';' expected\n        long tri\n     \
    \           ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n   \
    \         result.add(0l);\n            result.add(1l);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.add(0l);\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2));\n        } else {\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphxxbr2fb.java:38: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2));\n                    \
    \              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmphxxbr2fb.java:40: error: bad operand types for binary operator '+'\n \
    \           result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n              \
    \                    ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3);\n        ArrayList<Long> tri4 = tri(n - 4);\n        result.addAll(tri1);\n\
    \        result.addAll(tri2);\n        result.addAll(tri3);\n        result.addAll(tri4);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb3rwjig2.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(n);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<>();\n        ArrayList<Long> second = new ArrayList<>();\n\
    \        ArrayList<Long> third = new ArrayList<>();\n        ArrayList<Long> fourth\
    \ = new ArrayList<>();\n        ArrayList<Long> fifth = new ArrayList<>();\n \
    \       ArrayList<Long> sixth = new ArrayList<>();\n        ArrayList<Long> seventh\
    \ = new ArrayList<>();\n        ArrayList<Long> eighth = new ArrayList<>();\n\
    \        ArrayList<Long> ninth = new ArrayList<>();\n        ArrayList<Long> tenth\
    \ = new ArrayList<>();\n        ArrayList<Long> eleventh = new ArrayList<>();\n\
    \        ArrayList<Long> twelfth = new ArrayList<>();\n        ArrayList<Long>\
    \ thirteenth = new ArrayList<>();\n        ArrayList<Long> fourteenth = new ArrayList<>();\n\
    \        ArrayList<Long> fifteenth = new ArrayList<>();\n        ArrayList<Long>\
    \ sixteenth = new ArrayList<>();\n        ArrayList<Long> seventeenth = new ArrayList<>();\n\
    \        ArrayList<Long> eighteenth = new ArrayList<>();\n        ArrayList<Long>\
    \ nineteenth = new ArrayList<>();\n        ArrayList<Long> twentieth = new ArrayList<>();\n\
    \        ArrayList<Long> twentyfirst = new ArrayList<>();\n        ArrayList<Long>\
    \ twentysecond = new ArrayList<>();\n        ArrayList<Long> twentythird = new\
    \ ArrayList<>();\n        ArrayList<Long> twentyfourth = new ArrayList<>();\n\
    \        ArrayList<Long> twentyfifth = new ArrayList<>();\n        ArrayList<Long>\
    \ twentysixth = new ArrayList<>();\n        ArrayList<Long> twentyseventh = new\
    \ ArrayList<>();\n        ArrayList<Long> twentyeighth = new ArrayList<>();\n\
    \        ArrayList<Long> twentyninth = new ArrayList<>();\n        ArrayList<Long>\
    \ thirtieth = new ArrayList<>();\n        ArrayList<Long> thirtyfirst = new ArrayList<>();\n\
    \        ArrayList<Long> thirtysecond = new ArrayList<>();\n        ArrayList<Long>\
    \ thirtythird = new ArrayList<>();\n        ArrayList<Long> thirtyfourth = new\
    \ ArrayList<>();\n        ArrayList<Long> thirtyfifth = new ArrayList<>();\n \
    \       ArrayList<Long> thirtysixth = new ArrayList<>();\n        ArrayList<Long>\
    \ thirtyseventh = new ArrayList<>();\n        ArrayList<Long> thirtyeighth = new\
    \ ArrayList<>();\n        ArrayList<Long> thirtyninth = new ArrayList<>();\n \
    \       ArrayList<Long> fortieth = new ArrayList<>();\n        ArrayList<Long>\
    \ fortyfirst = new ArrayList<>();\n        ArrayList<Long> fortysecond = new ArrayList<>();\n\
    \        ArrayList<Long> for\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp3kv37i7.java:73: error: not a statement\n        ArrayList<Long>\
    \ for\n                 ^\n/tmp/tmpp3kv37i7.java:73: error: ';' expected\n   \
    \     ArrayList<Long> for\n                       ^\n/tmp/tmpp3kv37i7.java:73:\
    \ error: '(' expected\n        ArrayList<Long> for\n                         \
    \  ^\n/tmp/tmpp3kv37i7.java:74: error: illegal start of expression\n    }\n  \
    \  ^\n/tmp/tmpp3kv37i7.java:74: error: ';' expected\n    }\n     ^\n/tmp/tmpp3kv37i7.java:75:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpp3kv37i7.java:75: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpp3kv37i7.java:75: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpp3kv37i7.java:88: error: reached end of\
    \ file while parsing\n}\n ^\n9 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     if (n <= 1l) {\n            return new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        }\n        ArrayList<Long> result = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        long tri1 = tri(n - 1l);\n        long tri2 = tri(n - 2l);\n        long\
    \ tri3 = tri(n - 3l);\n        result.addAll(Arrays.asList(tri1, tri2, tri3));\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ynfrpg9.java:30: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1l);\n                   \
    \    ^\n/tmp/tmp4ynfrpg9.java:31: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2l);\n                   \
    \    ^\n/tmp/tmp4ynfrpg9.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n - 3l);\n                   \
    \    ^\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuhkhhiw3.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 1) {\n     \
    \       list.add(1l);\n            return list;\n        }\n        list.add(1l);\n\
    \        list.add(n / 2l);\n        if (n % 2 == 0) {\n            list.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        }\n        return list;\n    }\n \
    \   public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphs_da89a.java:34: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long a = 1;\n     \
    \   long b = 2;\n        long c = 3;\n        long d = a + b + c;\n        long\
    \ e = (long) Math.sqrt(d);\n        long f = e / 2;\n        long g = e - f;\n\
    \        long h = (long) Math.sqrt(g);\n        long i = h / 2;\n        long\
    \ j = h - i;\n        long k = i + j;\n        long l = a + b + c + d;\n     \
    \   long m = l / 2;\n        long n = l - m;\n        long o = m + n;\n      \
    \  long p = a + b + c + d + e;\n        long q = p / 2;\n        long r = p -\
    \ q;\n        long s = q + r;\n        long t = a + b + c + d + e + f;\n     \
    \   long u = t / 2;\n        long v = t - u;\n        long w = u + v;\n      \
    \  long x = a + b + c + d + e + f + g;\n        long y = x + w + g;\n        long\
    \ z = y + w;\n        long aa = a + b + c + d + e + f + g + h;\n        long ab\
    \ = a + b + c + d + e + f + g + h + i;\n        long ac = a + b + c + d + e +\
    \ f + g + h + i + j;\n        long ad = a + b + c + d + e + f + g + h + i + j\
    \ + k;\n        long ae = a + b + c + d + e + f + g + h + i + j + k + l;\n   \
    \     long af = a + b + c + d + e + f + g + h + i + j + k + l + m;\n        long\
    \ ag = a + b + c + d + e + f + g + h + i + j + k + l + m + n;\n        long ah\
    \ = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o;\n        long ai\
    \ = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p;\n        long\
    \ aj = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q;\n  \
    \      long ak = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p\
    \ + q + r;\n        long al = a + b + c + d + e + f + g + h + i + j + k + l +\
    \ m + n + o + \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmput34i8tr.java:65: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmput34i8tr.java:66: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmput34i8tr.java:66: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmput34i8tr.java:66:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmput34i8tr.java:66: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmput34i8tr.java:66:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmput34i8tr.java:79: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
