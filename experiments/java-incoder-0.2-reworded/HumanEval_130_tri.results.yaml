language: java
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long a = 1;\n     \
    \   long b = 2;\n        long c = 1;\n        long d = 1;\n        long e = 1;\n\
    \        long f = 1;\n        long g = 1;\n        long h = 1;\n        long i\
    \ = 1;\n        long j = 1;\n        long k = 1;\n        long l = 1;\n      \
    \  long m = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n\
    \        long q = 1;\n        long r = 1;\n        long s = 1;\n        long t\
    \ = 1;\n        long u = 1;\n        long v = 1;\n        long w = 1;\n      \
    \  long x = 1;\n        long y = 1;\n        long z = 1;\n        long a = 1;\n\
    \        long b = 2;\n        long c = 1;\n        long d = 1;\n        long e\
    \ = 1;\n        long f = 1;\n        long g = 1;\n        long h = 1;\n      \
    \  long i = 1;\n        long j = 1;\n        long k = 1;\n        long l = 1;\n\
    \        long m = 1;\n        long n = 1;\n        long o = 1;\n        long p\
    \ = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n      \
    \  long t = 1;\n        long u = 1;\n        long v = 1;\n        long w = 1;\n\
    \        long x = 1;\n        long y = 1;\n        long z = 1;\n        long a\
    \ = 1;\n        long b = 2;\n        long c = 1;\n        long d = 1;\n      \
    \  long e = 1;\n        long f = 1;\n        long g = 1;\n        long h = 1;\n\
    \        long i = 1;\n        long j = 1;\n        long k = 1;\n        long l\
    \ = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n      \
    \  long p = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n\
    \        long t = 1;\n        long u = 1;\n        long v = 1;\n        long w\
    \ = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n      \
    \  long a = 1;\n        long b = 2;\n        long c = 1;\n        long d = 1;\n\
    \        long e = 1;\n        long f = 1;\n        long g = 1;\n        long h\
    \ = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n      \
    \  long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaj36ollq.java:127: error: ';' expected\n        long w\n      \
    \        ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n == 1l) {\n    \
    \        list.add(1l);\n            list.add(3l);\n            list.add(2l);\n\
    \            list.add(8l);\n            return list;\n        }\n        if (n\
    \ % 2 == 0) {\n            list.add(tri(n - 1l));\n            list.add(tri(n\
    \ - 2l));\n            list.add(tri(n + 1l));\n        } else {\n            list.add(tri(n\
    \ - 1l));\n            list.add(tri(n - 2l));\n            list.add(tri(n + 1l));\n\
    \            list.add(tri(n - 3l));\n        }\n        return list;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_e69zp2v.java:35: error: no suitable method found for add(ArrayList<Long>)\n\
    \            list.add(tri(n - 1l));\n                ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method List.add(Long) is not applicable\n      (argument mismatch;\
    \ ArrayList<Long> cannot be converted to Long)\n    method AbstractCollection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method AbstractList.add(Long) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Long)\n    method ArrayList.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n/tmp/tmp_e69zp2v.java:36: error: no suitable method found for add(ArrayList<Long>)\n\
    \            list.add(tri(n - 2l));\n                ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method List.add(Long) is not applicable\n      (argument mismatch;\
    \ ArrayList<Long> cannot be converted to Long)\n    method AbstractCollection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method AbstractList.add(Long) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Long)\n    method ArrayList.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n/tmp/tmp_e69zp2v.java:37: error: no suitable method found for add(ArrayList<Long>)\n\
    \            list.add(tri(n + 1l));\n                ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method List.add(Long) is not applicable\n      (argument mismatch;\
    \ ArrayList<Long> cannot be converted to Long)\n    method AbstractCollection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method AbstractList.add(Long) is not applicable\n      ("
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n == 1l) {\n    \
    \        list.add(1l);\n            list.add(3l);\n            list.add(2l);\n\
    \            list.add(8l);\n            return list;\n        }\n        if (n\
    \ % 2 == 0) {\n            list.add(tri(n - 1l));\n            list.add(tri(n\
    \ - 2l));\n            list.add(tri(n + 1l));\n            return list;\n    \
    \    } else {\n            list.add(tri(n - 1l));\n            list.add(tri(n\
    \ - 2l));\n            list.add(tri(n + 1l));\n            list.add(tri(n - 3l));\n\
    \            return list;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpae6itts_.java:35: error: no suitable method found for add(ArrayList<Long>)\n\
    \            list.add(tri(n - 1l));\n                ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method List.add(Long) is not applicable\n      (argument mismatch;\
    \ ArrayList<Long> cannot be converted to Long)\n    method AbstractCollection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method AbstractList.add(Long) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Long)\n    method ArrayList.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n/tmp/tmpae6itts_.java:36: error: no suitable method found for add(ArrayList<Long>)\n\
    \            list.add(tri(n - 2l));\n                ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method List.add(Long) is not applicable\n      (argument mismatch;\
    \ ArrayList<Long> cannot be converted to Long)\n    method AbstractCollection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method AbstractList.add(Long) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Long)\n    method ArrayList.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n/tmp/tmpae6itts_.java:37: error: no suitable method found for add(ArrayList<Long>)\n\
    \            list.add(tri(n + 1l));\n                ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method List.add(Long) is not applicable\n      (argument mismatch;\
    \ ArrayList<Long> cannot be converted to Long)\n    method AbstractCollection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method AbstractList.add(Long) is not applicable\n      ("
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     if (n == 1l) {\n            return new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        }\n        if (n == 2l) {\n            return new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l));\n        }\n        if (n % 2 == 0) {\n            return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1);\n        } else {\n            return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n + 2);\n   \
    \     }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg72jrc_3.java:33: error: bad operand types for binary operator\
    \ '+'\n            return tri(n - 1) + tri(n - 2) + tri(n + 1);\n            \
    \                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpg72jrc_3.java:35: error: bad operand types for binary operator '+'\n \
    \           return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4) + tri(n + 2);\n                              ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 2) {\n   \
    \         result.add(1l);\n            result.add(2l);\n            return result;\n\
    \        }\n        ArrayList<Long> first = new ArrayList<>();\n        ArrayList<Long>\
    \ second = new ArrayList<>();\n        ArrayList<Long> third = new ArrayList<>();\n\
    \        first.add(1l);\n        second.add(2l);\n        third.add(3l);\n   \
    \     third.add(1l);\n        third.add(2l);\n        third.add(3l);\n       \
    \ third.add(1l);\n        third.add(2l);\n        third.add(3l);\n        third.add(1l);\n\
    \        third.add(2l);\n        third.add(3l);\n        third.add(1l);\n    \
    \    third.add(2l);\n        third.add(3l);\n        third.add(1l);\n        third.add(2l);\n\
    \        third.add(3l);\n        third.add(1l);\n        third.add(2l);\n    \
    \    third.add(3l);\n        third.add(1l);\n        third.add(2l);\n        third.add(3l);\n\
    \        third.add(1l);\n        third.add(2l);\n        third.add(3l);\n    \
    \    third.add(1l);\n        third.add(2l);\n        third.add(3l);\n        third.add(1l);\n\
    \        third.add(2l);\n        third.add(3l);\n        third.add(1l);\n    \
    \    third.add(2l);\n        third.add(3l);\n        third.add(1l);\n        third.add(2l);\n\
    \        third.add(3l);\n        third.add(1l);\n        third.add(2l);\n    \
    \    third.add(3l);\n        third.add(1l);\n        third.add(2l);\n        third.add(3l);\n\
    \        third.add(1l);\n        third.add(2l);\n        third.add(3l);\n    \
    \    third.add(1l);\n        third.add(2l);\n        third.add(3l);\n        third.add(1l);\n\
    \        third.add(2l);\n        third.add(3l);\n        third.add(1l);\n    \
    \    third.add(2l);\n        third.add(3l);\n        third.add(1l);\n        third.add(2l);\n\
    \        third.add(3l);\n        third.add(1l);\n        third.add(2l);\n    \
    \    third.add(3l);\n        third.add(1l);\n        third.add(2l);\n        thir\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppobz9zyu.java:100: error: not a statement\n        thir\n     \
    \   ^\n/tmp/tmppobz9zyu.java:100: error: ';' expected\n        thir\n        \
    \    ^\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n == 1) {\n     \
    \       list.add(1l);\n            list.add(3l);\n            list.add(2l);\n\
    \            list.add(8l);\n        } else {\n            list.add(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1));\n        }\n        return list;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8cg89af2.java:33: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     if (n == 1) {\n            return new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        }\n        if (n == 2) {\n            return new ArrayList<Long>(Arrays.asList((long)3l));\n\
    \        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        long\
    \ tri1 = tri(n - 1);\n        long tri2 = tri(n - 2);\n        long tri3 = tri(n\
    \ - 3);\n        result.add(tri1);\n        result.add(tri2);\n        result.add(tri3);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdcs4kqgq.java:33: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1);\n                    \
    \   ^\n/tmp/tmpdcs4kqgq.java:34: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2);\n                    \
    \   ^\n/tmp/tmpdcs4kqgq.java:35: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n - 3);\n                    \
    \   ^\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<Long>();\n        if (n == 1) {\n \
    \           list.add(1l);\n            return list;\n        }\n        if (n\
    \ % 2 == 0) {\n            list.add(tri(n - 1) + tri(n - 2));\n        } else\
    \ {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        }\n\
    \        return list;\n    }\n    public static void main(String[] args) {\n \
    \   assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxon4slep.java:32: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2));\n                      \
    \          ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpxon4slep.java:34: error: bad operand types for binary operator '+'\n \
    \           list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                \
    \                ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long tri1 = (long)3;\n\
    \        long tri2 = (long)1;\n        long tri3 = (long)2;\n        long tri4\
    \ = (long)3;\n        long tri5 = (long)1;\n        long tri6 = (long)2;\n   \
    \     long tri7 = (long)3;\n        long tri8 = (long)1;\n        long tri9 =\
    \ (long)2;\n        long tri10 = (long)3;\n        long tri11 = (long)1;\n   \
    \     long tri12 = (long)2;\n        long tri13 = (long)3;\n        long tri14\
    \ = (long)1;\n        long tri15 = (long)2;\n        long tri16 = (long)3;\n \
    \       long tri17 = (long)1;\n        long tri18 = (long)2;\n        long tri19\
    \ = (long)3;\n        long tri20 = (long)1;\n        long tri21 = (long)2;\n \
    \       long tri22 = (long)3;\n        long tri23 = (long)1;\n        long tri24\
    \ = (long)2;\n        long tri25 = (long)3;\n        long tri26 = (long)1;\n \
    \       long tri27 = (long)2;\n        long tri28 = (long)3;\n        long tri29\
    \ = (long)1;\n        long tri30 = (long)2;\n        long tri31 = (long)3;\n \
    \       long tri32 = (long)1;\n        long tri33 = (long)2;\n        long tri34\
    \ = (long)3;\n        long tri35 = (long)1;\n        long tri36 = (long)2;\n \
    \       long tri37 = (long)3;\n        long tri38 = (long)1;\n        long tri39\
    \ = (long)2;\n        long tri40 = (long)3;\n        long tri41 = (long)1;\n \
    \       long tri42 = (long)2;\n        long tri43 = (long)3;\n        long tri44\
    \ = (long)1;\n        long tri45 = (long)2;\n        long tri46 = (long)3;\n \
    \       long tri47 = (long)1;\n        long tri48 = (long)2;\n        long tri49\
    \ = (long)3;\n        long tri50 = (long)1;\n        long tri51 = (long)2;\n \
    \       long tri52 = (long)3;\n        long tri53 = (long)1;\n        long tri54\
    \ = (long)2;\n        long tri55 = (long)3;\n        long tri56 = (long)1;\n \
    \       long tri57 = (long)2;\n        long tri58 = (long)3;\n        long tri59\
    \ = (long)1;\n        long tri60 = (long)2;\n        long tri61 = (long)3;\n \
    \       long tri62 = (long)1;\n        long tri\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpupyzbkew.java:89: error: ';' expected\n        long tri\n     \
    \           ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     if (n == 0) return new ArrayList<Long>(Arrays.asList((long)1l));\n     \
    \   if (n == 1) return new ArrayList<Long>(Arrays.asList((long)3l));\n       \
    \ if (n % 2 == 0) {\n            return tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \        } else {\n            return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8) + tri(n\
    \ - 9) + tri(n - 10) + tri(n - 11) + tri(n - 12) + tri(n - 13) + tri(n - 14) +\
    \ tri(n - 15) + tri(n - 16) + tri(n - 17) + tri(n - 18) + tri(n - 19) + tri(n\
    \ - 20) + tri(n - 21);\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq5miz4ay.java:29: error: bad operand types for binary operator\
    \ '+'\n            return tri(n - 1) + tri(n - 2) + tri(n + 1);\n            \
    \                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpq5miz4ay.java:31: error: bad operand types for binary operator '+'\n \
    \           return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8) + tri(n - 9) + tri(n\
    \ - 10) + tri(n - 11) + tri(n - 12) + tri(n - 13) + tri(n - 14) + tri(n - 15)\
    \ + tri(n - 16) + tri(n - 17) + tri(n - 18) + tri(n - 19) + tri(n - 20) + tri(n\
    \ - 21);\n                              ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 2) {\n   \
    \         result.add(1l);\n            result.add(2l);\n            result.add(1l);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1l);\n        second.add(1l);\n\
    \        third.add(1l);\n        if (n % 2 == 0) {\n            third.add(1l);\n\
    \        }\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(\n    }\n    public static void main(String[] args) {\n   \
    \ assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_d0f8t3.java:102: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmp7_d0f8t3.java:102: error: ';' expected\n    }\n     ^\n/tmp/tmp7_d0f8t3.java:103:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp7_d0f8t3.java:103: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                 ^\n/tmp/tmp7_d0f8t3.java:103:\
    \ error: '.class' expected\n    public static void main(String[] args) {\n   \
    \                                  ^\n/tmp/tmp7_d0f8t3.java:103: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp7_d0f8t3.java:116: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        if (n\
    \ % 2 == 0) {\n            result.add(tri(n - 1) + tri(n - 2));\n        } else\
    \ {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyfqvtzi9.java:32: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2));\n                    \
    \              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpyfqvtzi9.java:34: error: bad operand types for binary operator '+'\n \
    \           result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n              \
    \                    ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long tri1 = (long)3;\n\
    \        long tri2 = (long)1;\n        long tri3 = (long)2;\n        long tri4\
    \ = (long)3;\n        long tri5 = (long)1;\n        long tri6 = (long)2;\n   \
    \     long tri7 = (long)3;\n        long tri8 = (long)1;\n        long tri9 =\
    \ (long)2;\n        long tri10 = (long)3;\n        long tri11 = (long)1;\n   \
    \     long tri12 = (long)2;\n        long tri13 = (long)3;\n        long tri14\
    \ = (long)1;\n        long tri15 = (long)2;\n        long tri16 = (long)3;\n \
    \       long tri17 = (long)1;\n        long tri18 = (long)2;\n        long tri19\
    \ = (long)3;\n        long tri20 = (long)1;\n        long tri21 = (long)2;\n \
    \       long tri22 = (long)3;\n        long tri23 = (long)1;\n        long tri24\
    \ = (long)2;\n        long tri25 = (long)3;\n        long tri26 = (long)1;\n \
    \       long tri27 = (long)2;\n        long tri28 = (long)3;\n        long tri29\
    \ = (long)1;\n        long tri30 = (long)2;\n        long tri31 = (long)3;\n \
    \       long tri32 = (long)1;\n        long tri33 = (long)2;\n        long tri34\
    \ = (long)3;\n        long tri35 = (long)1;\n        long tri36 = (long)2;\n \
    \       long tri37 = (long)3;\n        long tri38 = (long)1;\n        long tri39\
    \ = (long)2;\n        long tri40 = (long)3;\n        long tri41 = (long)1;\n \
    \       long tri42 = (long)2;\n        long tri43 = (long)3;\n        long tri44\
    \ = (long)1;\n        long tri45 = (long)2;\n        long tri46 = (long)3;\n \
    \       long tri47 = (long)1;\n        long tri48 = (long)2;\n        long tri49\
    \ = (long)3;\n        long tri50 = (long)1;\n        long tri51 = (long)2;\n \
    \       long tri52 = (long)3;\n        long tri53 = (long)1;\n        long tri54\
    \ = (long)2;\n        long tri55 = (long)3;\n        long tri56 = (long)1;\n \
    \       long tri57 = (long)2;\n        long tri58 = (long)3;\n        long tri59\
    \ = (long)1;\n        long tri60 = (long)2;\n        long tri61 = (long)3;\n \
    \       long tri62 = (long)1;\n        long tri\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpupyzbkew.java:89: error: ';' expected\n        long tri\n     \
    \           ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n   \
    \         result.add(0l);\n            result.add(1l);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.add(0l);\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2));\n        } else {\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphxxbr2fb.java:38: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2));\n                    \
    \              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmphxxbr2fb.java:40: error: bad operand types for binary operator '+'\n \
    \           result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n              \
    \                    ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3);\n        ArrayList<Long> tri4 = tri(n - 4);\n        result.addAll(tri1);\n\
    \        result.addAll(tri2);\n        result.addAll(tri3);\n        result.addAll(tri4);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb3rwjig2.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(n);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<>();\n        ArrayList<Long> second = new ArrayList<>();\n\
    \        ArrayList<Long> third = new ArrayList<>();\n        ArrayList<Long> fourth\
    \ = new ArrayList<>();\n        ArrayList<Long> fifth = new ArrayList<>();\n \
    \       ArrayList<Long> sixth = new ArrayList<>();\n        ArrayList<Long> seventh\
    \ = new ArrayList<>();\n        ArrayList<Long> eighth = new ArrayList<>();\n\
    \        ArrayList<Long> ninth = new ArrayList<>();\n        ArrayList<Long> tenth\
    \ = new ArrayList<>();\n        ArrayList<Long> eleventh = new ArrayList<>();\n\
    \        ArrayList<Long> twelfth = new ArrayList<>();\n        ArrayList<Long>\
    \ thirteenth = new ArrayList<>();\n        ArrayList<Long> fourteenth = new ArrayList<>();\n\
    \        ArrayList<Long> fifteenth = new ArrayList<>();\n        ArrayList<Long>\
    \ sixteenth = new ArrayList<>();\n        ArrayList<Long> seventeenth = new ArrayList<>();\n\
    \        ArrayList<Long> eighteenth = new ArrayList<>();\n        ArrayList<Long>\
    \ nineteenth = new ArrayList<>();\n        ArrayList<Long> twentieth = new ArrayList<>();\n\
    \        ArrayList<Long> twentyfirst = new ArrayList<>();\n        ArrayList<Long>\
    \ twentysecond = new ArrayList<>();\n        ArrayList<Long> twentythird = new\
    \ ArrayList<>();\n        ArrayList<Long> twentyfourth = new ArrayList<>();\n\
    \        ArrayList<Long> twentyfifth = new ArrayList<>();\n        ArrayList<Long>\
    \ twentysixth = new ArrayList<>();\n        ArrayList<Long> twentyseventh = new\
    \ ArrayList<>();\n        ArrayList<Long> twentyeighth = new ArrayList<>();\n\
    \        ArrayList<Long> twentyninth = new ArrayList<>();\n        ArrayList<Long>\
    \ thirtieth = new ArrayList<>();\n        ArrayList<Long> thirtyfirst = new ArrayList<>();\n\
    \        ArrayList<Long> thirtysecond = new ArrayList<>();\n        ArrayList<Long>\
    \ thirtythird = new ArrayList<>();\n        ArrayList<Long> thirtyfourth = new\
    \ ArrayList<>();\n        ArrayList<Long> thirtyfifth = new ArrayList<>();\n \
    \       ArrayList<Long> thirtysixth = new ArrayList<>();\n        ArrayList<Long>\
    \ thirtyseventh = new ArrayList<>();\n        ArrayList<Long> thirtyeighth = new\
    \ ArrayList<>();\n        ArrayList<Long> thirtyninth = new ArrayList<>();\n \
    \       ArrayList<Long> fortieth = new ArrayList<>();\n        ArrayList<Long>\
    \ fortyfirst = new ArrayList<>();\n        ArrayList<Long> fortysecond = new ArrayList<>();\n\
    \        ArrayList<Long> for\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp3kv37i7.java:73: error: not a statement\n        ArrayList<Long>\
    \ for\n                 ^\n/tmp/tmpp3kv37i7.java:73: error: ';' expected\n   \
    \     ArrayList<Long> for\n                       ^\n/tmp/tmpp3kv37i7.java:73:\
    \ error: '(' expected\n        ArrayList<Long> for\n                         \
    \  ^\n/tmp/tmpp3kv37i7.java:74: error: illegal start of expression\n    }\n  \
    \  ^\n/tmp/tmpp3kv37i7.java:74: error: ';' expected\n    }\n     ^\n/tmp/tmpp3kv37i7.java:75:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpp3kv37i7.java:75: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpp3kv37i7.java:75: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpp3kv37i7.java:88: error: reached end of\
    \ file while parsing\n}\n ^\n9 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     if (n <= 1l) {\n            return new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        }\n        ArrayList<Long> result = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        long tri1 = tri(n - 1l);\n        long tri2 = tri(n - 2l);\n        long\
    \ tri3 = tri(n - 3l);\n        result.addAll(Arrays.asList(tri1, tri2, tri3));\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ynfrpg9.java:30: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1l);\n                   \
    \    ^\n/tmp/tmp4ynfrpg9.java:31: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2l);\n                   \
    \    ^\n/tmp/tmp4ynfrpg9.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n - 3l);\n                   \
    \    ^\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuhkhhiw3.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 1) {\n     \
    \       list.add(1l);\n            return list;\n        }\n        list.add(1l);\n\
    \        list.add(n / 2l);\n        if (n % 2 == 0) {\n            list.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        }\n        return list;\n    }\n \
    \   public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphs_da89a.java:34: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long a = 1;\n     \
    \   long b = 2;\n        long c = 3;\n        long d = a + b + c;\n        long\
    \ e = (long) Math.sqrt(d);\n        long f = e / 2;\n        long g = e - f;\n\
    \        long h = (long) Math.sqrt(g);\n        long i = h / 2;\n        long\
    \ j = h - i;\n        long k = i + j;\n        long l = a + b + c + d;\n     \
    \   long m = l / 2;\n        long n = l - m;\n        long o = m + n;\n      \
    \  long p = a + b + c + d + e;\n        long q = p / 2;\n        long r = p -\
    \ q;\n        long s = q + r;\n        long t = a + b + c + d + e + f;\n     \
    \   long u = t / 2;\n        long v = t - u;\n        long w = u + v;\n      \
    \  long x = a + b + c + d + e + f + g;\n        long y = x + w + g;\n        long\
    \ z = y + w;\n        long aa = a + b + c + d + e + f + g + h;\n        long ab\
    \ = a + b + c + d + e + f + g + h + i;\n        long ac = a + b + c + d + e +\
    \ f + g + h + i + j;\n        long ad = a + b + c + d + e + f + g + h + i + j\
    \ + k;\n        long ae = a + b + c + d + e + f + g + h + i + j + k + l;\n   \
    \     long af = a + b + c + d + e + f + g + h + i + j + k + l + m;\n        long\
    \ ag = a + b + c + d + e + f + g + h + i + j + k + l + m + n;\n        long ah\
    \ = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o;\n        long ai\
    \ = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p;\n        long\
    \ aj = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q;\n  \
    \      long ak = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p\
    \ + q + r;\n        long al = a + b + c + d + e + f + g + h + i + j + k + l +\
    \ m + n + o + \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmput34i8tr.java:65: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmput34i8tr.java:66: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmput34i8tr.java:66: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmput34i8tr.java:66:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmput34i8tr.java:66: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmput34i8tr.java:66:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmput34i8tr.java:79: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long tri1 = (long)3;\n\
    \        long tri2 = (long)1;\n        long tri3 = tri1 + tri2;\n        long\
    \ tri4 = tri3;\n        long tri5 = tri4;\n        long tri6 = tri5;\n       \
    \ long tri7 = tri6;\n        long tri8 = tri7;\n        long tri9 = tri8;\n  \
    \      long tri10 = tri9;\n        long tri11 = tri10;\n        long tri12 = tri11;\n\
    \        long tri13 = tri12;\n        long tri14 = tri13;\n        long tri15\
    \ = tri14;\n        long tri16 = tri15;\n        long tri17 = tri16;\n       \
    \ long tri18 = tri17;\n        long tri19 = tri18;\n        long tri20 = tri19;\n\
    \        long tri21 = tri20;\n        long tri22 = tri21;\n        long tri23\
    \ = tri22;\n        long tri24 = tri23;\n        long tri25 = tri24;\n       \
    \ long tri26 = tri25;\n        long tri27 = tri26;\n        long tri28 = tri27;\n\
    \        long tri29 = tri28;\n        long tri30 = tri29;\n        long tri31\
    \ = tri30;\n        long tri32 = tri31;\n        long tri33 = tri32;\n       \
    \ long tri34 = tri33;\n        long tri35 = tri34;\n        long tri36 = tri35;\n\
    \        long tri37 = tri36;\n        long tri38 = tri37;\n        long tri39\
    \ = tri38;\n        long tri40 = tri39;\n        long tri41 = tri40;\n       \
    \ long tri42 = tri41;\n        long tri43 = tri42;\n        long tri44 = tri43;\n\
    \        long tri45 = tri44;\n        long tri46 = tri45;\n        long tri47\
    \ = tri46;\n        long tri48 = tri47;\n        long tri49 = tri48;\n       \
    \ long tri50 = tri49;\n        long tri51 = tri50;\n        long tri52 = tri51;\n\
    \        long tri53 = tri52;\n        long tri54 = tri53;\n        long tri55\
    \ = tri54;\n        long tri56 = tri55;\n        long tri57 = tri56;\n       \
    \ long tri58 = tri57;\n        long tri59 = tri58;\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp53ield_9.java:87: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuhkhhiw3.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<Long>();\n        if (n == 0) {\n \
    \           list.add(0l);\n            list.add(1l);\n            return list;\n\
    \        }\n        if (n == 1) {\n            list.add(0l);\n            return\
    \ list;\n        }\n        if (n == 2) {\n            list.add(0l);\n       \
    \     list.add(1l);\n            list.add(2l);\n            return list;\n   \
    \     }\n        ArrayList<Long> list1 = tri(n - 1);\n        ArrayList<Long>\
    \ list2 = tri(n - 2);\n        ArrayList<Long> list3 = tri(n - 3);\n        ArrayList<Long>\
    \ list4 = tri(n - 4);\n        ArrayList<Long> list5 = tri(n - 5);\n        list.addAll(list1);\n\
    \        list.addAll(list2);\n        list.addAll(list3);\n        list.addAll(list4);\n\
    \        list.addAll(list5);\n        return list;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.tri(tmps2p4u_zj.java:26)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.java:42)\n\tat Problem.tri(tmps2p4u_zj.java:42)\n\
    \tat Problem.tri(tmps2p4u_zj.jav"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuhkhhiw3.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(n);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3l9lv3gm.java:40)\n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 1) {\n   \
    \         result.add(1l);\n            result.add(3l);\n            result.add(2l);\n\
    \            result.add(8l);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.java:34)\n\tat Problem.tri(tmpemkkn2u8.java:34)\n\
    \tat Problem.tri(tmpemkkn2u8.jav"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<Long>();\n        if (n <= 3) {\n \
    \           list.add(1l);\n            list.add(n);\n            return list;\n\
    \        }\n        list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return\
    \ list;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuw228rfw.java:32: error: bad operand types for binary operator\
    \ '+'\n        list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n             \
    \               ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        if (n\
    \ % 2 == 0) {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n\
    \        } else {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4dcyxdyd.java:32: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmp4dcyxdyd.java:34: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \                                  ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(n);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<>();\n        ArrayList<Long> second = new ArrayList<>();\n\
    \        ArrayList<Long> third = new ArrayList<>();\n        first.add(3);\n \
    \       second.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        \n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptwiu3jwm.java:34: error: incompatible types: int cannot be converted\
    \ to Long\n        first.add(3);\n                  ^\n/tmp/tmptwiu3jwm.java:35:\
    \ error: incompatible types: int cannot be converted to Long\n        second.add(1);\n\
    \                   ^\n/tmp/tmptwiu3jwm.java:36: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmptwiu3jwm.java:37:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmptwiu3jwm.java:38: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmptwiu3jwm.java:39:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmptwiu3jwm.java:40: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmptwiu3jwm.java:41:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmptwiu3jwm.java:42: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmptwiu3jwm.java:43:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmptwiu3jwm.java:44: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmptwiu3jwm.java:45:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmptwiu3jwm.java:46: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmptwiu3jwm.java:47:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmptwiu3jwm.java:48: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmptwiu3jwm.java:49:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmptwiu3j"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     if (n == 1l) {\n            return new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        }\n        if (n == 2l) {\n            return new ArrayList<Long>(Arrays.asList((long)3l));\n\
    \        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        long\
    \ tri1 = tri(n - 1l);\n        long tri2 = tri(n - 2l);\n        long tri3 = tri(n\
    \ - 3l);\n        result.add((long) tri1);\n        result.add((long) tri2);\n\
    \        result.add((long) tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp4ydjuca.java:33: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1l);\n                   \
    \    ^\n/tmp/tmpp4ydjuca.java:34: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2l);\n                   \
    \    ^\n/tmp/tmpp4ydjuca.java:35: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n - 3l);\n                   \
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n   \
    \         result.add(0l);\n            result.add(1l);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.add(tri(n - 1) + tri(n\
    \ - 2) + tri(n - 1));\n        } else {\n            result.add(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpekpvrn_9.java:33: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpekpvrn_9.java:35: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \                                  ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long a = 1;\n     \
    \   long b = 2;\n        long c = 1;\n        long d = 1;\n        long temp;\n\
    \        long sum = 0;\n        long tri = 0;\n        long tri_sum = 0;\n   \
    \     long tri_sum2 = 0;\n        long tri_sum3 = 0;\n        long tri_sum4 =\
    \ 0;\n        long tri_sum5 = 0;\n        long tri_sum6 = 0;\n        long tri_sum7\
    \ = 0;\n        long tri_sum8 = 0;\n        long tri_sum9 = 0;\n        long tri_sum10\
    \ = 0;\n        long tri_sum11 = 0;\n        long tri_sum12 = 0;\n        long\
    \ tri_sum13 = 0;\n        long tri_sum14 = 0;\n        long tri_sum15 = 0;\n \
    \       long tri_sum16 = 0;\n        long tri_sum17 = 0;\n        long tri_sum18\
    \ = 0;\n        long tri_sum19 = 0;\n        long tri_sum20 = 0;\n        long\
    \ tri_sum21 = 0;\n        long tri_sum22 = 0;\n        long tri_sum23 = 0;\n \
    \       long tri_sum24 = 0;\n        long tri_sum25 = 0;\n        long tri_sum26\
    \ = 0;\n        long tri_sum27 = 0;\n        long tri_sum28 = 0;\n        long\
    \ tri_sum29 = 0;\n        long tri_sum30 = 0;\n        long tri_sum31 = 0;\n \
    \       long tri_sum32 = 0;\n        long tri_sum33 = 0;\n        long tri_sum34\
    \ = 0;\n        long tri_sum35 = 0;\n        long tri_sum36 = 0;\n        long\
    \ tri_sum37 = 0;\n        long tri_sum38 = 0;\n        long tri_sum39 = 0;\n \
    \       long tri_sum40 = 0;\n        long tri_sum41 = 0;\n        long tri_sum42\
    \ = 0;\n        long tri_sum43 = 0;\n        long tri_sum44 = 0;\n        long\
    \ tri_sum45 = 0;\n        long tri_sum46 = 0;\n        long tri_sum47 = 0;\n \
    \       long tri_sum48 = 0;\n        long tri_sum49 = 0;\n        long tri_sum50\
    \ = 0;\n        long tri_sum51 = 0;\n        long tri_sum52 = 0;\n        long\
    \ tri_sum53 = 0;\n        long tri_sum54 = 0;\n        long tri_sum55 = 0;\n \
    \       long tri_sum56 = 0;\n        long tri_sum57 = 0;\n        long tri_sum58\
    \ = 0;\n        long tri_sum59 = 0;\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk3xh3oi6.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long a = 1;\n     \
    \   long b = 2;\n        long c = 1;\n        long d = 1;\n        long temp;\n\
    \        long sum;\n        long tri = 0;\n        long tri_sum = 0;\n       \
    \ long tri_sum2 = 0;\n        long tri_sum3 = 0;\n        long tri_sum4 = 0;\n\
    \        long tri_sum5 = 0;\n        long tri_sum6 = 0;\n        long tri_sum7\
    \ = 0;\n        long tri_sum8 = 0;\n        long tri_sum9 = 0;\n        long tri_sum10\
    \ = 0;\n        long tri_sum11 = 0;\n        long tri_sum12 = 0;\n        long\
    \ tri_sum13 = 0;\n        long tri_sum14 = 0;\n        long tri_sum15 = 0;\n \
    \       long tri_sum16 = 0;\n        long tri_sum17 = 0;\n        long tri_sum18\
    \ = 0;\n        long tri_sum19 = 0;\n        long tri_sum20 = 0;\n        long\
    \ tri_sum21 = 0;\n        long tri_sum22 = 0;\n        long tri_sum23 = 0;\n \
    \       long tri_sum24 = 0;\n        long tri_sum25 = 0;\n        long tri_sum26\
    \ = 0;\n        long tri_sum27 = 0;\n        long tri_sum28 = 0;\n        long\
    \ tri_sum29 = 0;\n        long tri_sum30 = 0;\n        long tri_sum31 = 0;\n \
    \       long tri_sum32 = 0;\n        long tri_sum33 = 0;\n        long tri_sum34\
    \ = 0;\n        long tri_sum35 = 0;\n        long tri_sum36 = 0;\n        long\
    \ tri_sum37 = 0;\n        long tri_sum38 = 0;\n        long tri_sum39 = 0;\n \
    \       long tri_sum40 = 0;\n        long tri_sum41 = 0;\n        long tri_sum42\
    \ = 0;\n        long tri_sum43 = 0;\n        long tri_sum44 = 0;\n        long\
    \ tri_sum45 = 0;\n        long tri_sum46 = 0;\n        long tri_sum47 = 0;\n \
    \       long tri_sum48 = 0;\n        long tri_sum49 = 0;\n        long tri_sum50\
    \ = 0;\n        long tri_sum51 = 0;\n        long tri_sum52 = 0;\n        long\
    \ tri_sum53 = 0;\n        long tri_sum54 = 0;\n        long tri_sum55 = 0;\n \
    \       long tri_sum56 = 0;\n        long tri_sum57 = 0;\n        long tri_sum58\
    \ = 0;\n        long tri_sum59 = 0;\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf_kuzly4.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<>();\n        ArrayList<Long> second = new ArrayList<>();\n\
    \        ArrayList<Long> third = new ArrayList<>();\n        first.add(1l);\n\
    \        second.add(1l);\n        third.add(1l);\n        if (n % 2 == 0) {\n\
    \            third.add(1l);\n        }\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tznosnn.java:102: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 1l) {\n    \
    \        list.add(1l);\n            list.add(1l);\n            return list;\n\
    \        }\n        long tri1 = tri(n - 1l);\n        long tri2 = tri(n - 2l);\n\
    \        long tri3 = tri(n - 3l);\n        list.add(tri1);\n        list.add(tri2);\n\
    \        list.add(tri3);\n        return list;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9ef2z30.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1l);\n                   \
    \    ^\n/tmp/tmpb9ef2z30.java:33: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2l);\n                   \
    \    ^\n/tmp/tmpb9ef2z30.java:34: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n - 3l);\n                   \
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1l);\n        ArrayList<Long> tri2 = tri(n - 2l);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3l);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcoshaqrt.java:40)\n"
  stdout: ''
  timestamp: 1659794487
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1l) return\
    \ result;\n        long a = 2l;\n        long b = 3l;\n        long c = 1l;\n\
    \        long d = 1l;\n        long temp;\n        do {\n            temp = a\
    \ + b + c + d;\n            result.add(temp);\n            a = b;\n          \
    \  b = c;\n            c = d;\n            d = temp;\n        } while (n > 0l);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659794492
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n == 1) {\n     \
    \       list.add(1l);\n            list.add(3l);\n            list.add(2l);\n\
    \            list.add(8l);\n        } else {\n            list.add(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1));\n        }\n        return list;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8cg89af2.java:33: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuhkhhiw3.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 1l) {\n    \
    \        list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \            return list;\n        }\n        list.add(1l);\n        list.add(1l);\n\
    \        list.add(1l);\n        list.add(1l);\n        if (n % 2l == 0l) {\n \
    \           list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \            list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \            list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \            list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \            list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \            list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \            list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \            list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \            list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \            list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \            list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \            list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \            list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \            list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \            list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \            list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \            list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \            list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \            list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \            list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \            list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \            list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \            list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \            list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \            list.add(1l);\n            list.add(\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2m8jt61e.java:112: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmp2m8jt61e.java:113: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n   \
    \         result.add(0l);\n            return result;\n        }\n        if (n\
    \ == 1) {\n            result.add(1l);\n            return result;\n        }\n\
    \        if (n % 2 == 0) {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1));\n        } else {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3));\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbwe8sv50.java:36: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpbwe8sv50.java:38: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3));\n                                  ^\n  first type:\
    \  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     if (n == 0) {\n            return new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        } else if (n == 1) {\n            return new ArrayList<Long>(Arrays.asList((long)3l));\n\
    \        } else if (n == 2) {\n            return new ArrayList<Long>(Arrays.asList((long)2l));\n\
    \        } else if (n % 2 == 0) {\n            return new ArrayList<Long>(Arrays.asList((long)(tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3)), tri(n - 3)));\n        } else {\n         \
    \   return new ArrayList<Long>(Arrays.asList((long)(tri(n - 1) + tri(n - 2) +\
    \ tri(n - 3)), tri(n - 2), tri(n - 1)));\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2deftz2v.java:33: error: no suitable constructor found for ArrayList(List<Serializable>)\n\
    \            return new ArrayList<Long>(Arrays.asList((long)(tri(n - 1) + tri(n\
    \ - 2) + tri(n - 3)), tri(n - 3)));\n                   ^\n    constructor ArrayList.ArrayList(int)\
    \ is not applicable\n      (argument mismatch; no instance(s) of type variable(s)\
    \ T exist so that List<T> conforms to int)\n    constructor ArrayList.ArrayList(Collection<?\
    \ extends Long>) is not applicable\n      (argument mismatch; inference variable\
    \ T has incompatible bounds\n          lower bounds: Long,Object\n          lower\
    \ bounds: ArrayList<Long>,Long)\n  where T is a type-variable:\n    T extends\
    \ Object declared in method <T>asList(T...)\n/tmp/tmp2deftz2v.java:33: error:\
    \ bad operand types for binary operator '+'\n            return new ArrayList<Long>(Arrays.asList((long)(tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3)), tri(n - 3)));\n                           \
    \                                            ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmp2deftz2v.java:35: error: no suitable\
    \ constructor found for ArrayList(List<Serializable>)\n            return new\
    \ ArrayList<Long>(Arrays.asList((long)(tri(n - 1) + tri(n - 2) + tri(n - 3)),\
    \ tri(n - 2), tri(n - 1)));\n                   ^\n    constructor ArrayList.ArrayList(int)\
    \ is not applicable\n      (argument mismatch; no instance(s) of type variable(s)\
    \ T exist so that List<T> conforms to int)\n    constructor ArrayList.ArrayList(Collection<?\
    \ extends Long>) is not applicable\n      (argument mismatch; inference variable\
    \ T has incompatible bounds\n          lower bounds: Long,Object\n          lower\
    \ bounds: ArrayList<Long>,Long)\n  where T is a type-variable:\n    T extends\
    \ Object declared in method <T>asList(T...)\n/tmp/tmp2deftz2v.java:35: error:\
    \ bad operand types for binary operator '+'\n            return new ArrayList<Long>(Arrays.asList((long)(tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3)), tri(n - 2), tri(n - 1)));\n               \
    \                                                        ^\n  first type: "
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 3) {\n     \
    \       list.add(1l);\n            list.add(n);\n            return list;\n  \
    \      }\n        list.add(tri(n - 1) + tri(n - 2) + tri(n - 3));\n        return\
    \ list;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqrgn8d0t.java:32: error: bad operand types for binary operator\
    \ '+'\n        list.add(tri(n - 1) + tri(n - 2) + tri(n - 3));\n             \
    \               ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long tri1 = (long)3;\n\
    \        long tri2 = (long)1;\n        long tri3 = (long)2;\n        long tri4\
    \ = (long)3;\n        long tri5 = (long)4;\n        long tri6 = (long)5;\n   \
    \     long tri7 = (long)6;\n        long tri8 = (long)7;\n        long tri9 =\
    \ (long)8;\n        long tri10 = (long)9;\n        long tri11 = (long)10;\n  \
    \      long tri12 = (long)11;\n        long tri13 = (long)12;\n        long tri14\
    \ = (long)13;\n        long tri15 = (long)14;\n        long tri16 = (long)15;\n\
    \        long tri17 = (long)16;\n        long tri18 = (long)17;\n        long\
    \ tri19 = (long)18;\n        long tri20 = (long)19;\n        long tri21 = (long)20;\n\
    \        long tri22 = (long)21;\n        long tri23 = (long)22;\n        long\
    \ tri24 = (long)23;\n        long tri25 = (long)24;\n        long tri26 = (long)25;\n\
    \        long tri27 = (long)26;\n        long tri28 = (long)27;\n        long\
    \ tri29 = (long)28;\n        long tri30 = (long)29;\n        long tri31 = (long)30;\n\
    \        long tri32 = (long)31;\n        long tri33 = (long)32;\n        long\
    \ tri34 = (long)33;\n        long tri35 = (long)34;\n        long tri36 = (long)35;\n\
    \        long tri37 = (long)36;\n        long tri38 = (long)37;\n        long\
    \ tri39 = (long)38;\n        long tri40 = (long)39;\n        long tri41 = (long)40;\n\
    \        long tri42 = (long)41;\n        long tri43 = (long)42;\n        long\
    \ tri44 = (long)43;\n        long tri45 = (long)44;\n        long tri46 = (long)45;\n\
    \        long tri47 = (long)46;\n        long tri48 = (long)47;\n        long\
    \ tri49 = (long)48;\n        long tri50 = (long)49;\n        long tri51 = (long)50;\n\
    \        long tri52 = (long)51;\n        long tri53 = (long)52;\n        long\
    \ tri54 = (long)53;\n        long tri55 = (long)54;\n        long tri56 = (long)55;\n\
    \        long tri57 = (long)56;\n        long tri58 = (long)57\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4vliw5f3.java:84: error: ';' expected\n        long tri58 = (long)57\n\
    \                             ^\n1 error\n"
  stdout: ''
  timestamp: 1659794486
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 1l) return\
    \ result;\n        if (n % 2 == 1l) result.add(1l);\n        else result.add(tri(n\
    \ - 1l) + tri(n - 2l) + tri(n + 1l));\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph89qn71w.java:29: error: bad operand types for binary operator\
    \ '+'\n        else result.add(tri(n - 1l) + tri(n - 2l) + tri(n + 1l));\n   \
    \                                 ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n1 error\n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long a = 1;\n     \
    \   long b = 1;\n        long c = 1;\n        long d = 1;\n        long temp;\n\
    \        long temp2;\n        long temp3;\n        long temp4;\n        long temp5;\n\
    \        long temp6;\n        long temp7;\n        long temp8;\n        long temp9;\n\
    \        long temp10;\n        long temp11;\n        long temp12;\n        long\
    \ temp13;\n        long temp14;\n        long temp15;\n        long temp16;\n\
    \        long temp17;\n        long temp18;\n        long temp19;\n        long\
    \ temp20;\n        long temp21;\n        long temp22;\n        long temp23;\n\
    \        long temp24;\n        long temp25;\n        long temp26;\n        long\
    \ temp27;\n        long temp28;\n        long temp29;\n        long temp30;\n\
    \        long temp31;\n        long temp32;\n        long temp33;\n        long\
    \ temp34;\n        long temp35;\n        long temp36;\n        long temp37;\n\
    \        long temp38;\n        long temp39;\n        long temp40;\n        long\
    \ temp41;\n        long temp42;\n        long temp43;\n        long temp44;\n\
    \        long temp45;\n        long temp46;\n        long temp47;\n        long\
    \ temp48;\n        long temp49;\n        long temp50;\n        long temp51;\n\
    \        long temp52;\n        long temp53;\n        long temp54;\n        long\
    \ temp55;\n        long temp56;\n        long temp57;\n        long temp58;\n\
    \        long temp59;\n        long temp60;\n        long temp61;\n        long\
    \ temp62;\n        long temp63;\n        long temp64;\n        long temp65;\n\
    \        long temp66;\n        long temp67;\n        long temp68;\n        long\
    \ temp69;\n        long temp70;\n        long temp71;\n        long temp72;\n\
    \        long temp73;\n        long temp74;\n        long temp75;\n        long\
    \ temp76;\n        long temp77;\n        long temp78;\n        long temp79;\n\
    \        long temp80;\n        long temp81;\n        long temp82;\n        long\
    \ temp83;\n        long temp84;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5n2cid4d.java:115: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n   \
    \         result.add(0l);\n            return result;\n        }\n        if (n\
    \ == 1) {\n            result.add(1l);\n            return result;\n        }\n\
    \        if (n % 2 == 0) {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n        } else {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4));\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmcin3idz.java:36: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpmcin3idz.java:38: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n - 3) + tri(n - 4));\n                                  ^\n  first type:\
    \  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            result.add(n + 1l);\n        } else {\n\
    \            tri(n - 1, result);\n            tri(n - 2, result);\n          \
    \  tri(n + 1, result);\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2eu7sbo6.java:31: error: method tri in class Problem cannot be\
    \ applied to given types;\n            tri(n - 1, result);\n            ^\n  required:\
    \ long\n  found:    long,ArrayList<Long>\n  reason: actual and formal argument\
    \ lists differ in length\n/tmp/tmp2eu7sbo6.java:32: error: method tri in class\
    \ Problem cannot be applied to given types;\n            tri(n - 2, result);\n\
    \            ^\n  required: long\n  found:    long,ArrayList<Long>\n  reason:\
    \ actual and formal argument lists differ in length\n/tmp/tmp2eu7sbo6.java:33:\
    \ error: method tri in class Problem cannot be applied to given types;\n     \
    \       tri(n + 1, result);\n            ^\n  required: long\n  found:    long,ArrayList<Long>\n\
    \  reason: actual and formal argument lists differ in length\n3 errors\n"
  stdout: ''
  timestamp: 1659794488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            result.add(n + 1l);\n            return\
    \ result;\n        }\n        ArrayList<Long> tri1 = tri(n - 1l);\n        ArrayList<Long>\
    \ tri2 = tri(n - 2l);\n        ArrayList<Long> tri3 = tri(n - 3l);\n        result.addAll(tri1);\n\
    \        result.addAll(tri2);\n        result.addAll(tri3);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw5ktq8gw.java:41)\n"
  stdout: ''
  timestamp: 1659794488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(n);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3l9lv3gm.java:40)\n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        if (n <= 1l) {\n\
    \            result.add(1l);\n            result.add(n + 1l);\n            return\
    \ result;\n        }\n        ArrayList<Long> tri1 = tri(n - 1l);\n        ArrayList<Long>\
    \ tri2 = tri(n - 2l);\n        ArrayList<Long> tri3 = tri(n - 3l);\n        ArrayList<Long>\
    \ tri4 = tri(n - 4l);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        result.addAll(tri4);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6oaiob5b.java:43)\n"
  stdout: ''
  timestamp: 1659794488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     if (n == 0) {\n            return new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l));\n        }\n        if (n == 1) {\n        \
    \    return new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l));\n\
    \        }\n        if (n % 2 == 0) {\n            return tri(n - 1) + tri(n -\
    \ 2) + tri(n - 1);\n        } else {\n            return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1);\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6oau2sa3.java:33: error: bad operand types for binary operator\
    \ '+'\n            return tri(n - 1) + tri(n - 2) + tri(n - 1);\n            \
    \                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmp6oau2sa3.java:35: error: bad operand types for binary operator '+'\n \
    \           return tri(n - 1) + tri(n - 2) + tri(n + 1);\n                   \
    \           ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<>();\n        ArrayList<Long> second = new ArrayList<>();\n\
    \        ArrayList<Long> third = new ArrayList<>();\n        first.add(1l);\n\
    \        second.add(2l);\n        third.add(3l);\n        if (n % 2 == 0) {\n\
    \            third.add(1l);\n        }\n        third.add(n - 1l);\n        third.add(n\
    \ - 2l);\n        third.add(n + 1);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe6ccr9yl.java:100: error: ')' expected\n        third.add(1\n \
    \                  ^\n1 error\n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 1) {\n     \
    \       list.add(1l);\n            return list;\n        }\n        list.add(3l);\n\
    \        if (n % 2 == 0) {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n        }\n        return list;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvtkkfc0.java:33: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 3) {\n     \
    \       list.add(1l);\n            list.add(3l);\n            list.add(2l);\n\
    \            list.add(8l);\n        } else {\n            list.add(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1));\n        }\n        return list;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp37bdy5r6.java:33: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 1) {\n     \
    \       list.add(1l);\n            list.add(n);\n            return list;\n  \
    \      }\n        list.add(1l);\n        list.add(n);\n        list.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        return list;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp01dntfqw.java:34: error: bad operand types for binary operator\
    \ '+'\n        list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n             \
    \               ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 1l) {\n  \
    \          result.add(1l);\n            result.add(3l);\n            result.add(2l);\n\
    \            result.add(8l);\n        } else {\n            long a = tri(n - 1l);\n\
    \            long b = tri(n - 2l);\n            long c = tri(n - 3l);\n      \
    \      result.add(a);\n            result.add(b);\n            result.add(c);\n\
    \            result.add(a + b + c);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzeitm768.java:33: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            long a = tri(n - 1l);\n                  \
    \      ^\n/tmp/tmpzeitm768.java:34: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long b = tri(n - 2l);\n           \
    \             ^\n/tmp/tmpzeitm768.java:35: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long c = tri(n - 3l);\n           \
    \             ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(n);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3l9lv3gm.java:40)\n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        if (n <= 1) {\n\
    \            result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1l);\n        ArrayList<Long> tri2 = tri(n - 2l);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3l);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcsn1pf_4.java:40)\n"
  stdout: ''
  timestamp: 1659794489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n == 1) {\n     \
    \       list.add(1l);\n            list.add(3l);\n            list.add(2l);\n\
    \            list.add(8l);\n            return list;\n        }\n        if (n\
    \ % 2 == 0) {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n \
    \       } else {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n - 3) + tri(n - 4));\n        }\n        return list;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5sjdlhob.java:35: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmp5sjdlhob.java:37: error: bad operand types for binary operator '+'\n \
    \           list.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4));\n                                ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n == 0) {\n     \
    \       list.add(0l);\n            list.add(1l);\n            return list;\n \
    \       }\n        if (n == 1) {\n            list.add(0l);\n            return\
    \ list;\n        }\n        if (n % 2 == 0) {\n            list.add(tri(n - 1)\
    \ + tri(n - 2) + tri(n - 3));\n        } else {\n            list.add(tri(n -\
    \ 1) + tri(n - 2) + tri(n - 3) + tri(n - 4));\n        }\n        return list;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuyba56ch.java:37: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n - 3));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpuyba56ch.java:39: error: bad operand types for binary operator '+'\n \
    \           list.add(tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n - 4));\n   \
    \                             ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<>();\n        ArrayList<Long> second = new ArrayList<>();\n\
    \        ArrayList<Long> third = new ArrayList<>();\n        first.add(1l);\n\
    \        second.add(1l);\n        third.add(1l);\n        if (n % 2 == 0) {\n\
    \            third.add(1l);\n        }\n        for (int i = 3; i <= n; i++) {\n\
    \            third.add(first.get(0l) + second.get(0l) + third.get(0l));\n    \
    \        second.add(first.get(0l) + second.get(0l));\n            first.add(third.get(0l));\n\
    \        }\n        result.addAll(first);\n        result.addAll(second);\n  \
    \      result.addAll(third);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn4cbs8h4.java:41: error: incompatible types: possible lossy conversion\
    \ from long to int\n            third.add(first.get(0l) + second.get(0l) + third.get(0l));\n\
    \                                ^\n/tmp/tmpn4cbs8h4.java:41: error: incompatible\
    \ types: possible lossy conversion from long to int\n            third.add(first.get(0l)\
    \ + second.get(0l) + third.get(0l));\n                                       \
    \          ^\n/tmp/tmpn4cbs8h4.java:41: error: incompatible types: possible lossy\
    \ conversion from long to int\n            third.add(first.get(0l) + second.get(0l)\
    \ + third.get(0l));\n                                                        \
    \         ^\n/tmp/tmpn4cbs8h4.java:42: error: incompatible types: possible lossy\
    \ conversion from long to int\n            second.add(first.get(0l) + second.get(0l));\n\
    \                                 ^\n/tmp/tmpn4cbs8h4.java:42: error: incompatible\
    \ types: possible lossy conversion from long to int\n            second.add(first.get(0l)\
    \ + second.get(0l));\n                                                  ^\n/tmp/tmpn4cbs8h4.java:43:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        first.add(third.get(0l));\n                                ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    6 errors\n"
  stdout: ''
  timestamp: 1659794488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuhkhhiw3.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 1) {\n     \
    \       list.add(1l);\n            list.add(n);\n            return list;\n  \
    \      }\n        list.add(1l);\n        list.add(n);\n        list.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        return list;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp01dntfqw.java:34: error: bad operand types for binary operator\
    \ '+'\n        list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n             \
    \               ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 1) {\n     \
    \       list.add(1l);\n            return list;\n        }\n        list.add(3l);\n\
    \        if (n % 2 == 0) {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n        }\n        return list;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvtkkfc0.java:33: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 3) {\n   \
    \         result.add(1l);\n            result.add(n);\n            result.add(1l);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1l);\n        second.add(n);\n\
    \        third.add(1l);\n        third.add(n);\n        third.add(1l);\n     \
    \   third.add(n);\n        third.add(1l);\n        third.add(n);\n        third.add(1l);\n\
    \        third.add(n);\n        third.add(1l);\n        third.add(n);\n      \
    \  third.add(1l);\n        third.add(n);\n        third.add(1l);\n        third.add(n);\n\
    \        third.add(1l);\n        third.add(n);\n        third.add(1l);\n     \
    \   third.add(n);\n        third.add(1l);\n        third.add(n);\n        third.add(1l);\n\
    \        third.add(n);\n        third.add(1l);\n        third.add(n);\n      \
    \  third.add(1l);\n        third.add(n);\n        third.add(1l);\n        third.add(n);\n\
    \        third.add(1l);\n        third.add(n);\n        third.add(1l);\n     \
    \   third.add(n);\n        third.add(1l);\n        third.add(n);\n        third.add(1l);\n\
    \        third.add(n);\n        third.add(1l);\n        third.add(n);\n      \
    \  third.add(1l);\n        third.add(n);\n        third.add(1l);\n        third.add(n);\n\
    \        third.add(1l);\n        third.add(n);\n        third.add(1l);\n     \
    \   third.add(n);\n        third.add(1l);\n        third.add(n);\n        third.add(1l);\n\
    \        third.add(n);\n        third.add(1l);\n        third.add(n);\n      \
    \  third.add(1l);\n        third.add(n);\n        third.add(1l);\n        third.add(n);\n\
    \        third.add(1l);\n        third.add(n);\n        third.add(1l);\n     \
    \   third.add(n);\n        third.add(1l);\n        third.add(n);\n        third.add(1l);\n\
    \        third.add(n);\n        third.add(1l);\n        third.add(n);\n      \
    \  third.add(1l);\n        third.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl95ksmur.java:105: error: <identifier> expected\n        third.\n\
    \              ^\n/tmp/tmpl95ksmur.java:105: error: not a statement\n        third.\n\
    \             ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     if (n == 1l) return new ArrayList<Long>(Arrays.asList((long)1l));\n    \
    \    if (n == 2l) return new ArrayList<Long>(Arrays.asList((long)1l, (long)2l));\n\
    \        if (n % 2 == 1l) return tri(n - 1l).stream().flatMap(x -> tri(n - 2l).stream()).collect(Collectors.toList());\n\
    \        else return tri(n - 1l).stream().flatMap(x -> tri(n - 2l).stream().flatMap(y\
    \ -> tri(n - 3l).stream())).collect(Collectors.toList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkrma8r5_.java:28: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        if (n % 2 == 1l) return tri(n - 1l).stream().flatMap(x\
    \ -> tri(n - 2l).stream()).collect(Collectors.toList());\n                   \
    \                                                                            ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<Long>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    /tmp/tmpkrma8r5_.java:29: error: incompatible types: inference variable R has\
    \ incompatible bounds\n        else return tri(n - 1l).stream().flatMap(x -> tri(n\
    \ - 2l).stream().flatMap(y -> tri(n - 3l).stream())).collect(Collectors.toList());\n\
    \                                                                            \
    \                                          ^\n    equality constraints: List<T#2>\n\
    \    lower bounds: ArrayList<Long>,Object\n  where R,A,T#1,T#2 are type-variables:\n\
    \    R extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    A extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    T#1 extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n2 errors\n"
  stdout: ''
  timestamp: 1659794489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     if (n <= 1l) {\n            return new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        long\
    \ tri1 = tri(n - 1l);\n        long tri2 = tri(n - 2l);\n        long tri3 = tri(n\
    \ - 3l);\n        result.add((long) tri1);\n        result.add((long) tri2);\n\
    \        result.add((long) tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpys_ointb.java:30: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1l);\n                   \
    \    ^\n/tmp/tmpys_ointb.java:31: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2l);\n                   \
    \    ^\n/tmp/tmpys_ointb.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n - 3l);\n                   \
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        if (n\
    \ % 2 == 0) {\n            result.add(tri(n - 1) + tri(n - 2));\n        } else\
    \ {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 3));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpynzylg35.java:32: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2));\n                    \
    \              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpynzylg35.java:34: error: bad operand types for binary operator '+'\n \
    \           result.add(tri(n - 1) + tri(n - 2) + tri(n - 3));\n              \
    \                    ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<>();\n        ArrayList<Long> second = new ArrayList<>();\n\
    \        ArrayList<Long> third = new ArrayList<>();\n        first.add(1l);\n\
    \        second.add(1l);\n        third.add(1l);\n        if (n % 2 == 0) {\n\
    \            third.add(1l);\n        }\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tznosnn.java:102: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long tri1 = (long)3;\n\
    \        long tri2 = (long)1;\n        long tri3 = (long)2;\n        long tri4\
    \ = (long)3;\n        long tri5 = (long)1;\n        long tri6 = (long)2;\n   \
    \     long tri7 = (long)3;\n        long tri8 = (long)1;\n        long tri9 =\
    \ (long)2;\n        long tri10 = (long)3;\n        long tri11 = (long)1;\n   \
    \     long tri12 = (long)2;\n        long tri13 = (long)3;\n        long tri14\
    \ = (long)1;\n        long tri15 = (long)2;\n        long tri16 = (long)3;\n \
    \       long tri17 = (long)1;\n        long tri18 = (long)2;\n        long tri19\
    \ = (long)3;\n        long tri20 = (long)1;\n        long tri21 = (long)2;\n \
    \       long tri22 = (long)3;\n        long tri23 = (long)1;\n        long tri24\
    \ = (long)2;\n        long tri25 = (long)3;\n        long tri26 = (long)1;\n \
    \       long tri27 = (long)2;\n        long tri28 = (long)3;\n        long tri29\
    \ = (long)1;\n        long tri30 = (long)2;\n        long tri31 = (long)3;\n \
    \       long tri32 = (long)1;\n        long tri33 = (long)2;\n        long tri34\
    \ = (long)3;\n        long tri35 = (long)1;\n        long tri36 = (long)2;\n \
    \       long tri37 = (long)3;\n        long tri38 = (long)1;\n        long tri39\
    \ = (long)2;\n        long tri40 = (long)3;\n        long tri41 = (long)1;\n \
    \       long tri42 = (long)2;\n        long tri43 = (long)3;\n        long tri44\
    \ = (long)1;\n        long tri45 = (long)2;\n        long tri46 = (long)3;\n \
    \       long tri47 = (long)1;\n        long tri48 = (long)2;\n        long tri49\
    \ = (long)3;\n        long tri50 = (long)1;\n        long tri51 = (long)2;\n \
    \       long tri52 = (long)3;\n        long tri53 = (long)1;\n        long tri54\
    \ = (long)2;\n        long tri55 = (long)3;\n        long tri56 = (long)1;\n \
    \       long tri57 = (long)2;\n        long tri58 = (long)3;\n        long tri59\
    \ = (long)1;\n        long tri60 = (long)2;\n        long tri61 = (long)3;\n \
    \       long tri62 = (long)1;\n        long tri\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpupyzbkew.java:89: error: ';' expected\n        long tri\n     \
    \           ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n == 0) list.add(0l);\n\
    \        if (n == 1) list.add(1l);\n        if (n == 2) list.add(2l);\n      \
    \  if (n % 2 == 0) list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        else\
    \ list.add(tri(n - 1) + tri(n - 2));\n        return list;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8lckcjm.java:30: error: bad operand types for binary operator\
    \ '+'\n        if (n % 2 == 0) list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \                                            ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmp_8lckcjm.java:31: error: bad operand\
    \ types for binary operator '+'\n        else list.add(tri(n - 1) + tri(n - 2));\n\
    \                                 ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n == 1) {\n     \
    \       list.add(1l);\n            list.add(3l);\n            list.add(2l);\n\
    \            list.add(8l);\n        } else {\n            list.add(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1));\n        }\n        return list;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8cg89af2.java:33: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     if (n == 1l) return new ArrayList<Long>(Arrays.asList((long)1l));\n    \
    \    if (n == 2l) return new ArrayList<Long>(Arrays.asList((long)1l, (long)2l));\n\
    \        if (n % 2 == 0l) return tri(n - 1l).stream().map(i -> tri(n - 1l).stream().map(j\
    \ -> tri(n - 1l).stream().map(k -> tri(n - 1l).stream().map(l -> tri(n - 1l).stream().map(m\
    \ -> tri(n - 1l).stream().map(n -> tri(n - 1l).stream().map(o -> tri(n - 1l).stream().map(p\
    \ -> tri(n - 1l).stream().map(q -> tri(n - 1l).stream().map(r -> tri(n - 1l).stream().map(s\
    \ -> tri(n - 1l).stream().map(t -> tri(n - 1l).stream().map(u -> tri(n - 1l).stream().map(v\
    \ -> tri(n - 1l).stream().map(w -> tri(n - 1l).stream().map(x -> tri(n - 1l).stream().map(y\
    \ -> tri(n - 1l).stream().map(z -> tri(n - 1l).stream().map(a -> tri(n - 1l).stream().map(b\
    \ -> tri(n - 1l).stream().map(c) -> tri(n - 1l).stream().map(d -> tri(n - 1l).stream().map(e\
    \ -> tri(n - 1l).stream().map(f -> tri(n - 1l).stream().map(g -> tri(n - 1l).stream().map(h\
    \ -> tri(n - 1l).stream().map(i -> tri(n - 1l).stream().map(j -> tri(n - 1l).stream().map(k\
    \ -> tri(n - 1l).stream().map(l -> tri(n - 1l).stream().map(m -> tri(n - 1l).stream().map(n\
    \ -> tri(n - 1l).stream().map(o -> tri(n - 1l).stream().map(p -> tri(n - 1l).stream().map(q\
    \ -> tri(n - 1l).stream().map(r -> tri(n - 1l).stream().map(s -> tri(n - 1l).stream().map(t\
    \ -> tri(n - 1l).stream().map(u -> tri(n - 1l).stream().map(v -> tri(n - 1l).stream().map(w\
    \ -> tri(n - 1l).stream().map(x -> tri(\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnmly3jp7.java:28: error: ')' expected\n        if (n % 2 == 0l)\
    \ return tri(n - 1l).stream().map(i -> tri(n - 1l).stream().map(j -> tri(n - 1l).stream().map(k\
    \ -> tri(n - 1l).stream().map(l -> tri(n - 1l).stream().map(m -> tri(n - 1l).stream().map(n\
    \ -> tri(n - 1l).stream().map(o -> tri(n - 1l).stream().map(p -> tri(n - 1l).stream().map(q\
    \ -> tri(n - 1l).stream().map(r -> tri(n - 1l).stream().map(s -> tri(n - 1l).stream().map(t\
    \ -> tri(n - 1l).stream().map(u -> tri(n - 1l).stream().map(v -> tri(n - 1l).stream().map(w\
    \ -> tri(n - 1l).stream().map(x -> tri(n - 1l).stream().map(y -> tri(n - 1l).stream().map(z\
    \ -> tri(n - 1l).stream().map(a -> tri(n - 1l).stream().map(b -> tri(n - 1l).stream().map(c)\
    \ -> tri(n - 1l).stream().map(d -> tri(n - 1l).stream().map(e -> tri(n - 1l).stream().map(f\
    \ -> tri(n - 1l).stream().map(g -> tri(n - 1l).stream().map(h -> tri(n - 1l).stream().map(i\
    \ -> tri(n - 1l).stream().map(j -> tri(n - 1l).stream().map(k -> tri(n - 1l).stream().map(l\
    \ -> tri(n - 1l).stream().map(m -> tri(n - 1l).stream().map(n -> tri(n - 1l).stream().map(o\
    \ -> tri(n - 1l).stream().map(p -> tri(n - 1l).stream().map(q -> tri(n - 1l).stream().map(r\
    \ -> tri(n - 1l).stream().map(s -> tri(n - 1l).stream().map(t -> tri(n - 1l).stream().map(u\
    \ -> tri(n - 1l).stream().map(v -> tri(n - 1l).stream().map(w -> tri(n - 1l).stream().map(x\
    \ -> tri(\n                                                                  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                             ^\n/tmp/tmpnmly3jp7.java:29:\
    \ error: illegal st"
  stdout: ''
  timestamp: 1659794488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        long a = 1, b =\
    \ 2, c = 1;\n        long tri = 0;\n        for(int i = 1; i < n; i++) {\n   \
    \         tri = a + b + c;\n            a = b;\n            b = c;\n         \
    \   c = tri;\n            result.add(tri);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa0if5j4y.java:39)\n"
  stdout: ''
  timestamp: 1659794489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<>();\n        ArrayList<Long> second = new ArrayList<>();\n\
    \        ArrayList<Long> third = new ArrayList<>();\n        first.add(1l);\n\
    \        second.add(2l);\n        third.add(3l);\n        if (n % 2 == 0) {\n\
    \            third.add(1l);\n        }\n        third.add(n - 1l);\n        third.add(n\
    \ - 2l);\n        third.add(n + 1);\n        third.add(1l);\n        third.add(2l);\n\
    \        third.add(3l);\n        third.add(4l);\n        third.add(5l);\n    \
    \    third.add(6l);\n        third.add(7l);\n        third.add(8l);\n        third.add(9l);\n\
    \        third.add(10l);\n        third.add(11l);\n        third.add(12l);\n \
    \       third.add(13l);\n        third.add(14l);\n        third.add(15l);\n  \
    \      third.add(16l);\n        third.add(17l);\n        third.add(18l);\n   \
    \     third.add(19l);\n        third.add(20l);\n        third.add(21l);\n    \
    \    third.add(22l);\n        third.add(23l);\n        third.add(24l);\n     \
    \   third.add(25l);\n        third.add(26l);\n        third.add(27l);\n      \
    \  third.add(28l);\n        third.add(29l);\n        third.add(30l);\n       \
    \ third.add(31l);\n        third.add(32l);\n        third.add(33l);\n        third.add(34l);\n\
    \        third.add(35l);\n        third.add(36l);\n        third.add(37l);\n \
    \       third.add(38l);\n        third.add(39l);\n        third.add(40l);\n  \
    \      third.add(41l);\n        third.add(42l);\n        third.add(43l);\n   \
    \     third.add(44l);\n        third.add(45l);\n        third.add(46l);\n    \
    \    third.add(47l);\n        third.add(48l);\n        third.add(49l);\n     \
    \   third.add(50l);\n        third.add(51l);\n        third.add(52l);\n      \
    \  third.add(53l);\n        third.add(54l);\n        third.add(55l);\n       \
    \ third.add(56l);\n        third.add(57l);\n        third.add(58\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_0x27xq2.java:100: error: ')' expected\n        third.add(58\n\
    \                    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        if (n\
    \ % 2 == 0) {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        } else {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 1) + tri(n - 2) + tri(n + 1));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcd_qj5uc.java:32: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpcd_qj5uc.java:34: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1));\n                                  ^\n\
    \  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 1) {\n\
    \            result.add(1l);\n            result.add(3l);\n            result.add(2l);\n\
    \            result.add(8l);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        } else {\n            result.add(tri(n - 1) + tri(n - 2));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7e85r_xu.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmp7e85r_xu.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2));\n           \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<>();\n        ArrayList<Long> second = new ArrayList<>();\n\
    \        ArrayList<Long> third = new ArrayList<>();\n        first.add(1l);\n\
    \        second.add(1l);\n        third.add(1l);\n        long tri = 1;\n    \
    \    while (tri <= n) {\n            third.add(tri);\n            tri = tri +\
    \ 2;\n        }\n        third.add(tri);\n        tri = tri - 1;\n        while\
    \ (tri >= 1) {\n            second.add(tri);\n            tri = tri - 2;\n   \
    \     }\n        second.add(tri);\n        tri = tri + 1;\n        while (tri\
    \ <= n) {\n            first.add(tri);\n            tri = tri + 2;\n        }\n\
    \        first.add(tri);\n        result.addAll(first);\n        result.addAll(second);\n\
    \        result.addAll(third);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuk9rbwh8.java:61)\n"
  stdout: ''
  timestamp: 1659794489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 1) {\n   \
    \         result.add(1l);\n            result.add(3l);\n            result.add(2l);\n\
    \            result.add(8l);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        } else {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 3) + tri(n - 4));\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfg17skes.java:35: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpfg17skes.java:37: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n - 3) + tri(n - 4));\n                                  ^\n  first type:\
    \  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1l) {\n  \
    \          result.add(1l);\n            result.add(n);\n            return result;\n\
    \        }\n        ArrayList<Long> tri1 = tri(n - 1l);\n        ArrayList<Long>\
    \ tri2 = tri(n - 2l);\n        ArrayList<Long> tri3 = tri(n - 3l);\n        result.addAll(tri1);\n\
    \        result.addAll(tri2);\n        result.addAll(tri3);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqhdcs2jf.java:41)\n"
  stdout: ''
  timestamp: 1659794490
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuhkhhiw3.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     if (n == 0) {\n            return new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        } else if (n == 1) {\n            return new ArrayList<Long>(Arrays.asList((long)3l));\n\
    \        } else if (n % 2 == 0) {\n            return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1);\n        } else {\n            return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7)\
    \ + tri(n - 8) + tri(n - 9);\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqrun1zs9.java:31: error: bad operand types for binary operator\
    \ '+'\n            return tri(n - 1) + tri(n - 2) + tri(n + 1);\n            \
    \                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpqrun1zs9.java:33: error: bad operand types for binary operator '+'\n \
    \           return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8) + tri(n - 9);\n     \
    \                         ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n == 1l) {\n    \
    \        list.add(1l);\n            return list;\n        }\n        if (n % 2\
    \ == 0) {\n            list.add(tri(n - 1l));\n            list.add(tri(n - 2l));\n\
    \            list.add(tri(n + 1l));\n        } else {\n            list.add(tri(n\
    \ - 1l));\n            list.add(tri(n - 2l));\n            list.add(tri(n + 1l));\n\
    \            list.add(tri(n - 3l));\n        }\n        return list;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsf7sapli.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n            list.add(tri(n - 1l));\n                 \
    \       ^\n/tmp/tmpsf7sapli.java:33: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n - 2l));\n          \
    \              ^\n/tmp/tmpsf7sapli.java:34: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n + 1l));\n          \
    \              ^\n/tmp/tmpsf7sapli.java:36: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n - 1l));\n          \
    \              ^\n/tmp/tmpsf7sapli.java:37: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n - 2l));\n          \
    \              ^\n/tmp/tmpsf7sapli.java:38: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n + 1l));\n          \
    \              ^\n/tmp/tmpsf7sapli.java:39: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n - 3l));\n          \
    \              ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n7 errors\n"
  stdout: ''
  timestamp: 1659794490
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 1) {\n     \
    \       list.add(1l);\n            return list;\n        }\n        list.add(1l);\n\
    \        list.add(n / 2l);\n        if (n % 2 == 0) {\n            list.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n            list.add(tri(n\
    \ - 1) + tri(n - 2));\n        }\n        return list;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46pnqxbf.java:34: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmp46pnqxbf.java:36: error: bad operand types for binary operator '+'\n \
    \           list.add(tri(n - 1) + tri(n - 2));\n                             \
    \   ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n == 1l) return list;\n\
    \        if (n % 2 == 1l) list.add(1l);\n        else list.add(tri(n - 1l) + tri(n\
    \ - 2l) + tri(n - 3l));\n        return list;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiq3qvlus.java:29: error: bad operand types for binary operator\
    \ '+'\n        else list.add(tri(n - 1l) + tri(n - 2l) + tri(n - 3l));\n     \
    \                             ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n1 error\n"
  stdout: ''
  timestamp: 1659794489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        if (n <= 1) {\n\
    \            result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<Long>();\n        ArrayList<Long> second = new ArrayList<Long>();\n\
    \        ArrayList<Long> third = new ArrayList<Long>();\n        first.add(1l);\n\
    \        second.add(2l);\n        third.add(3l);\n        if (n % 2 == 0) {\n\
    \            third.add(1l);\n        }\n        third.add(n - 1);\n        third.add(n\
    \ + 1);\n        third.add(1);\n        third.add(2);\n        third.add(3);\n\
    \        third.add(4);\n        third.add(5);\n        third.add(6);\n       \
    \ third.add(7);\n        third.add(8);\n        third.add(9);\n        third.add(10);\n\
    \        third.add(11);\n        third.add(12);\n        third.add(13);\n    \
    \    third.add(14);\n        third.add(15);\n        third.add(16);\n        third.add(17);\n\
    \        third.add(18);\n        third.add(19);\n        third.add(20);\n    \
    \    third.add(21);\n        third.add(22);\n        third.add(23);\n        third.add(24);\n\
    \        third.add(25);\n        third.add(26);\n        third.add(27);\n    \
    \    third.add(28);\n        third.add(29);\n        third.add(30);\n        third.add(31);\n\
    \        third.add(32);\n        third.add(33);\n        third.add(34);\n    \
    \    third.add(35);\n        third.add(36);\n        third.add(37);\n        third.add(38);\n\
    \        third.add(39);\n        third.add(40);\n        third.add(41);\n    \
    \    third.add(42);\n        third.add(43);\n        third.add(44);\n        third.add(45);\n\
    \        third.add(46);\n        third.add(47);\n        third.add(48);\n    \
    \    third.add(49);\n        third.add(50);\n        third.add(51);\n        third.add(52);\n\
    \        third.add(53);\n        third.add(54);\n        third.add(55);\n    \
    \    third.add(56);\n        third.add(57);\n        third.add(58);\n        third.add(59);\n\
    \        third.add(60);\n        third.add(61);\n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp47wz7i_r.java:42: error: incompatible types: int cannot be converted\
    \ to Long\n        third.add(1);\n                  ^\n/tmp/tmp47wz7i_r.java:43:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(2);\n\
    \                  ^\n/tmp/tmp47wz7i_r.java:44: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(3);\n                  ^\n/tmp/tmp47wz7i_r.java:45:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(4);\n\
    \                  ^\n/tmp/tmp47wz7i_r.java:46: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(5);\n                  ^\n/tmp/tmp47wz7i_r.java:47:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(6);\n\
    \                  ^\n/tmp/tmp47wz7i_r.java:48: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(7);\n                  ^\n/tmp/tmp47wz7i_r.java:49:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(8);\n\
    \                  ^\n/tmp/tmp47wz7i_r.java:50: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(9);\n                  ^\n/tmp/tmp47wz7i_r.java:51:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(10);\n\
    \                  ^\n/tmp/tmp47wz7i_r.java:52: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(11);\n                  ^\n/tmp/tmp47wz7i_r.java:53:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(12);\n\
    \                  ^\n/tmp/tmp47wz7i_r.java:54: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(13);\n                  ^\n/tmp/tmp47wz7i_r.java:55:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(14);\n\
    \                  ^\n/tmp/tmp47wz7i_r.java:56: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(15);\n                  ^\n/tmp/tmp47wz7i_r.java:57:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(16);\n\
    \                  ^\n/tmp/tmp4"
  stdout: ''
  timestamp: 1659794490
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<>();\n        ArrayList<Long> second = new ArrayList<>();\n\
    \        ArrayList<Long> third = new ArrayList<>();\n        first.add(1l);\n\
    \        second.add(2l);\n        third.add(3l);\n        if (n % 2 == 0) {\n\
    \            third.add(1l);\n        }\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_kuibu3d.java:96: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n == 1) {\n     \
    \       list.add(1l);\n            list.add(3l);\n            list.add(2l);\n\
    \            list.add(8l);\n            return list;\n        }\n        if (n\
    \ % 2 == 0) {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n \
    \       } else {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n - 3) + tri(n - 4));\n        }\n        return list;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5sjdlhob.java:35: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmp5sjdlhob.java:37: error: bad operand types for binary operator '+'\n \
    \           list.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4));\n                                ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 1l) {\n    \
    \        list.add(1l);\n            list.add(1l);\n            return list;\n\
    \        }\n        ArrayList<Long> list1 = tri(n - 1l);\n        ArrayList<Long>\
    \ list2 = tri(n - 2l);\n        ArrayList<Long> list3 = tri(n - 3l);\n       \
    \ list.add(list1.get(0l));\n        list.add(list2.get(0l));\n        list.add(list3.get(0l));\n\
    \        list.add(list1.get(1l));\n        list.add(list2.get(1l));\n        list.add(list3.get(1l));\n\
    \        list.add(list1.get(2l));\n        list.add(list2.get(2l));\n        list.add(list3.get(2l));\n\
    \        return list;\n    }\n    public static void main(String[] args) {\n \
    \   assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnt0p049k.java:35: error: incompatible types: possible lossy conversion\
    \ from long to int\n        list.add(list1.get(0l));\n                       \
    \    ^\n/tmp/tmpnt0p049k.java:36: error: incompatible types: possible lossy conversion\
    \ from long to int\n        list.add(list2.get(0l));\n                       \
    \    ^\n/tmp/tmpnt0p049k.java:37: error: incompatible types: possible lossy conversion\
    \ from long to int\n        list.add(list3.get(0l));\n                       \
    \    ^\n/tmp/tmpnt0p049k.java:38: error: incompatible types: possible lossy conversion\
    \ from long to int\n        list.add(list1.get(1l));\n                       \
    \    ^\n/tmp/tmpnt0p049k.java:39: error: incompatible types: possible lossy conversion\
    \ from long to int\n        list.add(list2.get(1l));\n                       \
    \    ^\n/tmp/tmpnt0p049k.java:40: error: incompatible types: possible lossy conversion\
    \ from long to int\n        list.add(list3.get(1l));\n                       \
    \    ^\n/tmp/tmpnt0p049k.java:41: error: incompatible types: possible lossy conversion\
    \ from long to int\n        list.add(list1.get(2l));\n                       \
    \    ^\n/tmp/tmpnt0p049k.java:42: error: incompatible types: possible lossy conversion\
    \ from long to int\n        list.add(list2.get(2l));\n                       \
    \    ^\n/tmp/tmpnt0p049k.java:43: error: incompatible types: possible lossy conversion\
    \ from long to int\n        list.add(list3.get(2l));\n                       \
    \    ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n9 errors\n"
  stdout: ''
  timestamp: 1659794490
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n   \
    \         result.add(0l);\n            return result;\n        }\n        if (n\
    \ == 1) {\n            result.add(1l);\n            return result;\n        }\n\
    \        if (n % 2 == 0) {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1));\n        } else {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1));\n            result.add(tri(n - 2) + tri(n - 1) + tri(n - 2));\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8zz2o80v.java:36: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmp8zz2o80v.java:38: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n\
    \                                  ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n/tmp/tmp8zz2o80v.java:39: error: bad operand types for\
    \ binary operator '+'\n            result.add(tri(n - 2) + tri(n - 1) + tri(n\
    \ - 2));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n3 errors\n"
  stdout: ''
  timestamp: 1659794490
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) result.add(0l);\n\
    \        if (n == 1) result.add(1l);\n        if (n == 2) result.add(2l);\n  \
    \      if (n % 2 == 0) {\n            long a = tri(n - 1);\n            long b\
    \ = tri(n - 2);\n            long c = tri(n + 1);\n            long sum = a;\n\
    \            sum = sum + b + c;\n            result.add(sum);\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1h1wbdhk.java:31: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            long a = tri(n - 1);\n                   \
    \     ^\n/tmp/tmp1h1wbdhk.java:32: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long b = tri(n - 2);\n            \
    \            ^\n/tmp/tmp1h1wbdhk.java:33: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long c = tri(n + 1);\n            \
    \            ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794490
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(n);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3l9lv3gm.java:40)\n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 1) {\n     \
    \       list.add(1l);\n            return list;\n        }\n        list.add(3l);\n\
    \        if (n % 2 == 0) {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n        } else {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3));\n        }\n        return list;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptv6uabmi.java:33: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmptv6uabmi.java:35: error: bad operand types for binary operator '+'\n \
    \           list.add(tri(n - 1) + tri(n - 2) + tri(n - 3));\n                \
    \                ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794490
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n   \
    \         result.add(0l);\n            return result;\n        }\n        if (n\
    \ == 1) {\n            result.add(1l);\n            return result;\n        }\n\
    \        if (n % 2 == 0) {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1));\n        } else {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpztsbdq3e.java:36: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpztsbdq3e.java:38: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \                                  ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794490
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     if (n <= 1l) {\n            return new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        }\n        ArrayList<Long> result = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        long tri1 = tri(n - 1l);\n        long tri2 = tri(n - 2l);\n        long\
    \ tri3 = tri(n - 3l);\n        result.addAll(Arrays.asList(tri1, tri2, tri3));\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ynfrpg9.java:30: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1l);\n                   \
    \    ^\n/tmp/tmp4ynfrpg9.java:31: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2l);\n                   \
    \    ^\n/tmp/tmp4ynfrpg9.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n - 3l);\n                   \
    \    ^\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<>();\n        ArrayList<Long> second = new ArrayList<>();\n\
    \        ArrayList<Long> third = new ArrayList<>();\n        ArrayList<Long> fourth\
    \ = new ArrayList<>();\n        ArrayList<Long> fifth = new ArrayList<>();\n \
    \       ArrayList<Long> sixth = new ArrayList<>();\n        ArrayList<Long> seventh\
    \ = new ArrayList<>();\n        ArrayList<Long> eighth = new ArrayList<>();\n\
    \        ArrayList<Long> ninth = new ArrayList<>();\n        ArrayList<Long> tenth\
    \ = new ArrayList<>();\n        ArrayList<Long> eleventh = new ArrayList<>();\n\
    \        ArrayList<Long> twelfth = new ArrayList<>();\n        ArrayList<Long>\
    \ thirteenth = new ArrayList<>();\n        ArrayList<Long> fourteenth = new ArrayList<>();\n\
    \        ArrayList<Long> fifteenth = new ArrayList<>();\n        ArrayList<Long>\
    \ sixteenth = new ArrayList<>();\n        ArrayList<Long> seventeenth = new ArrayList<>();\n\
    \        ArrayList<Long> eighteenth = new ArrayList<>();\n        ArrayList<Long>\
    \ nineteenth = new ArrayList<>();\n        ArrayList<Long> twentieth = new ArrayList<>();\n\
    \        ArrayList<Long> twentyfirst = new ArrayList<>();\n        ArrayList<Long>\
    \ twentysecond = new ArrayList<>();\n        ArrayList<Long> twentythird = new\
    \ ArrayList<>();\n        ArrayList<Long> twentyfourth = new ArrayList<>();\n\
    \        ArrayList<Long> twentyfifth = new ArrayList<>();\n        ArrayList<Long>\
    \ twentysixth = new ArrayList<>();\n        ArrayList<Long> twentyseventh = new\
    \ ArrayList<>();\n        ArrayList<Long> twentyeighth = new ArrayList<>();\n\
    \        ArrayList<Long> twentyninth = new ArrayList<>();\n        ArrayList<Long>\
    \ thirtieth = new ArrayList<>();\n        ArrayList<Long> thirtyfirst = new ArrayList<>();\n\
    \        ArrayList<Long> thirtysecond = new ArrayList<>();\n        ArrayList<Long>\
    \ thirtythird = new ArrayList<>();\n        ArrayList<Long> thirtyfourth = new\
    \ ArrayList<>();\n        ArrayList<Long> thirtyfifth = new ArrayList<>();\n \
    \       ArrayList<Long> thirtysixth = new ArrayList<>();\n        ArrayList<Long>\
    \ thirtyseventh = new ArrayList<>();\n        ArrayList<Long> thirtyeighth = new\
    \ ArrayList<>();\n        ArrayList<Long> thirtyninth = new ArrayList<>();\n \
    \       ArrayList<Long> fortieth = new ArrayList<>();\n        ArrayList<Long>\
    \ fortyfirst = new ArrayList<>();\n        ArrayList<Long> fortysecond = new ArrayList<>();\n\
    \        ArrayList<Long> \n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpixhaot3o.java:73: error: not a statement\n        ArrayList<Long>\
    \ \n                 ^\n/tmp/tmpixhaot3o.java:73: error: ';' expected\n      \
    \  ArrayList<Long> \n                       ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long a = 1;\n     \
    \   long b = 2;\n        long c = 1;\n        long d = 1;\n        long temp;\n\
    \        long temp2;\n        long temp3;\n        long temp4;\n        long temp5;\n\
    \        long temp6;\n        long temp7;\n        long temp8;\n        long temp9;\n\
    \        long temp10;\n        long temp11;\n        long temp12;\n        long\
    \ temp13;\n        long temp14;\n        long temp15;\n        long temp16;\n\
    \        long temp17;\n        long temp18;\n        long temp19;\n        long\
    \ temp20;\n        long temp21;\n        long temp22;\n        long temp23;\n\
    \        long temp24;\n        long temp25;\n        long temp26;\n        long\
    \ temp27;\n        long temp28;\n        long temp29;\n        long temp30;\n\
    \        long temp31;\n        long temp32;\n        long temp33;\n        long\
    \ temp34;\n        long temp35;\n        long temp36;\n        long temp37;\n\
    \        long temp38;\n        long temp39;\n        long temp40;\n        long\
    \ temp41;\n        long temp42;\n        long temp43;\n        long temp44;\n\
    \        long temp45;\n        long temp46;\n        long temp47;\n        long\
    \ temp48;\n        long temp49;\n        long temp50;\n        long temp51;\n\
    \        long temp52;\n        long temp53;\n        long temp54;\n        long\
    \ temp55;\n        long temp56;\n        long temp57;\n        long temp58;\n\
    \        long temp59;\n        long temp60;\n        long temp61;\n        long\
    \ temp62;\n        long temp63;\n        long temp64;\n        long temp65;\n\
    \        long temp66;\n        long temp67;\n        long temp68;\n        long\
    \ temp69;\n        long temp70;\n        long temp71;\n        long temp72;\n\
    \        long temp73;\n        long temp74;\n        long temp75;\n        long\
    \ temp76;\n        long temp77;\n        long temp78;\n        long temp79;\n\
    \        long temp80;\n        long temp81;\n        long temp82;\n        long\
    \ temp83;\n        long temp84;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp112emmwl.java:115: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659794490
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n\
    \            result.add(0l);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.add(1l);\n            return result;\n      \
    \  }\n        if (n % 2 == 0) {\n            result.add(tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1));\n        } else {\n            result.add(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9k29ftx.java:36: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpf9k29ftx.java:38: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \                                  ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794490
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        long a = 1;\n \
    \       long b = 2;\n        long c = 1;\n        long d = 1;\n        long temp;\n\
    \        long temp2;\n        long temp3;\n        long temp4;\n        long temp5;\n\
    \        long temp6;\n        long temp7;\n        long temp8;\n        long temp9;\n\
    \        long temp10;\n        long temp11;\n        long temp12;\n        long\
    \ temp13;\n        long temp14;\n        long temp15;\n        long temp16;\n\
    \        long temp17;\n        long temp18;\n        long temp19;\n        long\
    \ temp20;\n        long temp21;\n        long temp22;\n        long temp23;\n\
    \        long temp24;\n        long temp25;\n        long temp26;\n        long\
    \ temp27;\n        long temp28;\n        long temp29;\n        long temp30;\n\
    \        long temp31;\n        long temp32;\n        long temp33;\n        long\
    \ temp34;\n        long temp35;\n        long temp36;\n        long temp37;\n\
    \        long temp38;\n        long temp39;\n        long temp40;\n        long\
    \ temp41;\n        long temp42;\n        long temp43;\n        long temp44;\n\
    \        long temp45;\n        long temp46;\n        long temp47;\n        long\
    \ temp48;\n        long temp49;\n        long temp50;\n        long temp51;\n\
    \        long temp52;\n        long temp53;\n        long temp54;\n        long\
    \ temp55;\n        long temp56;\n        long temp57;\n        long temp58;\n\
    \        long temp59;\n        long temp60;\n        long temp61;\n        long\
    \ temp62;\n        long temp63;\n        long temp64;\n        long temp65;\n\
    \        long temp66;\n        long temp67;\n        long temp68;\n        long\
    \ temp69;\n        long temp70;\n        long temp71;\n        long temp72;\n\
    \        long temp73;\n        long temp74;\n        long temp75;\n        long\
    \ temp76;\n        long temp77;\n        long temp78;\n        long temp79;\n\
    \        long temp80;\n        long temp81;\n        long temp82;\n        long\
    \ temp83;\n        long temp84\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps7x38f8c.java:114: error: ';' expected\n        long temp84\n \
    \                  ^\n1 error\n"
  stdout: ''
  timestamp: 1659794489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        if (n <= 1) {\n\
    \            result.add(n);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3);\n        ArrayList<Long> tri4 = tri(n - 4);\n        ArrayList<Long>\
    \ tri5 = tri(n - 5);\n        ArrayList<Long> tri6 = tri(n - 6);\n        ArrayList<Long>\
    \ tri7 = tri(n - 7);\n        ArrayList<Long> tri8 = tri(n - 8);\n        ArrayList<Long>\
    \ tri9 = tri(n - 9);\n        ArrayList<Long> tri10 = tri(n - 10);\n        ArrayList<Long>\
    \ tri11 = tri(n - 11);\n        ArrayList<Long> tri12 = tri(n - 12);\n       \
    \ ArrayList<Long> tri13 = tri(n - 13);\n        ArrayList<Long> tri14 = tri(n\
    \ - 14);\n        ArrayList<Long> tri15 = tri(n - 15);\n        ArrayList<Long>\
    \ tri16 = tri(n - 16);\n        ArrayList<Long> tri17 = tri(n - 17);\n       \
    \ ArrayList<Long> tri18 = tri(n - 18);\n        ArrayList<Long> tri19 = tri(n\
    \ - 19);\n        ArrayList<Long> tri20 = tri(n - 20);\n        ArrayList<Long>\
    \ tri21 = tri(n - 21);\n        ArrayList<Long> tri22 = tri(n - 22);\n       \
    \ ArrayList<Long> tri23 = tri(n - 23);\n        ArrayList<Long> tri24 = tri(n\
    \ - 24);\n        ArrayList<Long> tri25 = tri(n - 25);\n        ArrayList<Long>\
    \ tri26 = tri(n - 26);\n        ArrayList<Long> tri27 = tri(n - 27);\n       \
    \ ArrayList<Long> tri28 = tri(n - 28);\n        ArrayList<Long> tri29 = tri(n\
    \ - 29);\n        ArrayList<Long> tri30 = tri(n - 30);\n        ArrayList<Long>\
    \ tri31 = tri(n - 31);\n        ArrayList<Long> tri32 = tri(n - 32);\n       \
    \ ArrayList<Long> tri33 = tri(n - 33);\n        ArrayList<Long> tri34 = tri(n\
    \ - 34);\n        ArrayList<Long> tri35 = tri(n - 35);\n        ArrayList<Long>\
    \ tri36 = tri(n - 36);\n        ArrayList<Long> tri37 = tri(n - 37);\n       \
    \ ArrayList<Long> tri38 = tri(n - 38);\n        ArrayList<Long> tri39 = tri(n\
    \ - 39);\n        ArrayList<Long> tri40 = tri(n - 40);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp024bvyst.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794490
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            result.add(n);\n            return result;\n\
    \        }\n        ArrayList<Long> first = new ArrayList<>();\n        ArrayList<Long>\
    \ second = new ArrayList<>();\n        ArrayList<Long> third = new ArrayList<>();\n\
    \        first.add(1l);\n        second.add(n);\n        third.add(n);\n     \
    \   third.add(1l);\n        first.add(second);\n        second.add(third);\n \
    \       third.add(1l);\n        first.add(second);\n        second.add(third);\n\
    \        third.add(n);\n        first.add(second);\n        second.add(third);\n\
    \        third.add(n);\n        first.add(second);\n        second.add(third);\n\
    \        third.add(n);\n        first.add(second);\n        second.add(third);\n\
    \        third.add(n);\n        first.add(second);\n        second.add(third);\n\
    \        third.add(n);\n        first.add(second);\n        second.add(third);\n\
    \        third.add(n);\n        first.add(second);\n        second.add(third);\n\
    \        third.add(n);\n        first.add(second);\n        second.add(third);\n\
    \        third.add(n);\n        first.add(second);\n        second.add(third);\n\
    \        third.add(n);\n        first.add(second);\n        second.add(third);\n\
    \        third.add(n);\n        first.add(second);\n        second.add(third);\n\
    \        third.add(n);\n        first.add(second);\n        second.add(third);\n\
    \        third.add(n);\n        first.add(second);\n        second.add(third);\n\
    \        third.add(n);\n        first.add(second);\n        second.add(third);\n\
    \        third.add(n);\n        first.add(second);\n        second.add(third);\n\
    \        third.add(n);\n        first.add(second);\n        second.add(third);\n\
    \        third.add(n);\n        first.add(second);\n        second.add(third);\n\
    \        third.add(n);\n        first.add(second);\n        second.add(third);\n\
    \        third.add(n);\n        first.add(second);\n        second.add(third);\n\
    \        third.add(n);\n        first.add(second);\n        second.add(third);\n\
    \        third.add(n);\n        first.add(second);\n        second.add(third);\n\
    \        third.add(n);\n        first.add(second);\n        second.add(third);\n\
    \        third.add(n);\n        first.add(second);\n        second.add(third);\n\
    \        third.add(n);\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3b2jz4sx.java:39: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n        first.add(second);\n                  ^\n/tmp/tmp3b2jz4sx.java:40:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to Long\n   \
    \     second.add(third);\n                   ^\n/tmp/tmp3b2jz4sx.java:42: error:\
    \ incompatible types: ArrayList<Long> cannot be converted to Long\n        first.add(second);\n\
    \                  ^\n/tmp/tmp3b2jz4sx.java:43: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n        second.add(third);\n                  \
    \ ^\n/tmp/tmp3b2jz4sx.java:45: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n        first.add(second);\n                  ^\n/tmp/tmp3b2jz4sx.java:46:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to Long\n   \
    \     second.add(third);\n                   ^\n/tmp/tmp3b2jz4sx.java:48: error:\
    \ incompatible types: ArrayList<Long> cannot be converted to Long\n        first.add(second);\n\
    \                  ^\n/tmp/tmp3b2jz4sx.java:49: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n        second.add(third);\n                  \
    \ ^\n/tmp/tmp3b2jz4sx.java:51: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n        first.add(second);\n                  ^\n/tmp/tmp3b2jz4sx.java:52:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to Long\n   \
    \     second.add(third);\n                   ^\n/tmp/tmp3b2jz4sx.java:54: error:\
    \ incompatible types: ArrayList<Long> cannot be converted to Long\n        first.add(second);\n\
    \                  ^\n/tmp/tmp3b2jz4sx.java:55: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n        second.add(third);\n                  \
    \ ^\n/tmp/tmp3b2jz4sx.java:57: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n        first.add(second);\n                  ^\n/tmp/tmp3b2jz4sx.java:58:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to Long\n   \
    \     second.add(third);\n                   ^\n/tmp/tmp3b2jz4sx.java:60:"
  stdout: ''
  timestamp: 1659794491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long a = 1, b = 2,\
    \ c;\n        long tri_sum = 0;\n        long tri_sum2 = 0;\n        long tri_sum3\
    \ = 0;\n        long tri_sum4 = 0;\n        long tri_sum5 = 0;\n        long tri_sum6\
    \ = 0;\n        long tri_sum7 = 0;\n        long tri_sum8 = 0;\n        long tri_sum9\
    \ = 0;\n        long tri_sum10 = 0;\n        long tri_sum11 = 0;\n        long\
    \ tri_sum12 = 0;\n        long tri_sum13 = 0;\n        long tri_sum14 = 0;\n \
    \       long tri_sum15 = 0;\n        long tri_sum16 = 0;\n        long tri_sum17\
    \ = 0;\n        long tri_sum18 = 0;\n        long tri_sum19 = 0;\n        long\
    \ tri_sum20 = 0;\n        long tri_sum21 = 0;\n        long tri_sum22 = 0;\n \
    \       long tri_sum23 = 0;\n        long tri_sum24 = 0;\n        long tri_sum25\
    \ = 0;\n        long tri_sum26 = 0;\n        long tri_sum27 = 0;\n        long\
    \ tri_sum28 = 0;\n        long tri_sum29 = 0;\n        long tri_sum30 = 0;\n \
    \       long tri_sum31 = 0;\n        long tri_sum32 = 0;\n        long tri_sum33\
    \ = 0;\n        long tri_sum34 = 0;\n        long tri_sum35 = 0;\n        long\
    \ tri_sum36 = 0;\n        long tri_sum37 = 0;\n        long tri_sum38 = 0;\n \
    \       long tri_sum39 = 0;\n        long tri_sum40 = 0;\n        long tri_sum41\
    \ = 0;\n        long tri_sum42 = 0;\n        long tri_sum43 = 0;\n        long\
    \ tri_sum44 = 0;\n        long tri_sum45 = 0;\n        long tri_sum46 = 0;\n \
    \       long tri_sum47 = 0;\n        long tri_sum48 = 0;\n        long tri_sum49\
    \ = 0;\n        long tri_sum50 = 0;\n        long tri_sum51 = 0;\n        long\
    \ tri_sum52 = 0;\n        long tri_sum53 = 0;\n        long tri_sum54 = 0;\n \
    \       long tri_sum55 = 0;\n        long tri_sum56 = 0;\n        long tri_sum57\
    \ = 0;\n        long tri_sum58 = 0;\n        long tri_sum59 = 0;\n        long\
    \ tri_sum60 = 0;\n        long tri_sum61 = 0;\n        long tri_sum62 = 0;\n \
    \       long tri_\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqkydu47m.java:90: error: ';' expected\n        long tri_\n    \
    \             ^\n1 error\n"
  stdout: ''
  timestamp: 1659794490
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n == 0) list.add(0l);\n\
    \        if (n == 1) list.add(1l);\n        if (n == 2) list.add(2l);\n      \
    \  if (n % 2 == 0) {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        } else {\n            list.add(tri(n - 1) + tri(n - 2));\n        }\n\
    \        return list;\n    }\n    public static void main(String[] args) {\n \
    \   assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7103u_34.java:31: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmp7103u_34.java:33: error: bad operand types for binary operator '+'\n \
    \           list.add(tri(n - 1) + tri(n - 2));\n                             \
    \   ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 1l) {\n    \
    \        list.add(1l);\n            list.add(1l);\n            return list;\n\
    \        }\n        list.add(1l);\n        list.add(1l);\n        list.add(1l);\n\
    \        if (n % 2 == 0) {\n            list.add(tri(n - 1l));\n            list.add(tri(n\
    \ - 2l));\n            list.add(tri(n - 3l));\n        } else {\n            list.add(tri(n\
    \ - 1l));\n            list.add(tri(n - 2l));\n            list.add(tri(n - 3l));\n\
    \            list.add(tri(n - 4l));\n        }\n        return list;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm79fdrm3.java:36: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n            list.add(tri(n - 1l));\n                 \
    \       ^\n/tmp/tmpm79fdrm3.java:37: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n - 2l));\n          \
    \              ^\n/tmp/tmpm79fdrm3.java:38: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n - 3l));\n          \
    \              ^\n/tmp/tmpm79fdrm3.java:40: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n - 1l));\n          \
    \              ^\n/tmp/tmpm79fdrm3.java:41: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n - 2l));\n          \
    \              ^\n/tmp/tmpm79fdrm3.java:42: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n - 3l));\n          \
    \              ^\n/tmp/tmpm79fdrm3.java:43: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n - 4l));\n          \
    \              ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n7 errors\n"
  stdout: ''
  timestamp: 1659794491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<Long>();\n        if (n <= 1) {\n \
    \           list.add(1l);\n            list.add(1l);\n            list.add(1l);\n\
    \        } else {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        }\n        return list;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp01cu6wsv.java:32: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long a = 1;\n     \
    \   long b = 2;\n        long c = 1;\n        long d = 1;\n        long temp;\n\
    \        long tri = 0;\n        \n        while(n > 0) {\n            temp = tri;\n\
    \            tri = a + b + c + d;\n            a = b;\n            b = c;\n  \
    \          c = d;\n            d = temp;\n            \n            result.add(tri);\n\
    \            n--;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc2rsoa20.java:48)\n"
  stdout: ''
  timestamp: 1659794491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 3) {\n   \
    \         result.add(1l);\n            result.add(3l);\n            result.add(2l);\n\
    \            result.add(8l);\n            return result;\n        }\n        long\
    \ tri1 = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        long tri2 = tri(n - 3)\
    \ + tri(n - 4) + tri(n - 5);\n        result.add(tri1);\n        result.add(tri2);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp555vf1s4.java:34: error: bad operand types for binary operator\
    \ '+'\n        long tri1 = tri(n - 1) + tri(n - 2) + tri(n + 1);\n           \
    \                    ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmp555vf1s4.java:35: error: bad operand types for binary operator '+'\n \
    \       long tri2 = tri(n - 3) + tri(n - 4) + tri(n - 5);\n                  \
    \             ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 0) {\n\
    \            result.add(0l);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.add(1l);\n            return result;\n      \
    \  }\n        if (n % 2 == 0) {\n            result.add(tri(n - 1) + tri(n - 2));\n\
    \        } else {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwfrpzbsg.java:36: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2));\n                    \
    \              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpwfrpzbsg.java:38: error: bad operand types for binary operator '+'\n \
    \           result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n              \
    \                    ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     if (n <= 1l) {\n            return new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        long\
    \ tri1 = tri(n - 1l);\n        long tri2 = tri(n - 2l);\n        long tri3 = tri(n\
    \ - 3l);\n        result.add((long) tri1);\n        result.add((long) tri2);\n\
    \        result.add((long) tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpys_ointb.java:30: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1l);\n                   \
    \    ^\n/tmp/tmpys_ointb.java:31: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2l);\n                   \
    \    ^\n/tmp/tmpys_ointb.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n - 3l);\n                   \
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 1) {\n     \
    \       list.add(1l);\n            return list;\n        }\n        list.add(3l);\n\
    \        if (n % 2 == 0) {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n        } else {\n            list.add(tri(n - 1) + tri(n - 2));\n \
    \       }\n        return list;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5y1uljpu.java:33: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmp5y1uljpu.java:35: error: bad operand types for binary operator '+'\n \
    \           list.add(tri(n - 1) + tri(n - 2));\n                             \
    \   ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        if (n\
    \ % 2 == 0) {\n            result.add(tri(n / 2));\n            result.add(tri(n\
    \ / 2 + 1));\n            result.add(tri(n / 2 + 2));\n        } else {\n    \
    \        result.add(tri(n / 2 + 1));\n            result.add(tri(n / 2 + 2));\n\
    \            result.add(tri(n / 2));\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps4hysjgz.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n            result.add(tri(n / 2));\n                \
    \          ^\n/tmp/tmps4hysjgz.java:33: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n / 2 + 1));\n     \
    \                     ^\n/tmp/tmps4hysjgz.java:34: error: incompatible types:\
    \ ArrayList<Long> cannot be converted to Long\n            result.add(tri(n /\
    \ 2 + 2));\n                          ^\n/tmp/tmps4hysjgz.java:36: error: incompatible\
    \ types: ArrayList<Long> cannot be converted to Long\n            result.add(tri(n\
    \ / 2 + 1));\n                          ^\n/tmp/tmps4hysjgz.java:37: error: incompatible\
    \ types: ArrayList<Long> cannot be converted to Long\n            result.add(tri(n\
    \ / 2 + 2));\n                          ^\n/tmp/tmps4hysjgz.java:38: error: incompatible\
    \ types: ArrayList<Long> cannot be converted to Long\n            result.add(tri(n\
    \ / 2));\n                          ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n6 errors\n"
  stdout: ''
  timestamp: 1659794491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 1l) {\n  \
    \          result.add(1l);\n            return result;\n        }\n        if\
    \ (n % 2 == 0l) {\n            result.add(tri(n - 1l));\n            result.add(tri(n\
    \ - 2l));\n            result.add(tri(n - 3l));\n        } else {\n          \
    \  result.add(tri(n - 1l));\n            result.add(tri(n - 2l));\n          \
    \  result.add(tri(n - 3l));\n            result.add(tri(n - 4l));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpio1vcuxl.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n            result.add(tri(n - 1l));\n               \
    \           ^\n/tmp/tmpio1vcuxl.java:33: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 2l));\n        \
    \                  ^\n/tmp/tmpio1vcuxl.java:34: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 3l));\n        \
    \                  ^\n/tmp/tmpio1vcuxl.java:36: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 1l));\n        \
    \                  ^\n/tmp/tmpio1vcuxl.java:37: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 2l));\n        \
    \                  ^\n/tmp/tmpio1vcuxl.java:38: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 3l));\n        \
    \                  ^\n/tmp/tmpio1vcuxl.java:39: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 4l));\n        \
    \                  ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n7 errors\n"
  stdout: ''
  timestamp: 1659794491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 1l) {\n\
    \            result.add(1l);\n            result.add(3l);\n            result.add(2l);\n\
    \            result.add(8l);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.add(tri(n - 1l));\n            result.add(tri(n\
    \ - 2l));\n            result.add(tri(n + 1l));\n            return result;\n\
    \        }\n        result.add(tri(n - 1l));\n        result.add(tri(n - 2l));\n\
    \        result.add(tri(n + 1l));\n        result.add(tri(n - 3l));\n        result.add(tri(n\
    \ - 4l));\n        result.add(tri(n - 5l));\n        result.add(tri(n - 6l));\n\
    \        result.add(tri(n - 7l));\n        result.add(tri(n - 8l));\n        result.add(tri(n\
    \ - 9l));\n        result.add(tri(n - 10l));\n        result.add(tri(n - 11l));\n\
    \        result.add(tri(n - 12l));\n        result.add(tri(n - 13l));\n      \
    \  result.add(tri(n - 14l));\n        result.add(tri(n - 15l));\n        result.add(tri(n\
    \ - 16l));\n        result.add(tri(n - 17l));\n        result.add(tri(n - 18l));\n\
    \        result.add(tri(n - 19l));\n        result.add(tri(n - 20l));\n      \
    \  result.add(tri(n - 21l));\n        result.add(tri(n - 22l));\n        result.add(tri(n\
    \ - 23l));\n        result.add(tri(n - 24l));\n        result.add(tri(n - 25l));\n\
    \        result.add(tri(n - 26l));\n        result.add(tri(n - 27l));\n      \
    \  result.add(tri(n - 28l));\n        result.add(tri(n - 29l));\n        result.add(tri(n\
    \ - 30l));\n        result.add(tri(n - 31l));\n        result.add(tri(n - 32l));\n\
    \        result.add(tri(n - 33l));\n        result.add(tri(n - 34l));\n      \
    \  result.add(tri(n - 35l));\n        result.add(tri(n - 36l));\n        result.add(tri(n\
    \ - 37l));\n        result.add(tri(n - 38l));\n        result.add(tri(n - 39l));\n\
    \        result.add(tri(n - 40l));\n        result.add(tri(n - 41l));\n      \
    \  result.add(tri(n - 42l));\n        result.add(tri(n - 43l));\n        result.add(tri(n\
    \ - 44l));\n        result.add(tri(n - 45l));\n        result.add(tri(n - 46l));\n\
    \        result.add(tri(n - 47l));\n        result.add(tri(n - \n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl9fj10ny.java:89: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794490
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            result.add(n);\n            return result;\n\
    \        }\n        ArrayList<Long> tri1 = tri(n - 1);\n        ArrayList<Long>\
    \ tri2 = tri(n - 2);\n        ArrayList<Long> tri3 = tri(n - 3);\n        result.addAll(tri1);\n\
    \        result.addAll(tri2);\n        result.addAll(tri3);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7lnao15a.java:41)\n"
  stdout: ''
  timestamp: 1659794491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     if (n <= 1l) return new ArrayList<Long>(Arrays.asList((long)1l));\n    \
    \    if (n % 2 == 0) return tri(n - 1l).stream().map(x -> x + tri(n - 2l).stream().map(y\
    \ -> y + tri(n - 3l).stream().map(z -> z + tri(n - 4l).stream().map(w -> w + tri(n\
    \ - 5l).stream().map(x -> x + tri(n - 6l).stream().map(y -> y + tri(n - 7l).stream().map(z\
    \ -> z + tri(n - 8l).stream().map(w -> w + tri(n - 9l).stream().map(x -> x + tri(n\
    \ - 10l).stream().map(y -> y + tri(n - 11l).stream().map(z -> z + tri(n - 12l).stream().map(w\
    \ -> w + tri(n - 13l).stream().map(x -> x + tri(n - 14l).stream().map(y -> y +\
    \ tri(n - 15l).stream().map(z -> z + tri(n - 16l).stream().map(w -> w + tri(n\
    \ - 17l).stream().map(x -> x + tri(n - 18l).stream().map(y -> y + tri(n - 19l).stream().map(z\
    \ -> z + tri(n - 20l).stream().map(w -> w + tri(n - 21l).stream().map(x -> x +\
    \ tri(n - 22l).stream().map(y -> y + tri(n - 23l).stream().map(z -> z + tri(n\
    \ - 24l).stream().map(w -> w + tri(n - 25l).stream().map(x -> x + tri(n - 26l).stream().map(y\
    \ -> y + tri(n - 27l).stream().map(z -> z + tri(n - 28l).stream().map(w -> w +\
    \ tri(n - 29l).stream().map(x -> x + tri(n - 30l).stream().map(y -> y + tri(n\
    \ - 31l).stream().map(z -> z + tri(n - 32l).stream().map(w -> w + tri(n - 33l).stream().map(x\
    \ -> x + tri(n - 34l).stream().map(y -> y + tri(n - 35l).stream().map(z -> z +\
    \ tri(n - 36l).stream().map(w -> w + tri(n - 37l).stream().map(x -> x + tri(n\
    \ - 38l).stream().map(y -> y + tri(n - 39l).stream().map(z -> z + tri(n - 40l).stream().map(\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdf2g7pqk.java:28: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 1) {\n     \
    \       list.add(1l);\n            list.add(n);\n            return list;\n  \
    \      }\n        list.add(1l);\n        list.add(n);\n        list.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        return list;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp01dntfqw.java:34: error: bad operand types for binary operator\
    \ '+'\n        list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n             \
    \               ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 3) {\n   \
    \         result.add(1l);\n            result.add(n);\n            return result;\n\
    \        }\n        ArrayList<Long> first = new ArrayList<>();\n        ArrayList<Long>\
    \ second = new ArrayList<>();\n        ArrayList<Long> third = new ArrayList<>();\n\
    \        first.add(1l);\n        second.add(n);\n        third.add(n);\n     \
    \   third.add(1l);\n        third.add(n);\n        third.add(n);\n        third.add(1l);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(1l);\n      \
    \  third.add(n);\n        third.add(n);\n        third.add(1l);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(1l);\n        third.add(n);\n      \
    \  third.add(n);\n        third.add(1l);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(1l);\n        third.add(n);\n        third.add(n);\n      \
    \  third.add(1l);\n        third.add(n);\n        third.add(n);\n        third.add(1l);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(1l);\n      \
    \  third.add(n);\n        third.add(n);\n        third.add(1l);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(1l);\n        third.add(n);\n      \
    \  third.add(n);\n        third.add(1l);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(1l);\n        third.add(n);\n        third.add(n);\n      \
    \  third.add(1l);\n        third.add(n);\n        third.add(n);\n        third.add(1l);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(1l);\n      \
    \  third.add(n);\n        third.add(n);\n        third.add(1l);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(1l);\n        third.add(n);\n      \
    \  third.add(n);\n        third.add(1l);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(1l);\n        third.add(n);\n        third.add(n);\n      \
    \  third.add(1l);\n        third.add(n);\n        third.add(n);\n        third.add(1l);\n\
    \        third.add(n);\n        third.add(n);\n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp69jz9alz.java:108: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659794491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<Long>();\n        if (n <= 1) {\n \
    \           list.add(1l);\n            list.add(n);\n        } else {\n      \
    \      list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        }\n        return\
    \ list;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_rlrxy3_.java:31: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 1l) {\n  \
    \          result.add(1l);\n            result.add(3l);\n            result.add(2l);\n\
    \            result.add(8l);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            tri(n - 1l, result);\n            result.add(1l);\n\
    \            result.add(3l);\n            result.add(2l);\n            result.add(8l);\n\
    \        } else {\n            tri(n - 1l, result);\n            result.add(1l);\n\
    \            result.add(3l);\n            result.add(2l);\n            result.add(8l);\n\
    \            tri(n - 2l, result);\n            result.add(1l);\n            result.add(3l);\n\
    \            result.add(2l);\n            result.add(8l);\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiklm4cu0.java:35: error: method tri in class Problem cannot be\
    \ applied to given types;\n            tri(n - 1l, result);\n            ^\n \
    \ required: long\n  found:    long,ArrayList<Long>\n  reason: actual and formal\
    \ argument lists differ in length\n/tmp/tmpiklm4cu0.java:41: error: method tri\
    \ in class Problem cannot be applied to given types;\n            tri(n - 1l,\
    \ result);\n            ^\n  required: long\n  found:    long,ArrayList<Long>\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmpiklm4cu0.java:46:\
    \ error: method tri in class Problem cannot be applied to given types;\n     \
    \       tri(n - 2l, result);\n            ^\n  required: long\n  found:    long,ArrayList<Long>\n\
    \  reason: actual and formal argument lists differ in length\n3 errors\n"
  stdout: ''
  timestamp: 1659794491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1l) {\n  \
    \          result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1l);\n        ArrayList<Long> tri2 = tri(n - 2l);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3l);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ehgr1wa.java:40)\n"
  stdout: ''
  timestamp: 1659794492
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(n);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<>();\n        ArrayList<Long> second = new ArrayList<>();\n\
    \        ArrayList<Long> third = new ArrayList<>();\n        first.add(3);\n \
    \       second.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        \n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnynr8i8_.java:34: error: incompatible types: int cannot be converted\
    \ to Long\n        first.add(3);\n                  ^\n/tmp/tmpnynr8i8_.java:35:\
    \ error: incompatible types: int cannot be converted to Long\n        second.add(1);\n\
    \                   ^\n/tmp/tmpnynr8i8_.java:36: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmpnynr8i8_.java:37:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpnynr8i8_.java:38: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpnynr8i8_.java:39:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpnynr8i8_.java:40: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpnynr8i8_.java:41:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpnynr8i8_.java:42: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpnynr8i8_.java:43:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpnynr8i8_.java:44: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpnynr8i8_.java:45:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpnynr8i8_.java:46: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpnynr8i8_.java:47:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpnynr8i8_.java:48: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmpnynr8i8_.java:49:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmpnynr8i"
  stdout: ''
  timestamp: 1659794492
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n   \
    \         result.add(0l);\n            result.add(1l);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.add(0l);\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2));\n        } else {\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3));\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46hb4ucb.java:38: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2));\n                    \
    \              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmp46hb4ucb.java:40: error: bad operand types for binary operator '+'\n \
    \           result.add(tri(n - 1) + tri(n - 2) + tri(n - 3));\n              \
    \                    ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long a = 1;\n     \
    \   long b = 1;\n        long c = 1;\n        long d = 1;\n        long sum =\
    \ 0;\n        long tri = 0;\n        long tri_sum = 0;\n        long tri_sum2\
    \ = 0;\n        long tri_sum3 = 0;\n        long tri_sum4 = 0;\n        long tri_sum5\
    \ = 0;\n        long tri_sum6 = 0;\n        long tri_sum7 = 0;\n        long tri_sum8\
    \ = 0;\n        long tri_sum9 = 0;\n        long tri_sum10 = 0;\n        long\
    \ tri_sum11 = 0;\n        long tri_sum12 = 0;\n        long tri_sum13 = 0;\n \
    \       long tri_sum14 = 0;\n        long tri_sum15 = 0;\n        long tri_sum16\
    \ = 0;\n        long tri_sum17 = 0;\n        long tri_sum18 = 0;\n        long\
    \ tri_sum19 = 0;\n        long tri_sum20 = 0;\n        long tri_sum21 = 0;\n \
    \       long tri_sum22 = 0;\n        long tri_sum23 = 0;\n        long tri_sum24\
    \ = 0;\n        long tri_sum25 = 0;\n        long tri_sum26 = 0;\n        long\
    \ tri_sum27 = 0;\n        long tri_sum28 = 0;\n        long tri_sum29 = 0;\n \
    \       long tri_sum30 = 0;\n        long tri_sum31 = 0;\n        long tri_sum32\
    \ = 0;\n        long tri_sum33 = 0;\n        long tri_sum34 = 0;\n        long\
    \ tri_sum35 = 0;\n        long tri_sum36 = 0;\n        long tri_sum37 = 0;\n \
    \       long tri_sum38 = 0;\n        long tri_sum39 = 0;\n        long tri_sum40\
    \ = 0;\n        long tri_sum41 = 0;\n        long tri_sum42 = 0;\n        long\
    \ tri_sum43 = 0;\n        long tri_sum44 = 0;\n        long tri_sum45 = 0;\n \
    \       long tri_sum46 = 0;\n        long tri_sum47 = 0;\n        long tri_sum48\
    \ = 0;\n        long tri_sum49 = 0;\n        long tri_sum50 = 0;\n        long\
    \ tri_sum51 = 0;\n        long tri_sum52 = 0;\n        long tri_sum53 = 0;\n \
    \       long tri_sum54 = 0;\n        long tri_sum55 = 0;\n        long tri_sum56\
    \ = 0;\n        long tri_sum57 = 0;\n        long tri_sum58 = 0;\n        long\
    \ tri_sum59 = 0;\n        long tri_sum60\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0arxbv4r.java:92: error: ';' expected\n        long tri_sum60\n\
    \                      ^\n1 error\n"
  stdout: ''
  timestamp: 1659794491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 1l) {\n\
    \            result.add(1l);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.add(tri(n - 1l));\n            result.add(tri(n\
    \ - 2l));\n            result.add(tri(n + 1l));\n        } else {\n          \
    \  result.add(tri(n - 1l));\n            result.add(tri(n - 2l));\n          \
    \  result.add(tri(n + 1l));\n            result.add(tri(n - 3l));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4lxsle43.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n            result.add(tri(n - 1l));\n               \
    \           ^\n/tmp/tmp4lxsle43.java:33: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 2l));\n        \
    \                  ^\n/tmp/tmp4lxsle43.java:34: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n + 1l));\n        \
    \                  ^\n/tmp/tmp4lxsle43.java:36: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 1l));\n        \
    \                  ^\n/tmp/tmp4lxsle43.java:37: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 2l));\n        \
    \                  ^\n/tmp/tmp4lxsle43.java:38: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n + 1l));\n        \
    \                  ^\n/tmp/tmp4lxsle43.java:39: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 3l));\n        \
    \                  ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n7 errors\n"
  stdout: ''
  timestamp: 1659794492
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 1) {\n     \
    \       list.add(1l);\n            list.add(1l);\n            return list;\n \
    \       }\n        list.add(3l);\n        list.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1));\n        return list;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgn9_huib.java:33: error: bad operand types for binary operator\
    \ '+'\n        list.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n             \
    \               ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794492
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n   \
    \         result.add(0l);\n            return result;\n        }\n        if (n\
    \ == 1) {\n            result.add(1l);\n            return result;\n        }\n\
    \        if (n % 2 == 0) {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1));\n        } else {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpztsbdq3e.java:36: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpztsbdq3e.java:38: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \                                  ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794490
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) result.add(0l);\n\
    \        else if (n == 1) result.add(1l);\n        else result.add(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpabgdhou6.java:29: error: bad operand types for binary operator\
    \ '+'\n        else result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n      \
    \                             ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n1 error\n"
  stdout: ''
  timestamp: 1659794492
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuhkhhiw3.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 0) {\n     \
    \       return list;\n        }\n        if (n == 1) {\n            list.add(1l);\n\
    \            return list;\n        }\n        if (n == 2) {\n            list.add(3l);\n\
    \            return list;\n        }\n        if (n % 2 == 0) {\n            list.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1));\n        } else {\n            list.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        }\n        return list;\n    }\n \
    \   public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6n_7cxva.java:39: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmp6n_7cxva.java:41: error: bad operand types for binary operator '+'\n \
    \           list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n                \
    \                ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794492
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long tri1 = (long)3;\n\
    \        long tri2 = (long)1;\n        long tri3 = (long)2;\n        long tri4\
    \ = (long)3;\n        long tri5 = (long)1;\n        long tri6 = (long)2;\n   \
    \     long tri7 = (long)3;\n        long tri8 = (long)1;\n        long tri9 =\
    \ (long)2;\n        long tri10 = (long)3;\n        long tri11 = (long)1;\n   \
    \     long tri12 = (long)2;\n        long tri13 = (long)3;\n        long tri14\
    \ = (long)1;\n        long tri15 = (long)2;\n        long tri16 = (long)3;\n \
    \       long tri17 = (long)1;\n        long tri18 = (long)2;\n        long tri19\
    \ = (long)3;\n        long tri20 = (long)1;\n        long tri21 = (long)2;\n \
    \       long tri22 = (long)3;\n        long tri23 = (long)1;\n        long tri24\
    \ = (long)2;\n        long tri25 = (long)3;\n        long tri26 = (long)1;\n \
    \       long tri27 = (long)2;\n        long tri28 = (long)3;\n        long tri29\
    \ = (long)1;\n        long tri30 = (long)2;\n        long tri31 = (long)3;\n \
    \       long tri32 = (long)1;\n        long tri33 = (long)2;\n        long tri34\
    \ = (long)3;\n        long tri35 = (long)1;\n        long tri36 = (long)2;\n \
    \       long tri37 = (long)3;\n        long tri38 = (long)1;\n        long tri39\
    \ = (long)2;\n        long tri40 = (long)3;\n        long tri41 = (long)1;\n \
    \       long tri42 = (long)2;\n        long tri43 = (long)3;\n        long tri44\
    \ = (long)1;\n        long tri45 = (long)2;\n        long tri46 = (long)3;\n \
    \       long tri47 = (long)1;\n        long tri48 = (long)2;\n        long tri49\
    \ = (long)3;\n        long tri50 = (long)1;\n        long tri51 = (long)2;\n \
    \       long tri52 = (long)3;\n        long tri53 = (long)1;\n        long tri54\
    \ = (long)2;\n        long tri55 = (long)3;\n        long tri56 = (long)1;\n \
    \       long tri57 = (long)2;\n        long tri58 = (long)3;\n        long tri59\
    \ = (long)1;\n        long tri60 = (long)2;\n        long tri61 = (long)3;\n \
    \       long tri62 = (long)1;\n        long tri\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpupyzbkew.java:89: error: ';' expected\n        long tri\n     \
    \           ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long tri1 = (long)3;\n\
    \        long tri2 = (long)1;\n        long tri3 = tri2;\n        long tri4 =\
    \ tri3;\n        long tri5 = tri4;\n        long tri6 = tri5;\n        long tri7\
    \ = tri6;\n        long tri8 = tri7;\n        long tri9 = tri8;\n        long\
    \ tri10 = tri9;\n        long tri11 = tri10;\n        long tri12 = tri11;\n  \
    \      long tri13 = tri12;\n        long tri14 = tri13;\n        long tri15 =\
    \ tri14;\n        long tri16 = tri15;\n        long tri17 = tri16;\n        long\
    \ tri18 = tri17;\n        long tri19 = tri18;\n        long tri20 = tri19;\n \
    \       long tri21 = tri20;\n        long tri22 = tri21;\n        long tri23 =\
    \ tri22;\n        long tri24 = tri23;\n        long tri25 = tri24;\n        long\
    \ tri26 = tri25;\n        long tri27 = tri26;\n        long tri28 = tri27;\n \
    \       long tri29 = tri28;\n        long tri30 = tri29;\n        long tri31 =\
    \ tri30;\n        long tri32 = tri31;\n        long tri33 = tri32;\n        long\
    \ tri34 = tri33;\n        long tri35 = tri34;\n        long tri36 = tri35;\n \
    \       long tri37 = tri36;\n        long tri38 = tri37;\n        long tri39 =\
    \ tri38;\n        long tri40 = tri39;\n        long tri41 = tri40;\n        long\
    \ tri42 = tri41;\n        long tri43 = tri42;\n        long tri44 = tri43;\n \
    \       long tri45 = tri44;\n        long tri46 = tri45;\n        long tri47 =\
    \ tri46;\n        long tri48 = tri47;\n        long tri49 = tri48;\n        long\
    \ tri50 = tri49;\n        long tri51 = tri50;\n        long tri52 = tri51;\n \
    \       long tri53 = tri52;\n        long tri54 = tri53;\n        long tri55 =\
    \ tri54;\n        long tri56 = tri55;\n        long tri57 = tri56;\n        long\
    \ tri58 = tri57;\n        long tri59 = tri58;\n        long tri\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzbrqa7li.java:86: error: ';' expected\n        long tri\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659794491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 1l) result.add(1l);\n\
    \        if (n == 2l) result.add(3l);\n        if (n % 2 == 0l) result.add(tri(n\
    \ - 1l) + tri(n - 2l) + tri(n - 3l));\n        else result.add(tri(n - 1l) + tri(n\
    \ - 2l));\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6bzr3ra3.java:29: error: bad operand types for binary operator\
    \ '+'\n        if (n % 2 == 0l) result.add(tri(n - 1l) + tri(n - 2l) + tri(n -\
    \ 3l));\n                                                ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmp6bzr3ra3.java:30: error: bad operand\
    \ types for binary operator '+'\n        else result.add(tri(n - 1l) + tri(n -\
    \ 2l));\n                                    ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794492
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     if (n == 1l) {\n            return new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        } else if (n % 2 == 0l) {\n            return new ArrayList<Long>(Arrays.asList((long)tri(n\
    \ - 1l), (long)tri(n - 2l), (long)tri(n - 3l)));\n        } else {\n         \
    \   return new ArrayList<Long>(Arrays.asList((long)tri(n - 1l), (long)tri(n -\
    \ 2l), (long)tri(n - 3l), (long)tri(n - 4l)));\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpehduv9jh.java:29: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            return new ArrayList<Long>(Arrays.asList((long)tri(n\
    \ - 1l), (long)tri(n - 2l), (long)tri(n - 3l)));\n                           \
    \                                   ^\n/tmp/tmpehduv9jh.java:29: error: incompatible\
    \ types: ArrayList<Long> cannot be converted to long\n            return new ArrayList<Long>(Arrays.asList((long)tri(n\
    \ - 1l), (long)tri(n - 2l), (long)tri(n - 3l)));\n                           \
    \                                                      ^\n/tmp/tmpehduv9jh.java:29:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         return new ArrayList<Long>(Arrays.asList((long)tri(n - 1l), (long)tri(n\
    \ - 2l), (long)tri(n - 3l)));\n                                              \
    \                                                      ^\n/tmp/tmpehduv9jh.java:31:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         return new ArrayList<Long>(Arrays.asList((long)tri(n - 1l), (long)tri(n\
    \ - 2l), (long)tri(n - 3l), (long)tri(n - 4l)));\n                           \
    \                                   ^\n/tmp/tmpehduv9jh.java:31: error: incompatible\
    \ types: ArrayList<Long> cannot be converted to long\n            return new ArrayList<Long>(Arrays.asList((long)tri(n\
    \ - 1l), (long)tri(n - 2l), (long)tri(n - 3l), (long)tri(n - 4l)));\n        \
    \                                                                         ^\n\
    /tmp/tmpehduv9jh.java:31: error: incompatible types: ArrayList<Long> cannot be\
    \ converted to long\n            return new ArrayList<Long>(Arrays.asList((long)tri(n\
    \ - 1l), (long)tri(n - 2l), (long)tri(n - 3l), (long)tri(n - 4l)));\n        \
    \                                                                            \
    \                ^\n/tmp/tmpehduv9jh.java:31: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            return new ArrayList<Long>(Arrays.asList((long)tri(n\
    \ - 1l), (long)tri(n - 2l), (long)tri(n - 3l), (long)tri(n - 4l)));\n        \
    \   "
  stdout: ''
  timestamp: 1659794492
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<Long>();\n        if (n == 0) {\n \
    \           list.add(0l);\n            list.add(1l);\n            return list;\n\
    \        }\n        if (n == 1) {\n            list.add(0l);\n            return\
    \ list;\n        }\n        list.add(0l);\n        list.add(1l);\n        if (n\
    \ % 2 == 0) {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n \
    \       } else {\n            list.add(tri(n - 1) + tri(n - 2));\n        }\n\
    \        return list;\n    }\n    public static void main(String[] args) {\n \
    \   assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqsn79ny0.java:39: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpqsn79ny0.java:41: error: bad operand types for binary operator '+'\n \
    \           list.add(tri(n - 1) + tri(n - 2));\n                             \
    \   ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794492
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n   \
    \         result.add(0l);\n            result.add(1l);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.add(0l);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.add(0l);\n   \
    \         result.add(1l);\n            result.add(2l);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.add(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n        } else {\n            result.add(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb6oleeht.java:43: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpb6oleeht.java:45: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n - 3) + tri(n - 4));\n                                  ^\n  first type:\
    \  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794492
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n == 1l) {\n    \
    \        list.add(1l);\n            return list;\n        }\n        if (n % 2\
    \ == 0) {\n            list.add(tri(n - 1l));\n            list.add(tri(n - 2l));\n\
    \            list.add(tri(n + 1l));\n        } else {\n            list.add(tri(n\
    \ - 1l));\n            list.add(tri(n - 2l));\n            list.add(tri(n + 1l));\n\
    \            list.add(tri(n - 1l));\n            list.add(tri(n - 2l));\n    \
    \        list.add(tri(n + 1l));\n        }\n        return list;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf_xndpo0.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n            list.add(tri(n - 1l));\n                 \
    \       ^\n/tmp/tmpf_xndpo0.java:33: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n - 2l));\n          \
    \              ^\n/tmp/tmpf_xndpo0.java:34: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n + 1l));\n          \
    \              ^\n/tmp/tmpf_xndpo0.java:36: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n - 1l));\n          \
    \              ^\n/tmp/tmpf_xndpo0.java:37: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n - 2l));\n          \
    \              ^\n/tmp/tmpf_xndpo0.java:38: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n + 1l));\n          \
    \              ^\n/tmp/tmpf_xndpo0.java:39: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n - 1l));\n          \
    \              ^\n/tmp/tmpf_xndpo0.java:40: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n - 2l));\n          \
    \              ^\n/tmp/tmpf_xndpo0.java:41: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n + 1l));\n          \
    \              ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n9 errors\n"
  stdout: ''
  timestamp: 1659794492
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        if (n\
    \ % 2 == 0) {\n            result.add(tri(n - 1) + tri(n - 2));\n        } else\
    \ {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyfqvtzi9.java:32: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2));\n                    \
    \              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpyfqvtzi9.java:34: error: bad operand types for binary operator '+'\n \
    \           result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n              \
    \                    ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1l) {\n  \
    \          result.add(1l);\n            result.add(n + 1l);\n            return\
    \ result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n   \
    \     ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long> third\
    \ = new ArrayList<>();\n        first.add(1l);\n        second.add(n + 1l);\n\
    \        third.add(1l);\n        third.add(n + 1l);\n        third.add(n + 1l);\n\
    \        third.add(n + 1l);\n        third.add(n + 1l);\n        third.add(n +\
    \ 1l);\n        third.add(n + 1l);\n        third.add(n + 1l);\n        third.add(n\
    \ + 1l);\n        third.add(n + 1l);\n        third.add(n + 1l);\n        third.add(n\
    \ + 1l);\n        third.add(n + 1l);\n        third.add(n + 1l);\n        third.add(n\
    \ + 1l);\n        third.add(n + 1l);\n        third.add(n + 1l);\n        third.add(n\
    \ + 1l);\n        third.add(n + 1l);\n        third.add(n + 1l);\n        third.add(n\
    \ + 1l);\n        third.add(n + 1l);\n        third.add(n + 1l);\n        third.add(n\
    \ + 1l);\n        third.add(n + 1l);\n        third.add(n + 1l);\n        third.add(n\
    \ + 1l);\n        third.add(n + 1l);\n        third.add(n + 1l);\n        third.add(n\
    \ + 1l);\n        third.add(n + 1l);\n        third.add(n + 1l);\n        third.add(n\
    \ + 1l);\n        third.add(n + 1l);\n        third.add(n + 1l);\n        third.add(n\
    \ + 1l);\n        third.add(n + 1l);\n        third.add(n + 1l);\n        third.add(n\
    \ + 1l);\n        third.add(n + 1l);\n        third.add(n + 1l);\n        third.add(n\
    \ + 1l);\n        third.add(n + 1l);\n        third.add(n + 1l);\n        third.add(n\
    \ + 1l);\n        third.add(n + 1l);\n        third.add(n + 1l);\n        third.add(n\
    \ + 1l);\n        third.add(n + 1l);\n        third.add(n + 1l);\n        third.add(n\
    \ + 1l);\n        third.add(n + 1l);\n        third.add(n + 1l);\n        third.add(n\
    \ + 1l);\n        third.add(n + 1l);\n        \n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3k2a0nh1.java:93: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794492
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n   \
    \         result.add(0l);\n            result.add(1l);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.add(0l);\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf96g4765.java:38: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpf96g4765.java:40: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \                                  ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794492
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        if (n <= 1l) {\n\
    \            result.add(1l);\n            result.add(n);\n            return result;\n\
    \        }\n        if (n % 2l == 0l) {\n            result.add(tri(n - 1l));\n\
    \            result.add(tri(n - 2l));\n            result.add(tri(n - 1l));\n\
    \            return result;\n        }\n        result.add(tri(n - 1l));\n   \
    \     result.add(tri(n - 2l));\n        result.add(tri(n - 1l));\n        result.add(tri(n\
    \ - 2l));\n        result.add(tri(n - 1l));\n        result.add(tri(n - 2l));\n\
    \        result.add(tri(n - 1l));\n        result.add(tri(n - 2l));\n        result.add(tri(n\
    \ - 1l));\n        result.add(tri(n - 2l));\n        result.add(tri(n - 1l));\n\
    \        result.add(tri(n - 2l));\n        result.add(tri(n - 1l));\n        result.add(tri(n\
    \ - 2l));\n        result.add(tri(n - 1l));\n        result.add(tri(n - 2l));\n\
    \        result.add(tri(n - 1l));\n        result.add(tri(n - 2l));\n        result.add(tri(n\
    \ - 1l));\n        result.add(tri(n - 2l));\n        result.add(tri(n - 1l));\n\
    \        result.add(tri(n - 2l));\n        result.add(tri(n - 1l));\n        result.add(tri(n\
    \ - 2l));\n        result.add(tri(n - 1l));\n        result.add(tri(n - 2l));\n\
    \        result.add(tri(n - 1l));\n        result.add(tri(n - 2l));\n        result.add(tri(n\
    \ - 1l));\n        result.add(tri(n - 2l));\n        result.add(tri(n - 1l));\n\
    \        result.add(tri(n - 2l));\n        result.add(tri(n - 1l));\n        result.add(tri(n\
    \ - 2l));\n        result.add(tri(n - 1l));\n        result.add(tri(n - 2l));\n\
    \        result.add(tri(n - 1l));\n        result.add(tri(n - 2l));\n        result.add(tri(n\
    \ - 1l));\n        result.add(tri(n - 2l));\n        result.add(tri(n - 1l));\n\
    \        result.add(tri(n - 2l));\n        result.add(tri(n - 1l));\n        result.add(tri(n\
    \ - 2l));\n        result.add(tri(n - 1l));\n        result.add(tri(n - 2l));\n\
    \        result.add(tri(n - 1l));\n        result.add(tri(n - 2l));\n        result.add(tri(n\
    \ - 1l));\n        result.\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4t7z01rw.java:87: error: <identifier> expected\n        result.\n\
    \               ^\n/tmp/tmp4t7z01rw.java:87: error: not a statement\n        result.\n\
    \              ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794492
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<>();\n        ArrayList<Long> second = new ArrayList<>();\n\
    \        ArrayList<Long> third = new ArrayList<>();\n        first.add(1l);\n\
    \        second.add(3l);\n        third.add(2l);\n        third.add(1l);\n   \
    \     if (n % 2 == 0) {\n            third.add(1l);\n        }\n        third.add(n\
    \ - 1);\n        third.add(n + 1);\n        third.add(n - 2);\n        third.add(n\
    \ + 2);\n        third.add(n + 1);\n        third.add(n - 1);\n        third.add(n\
    \ + 1);\n        third.add(n - 2);\n        third.add(n + 2);\n        third.add(n\
    \ + 1);\n        third.add(n - 1);\n        third.add(n + 1);\n        third.add(n\
    \ - 2);\n        third.add(n + 2);\n        third.add(n + 1);\n        third.add(n\
    \ - 1);\n        third.add(n + 1);\n        third.add(n - 2);\n        third.add(n\
    \ + 2);\n        third.add(n + 1);\n        third.add(n - 1);\n        third.add(n\
    \ + 1);\n        third.add(n - 2);\n        third.add(n + 2);\n        third.add(n\
    \ + 1);\n        third.add(n - 1);\n        third.add(n + 1);\n        third.add(n\
    \ - 2);\n        third.add(n + 2);\n        third.add(n + 1);\n        third.add(n\
    \ - 1);\n        third.add(n + 1);\n        third.add(n - 2);\n        third.add(n\
    \ + 2);\n        third.add(n + 1);\n        third.add(n - 1);\n        third.add(n\
    \ + 1);\n        third.add(n - 2);\n        third.add(n + 2);\n        third.add(n\
    \ + 1);\n        third.add(n - 1);\n        third.add(n + 1);\n        third.add(n\
    \ - 2);\n        third.add(n + 2);\n        third.add(n + 1);\n        third.add(n\
    \ - 1);\n        third.add(n + 1);\n        third.add(n - 2);\n        third.add(n\
    \ + 2);\n        third.add(n + 1);\n        third.add(n - 1);\n        third.add(n\
    \ + 1);\n        third.add(n - 2);\n        third.add(n + 2);\n        third.add(n\
    \ + 1);\n        third.add(n - 1);\n        third.add(n + 1);\n        third.add(n\
    \ - 2);\n        third.add(n + 2);\n        third.add(n + 1);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfonr4xtw.java:102: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659794492
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long a = 1;\n     \
    \   long b = 2;\n        long c = 1;\n        long d = 1;\n        long temp;\n\
    \        long temp2;\n        long temp3;\n        long temp4;\n        long temp5;\n\
    \        long temp6;\n        long temp7;\n        long temp8;\n        long temp9;\n\
    \        long temp10;\n        long temp11;\n        long temp12;\n        long\
    \ temp13;\n        long temp14;\n        long temp15;\n        long temp16;\n\
    \        long temp17;\n        long temp18;\n        long temp19;\n        long\
    \ temp20;\n        long temp21;\n        long temp22;\n        long temp23;\n\
    \        long temp24;\n        long temp25;\n        long temp26;\n        long\
    \ temp27;\n        long temp28;\n        long temp29;\n        long temp30;\n\
    \        long temp31;\n        long temp32;\n        long temp33;\n        long\
    \ temp34;\n        long temp35;\n        long temp36;\n        long temp37;\n\
    \        long temp38;\n        long temp39;\n        long temp40;\n        long\
    \ temp41;\n        long temp42;\n        long temp43;\n        long temp44;\n\
    \        long temp45;\n        long temp46;\n        long temp47;\n        long\
    \ temp48;\n        long temp49;\n        long temp50;\n        long temp51;\n\
    \        long temp52;\n        long temp53;\n        long temp54;\n        long\
    \ temp55;\n        long temp56;\n        long temp57;\n        long temp58;\n\
    \        long temp59;\n        long temp60;\n        long temp61;\n        long\
    \ temp62;\n        long temp63;\n        long temp64;\n        long temp65;\n\
    \        long temp66;\n        long temp67;\n        long temp68;\n        long\
    \ temp69;\n        long temp70;\n        long temp71;\n        long temp72;\n\
    \        long temp73;\n        long temp74;\n        long temp75;\n        long\
    \ temp76;\n        long temp77;\n        long temp78;\n        long temp79;\n\
    \        long temp80;\n        long temp81;\n        long temp82;\n        long\
    \ temp83;\n        long temp84;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp112emmwl.java:115: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659794490
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 1l) {\n  \
    \          result.add(1l);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.add(tri(n - 1l) + tri(n - 2l));\n       \
    \ } else {\n            result.add(tri(n - 1l) + tri(n - 2l) + tri(n + 1l));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpachz03bm.java:32: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1l) + tri(n - 2l));\n                  \
    \                 ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpachz03bm.java:34: error: bad operand types for binary operator '+'\n \
    \           result.add(tri(n - 1l) + tri(n - 2l) + tri(n + 1l));\n           \
    \                        ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794492
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1l) {\n  \
    \          result.add(1l);\n            result.add(n);\n            return result;\n\
    \        }\n        ArrayList<Long> tri1 = tri(n - 1l);\n        ArrayList<Long>\
    \ tri2 = tri(n - 2l);\n        ArrayList<Long> tri3 = tri(n - 3l);\n        result.addAll(tri1);\n\
    \        result.addAll(tri2);\n        result.addAll(tri3);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqhdcs2jf.java:41)\n"
  stdout: ''
  timestamp: 1659794490
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(n);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<>();\n        ArrayList<Long> second = new ArrayList<>();\n\
    \        ArrayList<Long> third = new ArrayList<>();\n        ArrayList<Long> fourth\
    \ = new ArrayList<>();\n        ArrayList<Long> fifth = new ArrayList<>();\n \
    \       ArrayList<Long> sixth = new ArrayList<>();\n        ArrayList<Long> seventh\
    \ = new ArrayList<>();\n        ArrayList<Long> eighth = new ArrayList<>();\n\
    \        ArrayList<Long> ninth = new ArrayList<>();\n        ArrayList<Long> tenth\
    \ = new ArrayList<>();\n        ArrayList<Long> eleventh = new ArrayList<>();\n\
    \        ArrayList<Long> twelfth = new ArrayList<>();\n        ArrayList<Long>\
    \ thirteenth = new ArrayList<>();\n        ArrayList<Long> fourteenth = new ArrayList<>();\n\
    \        ArrayList<Long> fifteenth = new ArrayList<>();\n        ArrayList<Long>\
    \ sixteenth = new ArrayList<>();\n        ArrayList<Long> seventeenth = new ArrayList<>();\n\
    \        ArrayList<Long> eighteenth = new ArrayList<>();\n        ArrayList<Long>\
    \ nineteenth = new ArrayList<>();\n        ArrayList<Long> twentieth = new ArrayList<>();\n\
    \        ArrayList<Long> twentyfirst = new ArrayList<>();\n        ArrayList<Long>\
    \ twentysecond = new ArrayList<>();\n        ArrayList<Long> twentythird = new\
    \ ArrayList<>();\n        ArrayList<Long> twentyfourth = new ArrayList<>();\n\
    \        ArrayList<Long> twentyfifth = new ArrayList<>();\n        ArrayList<Long>\
    \ twentysixth = new ArrayList<>();\n        ArrayList<Long> twentyseventh = new\
    \ ArrayList<>();\n        ArrayList<Long> twentyeighth = new ArrayList<>();\n\
    \        ArrayList<Long> twentyninth = new ArrayList<>();\n        ArrayList<Long>\
    \ thirtieth = new ArrayList<>();\n        ArrayList<Long> thirtyfirst = new ArrayList<>();\n\
    \        ArrayList<Long> thirtysecond = new ArrayList<>();\n        ArrayList<Long>\
    \ thirtythird = new ArrayList<>();\n        ArrayList<Long> thirtyfourth = new\
    \ ArrayList<>();\n        ArrayList<Long> thirtyfifth = new ArrayList<>();\n \
    \       ArrayList<Long> thirtysixth = new ArrayList<>();\n        ArrayList<Long>\
    \ thirtyseventh = new ArrayList<>();\n        ArrayList<Long> thirtyeighth = new\
    \ ArrayList<>();\n        ArrayList<Long> thirtyninth = new ArrayList<>();\n \
    \       ArrayList<Long> fortieth = new ArrayList<>();\n        ArrayList<Long>\
    \ fortyfirst = new ArrayList<>();\n        ArrayList<Long> fortysecond = new ArrayList<>();\n\
    \        ArrayList<Long> for\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp3kv37i7.java:73: error: not a statement\n        ArrayList<Long>\
    \ for\n                 ^\n/tmp/tmpp3kv37i7.java:73: error: ';' expected\n   \
    \     ArrayList<Long> for\n                       ^\n/tmp/tmpp3kv37i7.java:73:\
    \ error: '(' expected\n        ArrayList<Long> for\n                         \
    \  ^\n/tmp/tmpp3kv37i7.java:74: error: illegal start of expression\n    }\n  \
    \  ^\n/tmp/tmpp3kv37i7.java:74: error: ';' expected\n    }\n     ^\n/tmp/tmpp3kv37i7.java:75:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpp3kv37i7.java:75: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpp3kv37i7.java:75: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpp3kv37i7.java:88: error: reached end of\
    \ file while parsing\n}\n ^\n9 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long tri1 = (long)3;\n\
    \        long tri2 = (long)1;\n        long tri3 = (long)2;\n        long tri4\
    \ = (long)3;\n        long tri5 = (long)1;\n        long tri6 = (long)2;\n   \
    \     long tri7 = (long)3;\n        long tri8 = (long)1;\n        long tri9 =\
    \ (long)2;\n        long tri10 = (long)3;\n        long tri11 = (long)1;\n   \
    \     long tri12 = (long)2;\n        long tri13 = (long)3;\n        long tri14\
    \ = (long)1;\n        long tri15 = (long)2;\n        long tri16 = (long)3;\n \
    \       long tri17 = (long)1;\n        long tri18 = (long)2;\n        long tri19\
    \ = (long)3;\n        long tri20 = (long)1;\n        long tri21 = (long)2;\n \
    \       long tri22 = (long)3;\n        long tri23 = (long)1;\n        long tri24\
    \ = (long)2;\n        long tri25 = (long)3;\n        long tri26 = (long)1;\n \
    \       long tri27 = (long)2;\n        long tri28 = (long)3;\n        long tri29\
    \ = (long)1;\n        long tri30 = (long)2;\n        long tri31 = (long)3;\n \
    \       long tri32 = (long)1;\n        long tri33 = (long)2;\n        long tri34\
    \ = (long)3;\n        long tri35 = (long)1;\n        long tri36 = (long)2;\n \
    \       long tri37 = (long)3;\n        long tri38 = (long)1;\n        long tri39\
    \ = (long)2;\n        long tri40 = (long)3;\n        long tri41 = (long)1;\n \
    \       long tri42 = (long)2;\n        long tri43 = (long)3;\n        long tri44\
    \ = (long)1;\n        long tri45 = (long)2;\n        long tri46 = (long)3;\n \
    \       long tri47 = (long)1;\n        long tri48 = (long)2;\n        long tri49\
    \ = (long)3;\n        long tri50 = (long)1;\n        long tri51 = (long)2;\n \
    \       long tri52 = (long)3;\n        long tri53 = (long)1;\n        long tri54\
    \ = (long)2;\n        long tri55 = (long)3;\n        long tri56 = (long)1;\n \
    \       long tri57 = (long)2;\n        long tri58 = (long)3;\n        long tri59\
    \ = (long)1;\n        long tri60 = (long)2;\n        long tri61 = (long)3;\n \
    \       long tri62 = (long)1;\n        long tri\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpupyzbkew.java:89: error: ';' expected\n        long tri\n     \
    \           ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n   \
    \         result.add(0l);\n            return result;\n        }\n        if (n\
    \ == 1) {\n            result.add(1l);\n            return result;\n        }\n\
    \        if (n % 2 == 0) {\n            tri(n - 1, result);\n            result.add(1l);\n\
    \            tri(n - 2, result);\n        } else {\n            tri(n - 1, result);\n\
    \            tri(n - 2, result);\n            tri(n + 1, result);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyhq5hszf.java:36: error: method tri in class Problem cannot be\
    \ applied to given types;\n            tri(n - 1, result);\n            ^\n  required:\
    \ long\n  found:    long,ArrayList<Long>\n  reason: actual and formal argument\
    \ lists differ in length\n/tmp/tmpyhq5hszf.java:38: error: method tri in class\
    \ Problem cannot be applied to given types;\n            tri(n - 2, result);\n\
    \            ^\n  required: long\n  found:    long,ArrayList<Long>\n  reason:\
    \ actual and formal argument lists differ in length\n/tmp/tmpyhq5hszf.java:40:\
    \ error: method tri in class Problem cannot be applied to given types;\n     \
    \       tri(n - 1, result);\n            ^\n  required: long\n  found:    long,ArrayList<Long>\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmpyhq5hszf.java:41:\
    \ error: method tri in class Problem cannot be applied to given types;\n     \
    \       tri(n - 2, result);\n            ^\n  required: long\n  found:    long,ArrayList<Long>\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmpyhq5hszf.java:42:\
    \ error: method tri in class Problem cannot be applied to given types;\n     \
    \       tri(n + 1, result);\n            ^\n  required: long\n  found:    long,ArrayList<Long>\n\
    \  reason: actual and formal argument lists differ in length\n5 errors\n"
  stdout: ''
  timestamp: 1659794493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        if (n\
    \ % 2 == 0) {\n            result.add(tri(n - 1) + tri(n - 2));\n        } else\
    \ {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyfqvtzi9.java:32: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2));\n                    \
    \              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpyfqvtzi9.java:34: error: bad operand types for binary operator '+'\n \
    \           result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n              \
    \                    ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     if (n == 0) {\n            return new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        }\n        if (n == 1) {\n            return new ArrayList<Long>(Arrays.asList((long)3l));\n\
    \        }\n        if (n % 2 == 0) {\n            return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1);\n        }\n        else {\n            return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n + 2);\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz6soeqrm.java:33: error: bad operand types for binary operator\
    \ '+'\n            return tri(n - 1) + tri(n - 2) + tri(n + 1);\n            \
    \                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpz6soeqrm.java:36: error: bad operand types for binary operator '+'\n \
    \           return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4) + tri(n + 2);\n                              ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 1l) result.add(1l);\n\
    \        if (n == 2l) result.add(3l);\n        if (n % 2 == 0l) result.add(tri(n\
    \ - 1l) + tri(n - 2l));\n        else result.add(tri(n - 1l) + tri(n - 2l) + tri(n\
    \ + 1l));\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmmyrejc8.java:29: error: bad operand types for binary operator\
    \ '+'\n        if (n % 2 == 0l) result.add(tri(n - 1l) + tri(n - 2l));\n     \
    \                                           ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmpmmyrejc8.java:30: error: bad operand\
    \ types for binary operator '+'\n        else result.add(tri(n - 1l) + tri(n -\
    \ 2l) + tri(n + 1l));\n                                    ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 1l) {\n    \
    \        list.add(1l);\n            list.add(1l);\n            return list;\n\
    \        }\n        if (n % 2 == 0) {\n            list.add(tri(n - 1l));\n  \
    \          list.add(tri(n - 2l));\n            list.add(tri(n + 1l));\n      \
    \  } else {\n            list.add(tri(n - 1l));\n            list.add(tri(n -\
    \ 2l));\n            list.add(tri(n + 1l));\n            list.add(tri(n - 1l));\n\
    \            list.add(tri(n - 2l));\n            list.add(tri(n + 1l));\n    \
    \    }\n        return list;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzkcvijqa.java:33: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n            list.add(tri(n - 1l));\n                 \
    \       ^\n/tmp/tmpzkcvijqa.java:34: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n - 2l));\n          \
    \              ^\n/tmp/tmpzkcvijqa.java:35: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n + 1l));\n          \
    \              ^\n/tmp/tmpzkcvijqa.java:37: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n - 1l));\n          \
    \              ^\n/tmp/tmpzkcvijqa.java:38: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n - 2l));\n          \
    \              ^\n/tmp/tmpzkcvijqa.java:39: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n + 1l));\n          \
    \              ^\n/tmp/tmpzkcvijqa.java:40: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n - 1l));\n          \
    \              ^\n/tmp/tmpzkcvijqa.java:41: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n - 2l));\n          \
    \              ^\n/tmp/tmpzkcvijqa.java:42: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            list.add(tri(n + 1l));\n          \
    \              ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n9 errors\n"
  stdout: ''
  timestamp: 1659794493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long tri1 = (long)3;\n\
    \        long tri2 = (long)1;\n        long tri3 = (long)2;\n        long tri4\
    \ = (long)3;\n        long tri5 = (long)1;\n        long tri6 = (long)2;\n   \
    \     long tri7 = (long)3;\n        long tri8 = (long)1;\n        long tri9 =\
    \ (long)2;\n        long tri10 = (long)3;\n        long tri11 = (long)1;\n   \
    \     long tri12 = (long)2;\n        long tri13 = (long)3;\n        long tri14\
    \ = (long)1;\n        long tri15 = (long)2;\n        long tri16 = (long)3;\n \
    \       long tri17 = (long)1;\n        long tri18 = (long)2;\n        long tri19\
    \ = (long)3;\n        long tri20 = (long)1;\n        long tri21 = (long)2;\n \
    \       long tri22 = (long)3;\n        long tri23 = (long)1;\n        long tri24\
    \ = (long)2;\n        long tri25 = (long)3;\n        long tri26 = (long)1;\n \
    \       long tri27 = (long)2;\n        long tri28 = (long)3;\n        long tri29\
    \ = (long)1;\n        long tri30 = (long)2;\n        long tri31 = (long)3;\n \
    \       long tri32 = (long)1;\n        long tri33 = (long)2;\n        long tri34\
    \ = (long)3;\n        long tri35 = (long)1;\n        long tri36 = (long)2;\n \
    \       long tri37 = (long)3;\n        long tri38 = (long)1;\n        long tri39\
    \ = (long)2;\n        long tri40 = (long)3;\n        long tri41 = (long)1;\n \
    \       long tri42 = (long)2;\n        long tri43 = (long)3;\n        long tri44\
    \ = (long)1;\n        long tri45 = (long)2;\n        long tri46 = (long)3;\n \
    \       long tri47 = (long)1;\n        long tri48 = (long)2;\n        long tri49\
    \ = (long)3;\n        long tri50 = (long)1;\n        long tri51 = (long)2;\n \
    \       long tri52 = (long)3;\n        long tri53 = (long)1;\n        long tri54\
    \ = (long)2;\n        long tri55 = (long)3;\n        long tri56 = (long)1;\n \
    \       long tri57 = (long)2;\n        long tri58 = (long)3;\n        long tri59\
    \ = (long)1;\n        long tri60 = (long)2;\n        long tri61 = (long)3;\n \
    \       long tri62 = (long)1;\n        long tri\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpupyzbkew.java:89: error: ';' expected\n        long tri\n     \
    \           ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long tri1 = (long)3;\n\
    \        long tri2 = (long)1;\n        long tri3 = (long)2;\n        long tri4\
    \ = (long)3;\n        long tri5 = (long)1;\n        long tri6 = (long)2;\n   \
    \     long tri7 = (long)3;\n        long tri8 = (long)1;\n        long tri9 =\
    \ (long)2;\n        long tri10 = (long)3;\n        long tri11 = (long)1;\n   \
    \     long tri12 = (long)2;\n        long tri13 = (long)3;\n        long tri14\
    \ = (long)1;\n        long tri15 = (long)2;\n        long tri16 = (long)3;\n \
    \       long tri17 = (long)1;\n        long tri18 = (long)2;\n        long tri19\
    \ = (long)3;\n        long tri20 = (long)1;\n        long tri21 = (long)2;\n \
    \       long tri22 = (long)3;\n        long tri23 = (long)1;\n        long tri24\
    \ = (long)2;\n        long tri25 = (long)3;\n        long tri26 = (long)1;\n \
    \       long tri27 = (long)2;\n        long tri28 = (long)3;\n        long tri29\
    \ = (long)1;\n        long tri30 = (long)2;\n        long tri31 = (long)3;\n \
    \       long tri32 = (long)1;\n        long tri33 = (long)2;\n        long tri34\
    \ = (long)3;\n        long tri35 = (long)1;\n        long tri36 = (long)2;\n \
    \       long tri37 = (long)3;\n        long tri38 = (long)1;\n        long tri39\
    \ = (long)2;\n        long tri40 = (long)3;\n        long tri41 = (long)1;\n \
    \       long tri42 = (long)2;\n        long tri43 = (long)3;\n        long tri44\
    \ = (long)1;\n        long tri45 = (long)2;\n        long tri46 = (long)3;\n \
    \       long tri47 = (long)1;\n        long tri48 = (long)2;\n        long tri49\
    \ = (long)3;\n        long tri50 = (long)1;\n        long tri51 = (long)2;\n \
    \       long tri52 = (long)3;\n        long tri53 = (long)1;\n        long tri54\
    \ = (long)2;\n        long tri55 = (long)3;\n        long tri56 = (long)1;\n \
    \       long tri57 = (long)2;\n        long tri58 = (long)3;\n        long tri59\
    \ = (long)1;\n        long tri60 = (long)2;\n        long tri61 = (long)3;\n \
    \       long tri62 = (long)1;\n        long tri\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpupyzbkew.java:89: error: ';' expected\n        long tri\n     \
    \           ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 3) {\n   \
    \         result.add(1l);\n            result.add(3l);\n            result.add(2l);\n\
    \            result.add(8l);\n            return result;\n        }\n        long\
    \ a = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        result.add(a);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf88why5q.java:34: error: bad operand types for binary operator\
    \ '+'\n        long a = tri(n - 1) + tri(n - 2) + tri(n + 1);\n              \
    \              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 3) {\n   \
    \         result.add(1l);\n            result.add(n);\n            result.add(n);\n\
    \            return result;\n        }\n        ArrayList<Long> a = tri(n - 1);\n\
    \        ArrayList<Long> b = tri(n - 2);\n        ArrayList<Long> c = tri(n +\
    \ 1);\n        ArrayList<Long> d = new ArrayList<>();\n        d.add(a.get(0));\n\
    \        d.add(b.get(0));\n        d.add(c.get(0));\n        long sum = 0;\n \
    \       for (int i = 0; i < a.size(); i++) {\n            sum += d.get(i);\n \
    \       }\n        d.add(sum);\n        result.addAll(a);\n        result.addAll(b);\n\
    \        result.addAll(c); \n        result.add(sum);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeh1f94_s.java:52)\n"
  stdout: ''
  timestamp: 1659794493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            result.add(1l);\n            result.add(1l);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi2butenm.java:42)\n"
  stdout: ''
  timestamp: 1659794493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            result.add(1l);\n            result.add(1l);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        ArrayList<Long> fourth = new ArrayList<>();\n\
    \        first.add(1l);\n        second.add(1l);\n        third.add(1l);\n   \
    \     fourth.add(1l);\n        if (n % 2 == 0) {\n            third.add(1l);\n\
    \            fourth.add(1l);\n        }\n        third.add(1l);\n        fourth.add(1l);\n\
    \        if (n % 2 == 1) {\n            third.add(1l);\n            fourth.add(1l);\n\
    \        }\n        third.add(1l);\n        fourth.add(1l);\n        if (n % 2\
    \ == 0) {\n            third.add(1l);\n            fourth.add(1l);\n        }\n\
    \        third.add(1l);\n        fourth.add(1l);\n        if (n % 2 == 1) {\n\
    \            third.add(1l);\n            fourth.add(1l);\n        }\n        third.add(1l);\n\
    \        fourth.add(1l);\n        if (n % 2 == 0) {\n            third.add(1l);\n\
    \            fourth.add(1l);\n        }\n        third.add(1l);\n        fourth.add(1l);\n\
    \        if (n % 2 == 1) {\n            third.add(1l);\n            fourth.add(1l);\n\
    \        }\n        third.add(1l);\n        fourth.add(1l);\n        if (n % 2\
    \ == 0) {\n            third.add(1l);\n            fourth.add(1l);\n        }\n\
    \        third.add(1l);\n        fourth.add(1l);\n        if (n % 2 == 1) {\n\
    \            third.add(1l);\n            fourth.add(1l);\n        }\n        third.add(1l);\n\
    \        fourth.add(1l);\n        if (n % 2 == 0) {\n            third.add(1l);\n\
    \            fourth.add(1l);\n        }\n        third.add(1l);\n        fourth.add(1l);\n\
    \        if (n % 2 == 1) {\n            third.add(1l);\n            fourth.add(1l);\n\
    \        }\n        third.add(1l);\n        fourth.add(1l);\n        if (n % 2\
    \ == 0) {\n            third.add(1l);\n            fourth.add(1l);\n        }\n\
    \        third.add(1l);\n        fourth.add(1l);\n        if (n % 2 == 1) {\n\
    \            third.add(1l);\n            fourth.add(1l);\n        }\n        third.add(1l);\n\
    \        \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5digcmi6.java:113: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659794493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        if (n <= 1l) {\n\
    \            result.add(1l);\n            return result;\n        }\n        if\
    \ (n % 2l == 0l) {\n            result.add(tri(n - 1l) + tri(n - 2l));\n     \
    \   } else {\n            result.add(tri(n - 1l) + tri(n - 1l) + tri(n - 2l));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkg3rkp_o.java:32: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1l) + tri(n - 2l));\n                  \
    \                 ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpkg3rkp_o.java:34: error: bad operand types for binary operator '+'\n \
    \           result.add(tri(n - 1l) + tri(n - 1l) + tri(n - 2l));\n           \
    \                        ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     if (n <= 1l) {\n            return new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        }\n        ArrayList<Long> result = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        ArrayList<Long> temp = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        ArrayList<Long> temp2 = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        ArrayList<Long> temp3 = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        ArrayList<Long> temp4 = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        ArrayList<Long> temp5 = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        ArrayList<Long> temp6 = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        ArrayList<Long> temp7 = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        ArrayList<Long> temp8 = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        ArrayList<Long> temp9 = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        ArrayList<Long> temp10 = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        ArrayList<Long> temp11 = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        ArrayList<Long> temp12 = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        ArrayList<Long> temp13 = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        ArrayList<Long> temp14 = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        ArrayList<Long> temp15 = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        ArrayList<Long> temp16 = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        ArrayList<Long> temp17 = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        ArrayList<Long> temp18 = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        ArrayList<Long> temp19 = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        ArrayList<Long> temp20 = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        ArrayList<Long> temp21 = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        ArrayList<Long> temp22 = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        ArrayList<Long> temp23 = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        ArrayList<Long> temp24 = new ArrayList<Long>(\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp24k0f0or.java:54: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<>();\n        ArrayList<Long> second = new ArrayList<>();\n\
    \        ArrayList<Long> third = new ArrayList<>();\n        first.add(1l);\n\
    \        second.add(1l);\n        third.add(1l);\n        if (n % 2 == 0) {\n\
    \            third.add(1l);\n            third.add(1l);\n            third.add(1l);\n\
    \        }\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo41qyvpz.java:102: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659794493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long tri1 = (long)3;\n\
    \        long tri2 = (long)1;\n        long tri3 = (long)2;\n        long tri4\
    \ = (long)3;\n        long tri5 = (long)1;\n        long tri6 = (long)2;\n   \
    \     long tri7 = (long)3;\n        long tri8 = (long)1;\n        long tri9 =\
    \ (long)2;\n        long tri10 = (long)3;\n        long tri11 = (long)1;\n   \
    \     long tri12 = (long)2;\n        long tri13 = (long)3;\n        long tri14\
    \ = (long)1;\n        long tri15 = (long)2;\n        long tri16 = (long)3;\n \
    \       long tri17 = (long)1;\n        long tri18 = (long)2;\n        long tri19\
    \ = (long)3;\n        long tri20 = (long)1;\n        long tri21 = (long)2;\n \
    \       long tri22 = (long)3;\n        long tri23 = (long)1;\n        long tri24\
    \ = (long)2;\n        long tri25 = (long)3;\n        long tri26 = (long)1;\n \
    \       long tri27 = (long)2;\n        long tri28 = (long)3;\n        long tri29\
    \ = (long)1;\n        long tri30 = (long)2;\n        long tri31 = (long)3;\n \
    \       long tri32 = (long)1;\n        long tri33 = (long)2;\n        long tri34\
    \ = (long)3;\n        long tri35 = (long)1;\n        long tri36 = (long)2;\n \
    \       long tri37 = (long)3;\n        long tri38 = (long)1;\n        long tri39\
    \ = (long)2;\n        long tri40 = (long)3;\n        long tri41 = (long)1;\n \
    \       long tri42 = (long)2;\n        long tri43 = (long)3;\n        long tri44\
    \ = (long)1;\n        long tri45 = (long)2;\n        long tri46 = (long)3;\n \
    \       long tri47 = (long)1;\n        long tri48 = (long)2;\n        long tri49\
    \ = (long)3;\n        long tri50 = (long)1;\n        long tri51 = (long)2;\n \
    \       long tri52 = (long)3;\n        long tri53 = (long)1;\n        long tri54\
    \ = (long)2;\n        long tri55 = (long)3;\n        long tri56 = (long)1;\n \
    \       long tri57 = (long)2;\n        long tri58 = (long)3;\n        long tri59\
    \ = (long)1;\n        long tri60 = (long)2;\n        long tri61 = (long)3;\n \
    \       long tri62 = (long)1;\n        long tri\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpupyzbkew.java:89: error: ';' expected\n        long tri\n     \
    \           ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        if (n <= 1) {\n\
    \            result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0pgwoa7b.java:40)\n"
  stdout: ''
  timestamp: 1659794494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long a = 1;\n     \
    \   long b = 2;\n        long c = 1;\n        long d = 1;\n        long temp;\n\
    \        long tri;\n        long tri1;\n        long tri2;\n        long tri3;\n\
    \        long tri4;\n        long tri5;\n        long tri6;\n        long tri7;\n\
    \        long tri8;\n        long tri9;\n        long tri10;\n        long tri11;\n\
    \        long tri12;\n        long tri13;\n        long tri14;\n        long tri15;\n\
    \        long tri16;\n        long tri17;\n        long tri18;\n        long tri19;\n\
    \        long tri20;\n        long tri21;\n        long tri22;\n        long tri23;\n\
    \        long tri24;\n        long tri25;\n        long tri26;\n        long tri27;\n\
    \        long tri28;\n        long tri29;\n        long tri30;\n        long tri31;\n\
    \        long tri32;\n        long tri33;\n        long tri34;\n        long tri35;\n\
    \        long tri36;\n        long tri37;\n        long tri38;\n        long tri39;\n\
    \        long tri40;\n        long tri41;\n        long tri42;\n        long tri43;\n\
    \        long tri44;\n        long tri45;\n        long tri46;\n        long tri47;\n\
    \        long tri48;\n        long tri49;\n        long tri50;\n        long tri51;\n\
    \        long tri52;\n        long tri53;\n        long tri54;\n        long tri55;\n\
    \        long tri56;\n        long tri57;\n        long tri58;\n        long tri59;\n\
    \        long tri60;\n        long tri61;\n        long tri62;\n        long tri63;\n\
    \        long tri64;\n        long tri65;\n        long tri66;\n        long tri67;\n\
    \        long tri68;\n        long tri69;\n        long tri70;\n        long tri71;\n\
    \        long tri72;\n        long tri73;\n        long tri74;\n        long tri75;\n\
    \        long tri76;\n        long tri77;\n        long tri78;\n        long tri79;\n\
    \        long tri80;\n        long tri81;\n        long tri82;\n        \n   \
    \ }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzzkxm0lu.java:116: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659794493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 3) {\n   \
    \         result.add(1l);\n            result.add(n);\n            return result;\n\
    \        }\n        ArrayList<Long> first = new ArrayList<>();\n        ArrayList<Long>\
    \ second = new ArrayList<>();\n        ArrayList<Long> third = new ArrayList<>();\n\
    \        first.add(1l);\n        second.add(n);\n        third.add(n);\n     \
    \   third.add(1l);\n        third.add(n);\n        third.add(n);\n        third.add(1l);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(1l);\n      \
    \  third.add(n);\n        third.add(n);\n        third.add(1l);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(1l);\n        third.add(n);\n      \
    \  third.add(n);\n        third.add(1l);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(1l);\n        third.add(n);\n        third.add(n);\n      \
    \  third.add(1l);\n        third.add(n);\n        third.add(n);\n        third.add(1l);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(1l);\n      \
    \  third.add(n);\n        third.add(n);\n        third.add(1l);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(1l);\n        third.add(n);\n      \
    \  third.add(n);\n        third.add(1l);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(1l);\n        third.add(n);\n        third.add(n);\n      \
    \  third.add(1l);\n        third.add(n);\n        third.add(n);\n        third.add(1l);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(1l);\n      \
    \  third.add(n);\n        third.add(n);\n        third.add(1l);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(1l);\n        third.add(n);\n      \
    \  third.add(n);\n        third.add(1l);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(1l);\n        third.add(n);\n        third.add(n);\n      \
    \  third.add(1l);\n        third.add(n);\n        third.add(n);\n        third.add(1l);\n\
    \        third.add(n);\n        third.add(n);\n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp69jz9alz.java:108: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659794491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<>();\n        ArrayList<Long> second = new ArrayList<>();\n\
    \        ArrayList<Long> third = new ArrayList<>();\n        first.add(1l);\n\
    \        second.add(2l);\n        third.add(3l);\n        if (n % 2 == 0) {\n\
    \            third.add(1l);\n        }\n        third.add(n - 1l);\n        third.add(n\
    \ - 2l);\n        third.add(n + 1);\n        third.add(1l);\n        third.add(2l);\n\
    \        third.add(3l);\n        third.add(n - 1l);\n        third.add(n - 2l);\n\
    \        third.add(n + 1);\n        third.add(1l);\n        third.add(2l);\n \
    \       third.add(3l);\n        third.add(n - 1l);\n        third.add(n - 2l);\n\
    \        third.add(n + 1);\n        third.add(1l);\n        third.add(2l);\n \
    \       third.add(3l);\n        third.add(n - 1l);\n        third.add(n - 2l);\n\
    \        third.add(n + 1);\n        third.add(1l);\n        third.add(2l);\n \
    \       third.add(3l);\n        third.add(n - 1l);\n        third.add(n - 2l);\n\
    \        third.add(n + 1);\n        third.add(1l);\n        third.add(2l);\n \
    \       third.add(3l);\n        third.add(n - 1l);\n        third.add(n - 2l);\n\
    \        third.add(n + 1);\n        third.add(1l);\n        third.add(2l);\n \
    \       third.add(3l);\n        third.add(n - 1l);\n        third.add(n - 2l);\n\
    \        third.add(n + 1);\n        third.add(1l);\n        third.add(2l);\n \
    \       third.add(3l);\n        third.add(n - 1l);\n        third.add(n - 2l);\n\
    \        third.add(n + 1);\n        third.add(1l);\n        third.add(2l);\n \
    \       third.add(3l);\n        third.add(n - 1l);\n        third.add(n - 2l);\n\
    \        third.add(n + 1);\n        third.add(1l);\n        third.add(2l);\n \
    \       third.add(3l);\n        third.add(n - 1l);\n        third.add(n - 2l);\n\
    \        third.add(n + 1);\n        third.add(1l);\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyr2uiqk4.java:99: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<Long>();\n        if (n <= 1) {\n \
    \           list.add(1l);\n            list.add(1l);\n            return list;\n\
    \        }\n        list.add(1l);\n        list.add(1l);\n        if (n % 2 ==\
    \ 0) {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n - 3));\n        }\
    \ else {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n -\
    \ 4));\n        }\n        return list;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjrw0_vgs.java:35: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n - 3));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpjrw0_vgs.java:37: error: bad operand types for binary operator '+'\n \
    \           list.add(tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n - 4));\n   \
    \                             ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<>();\n        ArrayList<Long> second = new ArrayList<>();\n\
    \        ArrayList<Long> third = new ArrayList<>();\n        first.add(1l);\n\
    \        second.add(2l);\n        third.add(3l);\n        if (n % 2 == 0) {\n\
    \            third.add(1l);\n        }\n        third.add(1l);\n        third.add(2l);\n\
    \        third.add(3l);\n        third.add(1l);\n        third.add(2l);\n    \
    \    third.add(3l);\n        third.add(1l);\n        third.add(2l);\n        third.add(3l);\n\
    \        third.add(1l);\n        third.add(2l);\n        third.add(3l);\n    \
    \    third.add(1l);\n        third.add(2l);\n        third.add(3l);\n        third.add(1l);\n\
    \        third.add(2l);\n        third.add(3l);\n        third.add(1l);\n    \
    \    third.add(2l);\n        third.add(3l);\n        third.add(1l);\n        third.add(2l);\n\
    \        third.add(3l);\n        third.add(1l);\n        third.add(2l);\n    \
    \    third.add(3l);\n        third.add(1l);\n        third.add(2l);\n        third.add(3l);\n\
    \        third.add(1l);\n        third.add(2l);\n        third.add(3l);\n    \
    \    third.add(1l);\n        third.add(2l);\n        third.add(3l);\n        third.add(1l);\n\
    \        third.add(2l);\n        third.add(3l);\n        third.add(1l);\n    \
    \    third.add(2l);\n        third.add(3l);\n        third.add(1l);\n        third.add(2l);\n\
    \        third.add(3l);\n        third.add(1l);\n        third.add(2l);\n    \
    \    third.add(3l);\n        third.add(1l);\n        third.add(2l);\n        third.add(3l);\n\
    \        third.add(1l);\n        third.add(2l);\n        third.add(3l);\n    \
    \    third.add(1l);\n        third.add(2l);\n        third.add(3l);\n        third.add(1l);\n\
    \        third.add(2l);\n        third.add(3l);\n        third.add(1l);\n\n  \
    \  }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpotchlgg2.java:102: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659794494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 3) {\n     \
    \       list.add(1l);\n            list.add(3l);\n            list.add(2l);\n\
    \            list.add(8l);\n        } else {\n            list.add(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1));\n        }\n        return list;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp37bdy5r6.java:33: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            result.add(n);\n            return result;\n\
    \        }\n        ArrayList<Long> tri1 = tri(n - 1);\n        ArrayList<Long>\
    \ tri2 = tri(n - 2);\n        ArrayList<Long> tri3 = tri(n - 3);\n        result.addAll(tri1);\n\
    \        result.addAll(tri2);\n        result.addAll(tri3);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7lnao15a.java:41)\n"
  stdout: ''
  timestamp: 1659794491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long a = 1;\n     \
    \   long b = 2;\n        long c = 3;\n        long d = 1;\n        long e = 1;\n\
    \        long f = 3;\n        long g = 1;\n        long h = 2;\n        long i\
    \ = 1;\n        long j = 1;\n        long k = 1;\n        long l = 1;\n      \
    \  long m = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n\
    \        long q = 1;\n        long r = 1;\n        long s = 1;\n        long t\
    \ = 1;\n        long u = 1;\n        long v = 1;\n        long w = 1;\n      \
    \  long x = 1;\n        long y = 1;\n        long z = 1;\n        long a = 1;\n\
    \        long b = 2;\n        long c = 3;\n        long d = 1;\n        long e\
    \ = 1;\n        long f = 3;\n        long g = 1;\n        long h = 2;\n      \
    \  long i = 1;\n        long j = 1;\n        long k = 1;\n        long l = 1;\n\
    \        long m = 1;\n        long n = 1;\n        long o = 1;\n        long p\
    \ = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n      \
    \  long t = 1;\n        long u = 1;\n        long v = 1;\n        long w = 1;\n\
    \        long x = 1;\n        long y = 1;\n        long z = 1;\n        long a\
    \ = 1;\n        long b = 2;\n        long c = 3;\n        long d = 1;\n      \
    \  long e = 1;\n        long f = 3;\n        long g = 1;\n        long h = 2;\n\
    \        long i = 1;\n        long j = 1;\n        long k = 1;\n        long l\
    \ = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n      \
    \  long p = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n\
    \        long t = 1;\n        long u = 1;\n        long v = 1;\n        long w\
    \ = 1;\n        long x = 1;\n        long y = 1;\n        long z = 1;\n      \
    \  long a = 1;\n        long b = 2;\n        long c = 3;\n        long d = 1;\n\
    \        long e = 1;\n        long f = 3;\n        long g = 1;\n        long h\
    \ = 2;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n      \
    \  long l = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 1;\n        long r = 1;\n        long s\
    \ = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2zj9mf87.java:127: error: ';' expected\n        long w\n      \
    \        ^\n1 error\n"
  stdout: ''
  timestamp: 1659794493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ a = tri(n - 1l);\n        ArrayList<Long> b = tri(n - 2l);\n        ArrayList<Long>\
    \ c = tri(n + 2l);\n        a.addAll(b);\n        a.addAll(c);\n        return\
    \ a;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.tri(tmpvgx13z07.java:28)\n\
    \tat Problem.tri(tmpvgx13z07.java:31)\n\tat Problem.tri(tmpvgx13z07.java:31)\n\
    \tat Problem.tri(tmpvgx13z07.java:31)\n\tat Problem.tri(tmpvgx13z07.java:33)\n\
    \tat Problem.tri(tmpvgx13z07.java:31)\n\tat Problem.tri(tmpvgx13z07.java:31)\n\
    \tat Problem.tri(tmpvgx13z07.java:33)\n\tat Problem.tri(tmpvgx13z07.java:31)\n\
    \tat Problem.tri(tmpvgx13z07.java:31)\n\tat Problem.tri(tmpvgx13z07.java:33)\n\
    \tat Problem.tri(tmpvgx13z07.java:31)\n\tat Problem.tri(tmpvgx13z07.java:31)\n\
    \tat Problem.tri(tmpvgx13z07.java:33)\n\tat Problem.tri(tmpvgx13z07.java:31)\n\
    \tat Problem.tri(tmpvgx13z07.java:31)\n\tat Problem.tri(tmpvgx13z07.java:33)\n\
    \tat Problem.tri(tmpvgx13z07.java:31)\n\tat Problem.tri(tmpvgx13z07.java:31)\n\
    \tat Problem.tri(tmpvgx13z07.java:33)\n\tat Problem.tri(tmpvgx13z07.java:31)\n\
    \tat Problem.tri(tmpvgx13z07.java:31)\n\tat Problem.tri(tmpvgx13z07.java:33)\n\
    \tat Problem.tri(tmpvgx13z07.java:31)\n\tat Problem.tri(tmpvgx13z07.java:31)\n\
    \tat Problem.tri(tmpvgx13z07.java:33)\n\tat Problem.tri(tmpvgx13z07.java:31)\n\
    \tat Problem.tri(tmpvgx13z07.java:31)\n\tat Problem.tri(tmpvgx13z07.java:33)\n\
    \tat Problem.tri(tmpvgx13z07.java:31)\n\tat Problem.tri(tmpvgx13z07.java:31)\n\
    \tat Problem.tri(tmpvgx13z07.java:33)\n\tat Problem.tri(tmpvgx13z07.java:31)\n\
    \tat Problem.tri(tmpvgx13z07.java:31)\n\tat Problem.tri(tmpvgx13z07.java:33)\n\
    \tat Problem.tri(tmpvgx13z07.java:31)\n\tat Problem.tri(tmpvgx13z07.java:31)\n\
    \tat Problem.tri(tmpvgx13z07.java:33)\n\tat Problem.tri(tmpvgx13z07.java:31)\n\
    \tat Problem.tri(tmpvgx13z07.java:31)\n\tat Problem.tri(tmpvgx13z07.java:33)\n\
    \tat Problem.tri(tmpvgx13z07.java:31)\n\tat Problem.tri(tmpvgx13z07.java:31)\n\
    \tat Problem.tri(tmpvgx13z07.java:33)\n\tat Problem.tri(tmpvgx13z07.java:31)\n\
    \tat Problem.tri(tmpvgx13z07.java:31)\n\tat Problem.tri(tmpvgx13z07.java:33)\n\
    \tat Problem.tri(tmpvgx13z07.java:31)\n\tat Problem.tri(tmpvgx13z07.java:31)\n\
    \tat Problem.tri(tmpvgx13z07.java:33)\n\tat Problem.tri(tmpvgx13z07.java:31)\n\
    \tat Problem.tri(tmpvgx13z07.java:31)\n\tat Problem.tri(tmpvgx13z07.java:33)\n\
    \tat Problem.tri(tmpvgx13z07.jav"
  stdout: ''
  timestamp: 1659794494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 0) {\n     \
    \       return list;\n        }\n        list.add(1l);\n        if (n % 2 == 0)\
    \ {\n            list.add(n / 2l);\n        } else {\n            list.add(tri(n\
    \ - 1l) + tri(n - 2l) + tri(n - 3l));\n        }\n        return list;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1cqjw2if.java:34: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1l) + tri(n - 2l) + tri(n - 3l));\n      \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n1 error\n"
  stdout: ''
  timestamp: 1659794494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<>();\n        ArrayList<Long> second = new ArrayList<>();\n\
    \        ArrayList<Long> third = new ArrayList<>();\n        first.add(1l);\n\
    \        second.add(2l);\n        third.add(3l);\n        if (n % 2 == 0) {\n\
    \            third.add(1l);\n        }\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + 2l);\n        third.add(1l);\n        third.add(n - 1l);\n        third.add(n\
    \ + \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_kuibu3d.java:96: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     if (n <= 1l) {\n            return new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        long\
    \ tri1 = tri(n - 1l);\n        long tri2 = tri(n - 2l);\n        long tri3 = tri(n\
    \ - 3l);\n        result.add((long) tri1);\n        result.add((long) tri2);\n\
    \        result.add((long) tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpys_ointb.java:30: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1l);\n                   \
    \    ^\n/tmp/tmpys_ointb.java:31: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2l);\n                   \
    \    ^\n/tmp/tmpys_ointb.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n - 3l);\n                   \
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        if (n <= 1) {\n\
    \            result.add(n);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnmw7hpuk.java:40)\n"
  stdout: ''
  timestamp: 1659794494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<Long>();\n        if (n == 0) list.add(0l);\n\
    \        if (n == 1) list.add(1l);\n        if (n == 2) list.add(2l);\n      \
    \  if (n % 2 == 0) {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        } else {\n            list.add(tri(n - 1) + tri(n - 2));\n        }\n\
    \        return list;\n    }\n    public static void main(String[] args) {\n \
    \   assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ck7m0zr.java:31: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmp3ck7m0zr.java:33: error: bad operand types for binary operator '+'\n \
    \           list.add(tri(n - 1) + tri(n - 2));\n                             \
    \   ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 1) {\n     \
    \       list.add(1l);\n            return list;\n        }\n        list.add(3l);\n\
    \        if (n % 2 == 0) {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n        }\n        else {\n            list.add(tri(n - 1) + tri(n -\
    \ 2));\n        }\n        return list;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp_mx4y0n.java:33: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpp_mx4y0n.java:36: error: bad operand types for binary operator '+'\n \
    \           list.add(tri(n - 1) + tri(n - 2));\n                             \
    \   ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        if (n == 1l) {\n\
    \            result.add(1l);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.add(tri(n - 1l));\n            result.add(tri(n\
    \ - 2l));\n            result.add(tri(n + 1l));\n        } else {\n          \
    \  result.add(tri(n - 1l));\n            result.add(tri(n - 2l));\n          \
    \  result.add(tri(n + 1l));\n            result.add(tri(n - 1l));\n          \
    \  result.add(tri(n - 2l));\n            result.add(tri(n + 1l));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqrjszzvr.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n            result.add(tri(n - 1l));\n               \
    \           ^\n/tmp/tmpqrjszzvr.java:33: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 2l));\n        \
    \                  ^\n/tmp/tmpqrjszzvr.java:34: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n + 1l));\n        \
    \                  ^\n/tmp/tmpqrjszzvr.java:36: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 1l));\n        \
    \                  ^\n/tmp/tmpqrjszzvr.java:37: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 2l));\n        \
    \                  ^\n/tmp/tmpqrjszzvr.java:38: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n + 1l));\n        \
    \                  ^\n/tmp/tmpqrjszzvr.java:39: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 1l));\n        \
    \                  ^\n/tmp/tmpqrjszzvr.java:40: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 2l));\n        \
    \                  ^\n/tmp/tmpqrjszzvr.java:41: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n + 1l));\n        \
    \                  ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n9 errors\n"
  stdout: ''
  timestamp: 1659794494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        ArrayList<Long>\
    \ a = tri(n - 1);\n        ArrayList<Long> b = tri(n - 2);\n        ArrayList<Long>\
    \ c = tri(n - 3);\n        a.addAll(b);\n        a.addAll(c);\n        result.addAll(a);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9j5fugz2.java:40)\n"
  stdout: ''
  timestamp: 1659794494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 3) {\n   \
    \         result.add(n);\n            return result;\n        }\n        long\
    \ tri1 = tri(n - 1);\n        long tri2 = tri(n - 2);\n        long tri3 = tri(n\
    \ + 1);\n        result.add(tri1);\n        result.add(tri2);\n        result.add(tri3);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_q23jmd2.java:31: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1);\n                    \
    \   ^\n/tmp/tmp_q23jmd2.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2);\n                    \
    \   ^\n/tmp/tmp_q23jmd2.java:33: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n + 1);\n                    \
    \   ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        if (n <= 1) {\n\
    \            result.add(n);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3);\n        ArrayList<Long> tri4 = tri(n - 4);\n        ArrayList<Long>\
    \ tri5 = tri(n - 5);\n        ArrayList<Long> tri6 = tri(n - 6);\n        ArrayList<Long>\
    \ tri7 = tri(n - 7);\n        ArrayList<Long> tri8 = tri(n - 8);\n        ArrayList<Long>\
    \ tri9 = tri(n - 9);\n        ArrayList<Long> tri10 = tri(n - 10);\n        ArrayList<Long>\
    \ tri11 = tri(n - 11);\n        ArrayList<Long> tri12 = tri(n - 12);\n       \
    \ ArrayList<Long> tri13 = tri(n - 13);\n        ArrayList<Long> tri14 = tri(n\
    \ - 14);\n        ArrayList<Long> tri15 = tri(n - 15);\n        ArrayList<Long>\
    \ tri16 = tri(n - 16);\n        ArrayList<Long> tri17 = tri(n - 17);\n       \
    \ ArrayList<Long> tri18 = tri(n - 18);\n        ArrayList<Long> tri19 = tri(n\
    \ - 19);\n        ArrayList<Long> tri20 = tri(n - 20);\n        ArrayList<Long>\
    \ tri21 = tri(n - 21);\n        ArrayList<Long> tri22 = tri(n - 22);\n       \
    \ ArrayList<Long> tri23 = tri(n - 23);\n        ArrayList<Long> tri24 = tri(n\
    \ - 24);\n        ArrayList<Long> tri25 = tri(n - 25);\n        ArrayList<Long>\
    \ tri26 = tri(n - 26);\n        ArrayList<Long> tri27 = tri(n - 27);\n       \
    \ ArrayList<Long> tri28 = tri(n - 28);\n        ArrayList<Long> tri29 = tri(n\
    \ - 29);\n        ArrayList<Long> tri30 = tri(n - 30);\n        ArrayList<Long>\
    \ tri31 = tri(n - 31);\n        ArrayList<Long> tri32 = tri(n - 32);\n       \
    \ ArrayList<Long> tri33 = tri(n - 33);\n        ArrayList<Long> tri34 = tri(n\
    \ - 34);\n        ArrayList<Long> tri35 = tri(n - 35);\n        ArrayList<Long>\
    \ tri36 = tri(n - 36);\n        ArrayList<Long> tri37 = tri(n - 37);\n       \
    \ ArrayList<Long> tri38 = tri(n - 38);\n        ArrayList<Long> tri39 = tri(n\
    \ - 39);\n        ArrayList<Long> tri40 = tri(n - 40);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp024bvyst.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794490
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long a = 1;\n     \
    \   long b = 2;\n        long c = 3;\n        long d = 4;\n        long e = 5;\n\
    \        long f = 6;\n        long g = 7;\n        long h = 8;\n        long i\
    \ = 1;\n        long j = 2;\n        long k = 3;\n        long l = 1;\n      \
    \  long m = 2;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n\
    \        long q = 2;\n        long r = 1;\n        long s = 3;\n        long t\
    \ = 1;\n        long u = 1;\n        long v = 1;\n        long w = 1;\n      \
    \  long x = 1;\n        long y = 2;\n        long z = 3;\n        long a = 1;\n\
    \        long b = 2;\n        long c = 3;\n        long d = 4;\n        long e\
    \ = 5;\n        long f = 6;\n        long g = 7;\n        long h = 8;\n      \
    \  long i = 1;\n        long j = 2;\n        long k = 3;\n        long l = 1;\n\
    \        long m = 2;\n        long n = 1;\n        long o = 1;\n        long p\
    \ = 1;\n        long q = 2;\n        long r = 1;\n        long s = 3;\n      \
    \  long t = 1;\n        long u = 1;\n        long v = 1;\n        long w = 1;\n\
    \        long x = 1;\n        long y = 2;\n        long z = 3;\n        long a\
    \ = 1;\n        long b = 2;\n        long c = 3;\n        long d = 4;\n      \
    \  long e = 5;\n        long f = 6;\n        long g = 7;\n        long h = 8;\n\
    \        long i = 1;\n        long j = 2;\n        long k = 3;\n        long l\
    \ = 1;\n        long m = 2;\n        long n = 1;\n        long o = 1;\n      \
    \  long p = 1;\n        long q = 2;\n        long r = 1;\n        long s = 3;\n\
    \        long t = 1;\n        long u = 1;\n        long v = 1;\n        long w\
    \ = 1;\n        long x = 1;\n        long y = 2;\n        long z = 3;\n      \
    \  long a = 1;\n        long b = 2;\n        long c = 3;\n        long d = 4;\n\
    \        long e = 5;\n        long f = 6;\n        long g = 7;\n        long h\
    \ = 8;\n        long i = 1;\n        long j = 2;\n        long k = 3;\n      \
    \  long l = 1;\n        long m = 2;\n        long n = 1;\n        long o = 1;\n\
    \        long p = 1;\n        long q = 2;\n        long r = 1;\n        long s\
    \ = 3;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n      \
    \  long w\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpafkuzds3.java:127: error: ';' expected\n        long w\n      \
    \        ^\n1 error\n"
  stdout: ''
  timestamp: 1659794494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     if (n == 0) {\n            return new ArrayList<Long>(Arrays.asList((long)0l));\n\
    \        }\n        ArrayList<Long> result = new ArrayList<Long>(Arrays.asList((long)0l));\n\
    \        ArrayList<Long> tri = new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l));\n        ArrayList<Long> tri2 = new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l));\n        ArrayList<Long> tri3 = new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)16l));\n        ArrayList<Long> tri4 = new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)16l,\
    \ (long)32l));\n        ArrayList<Long> tri5 = new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)16l, (long)32l, (long)64l));\n        ArrayList<Long>\
    \ tri6 = new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l,\
    \ (long)16l, (long)32l, (long)64l, (long)128l));\n        ArrayList<Long> tri7\
    \ = new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l,\
    \ (long)16l, (long)32l, (long)64l, (long)128l, (long)256l));\n        ArrayList<Long>\
    \ tri8 = new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l,\
    \ (long)16l, (long)32l, (long)64l, (long)128l, (long)256l, (long)512l));\n   \
    \     ArrayList<Long> tri9 = new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)16l, (long)32l, (long)64l, (long)128l, (long)256l,\
    \ (long)512l, (long)1024l));\n        ArrayList<Long> tri10 = new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)16l, (long)32l, (long)64l, (long)128l, (long)256l,\
    \ (long)512l, (long)1024l, (long)2048l));\n        ArrayList<Long> tri11 = new\
    \ ArrayList<Long>(Arrays.as\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwv6s83sb.java:40: error: ')' expected\n        ArrayList<Long>\
    \ tri11 = new ArrayList<Long>(Arrays.as\n                                    \
    \                         ^\n1 error\n"
  stdout: ''
  timestamp: 1659794494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 1) {\n   \
    \         result.add(1l);\n            return result;\n        }\n        if (n\
    \ % 2 == 0) {\n            result.add(tri(n - 1) + tri(n - 2));\n        } else\
    \ {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyfqvtzi9.java:32: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2));\n                    \
    \              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpyfqvtzi9.java:34: error: bad operand types for binary operator '+'\n \
    \           result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n              \
    \                    ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        long a = 1;\n     \
    \   long b = 2;\n        long c = 3;\n        long d = 4;\n        long e = 5;\n\
    \        long f = 6;\n        long g = 7;\n        long h = 8;\n        long i\
    \ = 1;\n        long j = 2;\n        long k = 3;\n        long l = 4;\n      \
    \  long m = 5;\n        long n = 6;\n        long o = 7;\n        long p = 8;\n\
    \        long q = 9;\n        long r = 1;\n        long s = 2;\n        long t\
    \ = 3;\n        long u = 4;\n        long v = 5;\n        long w = 6;\n      \
    \  long x = 7;\n        long y = 8;\n        long z = 9;\n        long a = 1;\n\
    \        long b = 2;\n        long c = 3;\n        long d = 4;\n        long e\
    \ = 5;\n        long f = 6;\n        long g = 7;\n        long h = 8;\n      \
    \  long i = 1;\n        long j = 2;\n        long k = 3;\n        long l = 4;\n\
    \        long m = 5;\n        long n = 6;\n        long o = 7;\n        long p\
    \ = 8;\n        long q = 9;\n        long r = 1;\n        long s = 2;\n      \
    \  long t = 3;\n        long u = 4;\n        long v = 5;\n        long w = 6;\n\
    \        long x = 7;\n        long y = 8;\n        long z = 9;\n        long a\
    \ = 1;\n        long b = 2;\n        long c = 3;\n        long d = 4;\n      \
    \  long e = 5;\n        long f = 6;\n        long g = 7;\n        long h = 8;\n\
    \        long i = 1;\n        long j = 2;\n        long k = 3;\n        long l\
    \ = 4;\n        long m = 5;\n        long n = 6;\n        long o = 7;\n      \
    \  long p = 8;\n        long q = 9;\n        long r = 1;\n        long s = 2;\n\
    \        long t = 3;\n        long u = 4;\n        long v = 5;\n        long w\
    \ = 6;\n        long x = 7;\n        long y = 8;\n        long z = 9;\n      \
    \  long a = 1;\n        long b = 2;\n        long c = 3;\n        long d = 4;\n\
    \        long e = 5;\n        long f = 6;\n        long g = 7;\n        long h\
    \ = 8;\n        long i = 1;\n        long j = 2;\n        long k = 3;\n      \
    \  long l = 4;\n        long m = 5;\n        long n = 6;\n        long o = 7;\n\
    \        long p = 8;\n        long q = 9;\n        long r = 1;\n        long s\
    \ = 2;\n        long t = 3;\n        long u = 4;\n        long v = 5;\n      \
    \  long w\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpctgde4uq.java:127: error: ';' expected\n        long w\n      \
    \        ^\n1 error\n"
  stdout: ''
  timestamp: 1659794494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n == 0) {\n     \
    \       list.add(0l);\n            list.add(1l);\n            list.add(0l);\n\
    \            return list;\n        }\n        if (n == 1) {\n            list.add(0l);\n\
    \            list.add(1l);\n            return list;\n        }\n        if (n\
    \ == 2) {\n            list.add(0l);\n            list.add(1l);\n            list.add(2l);\n\
    \            return list;\n        }\n        if (n % 2 == 0) {\n            list.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n            list.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2));\n        }\n        return list;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpchb6b2h4.java:45: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpchb6b2h4.java:47: error: bad operand types for binary operator '+'\n \
    \           list.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2));\n   \
    \                             ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n == 0) {\n   \
    \         result.add(0l);\n            return result;\n        }\n        if (n\
    \ == 1) {\n            result.add(1l);\n            return result;\n        }\n\
    \        if (n % 2 == 0) {\n            long a = tri(n - 1l);\n            long\
    \ b = tri(n - 2l);\n            result.add(a);\n            result.add(b);\n \
    \           result.add(a + b);\n        } else {\n            long a = tri(n -\
    \ 1l);\n            long b = tri(n - 2l);\n            result.add(a);\n      \
    \      result.add(b);\n            result.add(a + b);\n            result.add(a\
    \ - b);\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3s6_ahsx.java:36: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            long a = tri(n - 1l);\n                  \
    \      ^\n/tmp/tmp3s6_ahsx.java:37: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long b = tri(n - 2l);\n           \
    \             ^\n/tmp/tmp3s6_ahsx.java:42: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long a = tri(n - 1l);\n           \
    \             ^\n/tmp/tmp3s6_ahsx.java:43: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long b = tri(n - 2l);\n           \
    \             ^\n4 errors\n"
  stdout: ''
  timestamp: 1659794494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 1) {\n     \
    \       list.add(1l);\n            list.add(1l);\n            return list;\n \
    \       }\n        list.add(1l);\n        list.add(1l);\n        list.add(1l);\n\
    \        if (n % 2 == 0) {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n        } else {\n            list.add(tri(n - 1) + tri(n - 2));\n \
    \       }\n        return list;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt7t0s_xr.java:36: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpt7t0s_xr.java:38: error: bad operand types for binary operator '+'\n \
    \           list.add(tri(n - 1) + tri(n - 2));\n                             \
    \   ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 1l) {\n    \
    \        list.add(1l);\n            list.add(n + 1l);\n            return list;\n\
    \        }\n        list.add(tri(n - 1l));\n        list.add(tri(n - 2l));\n \
    \       list.add(tri(n - 3l));\n        return list;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw89oh7ua.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n        list.add(tri(n - 1l));\n                    ^\n\
    /tmp/tmpw89oh7ua.java:33: error: incompatible types: ArrayList<Long> cannot be\
    \ converted to Long\n        list.add(tri(n - 2l));\n                    ^\n/tmp/tmpw89oh7ua.java:34:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to Long\n   \
    \     list.add(tri(n - 3l));\n                    ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659794494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        if (n <= 1l) {\n\
    \            result.add(1l);\n            result.add(n + 1l);\n            return\
    \ result;\n        }\n        ArrayList<Long> tri1 = tri(n - 1l);\n        ArrayList<Long>\
    \ tri2 = tri(n - 2l);\n        ArrayList<Long> tri3 = tri(n - 3l);\n        result.addAll(tri1);\n\
    \        result.addAll(tri2);\n        result.addAll(tri3);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptclj3c03.java:41)\n"
  stdout: ''
  timestamp: 1659794495
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1l) return\
    \ result;\n        long a = 2l;\n        long b = 3l;\n        long c = 1l;\n\
    \        long d = 1l;\n        long sum = 0l;\n        while (n > 0) {\n     \
    \       sum += c;\n            if (n % 2 == 0) {\n                c = a + b;\n\
    \                a = b;\n                b = c;\n            } else {\n      \
    \          c = a + d;\n                a = d;\n                d = c;\n      \
    \      }\n            n /= 2l;\n        }\n        result.add(sum);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaipop7o_.java:50)\n"
  stdout: ''
  timestamp: 1659794495
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1l) {\n  \
    \          result.add(1l);\n            result.add(n);\n            return result;\n\
    \        }\n        ArrayList<Long> first = new ArrayList<>();\n        ArrayList<Long>\
    \ second = new ArrayList<>();\n        ArrayList<Long> third = new ArrayList<>();\n\
    \        first.add(1l);\n        second.add(n);\n        third.add(n);\n     \
    \   third.add(1l);\n        third.add(n);\n        third.add(n);\n        third.add(1l);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(1l);\n      \
    \  third.add(n);\n        third.add(n);\n        third.add(1l);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(1l);\n        third.add(n);\n      \
    \  third.add(n);\n        third.add(1l);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(1l);\n        third.add(n);\n        third.add(n);\n      \
    \  third.add(1l);\n        third.add(n);\n        third.add(n);\n        third.add(1l);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(1l);\n      \
    \  third.add(n);\n        third.add(n);\n        third.add(1l);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(1l);\n        third.add(n);\n      \
    \  third.add(n);\n        third.add(1l);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(1l);\n        third.add(n);\n        third.add(n);\n      \
    \  third.add(1l);\n        third.add(n);\n        third.add(n);\n        third.add(1l);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(1l);\n      \
    \  third.add(n);\n        third.add(n);\n        third.add(1l);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(1l);\n        third.add(n);\n      \
    \  third.add(n);\n        third.add(1l);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(1l);\n        third.add(n);\n        third.add(n);\n      \
    \  third.add(1l);\n        third.add(n);\n        third.add(n);\n        third.add(1l);\n\
    \        third.add(n);\n        third.add(n);\n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0zt84fo8.java:108: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659794494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(1l);\n            result.add(n);\n            return result;\n\
    \        }\n        ArrayList<Long> first = new ArrayList<>();\n        ArrayList<Long>\
    \ second = new ArrayList<>();\n        ArrayList<Long> third = new ArrayList<>();\n\
    \        first.add(1l);\n        second.add(n);\n        third.add(n);\n     \
    \   third.add(1l);\n        first.addAll(third);\n        second.addAll(third);\n\
    \        third.addAll(first);\n        third.addAll(second);\n        result.addAll(first);\n\
    \        result.addAll(second);\n        result.addAll(third);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnbqup3z_.java:49)\n"
  stdout: ''
  timestamp: 1659794495
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 1) {\n   \
    \         result.add(n);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3l9lv3gm.java:40)\n"
  stdout: ''
  timestamp: 1659794487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 3) {\n     \
    \       list.add(1l);\n            list.add(n);\n            return list;\n  \
    \      }\n        list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        return\
    \ list;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd996_mhp.java:32: error: bad operand types for binary operator\
    \ '+'\n        list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n             \
    \               ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     if (n == 0) return new ArrayList<Long>(Arrays.asList((long)1l));\n     \
    \   if (n == 1) return new ArrayList<Long>(Arrays.asList((long)3l));\n       \
    \ if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n + 1);\n        else return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpttzidjf9.java:28: error: bad operand types for binary operator\
    \ '+'\n        if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \                                          ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmpttzidjf9.java:29: error: bad operand\
    \ types for binary operator '+'\n        else return tri(n - 1) + tri(n - 2) +\
    \ tri(n - 1) + tri(n + 1);\n                               ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794495
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        if (n <= 3) {\n   \
    \         result.add(1l);\n            result.add(3l);\n            result.add(2l);\n\
    \            result.add(8l);\n            return result;\n        }\n        ArrayList<Long>\
    \ left = tri(n - 1);\n        ArrayList<Long> right = tri(n - 2);\n        ArrayList<Long>\
    \ middle = tri(n - 3) + tri(n - 2) + tri(n - 1);\n        left.addAll(right);\n\
    \        left.addAll(middle);\n        return left;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp15kmg6ic.java:36: error: bad operand types for binary operator\
    \ '+'\n        ArrayList<Long> middle = tri(n - 3) + tri(n - 2) + tri(n - 1);\n\
    \                                            ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n1 error\n"
  stdout: ''
  timestamp: 1659794495
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n == 0) list.add(0l);\n\
    \        if (n == 1) list.add(1l);\n        if (n == 2) list.add(2l);\n      \
    \  if (n % 2 == 0) {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        } else {\n            list.add(tri(n - 1) + tri(n - 2));\n        }\n\
    \        return list;\n    }\n    public static void main(String[] args) {\n \
    \   assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7103u_34.java:31: error: bad operand types for binary operator\
    \ '+'\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n         \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmp7103u_34.java:33: error: bad operand types for binary operator '+'\n \
    \           list.add(tri(n - 1) + tri(n - 2));\n                             \
    \   ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return an array array list of the\
    \ \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n\
    \    // >>> tri((3l))\n    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))\n    public static ArrayList<Long> tri(long n) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        if (n <= 1l) return list;\n\
    \        list.add(1l);\n        if (n % 2 == 0) list.add(tri(n - 1l) + tri(n -\
    \ 2l));\n        else list.add(tri(n - 1l) + tri(n - 2l) + tri(n + 1l));\n   \
    \     return list;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfjc6zb19.java:29: error: bad operand types for binary operator\
    \ '+'\n        if (n % 2 == 0) list.add(tri(n - 1l) + tri(n - 2l));\n        \
    \                                     ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n/tmp/tmpfjc6zb19.java:30: error: bad operand types for\
    \ binary operator '+'\n        else list.add(tri(n - 1l) + tri(n - 2l) + tri(n\
    \ + 1l));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794495
