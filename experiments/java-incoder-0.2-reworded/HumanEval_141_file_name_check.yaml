name: HumanEval_141_file_name_check
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Create a function which takes a string representing a file's\
  \ name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
  \ otherwise.\n    // A file's name is considered to be valid if and only if all\
  \ the following conditions \n    // are met:\n    // - There should not be more\
  \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
  \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
  \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
  \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
  \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
  )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    public static\
  \ String fileNameCheck(String file_name) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(fileNameCheck((\"\
  example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
  )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
  MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
  Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\"\
  )));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
  Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\"\
  )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"\
  No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n  \
  \  assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
completions: ["        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n", "        \n        // Your code here\n\
    \        ", "        boolean valid = false;\n        if (file_name.length() >\
    \ 3) {\n            valid = false;\n        } else if (file_name.indexOf('.')\
    \ != -1) {\n            valid = false;\n        } else if (file_name.substring(0,\
    \ 1).isEmpty()) {\n            valid = false;\n        } else if (file_name.substring(1,\
    \ 2).matches(\"^[a-zA-Z]+$\")) {\n            valid = false;\n        } else if\
    \ (file_name.substring(2, 3).matches(\"^txt|exe|dll$\")) {\n            valid\
    \ = true;\n        } else {\n            valid = false;\n        }\n        if\
    \ (valid) {\n            return \"Yes\";\n        } else {\n            return\
    \ \"No\";\n        }", "        // Your code here\n        boolean valid = false;\n\
    \        try{\n            int index = file_name.indexOf(\".\");\n           \
    \ String name = file_name.substring(0, index);\n            String extension =\
    \ file_name.substring(index+1);\n            valid = name.matches(\"^[a-zA-Z]+$\"\
    ) && extension.matches(\"^[txt|exe|dll]$\");\n        }\n        catch(Exception\
    \ e){\n            valid = false;\n        }\n        return valid ? \"Yes\" :\
    \ \"No\";", "        boolean valid = false;\n        int dotCount = 0;\n     \
    \   char firstChar;\n        char secondChar;\n        char thirdChar;\n     \
    \   char fourthChar;\n        char fifthChar;\n        char sixthChar;\n     \
    \   char seventhChar;\n        char eighthChar;\n        char ninthChar;\n   \
    \     char tenthChar;\n        char eleventhChar;\n        char twelfthChar;\n\
    \        char thirteenthChar;\n        char fourteenthChar;\n        char fifteenthChar;\n\
    \        char sixteenthChar;\n        char seventeenthChar;\n        char eighteenthChar;\n\
    \        char nineteenthChar;\n        char twentiethChar;\n        char twentyFirstChar;\n\
    \        char twentySecondChar;\n        char twentyThirdChar;\n        char twentyFourthChar;\n\
    \        char twentyFifthChar;\n        char twentySixthChar;\n        char twentySeventhChar;\n\
    \        char twentyEighthChar;\n        char twentyNinthChar;\n        char thirtiethChar;\n\
    \        char thirtyFirstChar;\n        char thirtySecondChar;\n        char thirtyThirdChar;\n\
    \        char thirtyFourthChar;\n        char thirtyFifthChar;\n        char thirtySixthChar;\n\
    \        char thirtySeventhChar;\n        char thirtyEighthChar;\n        char\
    \ thirtyNinthChar;\n        char fortiethChar;\n        char fortyFirstChar;\n\
    \        char fortySecondChar;\n        char fortyThirdChar;\n        char fortyFourthChar;\n\
    \        char fortyFifthChar;\n        char fortySixthChar;\n        char fortySeventhChar;\n\
    \        char fortyEighthChar;\n        char fortyNinthChar;\n        char fiftiethChar;\n\
    \        char fiftyFirstChar;\n        char fiftySecondChar;\n        char fiftyThirdChar;\n\
    \        char fiftyFourthChar;\n        char fiftyFifthChar;\n        char fiftySixthChar;\n\
    \        char fiftySeventhChar", "        String result = \"\";\n        \n  \
    \      // Your code goes here\n        \n        return result;", "        \n\
    \        // Your code here\n        \n        return null;", "        boolean\
    \ valid = false;\n        \n        String[] file_name = file_name.split(\"\\\\\
    .\");\n        \n        if (file_name.length != 3 || file_name[0].equals(\"\"\
    ) || file_name[1].equals(\"\") || \n            !file_name[1].matches(\"^[a-zA-Z]\"\
    ) || !file_name[2].matches(\"^[a-zA-Z]\") || \n            file_name[0].charAt(0)\
    \ == file_name[1].charAt(0)) {\n            valid = false;\n        } else {\n\
    \            valid = true;\n        }\n        \n        if (file_name[2].equals(\"\
    exe\") || file_name[2].equals(\"dll\")) {\n            valid = true;\n       \
    \ }\n        \n        return valid ? \"Yes\" : \"No\";", "        \n        boolean\
    \ valid = false;\n        \n        try{\n            \n            String fileName\
    \ = file_name;\n            \n            int fileNum = Integer.parseInt(fileName.substring(0,\
    \ fileName.indexOf(\".\")));\n            \n            String fileType = fileName.substring(fileName.indexOf(\"\
    .\") + 1, fileName.length());\n            \n            valid = fileNum >= 0\
    \ && fileNum <= 9 && fileType.equals(\"txt\") || fileType.equals(\"exe\") || fileType.equals(\"\
    dll\");\n            \n        }catch(NumberFormatException e){\n            \n\
    \            valid = false;\n            \n        }catch(Exception e){\n    \
    \        \n            valid = false;\n            \n        }\n        \n   \
    \     if(valid){\n            \n            return \"Yes\";\n            \n  \
    \      }else{\n            \n            return \"No\";\n            \n      \
    \  }\n        ", "        boolean isValid = false;\n        String[] file_name\
    \ = file_name.split(\"\\\\.\");\n        if (file_name.length != 3) {\n      \
    \      isValid = false;\n        } else {\n            String file_name = file_name[0];\n\
    \            String file_name = file_name.substring(0,1);\n            String\
    \ file_name = file_name.substring(0,1);\n            if (file_name.matches(\"\
    ^[a-zA-Z]\") && file_name.matches(\"^[0-9]\") && file_name.matches(\"^[a-zA-Z0-9]\"\
    ) && file_name.matches(\"^[a-zA-Z0-9.]\")) {\n                isValid = true;\n\
    \            }\n        }\n        if (isValid) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }", "        boolean\
    \ valid = false;\n        int dotIndex = file_name.indexOf(\".\");\n        if\
    \ (dotIndex != -1) {\n            String fileName = file_name.substring(0, dotIndex);\n\
    \            valid = fileName.matches(\"^[a-zA-Z][a-zA-Z0-9]*$\");\n        }\n\
    \        return valid ? \"Yes\" : \"No\";", "        boolean valid = false;\n\
    \        \n        // Check that the file name is valid\n        valid = file_name.matches(\"\
    ^[0-9]{3}\\\\.[a-z][a-z][a-z]$\");\n        \n        // Check that the file name\
    \ contains only one dot\n        valid = valid && file_name.indexOf('.') != 0;\n\
    \        \n        // Check that the substring before the dot is not empty\n \
    \       valid = valid && file_name.substring(0, 1).matches(\"^[a-z]\");\n    \
    \    \n        // Check that the substring after the dot is one of these\n   \
    \     valid = valid && file_name.substring(file_name.lastIndexOf('.')+1).matches(\"\
    (txt|exe|dll)\");\n        \n        // Return the result\n        return valid\
    \ ? \"Yes\" : \"No\";", "        boolean valid = false;\n        \n        String[]\
    \ file_name_split = file_name.split(\"\\\\.\");\n        \n        if (file_name_split.length\
    \ != 3) {\n            valid = false;\n        } else {\n            valid = true;\n\
    \            \n            String file_name_before_dot = file_name_split[0];\n\
    \            \n            if (file_name_before_dot.isEmpty()) {\n           \
    \     valid = false;\n            } else {\n                valid = true;\n  \
    \              \n                char file_name_before_dot_first_letter = file_name_before_dot.charAt(0);\n\
    \                \n                if (!(file_name_before_dot_first_letter >=\
    \ 'a' && file_name_before_dot_first_letter <= 'z')) {\n                    valid\
    \ = false;\n                } else {\n                    valid = true;\n    \
    \            }\n            }\n        }\n        \n        if (file_name_split.length\
    \ != 3 || file_name_split[1] != null || file_name_split[2] != null || file_name_split[2]\
    \ != \"txt\" || file_name_split[2] != \"exe\" || file_name_split[2] != \"dll\"\
    ) {\n            valid = false;\n        }\n        \n        if (valid) {\n \
    \           return \"Yes\";\n        } else {\n            return \"No\";\n  \
    \      }", "        String[] file_name = file_name.split(\"\\\\.\");\n       \
    \ \n        if (file_name.length != 3) {\n            return \"No\";\n       \
    \ }\n        \n        if (file_name[0].equals(\"\")) {\n            return \"\
    No\";\n        }\n        \n        if (!file_name[0].matches(\"^[a-zA-Z]\"))\
    \ {\n            return \"No\";\n        }\n        \n        if (!file_name[1].equals(\"\
    exe\") && !file_name[1].equals(\"dll\")) {\n            return \"No\";\n     \
    \   }\n        \n        if (file_name[2].equals(\"\")) {\n            return\
    \ \"No\";\n        }\n        \n        return \"Yes\";", "        boolean valid\
    \ = false;\n        String[] parts = file_name.split(\"\\\\.\");\n        if (parts.length\
    \ != 3 || parts[0].length() > 3 || parts[1].equals(\"\") || parts[1].startsWith(\"\
    a\") || parts[1].startsWith(\"A\")) {\n            valid = false;\n        } else\
    \ {\n            valid = true;\n        }\n        return valid ? \"Yes\" : \"\
    No\";", "        // Your code here\n        \n        String file_name = file_name.toLowerCase();\n\
    \        \n        int dot_index = file_name.indexOf(\".\");\n        \n     \
    \   if (dot_index != -1) {\n            String file_name = file_name.substring(0,\
    \ dot_index);\n            \n            String file_extension = file_name.substring(dot_index);\n\
    \            \n            if (file_name.length() > 3 || file_name.contains(\"\
    .\") || file_name.startsWith(\"a\") || file_name.startsWith(\"b\") || file_name.startsWith(\"\
    c\") || file_name.startsWith(\"d\") || file_name.startsWith(\"e\") || file_name.startsWith(\"\
    f\") || file_name.startsWith(\"g\") || file_name.startsWith(\"h\") || file_name.startsWith(\"\
    i\") || file_name.startsWith(\"j\") || file_name.startsWith(\"k\") || file_name.startsWith(\"\
    l\") || file_name.startsWith(\"m\") || file_name.startsWith(\"n\") || file_name.startsWith(\"\
    o\") || file_name.startsWith(\"p\") || file_name.startsWith(\"q\") || file_name.startsWith(\"\
    r\") || file_name.startsWith(\"s\") || file_name.startsWith(\"t\") || file_name.startsWith(\"\
    u\") || file_name.startsWith(\"v\") || file_name.startsWith(\"w\") || file_name.startsWith(\"\
    x\") || file_name.startsWith(\"y\") || file_name.startsWith(\"z\")) {\n      \
    \          return \"No\";\n            }\n        }\n        \n        return\
    \ \"Yes\";", "        boolean valid = false;\n        \n        // Your code goes\
    \ here\n        \n        return valid ? \"Yes\" : \"No\";", "        \n     \
    \   // Your code goes here\n        \n        return \"\";", "        // Your\
    \ code here\n        String[] arr = file_name.split(\"\\\\.\");\n        if (arr.length\
    \ != 3 || arr[0].length() > 3 || arr[1].equals(\"\") || arr[1].charAt(0) < 'a'\
    \ || arr[1].charAt(0) > 'z' || arr[1].charAt(1) < 'a' || arr[1].charAt(1) > 'z'\
    \ || arr[2].length() > 3 || arr[2].charAt(0) < 'a' || arr[2].charAt(0) > 'z' ||\
    \ arr[2].charAt(1) < 'a' || arr[2].charAt(1) > 'z') {\n            return \"No\"\
    ;\n        }\n        return \"Yes\";", "        \n        boolean valid = false;\n\
    \        \n        int dotIndex = file_name.indexOf(\".\");\n        \n      \
    \  if (dotIndex == -1) {\n            valid = true;\n        }\n        \n   \
    \     if (dotIndex != -1) {\n            String beforeDot = file_name.substring(0,\
    \ dotIndex);\n            \n            if (beforeDot.isEmpty()) {\n         \
    \       valid = true;\n            }\n            \n            String afterDot\
    \ = file_name.substring(dotIndex + 1);\n            \n            if (afterDot.isEmpty())\
    \ {\n                valid = true;\n            }\n            \n            valid\
    \ = isValidName(beforeDot);\n            \n            if (!valid) {\n       \
    \         valid = isValidName(afterDot);\n            }\n        }\n        \n\
    \        if (valid) {\n            return \"Yes\";\n        } else {\n       \
    \     return \"No\";\n        }"]
stop_tokens:
- "\n    }\n"
