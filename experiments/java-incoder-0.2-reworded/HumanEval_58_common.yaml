name: HumanEval_58_common
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return sorted unique common elements for two array lists.\n\
  \    // >>> common((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)3l,\
  \ (long)34l, (long)653l, (long)2l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)7l, (long)1l, (long)5l, (long)9l, (long)653l, (long)121l))))\n    // (new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)653l)))\n    // >>> common((new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)8l))), (new\
  \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)3l)))\n    public static ArrayList<Long> common(ArrayList<Long> l1, ArrayList<Long>\
  \ l2) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(common((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)3l, (long)34l, (long)653l,\
  \ (long)2l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)7l,\
  \ (long)1l, (long)5l, (long)9l, (long)653l, (long)121l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)5l, (long)653l)))));\n    assert(common((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)3l, (long)2l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l,\
  \ (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)))));\n\
  \    assert(common((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l,\
  \ (long)8l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)4l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)))));\n    assert(common((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)8l))), (new\
  \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<Long>();\n        Set<Long>\
    \ set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new HashSet<Long>(l2);\n\
    \        set1.retainAll(set2);\n        set2.removeAll(set1);\n        result.addAll(set1);\n\
    \        result.addAll(set2);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n \
    \       Set<Long> set2 = new HashSet<>(l2);\n        for(Long i : set1) {\n  \
    \          if(set2.contains(i)) {\n                result.add(i);\n          \
    \      set1.remove(i);\n                set2.remove(i);\n            }\n     \
    \   }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        for(Long i : set1) {\n            if(set2.contains(i)) {\n          \
    \      result.add(i);\n                set1.remove(i);\n                set2.remove(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long commonElements = 0;\n        for(long element\
    \ : l1) {\n            for(long element2 : l2) {\n                if(element ==\
    \ element2) {\n                    commonElements++;\n                    break;\n\
    \                }\n            }\n        }\n        for(long element : l2) {\n\
    \            for(long element2 : l1) {\n                if(element == element2)\
    \ {\n                    commonElements++;\n                    break;\n     \
    \           }\n            }\n        }\n        if(commonElements == 0) {\n \
    \           return result;\n        }\n        for(long element : l1) {\n    \
    \        for(long element2 : l2) {\n                if(element == element2) {\n\
    \                    result.add(element);\n                    break;\n      \
    \          }\n            }\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n \
    \       Set<Long> set2 = new HashSet<>(l2);\n        for(Long i : set1) {\n  \
    \          if(set2.contains(i)) {\n                result.add(i);\n          \
    \  }\n        }\n        return result;", "        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n      \
    \  Set<Long> set2 = new HashSet<Long>(l2);\n        for(Long i : set1) {\n   \
    \         if(!set2.contains(i)) {\n                result.add(i);\n          \
    \  }\n        }\n        return result;", "        ArrayList<Long> common = new\
    \ ArrayList<Long>();\n        Set<Long> set1 = new HashSet<Long>(l1);\n      \
    \  Set<Long> set2 = new HashSet<Long>(l2);\n        common.addAll(set1);\n   \
    \     common.addAll(set2);\n        common.removeAll(set1);\n        common.removeAll(set2);\n\
    \        return common;", "        ArrayList<Long> common = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        Set<Long> commonSet = new HashSet<>();\n        commonSet.addAll(set1);\n\
    \        commonSet.addAll(set2);\n        commonSet.removeAll(set1);\n       \
    \ commonSet.removeAll(set2);\n        commonSet.removeAll(common);\n        common.addAll(commonSet);\n\
    \        return common;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        for(Long i : set1) {\n            if(set2.contains(i)) {\n          \
    \      result.add(i);\n            }\n        }\n        return result;", "  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long commonElements\
    \ = 0;\n        long commonElementsCount = 0;\n        long commonElementsCount2\
    \ = 0;\n        long commonElementsCount3 = 0;\n        long commonElementsCount4\
    \ = 0;\n        long commonElementsCount5 = 0;\n        long commonElementsCount6\
    \ = 0;\n        long commonElementsCount7 = 0;\n        long commonElementsCount8\
    \ = 0;\n        long commonElementsCount9 = 0;\n        long commonElementsCount10\
    \ = 0;\n        long commonElementsCount11 = 0;\n        long commonElementsCount12\
    \ = 0;\n        long commonElementsCount13 = 0;\n        long commonElementsCount14\
    \ = 0;\n        long commonElementsCount15 = 0;\n        long commonElementsCount16\
    \ = 0;\n        long commonElementsCount17 = 0;\n        long commonElementsCount18\
    \ = 0;\n        long commonElementsCount19 = 0;\n        long commonElementsCount20\
    \ = 0;\n        long commonElementsCount21 = 0;\n        long commonElementsCount22\
    \ = 0;\n        long commonElementsCount23 = 0;\n        long commonElementsCount24\
    \ = 0;\n        long commonElementsCount25 = 0;\n        long commonElementsCount26\
    \ = 0;\n        long commonElementsCount27 = 0;\n        long commonElementsCount28\
    \ = 0;\n        long commonElementsCount29 = 0;\n        long commonElementsCount30\
    \ = 0;\n        long commonElementsCount31 = 0;\n        long commonElementsCount32\
    \ = 0;\n        long commonElementsCount33 = 0;\n        long commonElementsCount34\
    \ = 0;\n        long commonElementsCount35 = 0;\n        long commonElementsCount36\
    \ = 0;\n        long commonElementsCount37 = 0;\n        long commonElementsCount38\
    \ = 0;\n        long commonElementsCount39 = 0;\n        long commonElementsCount40\
    \ = 0;\n        long commonElementsCount41 = 0;\n        long commonElementsCount42\
    \ = 0;\n        long commonElementsCount43 = 0;\n        long commonElementsCount44\
    \ = 0;\n        long commonElementsCount45 = 0;\n        long commonElementsCount46\
    \ = 0;\n        long commonElementsCount47 = 0;\n        long commonElementsCount48\
    \ = 0;\n        long commonElementsCount49 = 0;\n        long commonElementsCount50\
    \ = 0;\n        long commonElementsCount51 = 0;\n        long commonElementsCount52\
    \ = 0;\n        long commonElementsCount53 = 0;\n        long commonElementsCount54\
    \ = 0;\n        long commonElementsCount55 = 0;\n        long commonElementsCount56",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set1 = new\
    \ HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n\
    \        set2.retainAll(set1);\n        result.addAll(set1);\n        result.addAll(set2);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        Set<Long> set1 = new HashSet<Long>(l1);\n        Set<Long> set2 = new\
    \ HashSet<Long>(l2);\n        set1.retainAll(set2);\n        result.addAll(set1);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        Iterator<Long> it1 = set1.iterator();\n        Iterator<Long> it2 = set2.iterator();\n\
    \        while (it1.hasNext() && it2.hasNext()) {\n            if (it1.next()\
    \ == it2.next()) {\n                result.add(it1.next());\n            }\n \
    \       }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long common = 0;\n        long min1 = Long.MAX_VALUE;\n        long min2\
    \ = Long.MAX_VALUE;\n        for (long l : l1) {\n            if (l < min1) {\n\
    \                min1 = l;\n            }\n        }\n        for (long l : l2)\
    \ {\n            if (l < min2) {\n                min2 = l;\n            }\n \
    \       }\n        for (long l : l1) {\n            if (l == min1) {\n       \
    \         common++;\n            }\n        }\n        for (long l : l2) {\n \
    \           if (l == min2) {\n                common++;\n            }\n     \
    \   }\n        for (long l : l1) {\n            if (l == min1) {\n           \
    \     common++;\n            }\n        }\n        for (long l : l2) {\n     \
    \       if (l == min2) {\n                common++;\n            }\n        }\n\
    \        for (long l : l1) {\n            if (l == min1) {\n                common++;\n\
    \            }\n        }\n        for (long l : l2) {\n            if (l == min2)\
    \ {\n                common++;\n            }\n        }\n        for (long l\
    \ : l1) {\n            if (l == min1) {\n                common++;\n         \
    \   }\n        }\n        for (long l : l2) {\n            if (l == min2) {\n\
    \                common++;\n            }\n        }\n        for (long l : l1)\
    \ {\n            if (l == min1) {\n                common++;\n            }\n\
    \        }\n        for (long l : l2) {\n            if (l == min2) {\n      \
    \          common++;\n            }\n        }\n        for (long l : l1) {\n\
    \            if (l == min1) {\n                common++;\n            }\n    \
    \    }\n        for (long l : l2) {\n            if (l == min2) {\n          \
    \      common++;\n            }\n        }\n        for (long l : l1) {\n    \
    \        if (l == min1) {\n                common++;\n            }\n        }\n\
    \        for (long l : l2) {\n            if (l == min2) {\n                common++;\n\
    \            }\n        }\n        for (long l : l1) {\n            if (l == min1)\
    \ {\n                common++;\n            }\n        }\n        for (long l\
    \ : l2) {\n            if (l == min2) {\n                common++;\n         \
    \   }\n        }\n        for (long l : l1) {\n            if (l == min1) {\n\
    \                common++;\n            }\n        }\n        for (long l : l2)\
    \ {\n            if (l == min2) {\n                common++;\n            }\n\
    \        }\n        for (long l : l1) {\n            if (l == min1) {\n      \
    \          common++;\n            }\n        }\n        for (long l : l2) {\n\
    \            if (l == min2) {\n                common++;\n            }\n    \
    \    }\n        for (long l : l1) {\n            if (l == min1) {\n          \
    \      ", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n   \
    \     for(Long val : set1) {\n            if(set2.contains(val)) {\n         \
    \       result.add(val);\n                set1.remove(val);\n                set2.remove(val);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        Iterator<Long> it1 = set1.iterator();\n \
    \       Iterator<Long> it2 = set2.iterator();\n        while (it1.hasNext() &&\
    \ it2.hasNext()) {\n            if (it1.next() == it2.next()) {\n            \
    \    result.add(it1.next());\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set1 = new\
    \ HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        for(Long\
    \ l : set1) {\n            if(set2.contains(l)) {\n                result.add(l);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long>\
    \ set2 = new HashSet<>(l2);\n        Set<Long> common = new HashSet<>();\n   \
    \     for (Long i : set1) {\n            if (set2.contains(i)) {\n           \
    \     common.add(i);\n            }\n        }\n        for (Long i : set2) {\n\
    \            if (!set1.contains(i)) {\n                common.add(i);\n      \
    \      }\n        }\n        for (Long i : common) {\n            result.add(i);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Set<Long> set1 = new HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n\
    \        for(Long val : set1) {\n            if(set2.contains(val)) {\n      \
    \          result.add(val);\n                set1.remove(val);\n             \
    \   set2.remove(val);\n            }\n        }\n        return result;", "  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set1 = new\
    \ HashSet<>(l1);\n        Set<Long> set2 = new HashSet<>(l2);\n        for(Long\
    \ i : set1) {\n            if(set2.contains(i)) {\n                result.add(i);\n\
    \                set1.remove(i);\n                set2.remove(i);\n          \
    \  }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
