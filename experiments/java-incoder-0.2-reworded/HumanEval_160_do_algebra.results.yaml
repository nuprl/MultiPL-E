language: java
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    throw\
    \ new RuntimeException(\"Invalid operator: \" + op);\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprdyr3wb4.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmprdyr3wb4.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator: \" + op.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1sfxrw0m.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            int operandSize = operand.size();\n           \
    \ int operandIndex = operandSize - operandSize + i;\n            int operandIndex2\
    \ = operandSize - operandIndex - 1;\n            int operandIndex3 = operandSize\
    \ - operandIndex2 - 1;\n            int operandIndex4 = operandSize - operandIndex3\
    \ - 1;\n            int operandIndex5 = operandSize - operandIndex4 - 1;\n   \
    \         int operandIndex6 = operandSize - operandIndex5 - 1;\n            int\
    \ operandIndex7 = operandSize - operandIndex6 - 1;\n            int operandIndex8\
    \ = operandSize - operandIndex7 - 1;\n            int operandIndex9 = operandSize\
    \ - operandIndex8 - 1;\n            int operandIndex10 = operandSize - operandIndex9\
    \ - 1;\n            int operandIndex11 = operandSize - operandIndex10 - 1;\n \
    \           int operandIndex12 = operandSize - operandIndex11 - 1;\n         \
    \   int operandIndex13 = operandSize - operandIndex12 - 1;\n            int operandIndex14\
    \ = operandSize - operandIndex13 - 1;\n            int operandIndex15 = operandSize\
    \ - operandIndex14 - 1;\n            int operandIndex16 = operandSize - operandIndex15\
    \ - 1;\n            int operandIndex17 = operandSize - operandIndex16 - 1;\n \
    \           int operandIndex18 = operandSize - operandIndex17 - 1;\n         \
    \   int operandIndex19 = operandSize - operandIndex18 - 1;\n            int operandIndex20\
    \ = operandSize - operandIndex19 - 1;\n            int operandIndex21 = operandSize\
    \ - operandIndex20 - 1;\n            int operandIndex22 = operandSize - operandIndex21\
    \ - 1;\n            int operandIndex23 = operandSize - operandIndex22 - 1;\n \
    \           int operandIndex24 = operandSize - operandIndex23 - 1;\n         \
    \   int operandIndex25 = operandSize - operandIndex24 - 1;\n            int operandIndex26\
    \ = operandSize - operandIndex25 - 1;\n            int operandIndex27 = operandSize\
    \ - operandIndex26 - 1;\n            int operandIndex28 = operandSize - operandIndex27\
    \ - 1;\n            int operandIndex29 = operandSize - operandIndex28 - 1;\n \
    \           int operandIndex30 = operandSize - operandIndex29 - 1;\n         \
    \   int operandIndex31 = operandSize - operandIndex30 - 1;\n            int operandIndex32\
    \ = operandSize - operandIndex31 - 1;\n            int operandIndex33 = operandSize\
    \ - operandIndex32 - 1;\n            int operandIndex34 = operandSize \n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr3r0_bbm.java:65: error: ';' expected\n            int operandIndex34\
    \ = operandSize \n                                            ^\n/tmp/tmpr3r0_bbm.java:67:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpr3r0_bbm.java:67: error: illegal start of expression\n   \
    \ public static void main(String[] args) {\n           ^\n/tmp/tmpr3r0_bbm.java:67:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmpr3r0_bbm.java:67: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmpr3r0_bbm.java:67:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpr3r0_bbm.java:73: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    result /= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppep2aoyg.java:52)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ opString = op.get(i);\n            long operand1 = operand.get(i);\n       \
    \     long operand2 = operand.get(i + 1);\n            switch(opString) {\n  \
    \              case \"+\":\n                    result += operand1;\n        \
    \            break;\n                case \"-\":\n                    result -=\
    \ operand1;\n                    break;\n                case \"*\":\n       \
    \             result *= operand1;\n                    break;\n              \
    \  case \"//\":\n                    result /= operand1;\n                   \
    \ break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + opString);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpta37e3xh.java:56)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        ArrayList<String> operator = op;\n        ArrayList<Long>\
    \ operand2 = operand;\n        ArrayList<String> operator2 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand3 = new ArrayList<Long>();\n        ArrayList<String>\
    \ operator3 = new ArrayList<String>();\n        ArrayList<Long> operand4 = new\
    \ ArrayList<Long>();\n        ArrayList<String> operator4 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand5 = new ArrayList<Long>();\n        ArrayList<String>\
    \ operator5 = new ArrayList<String>();\n        ArrayList<Long> operand6 = new\
    \ ArrayList<Long>();\n        ArrayList<String> operator6 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand7 = new ArrayList<Long>();\n        ArrayList<String>\
    \ operator7 = new ArrayList<String>();\n        ArrayList<Long> operand8 = new\
    \ ArrayList<Long>();\n        ArrayList<String> operator8 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand9 = new ArrayList<Long>();\n        ArrayList<String>\
    \ operator9 = new ArrayList<String>();\n        ArrayList<Long> operand10 = new\
    \ ArrayList<Long>();\n        ArrayList<String> operator10 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand11 = new ArrayList<Long>();\n        ArrayList<String>\
    \ operator11 = new ArrayList<String>();\n        ArrayList<Long> operand12 = new\
    \ ArrayList<Long>();\n        ArrayList<String> operator12 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand13 = new ArrayList<Long>();\n        ArrayList<String>\
    \ operator13 = new ArrayList<String>();\n        ArrayList<Long> operand14 = new\
    \ ArrayList<Long>();\n        ArrayList<String> operator14 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand15 = new ArrayList<Long>();\n        ArrayList<String>\
    \ operator15 = new ArrayList<String>();\n        ArrayList<Long> operand16 = new\
    \ ArrayList<Long>();\n        ArrayList<String> operator16 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand17 = new ArrayList<Long>();\n        ArrayList<String>\
    \ operator17 = new ArrayList<String>();\n        ArrayList<Long> operand18 = new\
    \ ArrayList<Long>();\n        ArrayList<String> operator18 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand19 = new ArrayList<Long>();\n        ArrayList<String>\
    \ operator19 = new ArrayList<String>();\n        ArrayList<Long> operand20 = new\
    \ ArrayList<Long>();\n        ArrayList<String> operator20 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand21 = new ArrayList<Long>();\n        ArrayList<String>\
    \ operator21 = new ArrayList<String>();\n        ArrayList<Long> operand22 = new\
    \ ArrayList<Long>();\n        ArrayList<String> operator22 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand23 = new ArrayList<Long>();\n        ArrayList<String>\
    \ operator23 = new ArrayList<String>();\n        ArrayList<Long> operand24 = new\
    \ ArrayList<Long>();\n        ArrayList<String> operator24 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand25 = new ArrayList<Long>();\n        ArrayList<String>\
    \ operator25\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiexkh2vs.java:77: error: ';' expected\n        ArrayList<String>\
    \ operator25\n                                    ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ operation = op.get(i);\n            long operand1 = operand.get(i);\n      \
    \      long operand2 = operand.get(i + 1);\n            try {\n              \
    \  switch(operation) {\n                    case \"+\":\n                    \
    \    result = result + operand1;\n                        break;\n           \
    \         case \"-\":\n                        result = result - operand1;\n \
    \                       break;\n                    case \"*\":\n            \
    \            result = result * operand1;\n                        break;\n   \
    \                 case \"//\":\n                        result = result / operand1;\n\
    \                        break;\n                    case \"**\":\n          \
    \              result = result ** operand1;\n                        break;\n\
    \                }\n            } catch(ArithmeticException ex) {\n          \
    \      System.out.println(\"Invalid operation: \" + operation);\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2l7qa8v3.java:48: error: illegal start of expression\n        \
    \                result = result ** operand1;\n                              \
    \           ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    result /= operand.get(i);\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op.get(i));\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd8a8zcku.java:54)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"/\":\n                    result /= operand1;\n                 \
    \   break;\n                case \"%\":\n                    result %= operand1;\n\
    \                    break;\n                case \"**\":\n                  \
    \  result **= operand1;\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator: \" + op);\n      \
    \      }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi9de802m.java:49: error: illegal start of expression\n        \
    \            result **= operand1;\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcqqhvwvk.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpcqqhvwvk.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result **= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppdwbkdfz.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\": result = result + operand.get(i); break;\n  \
    \              case \"-\": result = result - operand.get(i); break;\n        \
    \        case \"*\": result = result * operand.get(i); break;\n              \
    \  case \"//\": result = result / operand.get(i); break;\n                case\
    \ \"**\": result = result ** operand.get(i); break;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf0wznvu1.java:35: error: illegal start of expression\n        \
    \        case \"**\": result = result ** operand.get(i); break;\n            \
    \                                ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    throw new IllegalArgumentException(\"Invalid operator: \"\
    \ + op.get(i));\n            }\n        }\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw1bml4o6.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    result = Math.pow(operand1, result);\n                  \
    \  break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq85r3fbv.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpq85r3fbv.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n/tmp/tmpq85r3fbv.java:47:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \                   result = Math.pow(operand1, result);\n                   \
    \                  ^\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdveim1h9.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpdveim1h9.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"/\":\n                    result /= operand1;\n                 \
    \   break;\n                case \"//\":\n                    result /= operand1;\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand1;\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator: \" + op);\n      \
    \      }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj547brzk.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpj547brzk.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    result = Math.pow(operand1, result);\n                  \
    \  break;\n                default:\n                    throw new RuntimeException(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ehnr63g.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmp_ehnr63g.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n/tmp/tmp_ehnr63g.java:47:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \                   result = Math.pow(operand1, result);\n                   \
    \                  ^\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result **= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmpikwza3.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    result /= operand1;\n                    break;\n       \
    \         default:\n                    System.out.println(\"Invalid operator:\
    \ \" + op);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu1b2vp5s.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpu1b2vp5s.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result = result + operand1;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand1;\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand1;\n                  \
    \  break;\n                case \"//\":\n                    result = result /\
    \ operand1;\n                    break;\n                case \"**\":\n      \
    \              result = result ** operand1;\n                    break;\n    \
    \            default:\n                    System.out.println(\"Invalid operator\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpln2n2rui.java:46: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    result /= operand.get(i);\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfd3axl0a.java:54)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    result /= operand.get(i);\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfd3axl0a.java:54)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ opString = op.get(i);\n            long opValue = Long.parseLong(operand.get(i));\n\
    \            switch(opString) {\n                case \"+\":\n               \
    \     result += opValue;\n                    break;\n                case \"\
    -\":\n                    result -= opValue;\n                    break;\n   \
    \             case \"*\":\n                    result *= opValue;\n          \
    \          break;\n                case \"//\":\n                    result /=\
    \ opValue;\n                    break;\n                case \"**\":\n       \
    \             result **= opValue;\n                    break;\n              \
    \  default:\n                    System.out.println(\"Invalid operator\");\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfk904djd.java:46: error: illegal start of expression\n        \
    \            result **= opValue;\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppq706pj0.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmppq706pj0.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    result = Math.pow(operand1, result);\n                  \
    \  break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq85r3fbv.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpq85r3fbv.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n/tmp/tmpq85r3fbv.java:47:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \                   result = Math.pow(operand1, result);\n                   \
    \                  ^\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    result *= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuu9atujw.java:52)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ operation = op.get(i);\n            long operand1 = operand.get(i);\n      \
    \      long operand2 = operand.get(i + 1);\n            try {\n              \
    \  switch (operation) {\n                    case \"+\":\n                   \
    \     result = result + operand1;\n                        break;\n          \
    \          case \"-\":\n                        result = result - operand1;\n\
    \                        break;\n                    case \"*\":\n           \
    \             result = result * operand1;\n                        break;\n  \
    \                  case \"//\":\n                        result = result / operand1;\n\
    \                        break;\n                    case \"**\":\n          \
    \              result = result ** operand1;\n                        break;\n\
    \                    default:\n                        System.out.println(\"Invalid\
    \ operation\");\n                        break;\n                }\n         \
    \   } catch (ArithmeticException e) {\n                System.out.println(\"Invalid\
    \ operand\");\n                break;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqcyn_s_g.java:48: error: illegal start of expression\n        \
    \                result = result ** operand1;\n                              \
    \           ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + op);\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9zf75w4i.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmp9zf75w4i.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\": result += operand1; break;\n                case\
    \ \"-\": result -= operand1; break;\n                case \"*\": result *= operand1;\
    \ break;\n                case \"//\": result /= operand1; break;\n          \
    \      case \"**\": result *= operand1; result *= operand1; break;\n         \
    \       default: return -1L;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvbo6bw1j.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpvbo6bw1j.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result **= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmpikwza3.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79htvipp.java:51)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ operation = op.get(i);\n            long operand1 = operand.get(i);\n      \
    \      long operand2 = operand.get(i + 1);\n            switch(operation) {\n\
    \                case \"+\":\n                    result = result + operand1;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand1;\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand1;\n                  \
    \  break;\n                case \"//\":\n                    result = result /\
    \ operand1;\n                    break;\n                case \"**\":\n      \
    \              result = result ** operand1;\n                    break;\n    \
    \            default:\n                    System.out.println(\"Invalid operation\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppyl5rlrj.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result = result + operand1;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand1;\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand1;\n                  \
    \  break;\n                case \"//\":\n                    result = result /\
    \ operand1;\n                    break;\n                case \"**\":\n      \
    \              result = result ** operand1;\n                    break;\n    \
    \        }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyoee1a6q.java:46: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    throw new IllegalArgumentException(\"Invalid operator: \"\
    \ + op.get(i));\n            }\n        }\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw1bml4o6.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result **= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmpikwza3.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ operation = op.get(i);\n            long operand1 = operand.get(i);\n      \
    \      long operand2 = operand.get(i + 1);\n            switch(operation) {\n\
    \                case \"+\":\n                    result = result + operand1;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand1;\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand1;\n                  \
    \  break;\n                case \"//\":\n                    result = result /\
    \ operand1;\n                    break;\n                case \"**\":\n      \
    \              result = result ** operand1;\n                    break;\n    \
    \            default:\n                    System.out.println(\"Invalid operation:\
    \ \" + operation);\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbuszndw6.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ oper = op.get(i);\n            long operand1 = operand.get(i);\n           \
    \ switch(oper) {\n                case \"+\":\n                    result = result\
    \ + operand1;\n                    break;\n                case \"-\":\n     \
    \               result = result - operand1;\n                    break;\n    \
    \            case \"*\":\n                    result = result * operand1;\n  \
    \                  break;\n                case \"//\":\n                    result\
    \ = result / operand1;\n                    break;\n                case \"**\"\
    :\n                    result = result ** operand1;\n                    break;\n\
    \                default:\n                    System.out.println(\"Invalid operator\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphwdmqi7f.java:46: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdveim1h9.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpdveim1h9.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            long\
    \ operand2 = operand.get(i + 1);\n            switch(op) {\n                case\
    \ \"+\":\n                    result = result + operand1;\n                  \
    \  break;\n                case \"-\":\n                    result = result -\
    \ operand1;\n                    break;\n                case \"*\":\n       \
    \             result = result * operand1;\n                    break;\n      \
    \          case \"//\":\n                    result = result / operand1;\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = result ** operand1;\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1c9doadq.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result = result + operand1;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand1;\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand1;\n                  \
    \  break;\n                case \"//\":\n                    result = result /\
    \ operand1;\n                    break;\n                case \"**\":\n      \
    \              result = result ** operand1;\n                    break;\n    \
    \            default:\n                    System.out.println(\"Invalid operator\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpln2n2rui.java:46: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\": result = result + operand.get(i); break;\n  \
    \              case \"-\": result = result - operand.get(i); break;\n        \
    \        case \"*\": result = result * operand.get(i); break;\n              \
    \  case \"//\": result = result / operand.get(i); break;\n                case\
    \ \"**\": result = result ** operand.get(i); break;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf0wznvu1.java:35: error: illegal start of expression\n        \
    \        case \"**\": result = result ** operand.get(i); break;\n            \
    \                                ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result = result + operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand.get(i);\n                    break;\n            \
    \    case \"*\":\n                    result = result * operand.get(i);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ = result / operand.get(i);\n                    break;\n                case\
    \ \"**\":\n                    result = result ** operand.get(i);\n          \
    \          break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq93523g1.java:44: error: illegal start of expression\n        \
    \            result = result ** operand.get(i);\n                            \
    \         ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result = result + operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand.get(i);\n                    break;\n            \
    \    case \"*\":\n                    result = result * operand.get(i);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ = result / operand.get(i);\n                    break;\n                case\
    \ \"**\":\n                    result = result ** operand.get(i);\n          \
    \          break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq93523g1.java:44: error: illegal start of expression\n        \
    \            result = result ** operand.get(i);\n                            \
    \         ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdveim1h9.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpdveim1h9.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79htvipp.java:51)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    result /= operand1;\n                    break;\n       \
    \         default:\n                    System.out.println(\"Invalid operator\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqv8d4d1n.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpqv8d4d1n.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result = result + operand1;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand1;\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand1;\n                  \
    \  break;\n                case \"//\":\n                    result = result /\
    \ operand1;\n                    break;\n                case \"**\":\n      \
    \              result = result ** operand1;\n                    break;\n    \
    \            default:\n                    System.out.println(\"Invalid operator\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpln2n2rui.java:46: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + op);\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9zf75w4i.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmp9zf75w4i.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + op);\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9zf75w4i.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmp9zf75w4i.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\": result += operand1; break;\n                case\
    \ \"-\": result -= operand1; break;\n                case \"*\": result *= operand1;\
    \ break;\n                case \"//\": result /= operand1; break;\n          \
    \      case \"**\": result *= operand1; result /= operand1; break;\n         \
    \       default: throw new IllegalArgumentException(\"Invalid operator: \" + op);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cgkp9w2.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmp6cgkp9w2.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79htvipp.java:51)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result **= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmpikwza3.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcqqhvwvk.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpcqqhvwvk.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ opSymbol = op.get(i);\n            int opIndex = op.indexOf(opSymbol);\n   \
    \         int opLength = opSymbol.length();\n            int opIndex2 = op.indexOf(opSymbol,\
    \ opIndex + 1);\n            int opLength2 = opSymbol.length();\n            int\
    \ opIndex3 = op.indexOf(opSymbol, opIndex2 + 1);\n            int opLength3 =\
    \ opSymbol.length();\n            int opIndex4 = op.indexOf(opSymbol, opIndex3\
    \ + 1);\n            int opLength4 = opSymbol.length();\n            int opIndex5\
    \ = op.indexOf(opSymbol, opIndex4 + 1);\n            int opLength5 = opSymbol.length();\n\
    \            int opIndex6 = op.indexOf(opSymbol, opIndex5 + 1);\n            int\
    \ opLength6 = opSymbol.length();\n            int opIndex7 = op.indexOf(opSymbol,\
    \ opIndex6 + 1);\n            int opLength7 = opSymbol.length();\n           \
    \ int opIndex8 = op.indexOf(opSymbol, opIndex7 + 1);\n            int opLength8\
    \ = opSymbol.length();\n            int opIndex9 = op.indexOf(opSymbol, opIndex8\
    \ + 1);\n            int opLength9 = opSymbol.length();\n            int opIndex10\
    \ = op.indexOf(opSymbol, opIndex9 + 1);\n            int opLength10 = opSymbol.length();\n\
    \            int opIndex11 = op.indexOf(opSymbol, opIndex10 + 1);\n          \
    \  int opLength11 = opSymbol.length();\n            int opIndex12 = op.indexOf(opSymbol,\
    \ opIndex11 + 1);\n            int opLength12 = opSymbol.length();\n         \
    \   int opIndex13 = op.indexOf(opSymbol, opIndex12 + 1);\n            int opLength13\
    \ = opSymbol.length();\n            int opIndex14 = op.indexOf(opSymbol, opIndex13\
    \ + 1);\n            int opLength14 = opSymbol.length();\n            int opIndex15\
    \ = op.indexOf(opSymbol, opIndex14 + 1);\n            int opLength15 = opSymbol.length();\n\
    \            int opIndex16 = op.indexOf(opSymbol, opIndex15 + 1);\n          \
    \  int opLength16 = opSymbol.length();\n            int opIndex17 = op.indexOf(opSymbol,\
    \ opIndex16 + 1);\n            int opLength17 = opSymbol.length();\n         \
    \   int opIndex18 = op.indexOf(opSymbol, opIndex17 + 1);\n            int opLength18\
    \ = opSymbol.length();\n            int opIndex19 = op.indexOf(opSymbol, opIndex18\
    \ + 1);\n            int opLength19 = opSymbol.length();\n            int opIndex20\
    \ = op.indexOf(opSymbol\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgpsl5wt9.java:69: error: ')' expected\n            int opIndex20\
    \ = op.indexOf(opSymbol\n                                               ^\n/tmp/tmpgpsl5wt9.java:71:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpgpsl5wt9.java:71: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpgpsl5wt9.java:71: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpgpsl5wt9.java:71: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpgpsl5wt9.java:71:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpgpsl5wt9.java:77: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ oper = op.get(i);\n            long operand1 = operand.get(i);\n           \
    \ switch(oper) {\n                case \"+\":\n                    result += operand1;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand1;\n                    break;\n                case \"*\"\
    :\n                    result *= operand1;\n                    break;\n     \
    \           case \"//\":\n                    result /= operand1;\n          \
    \          break;\n                case \"**\":\n                    result *=\
    \ operand1;\n                    break;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjb7x5o9x.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79htvipp.java:51)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            int operandSize = operand.size();\n           \
    \ int operandIndex = operandSize - i - 1;\n            long operandValue = operand.get(operandIndex);\n\
    \            switch(op) {\n                case \"+\":\n                    result\
    \ += operandValue;\n                    break;\n                case \"-\":\n\
    \                    result -= operandValue;\n                    break;\n   \
    \             case \"*\":\n                    result *= operandValue;\n     \
    \               break;\n                case \"//\":\n                    result\
    \ /= operandValue;\n                    break;\n                case \"**\":\n\
    \                    result *= operandValue;\n                    break;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3bg4vdi5.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmp3bg4vdi5.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppq706pj0.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmppq706pj0.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result = result + operand1;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand1;\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand1;\n                  \
    \  break;\n                case \"//\":\n                    result = result /\
    \ operand1;\n                    break;\n                case \"**\":\n      \
    \              result = result ** operand1;\n                    break;\n    \
    \            default:\n                    System.out.println(\"Invalid operator\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpln2n2rui.java:46: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result **= operand.get(i);\n                    break;\n            }\n   \
    \     }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm04zspjc.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        ArrayList<String> ops = op;\n        ArrayList<Long> operands\
    \ = operand;\n        ArrayList<String> ops_copy = ops;\n        ArrayList<Long>\
    \ operands_copy = operands;\n        ArrayList<String> ops_copy2 = new ArrayList<>();\n\
    \        ArrayList<Long> operands_copy2 = new ArrayList<>();\n        ArrayList<String>\
    \ ops_copy3 = new ArrayList<>();\n        ArrayList<Long> operands_copy3 = new\
    \ ArrayList<>();\n        ArrayList<String> ops_copy4 = new ArrayList<>();\n \
    \       ArrayList<Long> operands_copy4 = new ArrayList<>();\n        ArrayList<String>\
    \ ops_copy5 = new ArrayList<>();\n        ArrayList<Long> operands_copy5 = new\
    \ ArrayList<>();\n        ArrayList<String> ops_copy6 = new ArrayList<>();\n \
    \       ArrayList<Long> operands_copy6 = new ArrayList<>();\n        ArrayList<String>\
    \ ops_copy7 = new ArrayList<>();\n        ArrayList<Long> operands_copy7 = new\
    \ ArrayList<>();\n        ArrayList<String> ops_copy8 = new ArrayList<>();\n \
    \       ArrayList<Long> operands_copy8 = new ArrayList<>();\n        ArrayList<String>\
    \ ops_copy9 = new ArrayList<>();\n        ArrayList<Long> operands_copy9 = new\
    \ ArrayList<>();\n        ArrayList<String> ops_copy10 = new ArrayList<>();\n\
    \        ArrayList<Long> operands_copy10 = new ArrayList<>();\n        ArrayList<String>\
    \ ops_copy11 = new ArrayList<>();\n        ArrayList<Long> operands_copy11 = new\
    \ ArrayList<>();\n        ArrayList<String> ops_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> operands_copy12 = new ArrayList<>();\n        ArrayList<String>\
    \ ops_copy13 = new ArrayList<>();\n        ArrayList<Long> operands_copy13 = new\
    \ ArrayList<>();\n        ArrayList<String> ops_copy14 = new ArrayList<>();\n\
    \        ArrayList<Long> operands_copy14 = new ArrayList<>();\n        ArrayList<String>\
    \ ops_copy15 = new ArrayList<>();\n        ArrayList<Long> operands_copy15 = new\
    \ ArrayList<>();\n        ArrayList<String> ops_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> operands_copy16 = new ArrayList<>();\n        ArrayList<String>\
    \ ops_copy17 = new ArrayList<>();\n        ArrayList<Long> operands_copy17 = new\
    \ ArrayList<>();\n        ArrayList<String> ops_copy18 = new ArrayList<>();\n\
    \        ArrayList<Long> operands_copy18 = new ArrayList<>();\n        ArrayList<String>\
    \ ops_copy19 = new ArrayList<>();\n        ArrayList<Long> operands_copy19 = new\
    \ ArrayList<>();\n        ArrayList<String> ops_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> operands_copy20 = new ArrayList<>();\n        ArrayList<String>\
    \ ops_copy21 = new ArrayList<>();\n        ArrayList<Long> operands_copy21 = new\
    \ ArrayList<>();\n        ArrayList<String> ops_copy22 = new ArrayList<\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuqdgw30i.java:74: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpuqdgw30i.java:75: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmpuqdgw30i.java:75: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmpuqdgw30i.java:75: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpuqdgw30i.java:75: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpuqdgw30i.java:75:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpuqdgw30i.java:81: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ operation = op.get(i);\n            long operand1 = operand.get(i);\n      \
    \      long operand2 = operand.get(i + 1);\n            switch(operation) {\n\
    \                case \"+\":\n                    result = result + operand1;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand1;\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand1;\n                  \
    \  break;\n                case \"//\":\n                    result = result /\
    \ operand1;\n                    break;\n                case \"**\":\n      \
    \              result = result ** operand1;\n                    break;\n    \
    \            default:\n                    System.out.println(\"Invalid operation:\
    \ \" + operation);\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbuszndw6.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppq706pj0.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmppq706pj0.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79htvipp.java:51)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result = result + operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand.get(i);\n                    break;\n            \
    \    case \"*\":\n                    result = result * operand.get(i);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ = result / operand.get(i);\n                    break;\n                case\
    \ \"**\":\n                    result = result ** operand.get(i);\n          \
    \          break;\n            }\n        }\n        return result;\n    }\n \
    \   public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpevp00o56.java:44: error: illegal start of expression\n        \
    \            result = result ** operand.get(i);\n                            \
    \         ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    throw\
    \ new RuntimeException(\"Invalid operator: \" + op);\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprdyr3wb4.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmprdyr3wb4.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppq706pj0.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmppq706pj0.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result = result + operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand.get(i);\n                    break;\n            \
    \    case \"*\":\n                    result = result * operand.get(i);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ = result / operand.get(i);\n                    break;\n                case\
    \ \"**\":\n                    result = result ** operand.get(i);\n          \
    \          break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq93523g1.java:44: error: illegal start of expression\n        \
    \            result = result ** operand.get(i);\n                            \
    \         ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result **= operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphl07su4k.java:46: error: illegal start of expression\n        \
    \            result **= operand1;\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ operation = op.get(i);\n            long operand1 = operand.get(i);\n      \
    \      long operand2 = operand.get(i + 1);\n            switch(operation) {\n\
    \                case \"+\":\n                    result = result + operand1;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand1;\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand1;\n                  \
    \  break;\n                case \"//\":\n                    result = result /\
    \ operand1;\n                    break;\n                case \"**\":\n      \
    \              result = result ** operand1;\n                    break;\n    \
    \            default:\n                    System.out.println(\"Invalid operation\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppyl5rlrj.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        ArrayList<String> ops = op;\n        ArrayList<Long> operands\
    \ = operand;\n        ArrayList<String> op1 = new ArrayList<String>();\n     \
    \   ArrayList<Long> operand1 = new ArrayList<Long>();\n        ArrayList<String>\
    \ op2 = new ArrayList<String>();\n        ArrayList<Long> operand2 = new ArrayList<Long>();\n\
    \        ArrayList<String> op3 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand3 = new ArrayList<Long>();\n        ArrayList<String> op4 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand4 = new ArrayList<Long>();\n        ArrayList<String>\
    \ op5 = new ArrayList<String>();\n        ArrayList<Long> operand5 = new ArrayList<Long>();\n\
    \        ArrayList<String> op6 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand6 = new ArrayList<Long>();\n        ArrayList<String> op7 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand7 = new ArrayList<Long>();\n        ArrayList<String>\
    \ op8 = new ArrayList<String>();\n        ArrayList<Long> operand8 = new ArrayList<Long>();\n\
    \        ArrayList<String> op9 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand9 = new ArrayList<Long>();\n        ArrayList<String> op10 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand10 = new ArrayList<Long>();\n        ArrayList<String>\
    \ op11 = new ArrayList<String>();\n        ArrayList<Long> operand11 = new ArrayList<Long>();\n\
    \        ArrayList<String> op12 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand12 = new ArrayList<Long>();\n        ArrayList<String> op13 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand13 = new ArrayList<Long>();\n        ArrayList<String>\
    \ op14 = new ArrayList<String>();\n        ArrayList<Long> operand14 = new ArrayList<Long>();\n\
    \        ArrayList<String> op15 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand15 = new ArrayList<Long>();\n        ArrayList<String> op16 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand16 = new ArrayList<Long>();\n        ArrayList<String>\
    \ op17 = new ArrayList<String>();\n        ArrayList<Long> operand17 = new ArrayList<Long>();\n\
    \        ArrayList<String> op18 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand18 = new ArrayList<Long>();\n        ArrayList<String> op19 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand19 = new ArrayList<Long>();\n        ArrayList<String>\
    \ op20 = new ArrayList<String>();\n        ArrayList<Long> operand20 = new ArrayList<Long>();\n\
    \        ArrayList<String> op21 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand21 = new ArrayList<Long>();\n        ArrayList<String> op22 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand22 = new ArrayList<Long>();\n        ArrayList<String>\
    \ op23 = new ArrayList<String>();\n        ArrayList<Long> operand23 = new ArrayList<Long>();\n\
    \        ArrayList<String> op24\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiakhg46p.java:77: error: ';' expected\n        ArrayList<String>\
    \ op24\n                              ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            int operandSize = operand.size();\n           \
    \ int operandIndex = operandSize - i - 1;\n            long operandValue = operand.get(operandIndex);\n\
    \            switch(op) {\n                case \"+\":\n                    result\
    \ += operandValue;\n                    break;\n                case \"-\":\n\
    \                    result -= operandValue;\n                    break;\n   \
    \             case \"*\":\n                    result *= operandValue;\n     \
    \               break;\n                case \"//\":\n                    result\
    \ /= operandValue;\n                    break;\n                case \"**\":\n\
    \                    result *= operandValue;\n                    break;\n   \
    \             default:\n                    System.out.println(\"Invalid operator\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplbhvcsib.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmplbhvcsib.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcqqhvwvk.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpcqqhvwvk.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    result /= operand.get(i);\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfd3axl0a.java:54)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\": result += operand.get(i);\n                 \
    \   break;\n                case \"-\": result -= operand.get(i);\n          \
    \          break;\n                case \"*\": result *= operand.get(i);\n   \
    \                 break;\n                case \"//\": result /= operand.get(i);\n\
    \                    break;\n                case \"**\": result *= operand.get(i);\n\
    \                    break;\n                default: throw new IllegalArgumentException(\"\
    Invalid operator: \" + op.get(i));\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeomy1aot.java:47)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    throw new IllegalArgumentException(\"Invalid operator: \"\
    \ + op.get(i));\n            }\n        }\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw1bml4o6.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result = result + operand1;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand1;\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand1;\n                  \
    \  break;\n                case \"//\":\n                    result = result /\
    \ operand1;\n                    break;\n                case \"**\":\n      \
    \              result = result ** operand1;\n                    break;\n    \
    \            default:\n                    System.out.println(\"Invalid operator:\
    \ \" + op);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxxi_mfi.java:46: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ operation = op.get(i);\n            long operand1 = operand.get(i);\n      \
    \      long operand2 = operand.get(i + 1);\n            switch(operation) {\n\
    \                case \"+\":\n                    result = result + operand1;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand1;\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand1;\n                  \
    \  break;\n                case \"//\":\n                    result = result /\
    \ operand1;\n                    break;\n                case \"**\":\n      \
    \              result = result ** operand1;\n                    break;\n    \
    \            default:\n                    System.out.println(\"Invalid operation\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppyl5rlrj.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79htvipp.java:51)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ operation = op.get(i);\n            long operand1 = operand.get(i);\n      \
    \      long operand2 = operand.get(i + 1);\n            switch(operation) {\n\
    \                case \"+\": result = result + operand1; break;\n            \
    \    case \"-\": result = result - operand1; break;\n                case \"*\"\
    : result = result * operand1; break;\n                case \"//\": result = result\
    \ / operand1; break;\n                case \"**\": result = result ** operand1;\
    \ break;\n                default: return -1;\n            }\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbh1t5avn.java:38: error: illegal start of expression\n        \
    \        case \"**\": result = result ** operand1; break;\n                  \
    \                          ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\": result = result + operand.get(i); break;\n  \
    \              case \"-\": result = result - operand.get(i); break;\n        \
    \        case \"*\": result = result * operand.get(i); break;\n              \
    \  case \"//\": result = result / operand.get(i); break;\n                case\
    \ \"**\": result = result ** operand.get(i); break;\n                default:\
    \ return -1;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph1cz_4w1.java:35: error: illegal start of expression\n        \
    \        case \"**\": result = result ** operand.get(i); break;\n            \
    \                                ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    result = Math.pow(result, operand1);\n                  \
    \  break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp34p5jd_b.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmp34p5jd_b.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n/tmp/tmp34p5jd_b.java:47:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \                   result = Math.pow(result, operand1);\n                   \
    \                  ^\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ oper = op.get(i);\n            long operand1 = operand.get(i);\n           \
    \ switch(oper) {\n                case \"+\":\n                    result = result\
    \ + operand1;\n                    break;\n                case \"-\":\n     \
    \               result = result - operand1;\n                    break;\n    \
    \            case \"*\":\n                    result = result * operand1;\n  \
    \                  break;\n                case \"/\":\n                    result\
    \ = result / operand1;\n                    break;\n                case \"//\"\
    :\n                    result = result / operand1;\n                    break;\n\
    \                case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6egrja4.java:49: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    throw new RuntimeException(\"Invalid operator: \" + op.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp920n1_88.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ operation = op.get(i);\n            long operand1 = operand.get(i);\n      \
    \      switch(operation) {\n                case \"+\": result += operand1; break;\n\
    \                case \"-\": result -= operand1; break;\n                case\
    \ \"*\": result *= operand1; break;\n                case \"//\": result /= operand1;\
    \ break;\n                case \"**\": result *= operand1; result /= operand1;\
    \ break;\n                default: throw new IllegalArgumentException(\"Invalid\
    \ operation: \" + operation);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp062ppvvn.java:44)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    result /= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppep2aoyg.java:52)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppq706pj0.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmppq706pj0.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            int operandSize = operand.size();\n           \
    \ int operandIndex = operandSize - i - 1;\n            long operandValue = operand.get(operandIndex);\n\
    \            switch(op) {\n                case \"+\":\n                    result\
    \ += operandValue;\n                    break;\n                case \"-\":\n\
    \                    result -= operandValue;\n                    break;\n   \
    \             case \"*\":\n                    result *= operandValue;\n     \
    \               break;\n                case \"//\":\n                    result\
    \ /= operandValue;\n                    break;\n                case \"**\":\n\
    \                    result *= operandValue;\n                    break;\n   \
    \             default:\n                    System.out.println(\"Invalid operator\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplbhvcsib.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmplbhvcsib.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ operation = op.get(i);\n            long operand1 = operand.get(i);\n      \
    \      long operand2 = operand.get(i + 1);\n            switch(operation) {\n\
    \                case \"+\":\n                    result = result + operand1;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand1;\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand1;\n                  \
    \  break;\n                case \"//\":\n                    result = result /\
    \ operand1;\n                    break;\n                case \"**\":\n      \
    \              result = result ** operand1;\n                    break;\n    \
    \        }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc5wp0xs3.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\": result += operand1; break;\n                case\
    \ \"-\": result -= operand1; break;\n                case \"*\": result *= operand1;\
    \ break;\n                case \"//\": result /= operand1; break;\n          \
    \      case \"**\": result *= operand1; result *= operand1; break;\n         \
    \       default: System.out.println(\"Invalid operator: \" + op);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3slir9c2.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmp3slir9c2.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            long\
    \ operand2 = operand.get(i + 1);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"/\":\n    \
    \                result /= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9l6joi34.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmp9l6joi34.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79htvipp.java:51)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    result *= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuu9atujw.java:52)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79htvipp.java:51)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79htvipp.java:51)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79htvipp.java:51)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result = result + operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand.get(i);\n                    break;\n            \
    \    case \"*\":\n                    result = result * operand.get(i);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ = result / operand.get(i);\n                    break;\n                case\
    \ \"**\":\n                    result = result ** operand.get(i);\n          \
    \          break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq93523g1.java:44: error: illegal start of expression\n        \
    \            result = result ** operand.get(i);\n                            \
    \         ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    result /= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppep2aoyg.java:52)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result **= operand1;\n\
    \                    break;\n                default:\n                    throw\
    \ new RuntimeException(\"Invalid operator: \" + op);\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0o_qmhm_.java:46: error: illegal start of expression\n        \
    \            result **= operand1;\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        ArrayList<String> operator = new ArrayList<String>();\n\
    \        ArrayList<Long> operand2 = new ArrayList<Long>();\n        ArrayList<String>\
    \ operand3 = new ArrayList<String>();\n        ArrayList<String> operand4 = new\
    \ ArrayList<String>();\n        ArrayList<String> operand5 = new ArrayList<String>();\n\
    \        ArrayList<String> operand6 = new ArrayList<String>();\n        ArrayList<String>\
    \ operand7 = new ArrayList<String>();\n        ArrayList<String> operand8 = new\
    \ ArrayList<String>();\n        ArrayList<String> operand9 = new ArrayList<String>();\n\
    \        ArrayList<String> operand10 = new ArrayList<String>();\n        ArrayList<String>\
    \ operand11 = new ArrayList<String>();\n        ArrayList<String> operand12 =\
    \ new ArrayList<String>();\n        ArrayList<String> operand13 = new ArrayList<String>();\n\
    \        ArrayList<String> operand14 = new ArrayList<String>();\n        ArrayList<String>\
    \ operand15 = new ArrayList<String>();\n        ArrayList<String> operand16 =\
    \ new ArrayList<String>();\n        ArrayList<String> operand17 = new ArrayList<String>();\n\
    \        ArrayList<String> operand18 = new ArrayList<String>();\n        ArrayList<String>\
    \ operand19 = new ArrayList<String>();\n        ArrayList<String> operand20 =\
    \ new ArrayList<String>();\n        ArrayList<String> operand21 = new ArrayList<String>();\n\
    \        ArrayList<String> operand22 = new ArrayList<String>();\n        ArrayList<String>\
    \ operand23 = new ArrayList<String>();\n        ArrayList<String> operand24 =\
    \ new ArrayList<String>();\n        ArrayList<String> operand25 = new ArrayList<String>();\n\
    \        ArrayList<String> operand26 = new ArrayList<String>();\n        ArrayList<String>\
    \ operand27 = new ArrayList<String>();\n        ArrayList<String> operand28 =\
    \ new ArrayList<String>();\n        ArrayList<String> operand29 = new ArrayList<String>();\n\
    \        ArrayList<String> operand30 = new ArrayList<String>();\n        ArrayList<String>\
    \ operand31 = new ArrayList<String>();\n        ArrayList<String> operand32 =\
    \ new ArrayList<String>();\n        ArrayList<String> operand33 = new ArrayList<String>();\n\
    \        ArrayList<String> operand34 = new ArrayList<String>();\n        ArrayList<String>\
    \ operand35 = new ArrayList<String>();\n        ArrayList<String> operand36 =\
    \ new ArrayList<String>();\n        ArrayList<String> operand37 = new ArrayList<String>();\n\
    \        ArrayList<String> operand38 = new ArrayList<String>();\n        ArrayList<String>\
    \ operand39 = new ArrayList<String>();\n        ArrayList<String> operand40 =\
    \ new ArrayList<String>();\n        ArrayList<String> operand41 = new ArrayList<String>();\n\
    \        ArrayList<String> operand42 = new ArrayList<String>();\n        ArrayList<String>\
    \ operand43 = new ArrayList<String>();\n        ArrayList<String> operand44 =\
    \ new ArrayList<String>();\n        ArrayList<String> operand45 = new ArrayList<String>();\n\
    \        ArrayList<String> operand46 = new ArrayList<String>();\n        ArrayList<String>\
    \ operand47 = new ArrayList<String>();\n        ArrayList<String> operand48 =\
    \ new ArrayList<String>();\n        ArrayList<String> operand49 = new ArrayList<String>();\n\
    \        ArrayList<String> operand50 = new ArrayList<String>();\n        \n  \
    \  }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprfwm1cou.java:80: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result **= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmpikwza3.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\": result = result + operand.get(i); break;\n  \
    \              case \"-\": result = result - operand.get(i); break;\n        \
    \        case \"*\": result = result * operand.get(i); break;\n              \
    \  case \"//\": result = result / operand.get(i); break;\n                case\
    \ \"**\": result = result ** operand.get(i); break;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf0wznvu1.java:35: error: illegal start of expression\n        \
    \        case \"**\": result = result ** operand.get(i); break;\n            \
    \                                ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\": result += operand.get(i); break;\n          \
    \      case \"-\": result -= operand.get(i); break;\n                case \"*\"\
    : result *= operand.get(i); break;\n                case \"//\": result /= operand.get(i);\
    \ break;\n                case \"**\": result *= operand.get(i); break;\n    \
    \        }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd4vd0bi0.java:41)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdveim1h9.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpdveim1h9.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ oper = op.get(i);\n            long operand1 = operand.get(i);\n           \
    \ switch(oper) {\n                case \"+\":\n                    result += operand1;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand1;\n                    break;\n                case \"*\"\
    :\n                    result *= operand1;\n                    break;\n     \
    \           case \"//\":\n                    result /= operand1;\n          \
    \          break;\n                case \"**\":\n                    result *=\
    \ operand1;\n                    break;\n                default:\n          \
    \          System.out.println(\"Invalid operator\");\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxj8onctz.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    result /= operand.get(i);\n\
    \                    break;\n                default:\n                    throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + op.get(i));\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctbyjn91.java:54)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    throw new IllegalArgumentException(\"Invalid operator: \"\
    \ + op.get(i));\n            }\n        }\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw1bml4o6.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdveim1h9.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpdveim1h9.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79htvipp.java:51)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdveim1h9.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpdveim1h9.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    throw new RuntimeException(\"Invalid operator: \" + op.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp920n1_88.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    result /= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppep2aoyg.java:52)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        ArrayList<String> ops = op;\n        ArrayList<Long> operands\
    \ = operand;\n        ArrayList<String> op1 = ops.get(0);\n        ArrayList<Long>\
    \ operand1 = operands.get(0);\n        ArrayList<String> op2 = ops.get(1);\n \
    \       ArrayList<Long> operand2 = operands.get(1);\n        ArrayList<String>\
    \ op3 = ops.get(2);\n        ArrayList<Long> operand3 = operands.get(2);\n   \
    \     ArrayList<String> op4 = ops.get(3);\n        ArrayList<Long> operand4 =\
    \ operands.get(3);\n        ArrayList<String> op5 = ops.get(4);\n        ArrayList<Long>\
    \ operand5 = operands.get(4);\n        ArrayList<String> op6 = ops.get(5);\n \
    \       ArrayList<Long> operand6 = operands.get(5);\n        ArrayList<String>\
    \ op7 = ops.get(6);\n        ArrayList<Long> operand7 = operands.get(6);\n   \
    \     ArrayList<String> op8 = ops.get(7);\n        ArrayList<Long> operand8 =\
    \ operands.get(7);\n        ArrayList<String> op9 = ops.get(8);\n        ArrayList<Long>\
    \ operand9 = operands.get(8);\n        ArrayList<String> op10 = ops.get(9);\n\
    \        ArrayList<Long> operand10 = operands.get(9);\n        ArrayList<String>\
    \ op11 = ops.get(10);\n        ArrayList<Long> operand11 = operands.get(10);\n\
    \        ArrayList<String> op12 = ops.get(11);\n        ArrayList<Long> operand12\
    \ = operands.get(11);\n        ArrayList<String> op13 = ops.get(12);\n       \
    \ ArrayList<Long> operand13 = operands.get(12);\n        ArrayList<String> op14\
    \ = ops.get(13);\n        ArrayList<Long> operand14 = operands.get(13);\n    \
    \    ArrayList<String> op15 = ops.get(14);\n        ArrayList<Long> operand15\
    \ = operands.get(14);\n        ArrayList<String> op16 = ops.get(15);\n       \
    \ ArrayList<Long> operand16 = operands.get(15);\n        ArrayList<String> op17\
    \ = ops.get(16);\n        ArrayList<Long> operand17 = operands.get(16);\n    \
    \    ArrayList<String> op18 = ops.get(17);\n        ArrayList<Long> operand18\
    \ = operands.get(17);\n        ArrayList<String> op19 = ops.get(18);\n       \
    \ ArrayList<Long> operand19 = operands.get(18);\n        ArrayList<String> op20\
    \ = ops.get(19);\n        ArrayList<Long> operand20 = operands.get(19);\n    \
    \    ArrayList<String> op21 = ops.get(20);\n        ArrayList<Long> operand21\
    \ = operands.get(20);\n        ArrayList<String> op22 = ops.get(21);\n       \
    \ ArrayList<Long> operand22 = operands.get(21);\n        ArrayList<String> op23\
    \ = ops.get(22);\n        ArrayList<Long> operand23 = operands.get(22);\n    \
    \    ArrayList<String> op24 = ops.get(23);\n        ArrayList<Long> operand24\
    \ = operands.get(23);\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo_y5b47k.java:31: error: incompatible types: String cannot be converted\
    \ to ArrayList<String>\n        ArrayList<String> op1 = ops.get(0);\n        \
    \                               ^\n/tmp/tmpo_y5b47k.java:32: error: incompatible\
    \ types: Long cannot be converted to ArrayList<Long>\n        ArrayList<Long>\
    \ operand1 = operands.get(0);\n                                              \
    \ ^\n/tmp/tmpo_y5b47k.java:33: error: incompatible types: String cannot be converted\
    \ to ArrayList<String>\n        ArrayList<String> op2 = ops.get(1);\n        \
    \                               ^\n/tmp/tmpo_y5b47k.java:34: error: incompatible\
    \ types: Long cannot be converted to ArrayList<Long>\n        ArrayList<Long>\
    \ operand2 = operands.get(1);\n                                              \
    \ ^\n/tmp/tmpo_y5b47k.java:35: error: incompatible types: String cannot be converted\
    \ to ArrayList<String>\n        ArrayList<String> op3 = ops.get(2);\n        \
    \                               ^\n/tmp/tmpo_y5b47k.java:36: error: incompatible\
    \ types: Long cannot be converted to ArrayList<Long>\n        ArrayList<Long>\
    \ operand3 = operands.get(2);\n                                              \
    \ ^\n/tmp/tmpo_y5b47k.java:37: error: incompatible types: String cannot be converted\
    \ to ArrayList<String>\n        ArrayList<String> op4 = ops.get(3);\n        \
    \                               ^\n/tmp/tmpo_y5b47k.java:38: error: incompatible\
    \ types: Long cannot be converted to ArrayList<Long>\n        ArrayList<Long>\
    \ operand4 = operands.get(3);\n                                              \
    \ ^\n/tmp/tmpo_y5b47k.java:39: error: incompatible types: String cannot be converted\
    \ to ArrayList<String>\n        ArrayList<String> op5 = ops.get(4);\n        \
    \                               ^\n/tmp/tmpo_y5b47k.java:40: error: incompatible\
    \ types: Long cannot be converted to ArrayList<Long>\n        ArrayList<Long>\
    \ operand5 = operands.get(4);\n                                              \
    \ ^\n/tmp/tmpo_y5b47k.java:41: error: incompatible types: String cannot be converted\
    \ to ArrayList<String>\n        ArrayList<String> o"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result = result + operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand.get(i);\n                    break;\n            \
    \    case \"*\":\n                    result = result * operand.get(i);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ = result / operand.get(i);\n                    break;\n                case\
    \ \"**\":\n                    result = result ** operand.get(i);\n          \
    \          break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq93523g1.java:44: error: illegal start of expression\n        \
    \            result = result ** operand.get(i);\n                            \
    \         ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79htvipp.java:51)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result **= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmpikwza3.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdveim1h9.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpdveim1h9.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        ArrayList<String> ops = op;\n        ArrayList<Long> operands\
    \ = operand;\n        ArrayList<String> op1 = new ArrayList<String>();\n     \
    \   ArrayList<Long> operand1 = new ArrayList<Long>();\n        ArrayList<String>\
    \ op2 = new ArrayList<String>();\n        ArrayList<Long> operand2 = new ArrayList<Long>();\n\
    \        ArrayList<String> op3 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand3 = new ArrayList<Long>();\n        ArrayList<String> op4 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand4 = new ArrayList<Long>();\n        ArrayList<String>\
    \ op5 = new ArrayList<String>();\n        ArrayList<Long> operand5 = new ArrayList<Long>();\n\
    \        ArrayList<String> op6 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand6 = new ArrayList<Long>();\n        ArrayList<String> op7 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand7 = new ArrayList<Long>();\n        ArrayList<String>\
    \ op8 = new ArrayList<String>();\n        ArrayList<Long> operand8 = new ArrayList<Long>();\n\
    \        ArrayList<String> op9 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand9 = new ArrayList<Long>();\n        ArrayList<String> op10 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand10 = new ArrayList<Long>();\n        ArrayList<String>\
    \ op11 = new ArrayList<String>();\n        ArrayList<Long> operand11 = new ArrayList<Long>();\n\
    \        ArrayList<String> op12 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand12 = new ArrayList<Long>();\n        ArrayList<String> op13 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand13 = new ArrayList<Long>();\n        ArrayList<String>\
    \ op14 = new ArrayList<String>();\n        ArrayList<Long> operand14 = new ArrayList<Long>();\n\
    \        ArrayList<String> op15 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand15 = new ArrayList<Long>();\n        ArrayList<String> op16 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand16 = new ArrayList<Long>();\n        ArrayList<String>\
    \ op17 = new ArrayList<String>();\n        ArrayList<Long> operand17 = new ArrayList<Long>();\n\
    \        ArrayList<String> op18 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand18 = new ArrayList<Long>();\n        ArrayList<String> op19 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand19 = new ArrayList<Long>();\n        ArrayList<String>\
    \ op20 = new ArrayList<String>();\n        ArrayList<Long> operand20 = new ArrayList<Long>();\n\
    \        ArrayList<String> op21 = new ArrayList<String>();\n        ArrayList<Long>\
    \ operand21 = new ArrayList<Long>();\n        ArrayList<String> op22 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand22 = new ArrayList<Long>();\n        ArrayList<String>\
    \ op23 = new ArrayList<String>();\n        ArrayList<Long> operand23 = new ArrayList<Long>();\n\
    \        ArrayList<String> op24\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiakhg46p.java:77: error: ';' expected\n        ArrayList<String>\
    \ op24\n                              ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            int operandSize = operand.size();\n           \
    \ int operandIndex = 0;\n            for(int j = 0; j < operandSize; j++) {\n\
    \                long operandValue = operand.get(operandIndex);\n            \
    \    switch(op) {\n                    case \"+\":\n                        result\
    \ += operandValue;\n                        break;\n                    case \"\
    -\":\n                        result -= operandValue;\n                      \
    \  break;\n                    case \"*\":\n                        result *=\
    \ operandValue;\n                        break;\n                    case \"//\"\
    :\n                        result /= operandValue;\n                        break;\n\
    \                    case \"**\":\n                        result **= operandValue;\n\
    \                        break;\n                    default:\n              \
    \          System.out.println(\"Invalid operator: \" + op);\n                \
    \        break;\n                }\n                operandIndex++;\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpttx8lu4q.java:49: error: illegal start of expression\n        \
    \                result **= operandValue;\n                                ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result = result + operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand.get(i);\n                    break;\n            \
    \    case \"*\":\n                    result = result * operand.get(i);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ = result / operand.get(i);\n                    break;\n                case\
    \ \"**\":\n                    result = result ** operand.get(i);\n          \
    \          break;\n            }\n        }\n        return result;\n    }\n \
    \   public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpevp00o56.java:44: error: illegal start of expression\n        \
    \            result = result ** operand.get(i);\n                            \
    \         ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    throw new IllegalArgumentException(\"Invalid operator: \"\
    \ + op.get(i));\n            }\n        }\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw1bml4o6.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        ArrayList<String> operator = new ArrayList<String>();\n\
    \        ArrayList<Long> operand2 = new ArrayList<Long>();\n        ArrayList<String>\
    \ operator2 = new ArrayList<String>();\n        ArrayList<Long> operand3 = new\
    \ ArrayList<Long>();\n        ArrayList<String> operator3 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand4 = new ArrayList<Long>();\n        ArrayList<String>\
    \ operator4 = new ArrayList<String>();\n        ArrayList<Long> operand5 = new\
    \ ArrayList<Long>();\n        ArrayList<String> operator5 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand6 = new ArrayList<Long>();\n        ArrayList<String>\
    \ operator6 = new ArrayList<String>();\n        ArrayList<Long> operand7 = new\
    \ ArrayList<Long>();\n        ArrayList<String> operator7 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand8 = new ArrayList<Long>();\n        ArrayList<String>\
    \ operator8 = new ArrayList<String>();\n        ArrayList<Long> operand9 = new\
    \ ArrayList<Long>();\n        ArrayList<String> operator9 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand10 = new ArrayList<Long>();\n        ArrayList<String>\
    \ operator10 = new ArrayList<String>();\n        ArrayList<Long> operand11 = new\
    \ ArrayList<Long>();\n        ArrayList<String> operator11 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand12 = new ArrayList<Long>();\n        ArrayList<String>\
    \ operator12 = new ArrayList<String>();\n        ArrayList<Long> operand13 = new\
    \ ArrayList<Long>();\n        ArrayList<String> operator13 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand14 = new ArrayList<Long>();\n        ArrayList<String>\
    \ operator14 = new ArrayList<String>();\n        ArrayList<Long> operand15 = new\
    \ ArrayList<Long>();\n        ArrayList<String> operator15 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand16 = new ArrayList<Long>();\n        ArrayList<String>\
    \ operator16 = new ArrayList<String>();\n        ArrayList<Long> operand17 = new\
    \ ArrayList<Long>();\n        ArrayList<String> operator17 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand18 = new ArrayList<Long>();\n        ArrayList<String>\
    \ operator18 = new ArrayList<String>();\n        ArrayList<Long> operand19 = new\
    \ ArrayList<Long>();\n        ArrayList<String> operator19 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand20 = new ArrayList<Long>();\n        ArrayList<String>\
    \ operator20 = new ArrayList<String>();\n        ArrayList<Long> operand21 = new\
    \ ArrayList<Long>();\n        ArrayList<String> operator21 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand22 = new ArrayList<Long>();\n        ArrayList<String>\
    \ operator22 = new ArrayList<String>();\n        ArrayList<Long> operand23 = new\
    \ ArrayList<Long>();\n        ArrayList<String> operator23 = new ArrayList<String>();\n\
    \        ArrayList<Long> operand24 = new ArrayList<Long>();\n        ArrayList<String>\
    \ operator24 = new ArrayList<String>();\n        ArrayList<Long> operand25 = new\
    \ ArrayList<Long>();\n        ArrayList<\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp63o59_vx.java:78: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmp63o59_vx.java:77: error: not a statement\n        ArrayList<\n       \
    \          ^\n/tmp/tmp63o59_vx.java:78: error: ';' expected\n    }\n     ^\n/tmp/tmp63o59_vx.java:79:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp63o59_vx.java:79: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp63o59_vx.java:79: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp63o59_vx.java:79: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp63o59_vx.java:85: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result = result + operand1;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand1;\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand1;\n                  \
    \  break;\n                case \"//\":\n                    result = result /\
    \ operand1;\n                    break;\n                case \"**\":\n      \
    \              result = result ** operand1;\n                    break;\n    \
    \            default:\n                    System.out.println(\"Invalid operator\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpln2n2rui.java:46: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ operation = op.get(i);\n            long operand1 = operand.get(i);\n      \
    \      switch(operation) {\n                case \"+\":\n                    result\
    \ += operand1;\n                    break;\n                case \"-\":\n    \
    \                result -= operand1;\n                    break;\n           \
    \     case \"*\":\n                    result *= operand1;\n                 \
    \   break;\n                case \"//\":\n                    result /= operand1;\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand1;\n                    result = Math.pow(operand1, result);\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp244e1ah7.java:47: error: incompatible types: possible lossy conversion\
    \ from double to long\n                    result = Math.pow(operand1, result);\n\
    \                                     ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"/\":\n                    result /= operand1;\n                 \
    \   break;\n                case \"//\":\n                    result /= operand1;\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand1;\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4yx4sww8.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmp4yx4sww8.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result = result + operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand.get(i);\n                    break;\n            \
    \    case \"*\":\n                    result = result * operand.get(i);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ = result / operand.get(i);\n                    break;\n                case\
    \ \"**\":\n                    result = result ** operand.get(i);\n          \
    \          break;\n            }\n        }\n        return result;\n    }\n \
    \   public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpevp00o56.java:44: error: illegal start of expression\n        \
    \            result = result ** operand.get(i);\n                            \
    \         ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    throw new IllegalArgumentException(\"Invalid operator: \"\
    \ + op.get(i));\n            }\n        }\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw1bml4o6.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + op);\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9zf75w4i.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmp9zf75w4i.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw0pgizzz.java:54)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\": result += operand1; break;\n                case\
    \ \"-\": result -= operand1; break;\n                case \"*\": result *= operand1;\
    \ break;\n                case \"//\": result /= operand1; break;\n          \
    \      case \"**\": result *= operand1; result /= operand1; break;\n         \
    \       default: throw new IllegalArgumentException(\"Invalid operator: \" + op);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6cgkp9w2.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmp6cgkp9w2.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    result /= operand1;\n                    break;\n       \
    \         default:\n                    System.out.println(\"Invalid operator\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqv8d4d1n.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpqv8d4d1n.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79htvipp.java:51)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79htvipp.java:51)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    throw new IllegalArgumentException(\"Invalid operator: \"\
    \ + op.get(i));\n            }\n        }\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw1bml4o6.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    result = Math.pow(operand1, result);\n                  \
    \  break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq85r3fbv.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpq85r3fbv.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n/tmp/tmpq85r3fbv.java:47:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \                   result = Math.pow(operand1, result);\n                   \
    \                  ^\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            int operandSize = operand.size();\n           \
    \ int operandIndex = 0;\n            long operandValue = 0;\n            while(operandIndex\
    \ < operandSize && operand.get(operandIndex) < 0) {\n                operandIndex++;\n\
    \            }\n            operandValue = operand.get(operandIndex);\n      \
    \      switch(op) {\n                case \"+\":\n                    result =\
    \ result + operandValue;\n                    break;\n                case \"\
    -\":\n                    result = result - operandValue;\n                  \
    \  break;\n                case \"*\":\n                    result = result *\
    \ operandValue;\n                    break;\n                case \"//\":\n  \
    \                  result = result / operandValue;\n                    break;\n\
    \                case \"**\":\n                    result = result ** operandValue;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1h7hyrkb.java:52: error: illegal start of expression\n        \
    \            result = result ** operandValue;\n                              \
    \       ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result = result + operand1;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand1;\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand1;\n                  \
    \  break;\n                case \"//\":\n                    result = result /\
    \ operand1;\n                    break;\n                case \"**\":\n      \
    \              result = result ** operand1;\n                    break;\n    \
    \        }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyoee1a6q.java:46: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    throw new RuntimeException(\"Invalid operator: \" + op.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp920n1_88.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79htvipp.java:51)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79htvipp.java:51)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ operation = op.get(i);\n            long operand1 = operand.get(i);\n      \
    \      long operand2 = operand.get(i + 1);\n            try {\n              \
    \  switch(operation) {\n                    case \"+\": result = result + operand1;\
    \ break;\n                    case \"-\": result = result - operand1; break;\n\
    \                    case \"*\": result = result * operand1; break;\n        \
    \            case \"//\": result = result / operand1; break;\n               \
    \     case \"**\": result = result ** operand1; break;\n                    default:\
    \ return -1;\n                }\n            } catch(ArithmeticException ex) {\n\
    \                return -1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpctqq4sg1.java:39: error: illegal start of expression\n        \
    \            case \"**\": result = result ** operand1; break;\n              \
    \                                  ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    result /= operand1;\n                    break;\n       \
    \         default:\n                    System.out.println(\"Invalid operator\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqv8d4d1n.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpqv8d4d1n.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdveim1h9.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpdveim1h9.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79htvipp.java:51)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    result /= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppep2aoyg.java:52)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ operation = op.get(i);\n            long operand1 = operand.get(i);\n      \
    \      long operand2 = operand.get(i + 1);\n            switch(operation) {\n\
    \                case \"+\":\n                    result = result + operand1;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand1;\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand1;\n                  \
    \  break;\n                case \"//\":\n                    result = result /\
    \ operand1;\n                    break;\n                case \"**\":\n      \
    \              result = result ** operand1;\n                    break;\n    \
    \            default:\n                    System.out.println(\"Invalid operation:\
    \ \" + operation);\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbuszndw6.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ operation = op.get(i);\n            int operandSize = operand.size();\n    \
    \        int operandIndex = operandSize - operandSize + i;\n            long operandValue\
    \ = operand.get(operandIndex);\n            switch(operation) {\n            \
    \    case \"+\":\n                    result += operandValue;\n              \
    \      break;\n                case \"-\":\n                    result -= operandValue;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operandValue;\n                    break;\n                case \"\
    //\":\n                    result /= operandValue;\n                    break;\n\
    \                case \"**\":\n                    result *= operandValue;\n \
    \                   break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq2t6hu2t.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\": result += operand.get(i);\n                 \
    \   break;\n                case \"-\": result -= operand.get(i);\n          \
    \          break;\n                case \"*\": result *= operand.get(i);\n   \
    \                 break;\n                case \"//\": result /= operand.get(i);\n\
    \                    break;\n                case \"**\": result *= operand.get(i);\n\
    \                    result /= operand.get(i);\n                    break;\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxlj4aovi.java:47)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    throw new RuntimeException(\"Invalid operator\");\n     \
    \       }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplmrv5ftc.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcqqhvwvk.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpcqqhvwvk.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\": result = result + operand.get(i); break;\n  \
    \              case \"-\": result = result - operand.get(i); break;\n        \
    \        case \"*\": result = result * operand.get(i); break;\n              \
    \  case \"//\": result = result / operand.get(i); break;\n                case\
    \ \"**\": result = result ** operand.get(i); break;\n                default:\
    \ System.out.println(\"Invalid operator\");\n            }\n        }\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2k363fh5.java:35: error: illegal start of expression\n        \
    \        case \"**\": result = result ** operand.get(i); break;\n            \
    \                                ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    throw\
    \ new RuntimeException(\"Invalid operator: \" + op);\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprdyr3wb4.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmprdyr3wb4.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdveim1h9.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpdveim1h9.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"/\":\n                    result /= operand1;\n                 \
    \   break;\n                case \"//\":\n                    result /= operand1;\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand1;\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4yx4sww8.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmp4yx4sww8.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ operation = op.get(i);\n            int operandSize = operand.size();\n    \
    \        int operandIndex = operandSize - operandSize + i;\n            long operandValue\
    \ = operand.get(operandIndex);\n            switch(operation) {\n            \
    \    case \"+\":\n                    result += operandValue;\n              \
    \      break;\n                case \"-\":\n                    result -= operandValue;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operandValue;\n                    break;\n                case \"\
    //\":\n                    result /= operandValue;\n                    break;\n\
    \                case \"**\":\n                    result *= operandValue;\n \
    \                   break;\n                default:\n                    System.out.println(\"\
    Invalid operation: \" + operation);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy2no95v0.java:57)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            int operandSize = operand.size();\n           \
    \ int operandIndex = operand.size() - 1 - i;\n            long operandValue =\
    \ operand.get(operandIndex);\n            switch(op) {\n                case \"\
    +\":\n                    result += operandValue;\n                    break;\n\
    \                case \"-\":\n                    result -= operandValue;\n  \
    \                  break;\n                case \"*\":\n                    result\
    \ *= operandValue;\n                    break;\n                case \"//\":\n\
    \                    result /= operandValue;\n                    break;\n   \
    \             case \"**\":\n                    result *= operandValue;\n    \
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3tycc24y.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmp3tycc24y.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ operation = op.get(i);\n            long operand1 = operand.get(i);\n      \
    \      long operand2 = operand.get(i + 1);\n            switch(operation) {\n\
    \                case \"+\":\n                    result = result + operand1;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand1;\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand1;\n                  \
    \  break;\n                case \"//\":\n                    result = result /\
    \ operand1;\n                    break;\n                case \"**\":\n      \
    \              result = result ** operand1;\n                    break;\n    \
    \            default:\n                    System.out.println(\"Invalid operation\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppyl5rlrj.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79htvipp.java:51)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result = result + operand1;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand1;\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand1;\n                  \
    \  break;\n                case \"//\":\n                    result = result /\
    \ operand1;\n                    break;\n                case \"**\":\n      \
    \              result = result ** operand1;\n                    break;\n    \
    \            default:\n                    System.out.println(\"Invalid operator:\
    \ \" + op);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxxi_mfi.java:46: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79htvipp.java:51)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"/\":\n                    result /= operand1;\n                 \
    \   break;\n                case \"//\":\n                    result /= operand1;\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand1;\n                    break;\n                default:\n\
    \                    throw new RuntimeException(\"Invalid operator: \" + op);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd9u0y8mt.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpd9u0y8mt.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result **= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmpikwza3.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxbh5z4yj.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            long\
    \ operand2 = operand.get(i + 1);\n            switch(op) {\n                case\
    \ \"+\":\n                    result = result + operand1;\n                  \
    \  break;\n                case \"-\":\n                    result = result -\
    \ operand1;\n                    break;\n                case \"*\":\n       \
    \             result = result * operand1;\n                    break;\n      \
    \          case \"//\":\n                    result = result / operand1;\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = result ** operand1;\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1c9doadq.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    result /= operand.get(i);\n\
    \                    break;\n                default:\n                    throw\
    \ new RuntimeException(\"Invalid operator: \" + op.get(i));\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpapnwg_3c.java:54)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            long operand1 = operand.get(i);\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    result = Math.pow(result, operand1);\n                  \
    \  break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy8n7b3d1.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpy8n7b3d1.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n/tmp/tmpy8n7b3d1.java:47:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \                   result = Math.pow(result, operand1);\n                   \
    \                  ^\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result = result + operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand.get(i);\n                    break;\n            \
    \    case \"*\":\n                    result = result * operand.get(i);\n    \
    \                break;\n                case \"//\":\n                    result\
    \ = result / operand.get(i);\n                    break;\n                case\
    \ \"**\":\n                    result = result ** operand.get(i);\n          \
    \          break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq93523g1.java:44: error: illegal start of expression\n        \
    \            result = result ** operand.get(i);\n                            \
    \         ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ operation = op.get(i);\n            long operand1 = operand.get(i);\n      \
    \      long operand2 = operand.get(i + 1);\n            switch(operation) {\n\
    \                case \"+\":\n                    result = result + operand1;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand1;\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand1;\n                  \
    \  break;\n                case \"//\":\n                    result = result /\
    \ operand1;\n                    break;\n                case \"**\":\n      \
    \              result = result ** operand1;\n                    break;\n    \
    \        }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc5wp0xs3.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79htvipp.java:51)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\": result += operand.get(i);\n                 \
    \   break;\n                case \"-\": result -= operand.get(i);\n          \
    \          break;\n                case \"*\": result *= operand.get(i);\n   \
    \                 break;\n                case \"//\": result /= operand.get(i);\n\
    \                    break;\n                case \"**\": result **= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp056bbs9_.java:39: error: illegal start of expression\n        \
    \        case \"**\": result **= operand.get(i);\n                           \
    \        ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ oper = op.get(i);\n            long operand1 = operand.get(i);\n           \
    \ switch(oper) {\n                case \"+\":\n                    result = result\
    \ + operand1;\n                    break;\n                case \"-\":\n     \
    \               result = result - operand1;\n                    break;\n    \
    \            case \"*\":\n                    result = result * operand1;\n  \
    \                  break;\n                case \"//\":\n                    result\
    \ = result / operand1;\n                    break;\n                case \"**\"\
    :\n                    result = result ** operand1;\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfvttiwwq.java:46: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            switch(op.get(i))\
    \ {\n                case \"+\":\n                    result += operand.get(i);\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result *= operand.get(i);\n                    break;\n\
    \                case \"//\":\n                    result /= operand.get(i);\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand.get(i);\n                    break;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79htvipp.java:51)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two array lists operator, and operand. The first\
    \ array list has basic algebra operations, and \n    // the second array list\
    \ is an array array list of integers. Use the two given array lists to build the\
    \ algebric \n    // expression and return the evaluation of this expression.\n\
    \    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction\
    \ ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    //\
    \ Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n  \
    \  // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
    \ result = 9\n    // Note:\n    // The length of operator array list is equal\
    \ to the length of operand array list minus one.\n    // Operand is an array array\
    \ list of of non-negative integers.\n    // Operator array list has at least one\
    \ operator, and operand array list has at least two operands.\n    public static\
    \ long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long\
    \ result = 0;\n        for(int i = 0; i < op.size(); i++) {\n            String\
    \ op = op.get(i);\n            int operandSize = operand.size();\n           \
    \ int operandIndex = operandSize - i - 1;\n            long operandValue = operand.get(operandIndex);\n\
    \            switch(op) {\n                case \"+\":\n                    result\
    \ = result + operandValue;\n                    break;\n                case \"\
    -\":\n                    result = result - operandValue;\n                  \
    \  break;\n                case \"*\":\n                    result = result *\
    \ operandValue;\n                    break;\n                case \"//\":\n  \
    \                  result = result / operandValue;\n                    break;\n\
    \                case \"**\":\n                    result = result ** operandValue;\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi8bcy8a3.java:48: error: illegal start of expression\n        \
    \            result = result ** operandValue;\n                              \
    \       ^\n1 error\n"
  stdout: ''
