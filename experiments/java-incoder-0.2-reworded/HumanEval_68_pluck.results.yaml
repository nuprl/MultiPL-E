language: java
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallest_value\
    \ = arr.get(0);\n        int smallest_index = -1;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (smallest_value < arr.get(i)) {\n                    smallest_value = arr.get(i);\n\
    \                    smallest_index = i;\n                }\n            }\n \
    \       }\n        if (smallest_index != -1) {\n            result.add(smallest_value);\n\
    \            result.add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeg6siajh.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpeg6siajh.java:49: error: no suitable method found for add(int)\n\
    \            result.add(smallest_index);\n                  ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method Abstra"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long smallestEvenValue = Long.MAX_VALUE;\n\
    \        int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0) {\n\
    \                if (value < smallestEvenValue) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = i;\n                }\n      \
    \      }\n        }\n        if (smallestEvenValue == Long.MAX_VALUE) {\n    \
    \        return result;\n        }\n        ArrayList<Long> evens = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                evens.add(value);\n      \
    \      }\n        }\n        Collections.sort(evens);\n        evens.remove(smallestEvenValue);\n\
    \        evens.remove(smallestIndex);\n        evens.add(smallestEvenValue);\n\
    \        evens.add(smallestIndex);\n        result.addAll(evens);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps0pii9tf.java:61: error: no suitable method found for add(int)\n\
    \        evens.add(smallestIndex);\n             ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long smallest_even_value = Long.MAX_VALUE;\n        int smallest_even_index\
    \ = 0;\n        int size = arr.size();\n        for (int i = 0; i < size; i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                smallest_even_value\
    \ = arr.get(i);\n                smallest_even_index = i;\n            }\n   \
    \     }\n        if (smallest_even_value == Long.MAX_VALUE) {\n            return\
    \ res;\n        }\n        for (int i = 0; i < size; i++) {\n            if (arr.get(i)\
    \ % 2 == 0) {\n                if (arr.get(i) < smallest_even_value) {\n     \
    \               smallest_even_value = arr.get(i);\n                    smallest_even_index\
    \ = i;\n                }\n            }\n        }\n        temp.add(smallest_even_value);\n\
    \        temp.add(smallest_even_index);\n        res.add(temp);\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu1zt0esc.java:58: error: no suitable method found for add(int)\n\
    \        temp.add(smallest_even_index);\n            ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\n/tmp/tmpu1zt0esc.java:59: error: no suitable method\
    \ found for add(ArrayList<Long>)\n        res.add(temp);\n           ^\n    method\
    \ Collection.add(Long) is not applicable\n      (argument mismatch; ArrayList<Long>\
    \ cannot be converted to Long)\n    method List.add(Long) is not applicable\n\
    \      (argument mismatch; ArrayList<Long> cannot be converted to Long)\n    method\
    \ AbstractCollection.add(Long) is not applicable\n      (argument mismatch; ArrayList<Long>\
    \ cannot be converted to Long)\n    method AbstractList.add(Long) is not applicable\n\
    \      (argument mismatch; ArrayList<Long> cannot be converted to Long)\n    method\
    \ ArrayList.add(Long) is not applicable\n      (argument mismatch; ArrayList<Long>\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0) {\n                if (smallestEven > arr.get(i))\
    \ {\n                    smallestEven = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp066cfk8c.java:47: error: no suitable method found for add(int)\n\
    \        result.add(smallestIndex);\n              ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0) {\n                if (smallestEvenValue > arr.get(i)) {\n       \
    \             smallestEvenValue = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        temp.add(smallestEvenValue);\n\
    \        temp.add(smallestIndex);\n        result.add(temp);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpke61inhf.java:48: error: no suitable method found for add(int)\n\
    \        temp.add(smallestIndex);\n            ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\n/tmp/tmpke61inhf.java:49: error: no suitable method\
    \ found for add(ArrayList<Long>)\n        result.add(temp);\n              ^\n\
    \    method Collection.add(Long) is not applicable\n      (argument mismatch;\
    \ ArrayList<Long> cannot be converted to Long)\n    method List.add(Long) is not\
    \ applicable\n      (argument mismatch; ArrayList<Long> cannot be converted to\
    \ Long)\n    method AbstractCollection.add(Long) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method ArrayList.add(Long) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Long)\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallest\
    \ = arr.get(0);\n        int smallest_index = -1;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (smallest > arr.get(i)) {\n                    smallest = arr.get(i);\n \
    \                   smallest_index = i;\n                }\n            }\n  \
    \      }\n        result.add(smallest);\n        result.add(smallest_index);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbyc71eea.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpbyc71eea.java:48: error: no suitable method found for add(int)\n\
    \        result.add(smallest_index);\n              ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollec"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long smallestEvenValue = Long.MIN_VALUE;\n\
    \        int smallestIndex = 0;\n        for (Long val : arr) {\n            if\
    \ (val % 2 == 0) {\n                if (smallestEvenValue < val) {\n         \
    \           smallestEvenValue = val;\n                    smallestIndex = arr.indexOf(val);\n\
    \                }\n            }\n        }\n        if (smallestEvenValue ==\
    \ Long.MIN_VALUE) {\n            return res;\n        }\n        ArrayList<Long>\
    \ evens = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0) {\n                evens.add(arr.get(i));\n\
    \            }\n        }\n        evens.sort(Comparator.comparingLong(Long::longValue));\n\
    \        evens.remove(smallestIndex);\n        res.add(smallestEvenValue);\n \
    \       res.add(smallestIndex);\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn805ih_1.java:58: error: no suitable method found for add(int)\n\
    \        res.add(smallestIndex);\n           ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallest\
    \ = arr.get(0);\n        int smallest_index = -1;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (smallest > arr.get(i)) {\n                    smallest = arr.get(i);\n \
    \                   smallest_index = i;\n                }\n            }\n  \
    \      }\n        result.add(smallest);\n        result.add(smallest_index);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbyc71eea.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpbyc71eea.java:48: error: no suitable method found for add(int)\n\
    \        result.add(smallest_index);\n              ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollec"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MIN_VALUE;\n \
    \       int smallestIndex = 0;\n        for (Long node : arr) {\n            if\
    \ (node % 2 == 0) {\n                if (smallestEven > node) {\n            \
    \        smallestEven = node;\n                    smallestIndex = arr.indexOf(node);\n\
    \                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt2g7ij7n.java:47: error: no suitable method found for add(int)\n\
    \        result.add(smallestIndex);\n              ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallest_value = Long.MAX_VALUE;\n\
    \        int smallest_index = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0) {\n\
    \                if (value < smallest_value) {\n                    smallest_value\
    \ = value;\n                    smallest_index = i;\n                }\n     \
    \       }\n        }\n        if (smallest_index != 0) {\n            result.add(smallest_value,\
    \ smallest_index);\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp809gi0o4.java:48: error: no suitable method found for add(long,int)\n\
    \            result.add(smallest_value, smallest_index);\n                  ^\n\
    \    method List.add(int,Long) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.add(int,Long) is\
    \ not applicable\n      (argument mismatch; possible lossy conversion from long\
    \ to int)\n    method ArrayList.add(int,Long) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> evens = new ArrayList<>();\n\
    \        ArrayList<Long> indexes = new ArrayList<>();\n        long smallestEven\
    \ = Long.MAX_VALUE;\n        int smallestIndex = 0;\n        for(Long node : arr)\
    \ {\n            if(node % 2 == 0) {\n                evens.add(node);\n     \
    \           for(Long index : indexes) {\n                    if(node < smallestEven)\
    \ {\n                        smallestEven = node;\n                        smallestIndex\
    \ = index;\n                    }\n                }\n            } else {\n \
    \               for(Long index : indexes) {\n                    if(node < smallestEven)\
    \ {\n                        smallestEven = node;\n                        smallestIndex\
    \ = index;\n                    }\n                }\n            }\n        }\n\
    \        if(evens.size() > 0) {\n            smallestEven = evens.get(0);\n  \
    \          smallestIndex = indexes.get(0);\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp_1kp250.java:46: error: incompatible types: Long cannot be converted\
    \ to int\n                        smallestIndex = index;\n                   \
    \                     ^\n/tmp/tmpp_1kp250.java:53: error: incompatible types:\
    \ Long cannot be converted to int\n                        smallestIndex = index;\n\
    \                                        ^\n/tmp/tmpp_1kp250.java:60: error: incompatible\
    \ types: Long cannot be converted to int\n            smallestIndex = indexes.get(0);\n\
    \                                       ^\n/tmp/tmpp_1kp250.java:63: error: no\
    \ suitable method found for add(int)\n        result.add(smallestIndex);\n   \
    \           ^\n    method Collection.add(Long) is not applicable\n      (argument\
    \ mismatch; int cannot be converted to Long)\n    method List.add(Long) is not\
    \ applicable\n      (argument mismatch; int cannot be converted to Long)\n   \
    \ method AbstractCollection.add(Long) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Long)\n    method AbstractList.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method ArrayList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n4 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        if (arr.isEmpty())\
    \ {\n            return result;\n        }\n        long smallest = arr.get(0);\n\
    \        int smallest_index = -1;\n        for (int i = 1; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                if (smallest > arr.get(i))\
    \ {\n                    smallest = arr.get(i);\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        result.add(smallest);\n\
    \        result.add(smallest_index);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ry_8k7_.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp_ry_8k7_.java:51: error: no suitable method found for add(int)\n\
    \        result.add(smallest_index);\n              ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollec"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallest\
    \ = arr.get(0);\n        int smallest_index = -1;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (smallest > arr.get(i)) {\n                    smallest = arr.get(i);\n \
    \                   smallest_index = i;\n                }\n            }\n  \
    \      }\n        if (smallest == 0) {\n            return result;\n        }\n\
    \        result.add(smallest);\n        result.add(smallest_index);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfqf23v90.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpfqf23v90.java:51: error: no suitable method found for add(int)\n\
    \        result.add(smallest_index);\n              ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollec"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = 0;\n        int\
    \ smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n       \
    \     if (arr.get(i) % 2 == 0) {\n                if (smallestEvenValue < arr.get(i))\
    \ {\n                    smallestEvenValue = arr.get(i);\n                   \
    \ smallestIndex = i;\n                }\n            }\n        }\n        if\
    \ (smallestEvenValue == 0) {\n            return result;\n        }\n        ArrayList<Long>\
    \ evenValues = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                evenValues.add(arr.get(i));\n\
    \            }\n        }\n        evenValues.sort((a, b) -> a - b);\n       \
    \ evenValues.stream().forEach((e) -> {\n            if (smallestEvenValue == e)\
    \ {\n                result.add(e);\n            }\n        });\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp68p8o8ly.java:55: error: incompatible types: bad return type in\
    \ lambda expression\n        evenValues.sort((a, b) -> a - b);\n             \
    \                       ^\n    possible lossy conversion from long to int\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n    \
    \    int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0) {\n   \
    \             if (value < smallestEven) {\n                    smallestEven =\
    \ value;\n                    smallestIndex = i;\n                }\n        \
    \    }\n        }\n        if (smallestEven != Long.MAX_VALUE) {\n           \
    \ res.add(smallestEven);\n            res.add(smallestIndex);\n        }\n   \
    \     return res;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo2_vxd4_.java:49: error: no suitable method found for add(int)\n\
    \            res.add(smallestIndex);\n               ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long smallest_even_value = Long.MIN_VALUE;\n\
    \        long smallest_index = -1;\n        long smallest_value = Long.MAX_VALUE;\n\
    \        for (Long val : arr) {\n            if (val % 2 == 0) {\n           \
    \     if (smallest_even_value < val) {\n                    smallest_even_value\
    \ = val;\n                    smallest_index = arr.indexOf(val);\n           \
    \     }\n                if (smallest_value < val) {\n                    smallest_value\
    \ = val;\n                }\n            }\n        }\n        if (smallest_even_value\
    \ == Long.MIN_VALUE) {\n            return res;\n        }\n        ArrayList<Long>\
    \ evens = new ArrayList<>();\n        evens.add(smallest_even_value);\n      \
    \  evens.add(smallest_index);\n        for (Long val : arr) {\n            if\
    \ (val % 2 == 0) {\n                if (smallest_even_value < val) {\n       \
    \             evens.add(val);\n                }\n            }\n        }\n \
    \       if (evens.size() == 0) {\n            return res;\n        }\n       \
    \ evens.sort(Comparator.comparingLong(Long::longValue));\n        ArrayList<Long>\
    \ evens_arr = new ArrayList<>();\n        for (Long val : evens) {\n         \
    \   evens_arr.add(val);\n        }\n        evens_arr.sort(Comparator.comparingLong(Long::longValue));\n\
    \        ArrayList<Long> evens_arr_res = new ArrayList<>();\n        for (Long\
    \ val : evens_arr) {\n            evens_arr_res\n                    .add(evens_arr_res.size()\
    \ - evens_arr_res.indexOf(val) + 1);\n        }\n        evens_arr_res.sort(Comparator.comparingLong(Long::longValue));\n\
    \        evens_arr_res.add(evens_arr_res.size() - evens_arr_res.indexOf(smallest_even_value)\
    \ + 1);\n        for (Long val : evens_arr) {\n            if (val % 2 == 0) {\n\
    \                if (smallest_even_value < val) {\n                    evens_arr_res.add(val);\n\
    \                }\n            }\n        }\n        if (evens_arr_res.size()\
    \ == 0) {\n            return res;\n        }\n        evens_arr_res.sort(Comparator.comparingLong(Long::longValue));\n\
    \        evens_arr_res.add(evens_arr_res.size() - evens_arr_res.indexOf(smallest_even_value)\
    \ + 1);\n        for (Long val : evens_arr) {\n            if (val % 2 == 0) {\n\
    \                if (smallest_even_value < val) {\n                    evens_arr_res.add(val);\n\
    \                }\n            }\n        }\n        if (evens_arr_res.size()\
    \ == 0) {\n            return res;\n        }\n        evens_arr_res.sort(Comparator.comparingLong(Long::longValue));\n\
    \        evens_arr_res.add(evens_arr_res.size() - evens_\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx37hvz9a.java:102: error: ')' expected\n        evens_arr_res.add(evens_arr_res.size()\
    \ - evens_\n                                                       ^\n/tmp/tmpx37hvz9a.java:104:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpx37hvz9a.java:104: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmpx37hvz9a.java:104: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpx37hvz9a.java:104: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpx37hvz9a.java:104:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpx37hvz9a.java:115: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallest\
    \ = arr.get(0);\n        int smallest_index = -1;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (smallest > arr.get(i)) {\n                    smallest = arr.get(i);\n \
    \                   smallest_index = i;\n                }\n            }\n  \
    \      }\n        if (smallest == 0) {\n            return result;\n        }\n\
    \        result.add(smallest);\n        result.add(smallest_index);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfqf23v90.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpfqf23v90.java:51: error: no suitable method found for add(int)\n\
    \        result.add(smallest_index);\n              ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollec"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0) {\n                if (smallestEven > arr.get(i))\
    \ {\n                    smallestEven = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp066cfk8c.java:47: error: no suitable method found for add(int)\n\
    \        result.add(smallestIndex);\n              ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0) {\n\
    \                if (smallestEven > value) {\n                    smallestEven\
    \ = value;\n                    smallestIndex = i;\n                }\n      \
    \      }\n        }\n        if (smallestEven != Long.MAX_VALUE) {\n         \
    \   result.add(smallestEven);\n            result.add(smallestIndex);\n      \
    \  }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb97cxeit.java:49: error: no suitable method found for add(int)\n\
    \            result.add(smallestIndex);\n                  ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0) {\n                if (smallestEven > arr.get(i))\
    \ {\n                    smallestEven = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp066cfk8c.java:47: error: no suitable method found for add(int)\n\
    \        result.add(smallestIndex);\n              ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                smallestEven = Math.min(smallestEven, arr.get(i));\n\
    \                smallestIndex++;\n            } else {\n                temp.add(arr.get(i));\n\
    \            }\n        }\n        if (smallestEven != Long.MAX_VALUE) {\n   \
    \         result.add(smallestEven);\n            result.add(smallestIndex);\n\
    \        }\n        if (temp.isEmpty()) {\n            return result;\n      \
    \  }\n        ArrayList<Long> temp2 = new ArrayList<>();\n        for (int i =\
    \ 0; i < temp.size(); i++) {\n            temp2.add(temp.get(i));\n        }\n\
    \        ArrayList<Long> temp3 = new ArrayList<>();\n        for (int i = 0; i\
    \ < temp2.size(); i++) {\n            temp3.add(temp2.get(i));\n        }\n  \
    \      ArrayList<Long> temp4 = new ArrayList<>();\n        for (int i = 0; i <\
    \ temp3.size(); i++) {\n            temp4.add(temp3.get(i));\n        }\n    \
    \    ArrayList<Long> temp5 = new ArrayList<>();\n        for (int i = 0; i < temp4.size();\
    \ i++) {\n            temp5.add(temp4.get(i));\n        }\n        ArrayList<Long>\
    \ temp6 = new ArrayList<>();\n        for (int i = 0; i < temp5.size(); i++) {\n\
    \            temp6.add(temp5.get(i));\n        }\n        ArrayList<Long> temp7\
    \ = new ArrayList<>();\n        for (int i = 0; i < temp6.size(); i++) {\n   \
    \         temp7.add(temp6.get(i));\n        }\n        ArrayList<Long> temp8 =\
    \ new ArrayList<>();\n        for (int i = 0; i < temp7.size(); i++) {\n     \
    \       temp8.add(temp7.get(i));\n        }\n        ArrayList<Long> temp9 = new\
    \ ArrayList<>();\n        for (int i = 0; i < temp8.size(); i++) {\n         \
    \   temp9.add(temp8.get(i));\n        }\n        ArrayList<Long> temp10 = new\
    \ ArrayList<>();\n        for (int i = 0; i < temp9.size(); i++) {\n         \
    \   temp10.add(temp9.get(i));\n        }\n        ArrayList<Long> temp11 = new\
    \ ArrayList<>();\n        for (int i = 0; i < temp10.size(); i++) {\n        \
    \    temp11.add(temp10.get(i));\n        }\n        ArrayList<Long> temp12 = new\
    \ ArrayList<>();\n        for (int i = 0; i < temp11.size(); i++) {\n        \
    \    temp12.add(temp11.get(i));\n        }\n        ArrayList<Long> temp13 = new\
    \ ArrayList<>();\n        for (int i = 0; i < temp12.size(); i++) {\n        \
    \    temp13.add(temp12.get(i));\n        }\n        ArrayList<Long> temp14 = new\
    \ ArrayList<>();\n        for (int i = 0; i < temp13.size(); i++) {\n        \
    \    temp14.add(temp13.get(i));\n        }\n        ArrayList<Long> temp15 = new\
    \ ArrayList<>();\n        for (int i = 0; i < temp14.\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn36zkaxq.java:107: error: <identifier> expected\n        for (int\
    \ i = 0; i < temp14.\n                                   ^\n/tmp/tmpn36zkaxq.java:108:\
    \ error: illegal start of expression\n    }\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = Long.MAX_VALUE;\n\
    \        int smallestIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if(value % 2 == 0) {\n    \
    \            if(value < smallestEvenValue) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = i;\n                }\n      \
    \      }\n        }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfudirt5i.java:48: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long smallest_even_value = Long.MAX_VALUE;\n\
    \        int smallest_even_index = 0;\n        int index = 0;\n        for(Long\
    \ val : arr) {\n            if(val % 2 == 0) {\n                if(smallest_even_value\
    \ < val) {\n                    smallest_even_value = val;\n                 \
    \   smallest_even_index = index;\n                }\n                index++;\n\
    \            }\n        }\n        if(smallest_even_value == Long.MAX_VALUE) {\n\
    \            return res;\n        }\n        ArrayList<Long> evens = new ArrayList<>();\n\
    \        for(Long val : arr) {\n            if(val % 2 == 0) {\n             \
    \   evens.add(val);\n            }\n        }\n        Collections.sort(evens);\n\
    \        for(Long val : evens) {\n            if(val == smallest_even_value) {\n\
    \                res.add(smallest_even_value);\n                res.add(smallest_even_index);\n\
    \            }\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmtedoema.java:61: error: incompatible types: int cannot be converted\
    \ to Long\n                res.add(smallest_even_index);\n                   \
    \     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long smallestEven = Long.MAX_VALUE;\n\
    \        int smallestIndex = 0;\n        for(Long val : arr) {\n            if(val\
    \ % 2 == 0) {\n                if(smallestEven > val) {\n                    smallestEven\
    \ = val;\n                    smallestIndex = arr.indexOf(val);\n            \
    \    }\n            }\n        }\n        result.add(smallestEven);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv9o7nmtj.java:47: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallest\
    \ = arr.get(0);\n        int smallest_index = -1;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (smallest > arr.get(i)) {\n                    smallest = arr.get(i);\n \
    \                   smallest_index = i;\n                }\n            }\n  \
    \      }\n        result.add(smallest, smallest_index);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxbaw0kz2.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpxbaw0kz2.java:47: error: incompatible types: possible lossy\
    \ conversion from long to int\n        result.add(smallest, smallest_index);\n\
    \                   ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        Arrays.sort(arr);\n        if (arr.isEmpty())\
    \ {\n            return result;\n        }\n        long smallest = arr.get(0);\n\
    \        int smallest_index = -1;\n        for (int i = 1; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                if (smallest > arr.get(i))\
    \ {\n                    smallest = arr.get(i);\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        result.add(smallest);\n\
    \        result.add(smallest_index);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g4xo45k.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp5g4xo45k.java:51: error: incompatible types: int cannot\
    \ be converted to Long\n        result.add(smallest_index);\n                \
    \   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = Long.MAX_VALUE;\n\
    \        int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                if (smallestEvenValue\
    \ > arr.get(i)) {\n                    smallestEvenValue = arr.get(i);\n     \
    \               smallestIndex = i;\n                }\n            }\n       \
    \ }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfk03ehbu.java:47: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0) {\n                if (smallestEven > arr.get(i))\
    \ {\n                    smallestEven = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp066cfk8c.java:47: error: no suitable method found for add(int)\n\
    \        result.add(smallestIndex);\n              ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallest =\
    \ arr.get(0);\n        int smallest_index = 0;\n        for (int i = 1; i < arr.size();\
    \ i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (smallest\
    \ > arr.get(i)) {\n                    smallest = arr.get(i);\n              \
    \      smallest_index = i;\n                }\n            }\n        }\n    \
    \    res.add(smallest);\n        res.add(smallest_index);\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu1zkpers.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpu1zkpers.java:48: error: incompatible types: int cannot\
    \ be converted to Long\n        res.add(smallest_index);\n                ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = 0;\n        int\
    \ smallestIndex = 0;\n        for (Long node : arr) {\n            if (node.isEven())\
    \ {\n                if (smallestEvenValue < node.value) {\n                 \
    \   smallestEvenValue = node.value;\n                    smallestIndex = arr.indexOf(node);\n\
    \                }\n            }\n        }\n        if (smallestEvenValue ==\
    \ 0) {\n            return new ArrayList<>();\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4jpv_i31.java:39: error: cannot find symbol\n            if (node.isEven())\
    \ {\n                    ^\n  symbol:   method isEven()\n  location: variable\
    \ node of type Long\n/tmp/tmp4jpv_i31.java:40: error: value has private access\
    \ in Long\n                if (smallestEvenValue < node.value) {\n           \
    \                                 ^\n/tmp/tmp4jpv_i31.java:41: error: value has\
    \ private access in Long\n                    smallestEvenValue = node.value;\n\
    \                                            ^\n/tmp/tmp4jpv_i31.java:50: error:\
    \ incompatible types: int cannot be converted to Long\n        result.add(smallestIndex);\n\
    \                   ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> temp = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp2 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp3 = new ArrayList<Long>();\n        ArrayList<Long> temp4 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp5 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp6 = new ArrayList<Long>();\n        ArrayList<Long> temp7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp8 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp9 = new ArrayList<Long>();\n        ArrayList<Long> temp10 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp11 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp12 = new ArrayList<Long>();\n        ArrayList<Long> temp13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp14 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp15 = new ArrayList<Long>();\n        ArrayList<Long> temp16 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp17 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp18 = new ArrayList<Long>();\n        ArrayList<Long> temp19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp20 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp21 = new ArrayList<Long>();\n        ArrayList<Long> temp22 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp23 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp24 = new ArrayList<Long>();\n        ArrayList<Long> temp25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp26 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp27 = new ArrayList<Long>();\n        ArrayList<Long> temp28 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp29 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp30 = new ArrayList<Long>();\n        ArrayList<Long> temp31 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp32 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp33 = new ArrayList<Long>();\n        ArrayList<Long> temp34 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp35 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp36 = new ArrayList<Long>();\n        ArrayList<Long> temp37 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp38 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp39 = new ArrayList<Long>();\n        ArrayList<Long> temp40 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp41 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp42 = new ArrayList<Long>();\n        ArrayList<Long> temp43 = new ArrayList<Long>();\n\
    \        ArrayList<Long> temp44 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ temp45 = new ArrayList<Long>();\n        ArrayList<Long\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0k1h0_i7.java:82: error: > expected\n    }\n    ^\n/tmp/tmp0k1h0_i7.java:81:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = 0;\n        int\
    \ smallestIndex = 0;\n        boolean isEven = false;\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            long value = arr.get(i);\n            if\
    \ (isEven) {\n                if (value < smallestEvenValue) {\n             \
    \       smallestEvenValue = value;\n                    smallestIndex = i;\n \
    \               }\n            } else if (value < smallestEvenValue) {\n     \
    \           smallestEvenValue = value;\n                smallestIndex = i;\n \
    \           }\n            if (value % 2 == 0) {\n                isEven = true;\n\
    \            } else {\n                isEven = false;\n            }\n      \
    \  }\n        if (smallestEvenValue == 0) {\n            return result;\n    \
    \    }\n        ArrayList<Long> temp = new ArrayList<>();\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            if (arr.get(i) == smallestEvenValue)\
    \ {\n                temp.add(smallestEvenValue);\n                temp.add(smallestIndex);\n\
    \            }\n        }\n        result.addAll(temp);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzehalvhl.java:63: error: incompatible types: int cannot be converted\
    \ to Long\n                temp.add(smallestIndex);\n                        \
    \ ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallest\
    \ = arr.get(0);\n        int smallest_index = 0;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (smallest > arr.get(i)) {\n                    smallest = arr.get(i);\n \
    \                   smallest_index = i;\n                }\n            }\n  \
    \      }\n        result.add(smallest);\n        result.add(smallest_index);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8509nus_.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp8509nus_.java:48: error: incompatible types: int cannot\
    \ be converted to Long\n        result.add(smallest_index);\n                \
    \   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallest_value = Long.MAX_VALUE;\n\
    \        int smallest_index = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0) {\n\
    \                if (value < smallest_value) {\n                    smallest_value\
    \ = value;\n                    smallest_index = i;\n                }\n     \
    \       }\n        }\n        if (smallest_index != -1) {\n            result.add(smallest_value);\n\
    \            result.add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu78yh20c.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallest_index);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallestEven\
    \ = arr.get(0);\n        int smallestIndex = 0;\n        for (int i = 1; i < arr.size();\
    \ i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (smallestEven\
    \ < arr.get(i)) {\n                    smallestEven = arr.get(i);\n          \
    \          smallestIndex = i;\n                }\n            }\n        }\n \
    \       result.add(smallestEven);\n        result.add(smallestIndex);\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdfomkr9e.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpdfomkr9e.java:48: error: incompatible types: int cannot\
    \ be converted to Long\n        result.add(smallestIndex);\n                 \
    \  ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n    \
    \    int smallestIndex = 0;\n        for(long i : arr) {\n            if(i%2 ==\
    \ 0) {\n                if(i<smallestEven) {\n                    smallestEven\
    \ = i;\n                    smallestIndex = i;\n                }\n          \
    \  }\n        }\n        if(smallestEven == Long.MAX_VALUE) {\n            return\
    \ res;\n        }\n        for(long i : arr) {\n            if(i%2 == 0) {\n \
    \               if(i == smallestEven) {\n                    res.add(smallestEven);\n\
    \                    res.add(smallestIndex);\n                }\n            }\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpej283m53.java:42: error: incompatible types: possible lossy conversion\
    \ from long to int\n                    smallestIndex = i;\n                 \
    \                   ^\n/tmp/tmpej283m53.java:53: error: incompatible types: int\
    \ cannot be converted to Long\n                    res.add(smallestIndex);\n \
    \                           ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (Long node : arr) {\n            if\
    \ (node % 2 == 0) {\n                if (smallestEven > node) {\n            \
    \        smallestEven = node;\n                    smallestIndex = arr.indexOf(node);\n\
    \                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm9xjkd23.java:47: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = -1;\n        for (Long value : arr) {\n          \
    \  if (value % 2 == 0) {\n                if (smallestEven > value) {\n      \
    \              smallestEven = value;\n                    smallestIndex = arr.indexOf(value);\n\
    \                }\n            }\n        }\n        if (smallestEven != Long.MAX_VALUE)\
    \ {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyqhfooic.java:48: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        if (arr.isEmpty())\
    \ {\n            return result;\n        }\n        long smallest = arr.get(0);\n\
    \        int smallest_index = -1;\n        for (int i = 1; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                if (smallest > arr.get(i))\
    \ {\n                    smallest = arr.get(i);\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        result.add(smallest);\n\
    \        result.add(smallest_index);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ry_8k7_.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp_ry_8k7_.java:51: error: no suitable method found for add(int)\n\
    \        result.add(smallest_index);\n              ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollec"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       long smallestIndex = -1;\n        for(Long node : arr) {\n           \
    \ if(node.isEven()) {\n                if(smallestEven == Long.MAX_VALUE) {\n\
    \                    smallestEven = node;\n                    smallestIndex =\
    \ arr.indexOf(node);\n                } else if(smallestEven != node) {\n    \
    \                if(smallestEven == node) {\n                        smallestIndex\
    \ = arr.indexOf(node);\n                    } else {\n                       \
    \ smallestEven = node;\n                        smallestIndex = arr.indexOf(node);\n\
    \                    }\n                }\n            }\n        }\n        if(smallestEven\
    \ == Long.MAX_VALUE) {\n            return result;\n        }\n        for(Long\
    \ node : arr) {\n            if(node.isEven() && node != smallestEven) {\n   \
    \             result.add(smallestEven);\n                result.add(smallestIndex);\n\
    \                return result;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpykcn94yi.java:39: error: cannot find symbol\n            if(node.isEven())\
    \ {\n                   ^\n  symbol:   method isEven()\n  location: variable node\
    \ of type Long\n/tmp/tmpykcn94yi.java:57: error: cannot find symbol\n        \
    \    if(node.isEven() && node != smallestEven) {\n                   ^\n  symbol:\
    \   method isEven()\n  location: variable node of type Long\n2 errors\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        if (arr.isEmpty())\
    \ {\n            return result;\n        }\n        long smallest = arr.get(0);\n\
    \        int smallest_index = 0;\n        for (int i = 1; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                if (smallest > arr.get(i))\
    \ {\n                    smallest = arr.get(i);\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        result.add(smallest);\n\
    \        result.add(smallest_index);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpalh_0tme.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpalh_0tme.java:51: error: incompatible types: int cannot\
    \ be converted to Long\n        result.add(smallest_index);\n                \
    \   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallestEven\
    \ = arr.get(0);\n        int smallestIndex = -1;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (smallestEven == arr.get(i)) {\n                    smallestEven = arr.get(i);\n\
    \                    smallestIndex = i;\n                }\n            }\n  \
    \      }\n        if (smallestEven == 0) {\n            return result;\n     \
    \   }\n        result.add(smallestEven);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8r9x66k5.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp8r9x66k5.java:51: error: incompatible types: int cannot\
    \ be converted to Long\n        result.add(smallestIndex);\n                 \
    \  ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallest_value = Long.MAX_VALUE;\n\
    \        int smallest_index = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0) {\n\
    \                if (value < smallest_value) {\n                    smallest_value\
    \ = value;\n                    smallest_index = i;\n                }\n     \
    \       }\n        }\n        if (smallest_index != 0) {\n            result.add(smallest_value,\
    \ smallest_index);\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp809gi0o4.java:48: error: no suitable method found for add(long,int)\n\
    \            result.add(smallest_value, smallest_index);\n                  ^\n\
    \    method List.add(int,Long) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.add(int,Long) is\
    \ not applicable\n      (argument mismatch; possible lossy conversion from long\
    \ to int)\n    method ArrayList.add(int,Long) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallest_value = 0;\n        int smallest_index\
    \ = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            long value\
    \ = arr.get(i);\n            if(value % 2 == 0) {\n                if(smallest_value\
    \ < value) {\n                    smallest_value = value;\n                  \
    \  smallest_index = i;\n                }\n            }\n        }\n        if(smallest_value\
    \ == 0) {\n            return result;\n        }\n        ArrayList<Long> temp\
    \ = new ArrayList<>();\n        for(int i = 0; i < arr.size(); i++) {\n      \
    \      long value = arr.get(i);\n            if(value % 2 == 0) {\n          \
    \      if(smallest_value == value) {\n                    temp.add(smallest_index);\n\
    \                }\n            }\n        }\n        if(temp.isEmpty()) {\n \
    \           return result;\n        }\n        for(int i = 0; i < temp.size();\
    \ i++) {\n            int index = temp.get(i);\n            ArrayList<Long> temp2\
    \ = new ArrayList<>();\n            for(int j = 0; j < arr.size(); j++) {\n  \
    \              long value = arr.get(j);\n                if(value % 2 == 0) {\n\
    \                    if(index == j) {\n                        temp2.add(smallest_index);\n\
    \                    }\n                }\n            }\n            result.addAll(temp2);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8lrtuuov.java:55: error: incompatible types: int cannot be converted\
    \ to Long\n                    temp.add(smallest_index);\n                   \
    \          ^\n/tmp/tmp8lrtuuov.java:63: error: incompatible types: Long cannot\
    \ be converted to int\n            int index = temp.get(i);\n                \
    \                ^\n/tmp/tmp8lrtuuov.java:69: error: incompatible types: int cannot\
    \ be converted to Long\n                        temp2.add(smallest_index);\n \
    \                                 ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MIN_VALUE;\n \
    \       long smallestIndex = -1;\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if(value % 2 == 0) {\n\
    \                if(smallestEven == Long.MIN_VALUE) {\n                    smallestEven\
    \ = value;\n                    smallestIndex = i;\n                } else if(value\
    \ < smallestEven) {\n                    smallestEven = value;\n             \
    \       smallestIndex = i;\n                }\n            }\n        }\n    \
    \    result.add(smallestEven);\n        result.add(smallestIndex);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppwnvi524.java:57)\n"
  stdout: ''
  timestamp: 1659798548
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                smallestEven = Math.min(smallestEven, arr.get(i));\n\
    \                smallestIndex++;\n            } else {\n                temp.add(arr.get(i));\n\
    \            }\n        }\n        if (smallestEven != Long.MAX_VALUE) {\n   \
    \         smallestEven = Math.min(smallestEven, Long.MAX_VALUE);\n           \
    \ result.add(smallestEven);\n            result.add(smallestIndex);\n        }\
    \ else {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph08y34jy.java:50: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    /tmp/tmph08y34jy.java:53: error: incompatible types: int cannot be converted to\
    \ Long\n            result.add(smallestIndex);\n                       ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        boolean foundSmallestEven = false;\n        for(Long node : arr) {\n\
    \            if(!foundSmallestEven) {\n                if(node % 2 == 0) {\n \
    \                   smallestEven = node;\n                    foundSmallestEven\
    \ = true;\n                }\n            }\n            else if(node == smallestEven)\
    \ {\n                foundSmallestEven = true;\n                smallestIndex\
    \ = arr.indexOf(node);\n            }\n            else {\n                temp.add(node);\n\
    \            }\n        }\n        if(!foundSmallestEven) {\n            return\
    \ result;\n        }\n        for(Long node : temp) {\n            if(node % 2\
    \ == 0) {\n                smallestEven = node;\n                foundSmallestEven\
    \ = true;\n            }\n        }\n        for(Long node : temp) {\n       \
    \     if(node == smallestEven) {\n                foundSmallestEven = true;\n\
    \                smallestIndex = arr.indexOf(node);\n            }\n        }\n\
    \        if(!foundSmallestEven) {\n            return result;\n        }\n   \
    \     for(Long node : temp) {\n            if(node % 2 == 0) {\n             \
    \   smallestEven = node;\n                foundSmallestEven = true;\n        \
    \    }\n        }\n        for(Long node : temp) {\n            if(node == smallestEven)\
    \ {\n                foundSmallestEven = true;\n                smallestIndex\
    \ = arr.indexOf(node);\n            }\n        }\n        if(!foundSmallestEven)\
    \ {\n            return result;\n        }\n        for(Long node : temp) {\n\
    \            if(node % 2 == 0) {\n                smallestEven = node;\n     \
    \           foundSmallestEven = true;\n            }\n        }\n        for(Long\
    \ node : temp) {\n            if(node == smallestEven) {\n                foundSmallestEven\
    \ = true;\n                smallestIndex = arr.indexOf(node);\n            }\n\
    \        }\n        if(!foundSmallestEven) {\n            return result;\n   \
    \     }\n        for(Long node : temp) {\n            if(node % 2 == 0) {\n  \
    \              smallestEven = node;\n                foundSmallestEven = true;\n\
    \            }\n        }\n        for(Long node : temp) {\n            if(node\
    \ == smallestEven) {\n                foundSmallestEven = true;\n            \
    \    smallestIndex = arr.indexOf(node);\n            }\n        }\n        if(!foundSmallestEven)\
    \ {\n            return result;\n        }\n        for(Long node : temp) {\n\
    \            if(node % 2 == 0) {\n                smallestEven = node;\n     \
    \           foundSmallest\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp21vwbrvi.java:121: error: not a statement\n                foundSmallest\n\
    \                ^\n/tmp/tmp21vwbrvi.java:121: error: ';' expected\n         \
    \       foundSmallest\n                             ^\n/tmp/tmp21vwbrvi.java:123:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = Long.MAX_VALUE;\n\
    \        int smallestIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if(value % 2 == 0) {\n    \
    \            if(value < smallestEvenValue) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = i;\n                }\n      \
    \      }\n        }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfudirt5i.java:48: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = Long.MAX_VALUE;\n\
    \        int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                if (smallestEvenValue\
    \ > arr.get(i)) {\n                    smallestEvenValue = arr.get(i);\n     \
    \               smallestIndex = i;\n                }\n            }\n       \
    \ }\n        if (smallestEvenValue == Long.MAX_VALUE) {\n            return result;\n\
    \        }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpowf3i4uw.java:50: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798548
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0) {\n                if (smallestEven > arr.get(i))\
    \ {\n                    smallestEven = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp066cfk8c.java:47: error: no suitable method found for add(int)\n\
    \        result.add(smallestIndex);\n              ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                if (smallestEven\
    \ > arr.get(i)) {\n                    smallestEven = arr.get(i);\n          \
    \          smallestIndex = i;\n                }\n            }\n        }\n \
    \       if (smallestEven != Long.MAX_VALUE) {\n            result.add(smallestEven);\n\
    \            result.add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiyqg7dnq.java:48: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0) {\n                if (smallestEven > arr.get(i))\
    \ {\n                    smallestEven = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp066cfk8c.java:47: error: no suitable method found for add(int)\n\
    \        result.add(smallestIndex);\n              ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> temp = new ArrayList<Long>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0) {\n                smallestEvenValue = Math.min(smallestEvenValue,\
    \ arr.get(i));\n                smallestIndex = i;\n            }\n        }\n\
    \        if (smallestEvenValue == Long.MAX_VALUE) {\n            return result;\n\
    \        }\n        temp.add(smallestEvenValue);\n        temp.add(smallestIndex);\n\
    \        result.add(temp);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv1_ie17c.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n        temp.add(smallestIndex);\n                 ^\n/tmp/tmpv1_ie17c.java:50:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to Long\n   \
    \     result.add(temp);\n                   ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = Long.MIN_VALUE;\n\
    \        long smallestIndex = 0;\n        boolean foundSmallestEvenValue = false;\n\
    \        boolean foundSmallestIndex = false;\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            long value = arr.get(i);\n            if(!foundSmallestEvenValue\
    \ && value % 2 == 0) {\n                foundSmallestEvenValue = true;\n     \
    \           smallestEvenValue = value;\n                smallestIndex = i;\n \
    \           }\n            if(!foundSmallestIndex && value == smallestEvenValue)\
    \ {\n                foundSmallestIndex = true;\n                smallestIndex\
    \ = i;\n            }\n        }\n        if(foundSmallestEvenValue) {\n     \
    \       result.add(smallestEvenValue);\n            result.add(smallestIndex);\n\
    \        }\n        if(!foundSmallestEvenValue && !foundSmallestIndex) {\n   \
    \         result.add(smallestEvenValue);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8n6qvvjm.java:63)\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long smallestEven = Long.MAX_VALUE;\n\
    \        int smallestIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0) {\n\
    \                if (value < smallestEven) {\n                    smallestEven\
    \ = value;\n                    smallestIndex = i;\n                }\n      \
    \      }\n        }\n        if (smallestEven != Long.MAX_VALUE) {\n         \
    \   result.add(smallestEven);\n            result.add(smallestIndex);\n      \
    \  }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc7eiu5zq.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n    \
    \    int smallestIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0) {\n                if (smallestEven > arr.get(i))\
    \ {\n                    smallestEven = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if (smallestEven\
    \ != Long.MAX_VALUE) {\n            res.add(smallestEven);\n            res.add(smallestIndex);\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbhqri8uq.java:48: error: incompatible types: int cannot be converted\
    \ to Long\n            res.add(smallestIndex);\n                    ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0) {\n   \
    \             if (value < smallestEven) {\n                    smallestEven =\
    \ value;\n                    smallestIndex = i;\n                }\n        \
    \    }\n        }\n        if (smallestEven != Long.MAX_VALUE) {\n           \
    \ result.add(smallestEven);\n            result.add(smallestIndex);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnpmtucko.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0) {\n                if (smallestEven > arr.get(i))\
    \ {\n                    smallestEven = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp066cfk8c.java:47: error: no suitable method found for add(int)\n\
    \        result.add(smallestIndex);\n              ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallestEvenValue\
    \ = arr.get(0);\n        int smallestIndex = 0;\n        for (int i = 1; i < arr.size();\
    \ i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (smallestEvenValue\
    \ > arr.get(i)) {\n                    smallestEvenValue = arr.get(i);\n     \
    \               smallestIndex = i;\n                }\n            }\n       \
    \ }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp61pser3u.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp61pser3u.java:48: error: incompatible types: int cannot\
    \ be converted to Long\n        result.add(smallestIndex);\n                 \
    \  ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long minValue = Long.MAX_VALUE;\n        int\
    \ minIndex = 0;\n        for (Long val : arr) {\n            if (val % 2 == 0)\
    \ {\n                if (val < minValue) {\n                    minValue = val;\n\
    \                    minIndex = arr.indexOf(val);\n                }\n       \
    \     }\n        }\n        if (minIndex != arr.size() - 1) {\n            res.add(minValue);\n\
    \            res.add(minIndex);\n        } else {\n            res.add(minValue);\n\
    \            res.add(0);\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplj5jgwfa.java:48: error: incompatible types: int cannot be converted\
    \ to Long\n            res.add(minIndex);\n                    ^\n/tmp/tmplj5jgwfa.java:51:\
    \ error: incompatible types: int cannot be converted to Long\n            res.add(0);\n\
    \                    ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = Long.MIN_VALUE;\n\
    \        int smallestIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if(value % 2 == 0) {\n    \
    \            if(smallestEvenValue < value) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = i;\n                }\n      \
    \      }\n        }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprr014kuj.java:48: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        long smallest_even_val = Long.MAX_VALUE;\n\
    \        int smallest_even_index = -1;\n        int size = arr.size();\n     \
    \   for (int i = 0; i < size; i++) {\n            long even_val = arr.get(i);\n\
    \            if (even_val % 2 == 0) {\n                if (even_val < smallest_even_val)\
    \ {\n                    smallest_even_val = even_val;\n                    smallest_even_index\
    \ = i;\n                }\n            }\n        }\n        if (smallest_even_val\
    \ == Long.MAX_VALUE) {\n            return res;\n        }\n        ArrayList<Long>\
    \ evens = new ArrayList<Long>();\n        for (int i = 0; i < size; i++) {\n \
    \           long even_val = arr.get(i);\n            if (even_val % 2 == 0) {\n\
    \                evens.add(even_val);\n            }\n        }\n        Collections.sort(evens);\n\
    \        if (evens.size() == 1) {\n            ArrayList<Long> evens_sorted =\
    \ new ArrayList<Long>();\n            evens_sorted.add(evens.get(0));\n      \
    \      evens_sorted.add(evens.get(0));\n            evens_sorted.add(evens.get(0));\n\
    \            evens_sorted.add(evens.get(0));\n            evens_sorted.add(evens.get(0));\n\
    \            evens_sorted.add(evens.get(0));\n            evens_sorted.add(evens.get(0));\n\
    \            evens_sorted.add(evens.get(0));\n            evens_sorted.add(evens.get(0));\n\
    \            evens_sorted.add(evens.get(0));\n            evens_sorted.add(evens.get(0));\n\
    \            evens_sorted.add(evens.get(0));\n            evens_sorted.add(evens.get(0));\n\
    \            evens_sorted.add(evens.get(0));\n            evens_sorted.add(evens.get(0));\n\
    \            evens_sorted.add(evens.get(0));\n            evens_sorted.add(evens.get(0));\n\
    \            evens_sorted.add(evens.get(0));\n            evens_sorted.add(evens.get(0));\n\
    \            evens_sorted.add(evens.get(0));\n            evens_sorted.add(evens.get(0));\n\
    \            evens_sorted.add(evens.get(0));\n            evens_sorted.add(evens.get(0));\n\
    \            evens_sorted.add(evens.get(0));\n            evens_sorted.add(evens.get(0));\n\
    \            evens_sorted.add(evens.get(0));\n            evens_sorted.add(evens.get(0));\n\
    \            evens_sorted.add(evens.get(0));\n            evens_sorted.add(evens.get(0));\n\
    \            evens_sorted.add(evens.get(0));\n            even\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8df8m8zt.java:91: error: not a statement\n            even\n  \
    \          ^\n/tmp/tmp8df8m8zt.java:91: error: ';' expected\n            even\n\
    \                ^\n/tmp/tmp8df8m8zt.java:93: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659798548
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = Long.MIN_VALUE;\n\
    \        int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                if (smallestEvenValue\
    \ > arr.get(i)) {\n                    smallestEvenValue = arr.get(i);\n     \
    \               smallestIndex = i;\n                }\n            }\n       \
    \ }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9g3_htxb.java:47: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (Long value : arr) {\n           \
    \ if (value % 2 == 0) {\n                if (smallestEven > value) {\n       \
    \             smallestEven = value;\n                    smallestIndex = arr.indexOf(value);\n\
    \                }\n            }\n        }\n        if (smallestEven != Long.MAX_VALUE)\
    \ {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbs2ck0a0.java:48: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        Long smallestEvenValue\
    \ = arr.get(0);\n        int smallestIndex = 0;\n        for (int i = 1; i < arr.size();\
    \ i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (smallestEvenValue\
    \ < arr.get(i)) {\n                    smallestEvenValue = arr.get(i);\n     \
    \               smallestIndex = i;\n                }\n            }\n       \
    \ }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj17aq7db.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpj17aq7db.java:48: error: incompatible types: int cannot\
    \ be converted to Long\n        result.add(smallestIndex);\n                 \
    \  ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (Long node : arr) {\n            if\
    \ (node.isEven()) {\n                if (node.compareTo(smallestEven) < 0) {\n\
    \                    smallestEven = node;\n                    smallestIndex =\
    \ arr.indexOf(node);\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpziuq0ydz.java:39: error: cannot find symbol\n            if (node.isEven())\
    \ {\n                    ^\n  symbol:   method isEven()\n  location: variable\
    \ node of type Long\n/tmp/tmpziuq0ydz.java:47: error: incompatible types: int\
    \ cannot be converted to Long\n        result.add(smallestIndex);\n          \
    \         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallestEven\
    \ = arr.get(0);\n        int smallestIndex = -1;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (smallestEven == arr.get(i)) {\n                    smallestIndex = i;\n\
    \                    smallestEven = arr.get(i);\n                } else {\n  \
    \                  smallestEven = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if (smallestIndex\
    \ != -1) {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0dhbkepn.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp0dhbkepn.java:52: error: incompatible types: int cannot\
    \ be converted to Long\n            result.add(smallestIndex);\n             \
    \          ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long smallest_even_value = Long.MAX_VALUE;\n\
    \        int smallest_even_index = -1;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            long value = arr.get(i);\n            if (value % 2 == 0)\
    \ {\n                if (smallest_even_value < value) {\n                    smallest_even_value\
    \ = value;\n                    smallest_even_index = i;\n                }\n\
    \            }\n        }\n        if (smallest_even_value == Long.MAX_VALUE)\
    \ {\n            return res;\n        }\n        res.add(smallest_even_value);\n\
    \        res.add(smallest_even_index);\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk1jc2fy_.java:51: error: incompatible types: int cannot be converted\
    \ to Long\n        res.add(smallest_even_index);\n                ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n    \
    \    int smallestIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           long value = arr.get(i);\n            if(value % 2 == 0) {\n     \
    \           if(value < smallestEven) {\n                    smallestEven = value;\n\
    \                    smallestIndex = i;\n                }\n            }\n  \
    \      }\n        if(smallestEven != Long.MAX_VALUE) {\n            res.add(smallestEven);\n\
    \            res.add(smallestIndex);\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt2239bf4.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            res.add(smallestIndex);\n                    ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = 0;\n        long\
    \ smallestIndex = 0;\n        long currentValue = 0;\n        long currentIndex\
    \ = 0;\n        boolean found = false;\n        for (long value : arr) {\n   \
    \         if (value % 2 == 0) {\n                currentValue = value;\n     \
    \           found = true;\n            }\n        }\n        if (found) {\n  \
    \          for (long value : arr) {\n                if (value % 2 == 0) {\n \
    \                   if (currentValue < smallestEvenValue) {\n                \
    \        smallestEvenValue = currentValue;\n                        smallestIndex\
    \ = currentIndex;\n                    }\n                    currentValue = value;\n\
    \                    currentIndex++;\n                }\n            }\n     \
    \       result.add(smallestEvenValue);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpol3w6jwl.java:64)\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MIN_VALUE;\n \
    \       long smallestIndex = -1;\n        long currentEven = Long.MIN_VALUE;\n\
    \        long currentIndex = -1;\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            currentEven = arr.get(i);\n            currentIndex = i;\n  \
    \          if(currentEven % 2 == 0) {\n                smallestEven = currentEven;\n\
    \                smallestIndex = currentIndex;\n            }\n        }\n   \
    \     if(smallestEven == Long.MIN_VALUE) {\n            return result;\n     \
    \   }\n        for(int i = 0; i < arr.size(); i++) {\n            currentEven\
    \ = arr.get(i);\n            currentIndex = i;\n            if(currentEven % 2\
    \ == 0) {\n                if(currentEven == smallestEven) {\n               \
    \     result.add(smallestEven);\n                    result.add(smallestIndex);\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv_agl0po.java:67)\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = Long.MAX_VALUE;\n\
    \        int smallestIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if(value % 2 == 0) {\n    \
    \            if(value < smallestEvenValue) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = i;\n                }\n      \
    \      }\n        }\n        if(smallestEvenValue == Long.MAX_VALUE) {\n     \
    \       return result;\n        }\n        ArrayList<Long> evenValues = new ArrayList<>();\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value % 2 == 0) {\n                evenValues.add(value);\n  \
    \          }\n        }\n        Arrays.sort(evenValues);\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr_80l223.java:57: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(evenValues);\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpr_80l223.java:59: error: incompatible types: int cannot\
    \ be converted to Long\n        result.add(smallestIndex);\n                 \
    \  ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallest\
    \ = arr.get(0);\n        int smallest_index = -1;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (smallest > arr.get(i)) {\n                    smallest = arr.get(i);\n \
    \                   smallest_index = i;\n                }\n            }\n  \
    \      }\n        result.add(smallest);\n        result.add(smallest_index);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbyc71eea.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpbyc71eea.java:48: error: no suitable method found for add(int)\n\
    \        result.add(smallest_index);\n              ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollec"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0) {\n   \
    \             if (value < smallestEven) {\n                    smallestEven =\
    \ value;\n                    smallestIndex = i;\n                }\n        \
    \    }\n        }\n        if (smallestEven != Long.MAX_VALUE) {\n           \
    \ result.add(smallestEven);\n            result.add(smallestIndex);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnpmtucko.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long smallest_even_value = Long.MAX_VALUE;\n\
    \        int smallest_even_index = -1;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (smallest_even_value\
    \ < arr.get(i)) {\n                    smallest_even_value = arr.get(i);\n   \
    \                 smallest_even_index = i;\n                }\n            }\n\
    \        }\n        if (smallest_even_value == Long.MAX_VALUE) {\n           \
    \ return res;\n        }\n        res.add(smallest_even_value);\n        res.add(smallest_even_index);\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxnytp0t.java:50: error: incompatible types: int cannot be converted\
    \ to Long\n        res.add(smallest_even_index);\n                ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0) {\n                if (smallestEven > arr.get(i))\
    \ {\n                    smallestEven = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp066cfk8c.java:47: error: no suitable method found for add(int)\n\
    \        result.add(smallestIndex);\n              ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n    \
    \    int smallestIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0) {\n                if (smallestEven == Long.MAX_VALUE)\
    \ {\n                    smallestEven = arr.get(i);\n                    smallestIndex\
    \ = i;\n                } else if (arr.get(i) < smallestEven) {\n            \
    \        smallestEven = arr.get(i);\n                    smallestIndex = i;\n\
    \                }\n            }\n        }\n        if (smallestEven == Long.MAX_VALUE)\
    \ {\n            return res;\n        }\n        res.add(smallestEven);\n    \
    \    res.add(smallestIndex);\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4t69m4yr.java:53: error: incompatible types: int cannot be converted\
    \ to Long\n        res.add(smallestIndex);\n                ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallest\
    \ = arr.get(0);\n        int smallest_index = -1;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (smallest > arr.get(i)) {\n                    smallest = arr.get(i);\n \
    \                   smallest_index = i;\n                }\n            }\n  \
    \      }\n        result.add(smallest);\n        result.add(smallest_index);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbyc71eea.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpbyc71eea.java:48: error: no suitable method found for add(int)\n\
    \        result.add(smallest_index);\n              ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollec"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            int index = i;\n          \
    \  while(index > 0 && value % 2 == 0) {\n                value /= 2;\n       \
    \         index--;\n            }\n            if(value == smallestEven) {\n \
    \               result.add(smallestEven);\n                result.add(index);\n\
    \            }\n            else if(value < smallestEven) {\n                smallestEven\
    \ = value;\n                smallestIndex = index;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppksyc16p.java:47: error: incompatible types: int cannot be converted\
    \ to Long\n                result.add(index);\n                           ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (Long val : arr) {\n            if\
    \ (val % 2 == 0) {\n                if (smallestEven > val) {\n              \
    \      smallestEven = val;\n                    smallestIndex = arr.indexOf(val);\n\
    \                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdki5o0xq.java:47: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798550
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MIN_VALUE;\n \
    \       int smallestIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if(value % 2 == 0) {\n    \
    \            if(smallestEven > value) {\n                    smallestEven = value;\n\
    \                    smallestIndex = i;\n                }\n            }\n  \
    \      }\n        result.add(smallestEven);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpagutwzp1.java:48: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798550
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        int smallestIndex = 0;\n       \
    \ for(long value : arr) {\n            if(value % 2 == 0) {\n                smallestEvenValue\
    \ = value;\n                smallestIndex = arr.indexOf(value);\n            }\n\
    \        }\n        if(smallestEvenValue == 0) {\n            return result;\n\
    \        }\n        for(long value : arr) {\n            if(value % 2 == 0) {\n\
    \                temp.add(value);\n            }\n        }\n        Collections.sort(temp);\n\
    \        for(long value : temp) {\n            if(value % 2 == 0) {\n        \
    \        result.add(smallestEvenValue, smallestIndex);\n            }\n      \
    \  }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg_j6dvfr.java:56: error: incompatible types: possible lossy conversion\
    \ from long to int\n                result.add(smallestEvenValue, smallestIndex);\n\
    \                           ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659798550
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = Long.MIN_VALUE;\n\
    \        int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0) {\n\
    \                if (smallestEvenValue < value) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = i;\n                }\n      \
    \      }\n        }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzmeixrsa.java:48: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798550
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallest\
    \ = arr.get(0);\n        int smallest_index = 0;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (smallest > arr.get(i)) {\n                    smallest = arr.get(i);\n \
    \                   smallest_index = i;\n                }\n            }\n  \
    \      }\n        result.add(smallest);\n        result.add(smallest_index);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8509nus_.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp8509nus_.java:48: error: incompatible types: int cannot\
    \ be converted to Long\n        result.add(smallest_index);\n                \
    \   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = Long.MAX_VALUE;\n\
    \        int smallestIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if(value % 2 == 0) {\n    \
    \            if(value < smallestEvenValue) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = i;\n                }\n      \
    \      }\n        }\n        if(smallestEvenValue == Long.MAX_VALUE) {\n     \
    \       return result;\n        }\n        ArrayList<Long> evenValues = new ArrayList<>();\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value % 2 == 0) {\n                evenValues.add(value);\n  \
    \          }\n        }\n        Collections.sort(evenValues);\n        for(int\
    \ i = 0; i < evenValues.size(); i++) {\n            if(evenValues.get(i) == smallestEvenValue)\
    \ {\n                result.add(smallestEvenValue);\n                result.add(smallestIndex);\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyaw6f62p.java:61: error: incompatible types: int cannot be converted\
    \ to Long\n                result.add(smallestIndex);\n                      \
    \     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659798550
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = 0;\n        long\
    \ smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n       \
    \     if (arr.get(i) % 2 == 0) {\n                if (smallestEvenValue == 0)\
    \ {\n                    smallestEvenValue = arr.get(i);\n                   \
    \ smallestIndex = i;\n                } else if (arr.get(i) < smallestEvenValue)\
    \ {\n                    smallestEvenValue = arr.get(i);\n                   \
    \ smallestIndex = i;\n                }\n            }\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe49vwx0d.java:56)\n"
  stdout: ''
  timestamp: 1659798551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> evens = new ArrayList<>();\n\
    \        ArrayList<Long> indexes = new ArrayList<>();\n        ArrayList<Long>\
    \ evenIndexes = new ArrayList<>();\n        for(Long e : arr) {\n            if(e\
    \ % 2 == 0) {\n                evens.add(e);\n                evenIndexes.add(arr.indexOf(e));\n\
    \            } else {\n                indexes.add(e);\n            }\n      \
    \  }\n        Collections.sort(evens);\n        Collections.sort(indexes);\n \
    \       Collections.sort(evenIndexes);\n        Long smallestEven = evens.get(0);\n\
    \        Long smallestIndex = indexes.get(0);\n        for(Long e : evens) {\n\
    \            if(e == smallestEven) {\n                smallestIndex = indexes.get(e);\n\
    \            }\n        }\n        for(Long e : evenIndexes) {\n            if(e\
    \ == smallestIndex) {\n                smallestEven = evens.get(e.intValue());\n\
    \            }\n        }\n        result.add(smallestEven);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk08plodg.java:42: error: incompatible types: int cannot be converted\
    \ to Long\n                evenIndexes.add(arr.indexOf(e));\n                \
    \                           ^\n/tmp/tmpk08plodg.java:54: error: incompatible types:\
    \ Long cannot be converted to int\n                smallestIndex = indexes.get(e);\n\
    \                                            ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798550
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long smallestEvenValue = Long.MAX_VALUE;\n\
    \        int smallestIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if(value % 2 == 0) {\n    \
    \            if(value < smallestEvenValue) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = i;\n                }\n      \
    \      }\n        }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe8mhge6_.java:48: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798550
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n    \
    \    int smallestIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0) {\n   \
    \             if (smallestEven == Long.MAX_VALUE) {\n                    smallestEven\
    \ = value;\n                    smallestIndex = i;\n                } else if\
    \ (value < smallestEven) {\n                    smallestEven = value;\n      \
    \              smallestIndex = i;\n                }\n            }\n        }\n\
    \        if (smallestEven == Long.MAX_VALUE) {\n            return res;\n    \
    \    }\n        res.add(smallestEven);\n        res.add(smallestIndex);\n    \
    \    return res;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_kx56sdf.java:54: error: incompatible types: int cannot be converted\
    \ to Long\n        res.add(smallestIndex);\n                ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659798550
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = Long.MAX_VALUE;\n\
    \        int smallestIndex = 0;\n        boolean foundSmallestEvenValue = false;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (!foundSmallestEvenValue)\
    \ {\n                    smallestEvenValue = value;\n                    smallestIndex\
    \ = i;\n                    foundSmallestEvenValue = true;\n                }\n\
    \            } else if (foundSmallestEvenValue) {\n                if (value <\
    \ smallestEvenValue) {\n                    smallestEvenValue = value;\n     \
    \               smallestIndex = i;\n                }\n            }\n       \
    \ }\n        if (smallestEvenValue == Long.MAX_VALUE) {\n            return result;\n\
    \        }\n        ArrayList<Long> evenValues = new ArrayList<>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n\
    \                evenValues.add(arr.get(i));\n            }\n        }\n     \
    \   evenValues.sort(Comparator.comparingLong(Long::longValue));\n        evenValues.stream().forEach((e)\
    \ -> {\n            if (smallestEvenValue == e) {\n                result.add(e);\n\
    \            }\n        });\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps8lngiv0.java:65: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n            if (smallestEvenValue\
    \ == e) {\n                ^\n1 error\n"
  stdout: ''
  timestamp: 1659798551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = Long.MAX_VALUE;\n\
    \        int smallestIndex = 0;\n        for (Long node : arr) {\n           \
    \ if (node % 2 == 0) {\n                if (smallestEvenValue < node) {\n    \
    \                smallestEvenValue = node;\n                    smallestIndex\
    \ = arr.indexOf(node);\n                }\n            }\n        }\n        if\
    \ (smallestEvenValue == Long.MAX_VALUE) {\n            return result;\n      \
    \  }\n        ArrayList<Long> evenValues = new ArrayList<>();\n        evenValues.add(smallestEvenValue);\n\
    \        evenValues.addAll(arr.subList(0, smallestIndex));\n        evenValues.addAll(arr.subList(smallestIndex\
    \ + 1, arr.size()));\n        result.addAll(evenValues);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuupytxmw.java:57)\n"
  stdout: ''
  timestamp: 1659798551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallest\
    \ = arr.get(0);\n        int smallest_index = 0;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (smallest > arr.get(i)) {\n                    smallest = arr.get(i);\n \
    \                   smallest_index = i;\n                }\n            }\n  \
    \      }\n        result.add(smallest, smallest_index);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0v5mtgo_.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp0v5mtgo_.java:47: error: incompatible types: possible lossy\
    \ conversion from long to int\n        result.add(smallest, smallest_index);\n\
    \                   ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long smallestEvenValue = Long.MAX_VALUE;\n\
    \        int smallestIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if(value % 2 == 0) {\n    \
    \            if(value < smallestEvenValue) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = i;\n                }\n      \
    \      }\n        }\n        if(smallestEvenValue == Long.MAX_VALUE) {\n     \
    \       return result;\n        }\n        result.add(smallestEvenValue);\n  \
    \      result.add(smallestIndex);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps1jbyakc.java:51: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798550
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = 0;\n        int\
    \ smallestIndex = 0;\n        for(Long value : arr) {\n            if(value %\
    \ 2 == 0) {\n                smallestEvenValue = value;\n                smallestIndex\
    \ = arr.indexOf(value);\n            }\n        }\n        if(smallestEvenValue\
    \ == 0) {\n            return result;\n        }\n        for(Long value : arr)\
    \ {\n            if(value % 2 == 0 && value < smallestEvenValue) {\n         \
    \       smallestEvenValue = value;\n                smallestIndex = arr.indexOf(value);\n\
    \            }\n        }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv5tcjua0.java:54: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallestEven\
    \ = arr.get(0);\n        int smallestIndex = 0;\n        for (int i = 1; i < arr.size();\
    \ i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (smallestEven\
    \ > arr.get(i)) {\n                    smallestEven = arr.get(i);\n          \
    \          smallestIndex = i;\n                }\n            }\n        }\n \
    \       result.add(smallestEven);\n        result.add(smallestIndex);\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps1_r12ij.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmps1_r12ij.java:48: error: incompatible types: int cannot\
    \ be converted to Long\n        result.add(smallestIndex);\n                 \
    \  ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n    \
    \    int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0) {\n                if (smallestEven > arr.get(i))\
    \ {\n                    smallestEven = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        res.add(smallestEven);\n\
    \        res.add(smallestIndex);\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3rn8t3zv.java:47: error: incompatible types: int cannot be converted\
    \ to Long\n        res.add(smallestIndex);\n                ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659798551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long smallest_even_value = Long.MAX_VALUE;\n        long smallest_even_index\
    \ = 0;\n        long smallest_value = 0;\n        int smallest_index = 0;\n  \
    \      for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2\
    \ == 0) {\n                smallest_even_value = arr.get(i);\n               \
    \ smallest_even_index = i;\n            }\n            if (arr.get(i) < smallest_even_value)\
    \ {\n                smallest_value = arr.get(i);\n                smallest_index\
    \ = i;\n            }\n        }\n        if (smallest_even_index != 0) {\n  \
    \          temp.add(smallest_even_value);\n            temp.add(smallest_even_index);\n\
    \            result.add(temp);\n        }\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk76hxz7p.java:54: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n            result.add(temp);\n                      \
    \ ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659798551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> temp = new ArrayList<Long>();\n\
    \        long smallestEvenValue = 0;\n        long smallestIndex = 0;\n      \
    \  long tempValue = 0;\n        boolean isSmallestEvenValue = false;\n       \
    \ boolean isSmallestIndex = false;\n        boolean isSmallestValue = false;\n\
    \        boolean isSmallestIndex = false;\n        boolean isSmallestEvenValue\
    \ = false;\n        boolean isSmallestIndex = false;\n        boolean isSmallestValue\
    \ = false;\n        boolean isSmallestIndex = false;\n        boolean isSmallestEvenValue\
    \ = false;\n        boolean isSmallestIndex = false;\n        boolean isSmallestValue\
    \ = false;\n        boolean isSmallestIndex = false;\n        boolean isSmallestEvenValue\
    \ = false;\n        boolean isSmallestIndex = false;\n        boolean isSmallestValue\
    \ = false;\n        boolean isSmallestIndex = false;\n        boolean isSmallestEvenValue\
    \ = false;\n        boolean isSmallestIndex = false;\n        boolean isSmallestValue\
    \ = false;\n        boolean isSmallestIndex = false;\n        boolean isSmallestEvenValue\
    \ = false;\n        boolean isSmallestIndex = false;\n        boolean isSmallestValue\
    \ = false;\n        boolean isSmallestIndex = false;\n        boolean isSmallestEvenValue\
    \ = false;\n        boolean isSmallestIndex = false;\n        boolean isSmallestValue\
    \ = false;\n        boolean isSmallestIndex = false;\n        boolean isSmallestEvenValue\
    \ = false;\n        boolean isSmallestIndex = false;\n        boolean isSmallestValue\
    \ = false;\n        boolean isSmallestIndex = false;\n        boolean isSmallestEvenValue\
    \ = false;\n        boolean isSmallestIndex = false;\n        boolean isSmallestValue\
    \ = false;\n        boolean isSmallestIndex = false;\n        boolean isSmallestEvenValue\
    \ = false;\n        boolean isSmallestIndex = false;\n        boolean isSmallestValue\
    \ = false;\n        boolean isSmallestIndex = false;\n        boolean isSmallestEvenValue\
    \ = false;\n        boolean isSmallestIndex = false;\n        boolean isSmallestValue\
    \ = false;\n        boolean isSmallestIndex = false;\n        boolean isSmallestEvenValue\
    \ = false;\n        boolean isSmallestIndex = false;\n        boolean isSmallestValue\
    \ = false;\n        boolean isSmallestIndex = false;\n        boolean isSmallestEvenValue\
    \ = false;\n        boolean isSmallestIndex = false;\n        boolean isSmallestValue\
    \ = false;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjem32kpz.java:43: error: variable isSmallestIndex is already defined\
    \ in method pluck(ArrayList<Long>)\n        boolean isSmallestIndex = false;\n\
    \                ^\n/tmp/tmpjem32kpz.java:44: error: variable isSmallestEvenValue\
    \ is already defined in method pluck(ArrayList<Long>)\n        boolean isSmallestEvenValue\
    \ = false;\n                ^\n/tmp/tmpjem32kpz.java:45: error: variable isSmallestIndex\
    \ is already defined in method pluck(ArrayList<Long>)\n        boolean isSmallestIndex\
    \ = false;\n                ^\n/tmp/tmpjem32kpz.java:46: error: variable isSmallestValue\
    \ is already defined in method pluck(ArrayList<Long>)\n        boolean isSmallestValue\
    \ = false;\n                ^\n/tmp/tmpjem32kpz.java:47: error: variable isSmallestIndex\
    \ is already defined in method pluck(ArrayList<Long>)\n        boolean isSmallestIndex\
    \ = false;\n                ^\n/tmp/tmpjem32kpz.java:48: error: variable isSmallestEvenValue\
    \ is already defined in method pluck(ArrayList<Long>)\n        boolean isSmallestEvenValue\
    \ = false;\n                ^\n/tmp/tmpjem32kpz.java:49: error: variable isSmallestIndex\
    \ is already defined in method pluck(ArrayList<Long>)\n        boolean isSmallestIndex\
    \ = false;\n                ^\n/tmp/tmpjem32kpz.java:50: error: variable isSmallestValue\
    \ is already defined in method pluck(ArrayList<Long>)\n        boolean isSmallestValue\
    \ = false;\n                ^\n/tmp/tmpjem32kpz.java:51: error: variable isSmallestIndex\
    \ is already defined in method pluck(ArrayList<Long>)\n        boolean isSmallestIndex\
    \ = false;\n                ^\n/tmp/tmpjem32kpz.java:52: error: variable isSmallestEvenValue\
    \ is already defined in method pluck(ArrayList<Long>)\n        boolean isSmallestEvenValue\
    \ = false;\n                ^\n/tmp/tmpjem32kpz.java:53: error: variable isSmallestIndex\
    \ is already defined in method pluck(ArrayList<Long>)\n        boolean isSmallestIndex\
    \ = false;\n                ^\n/tmp/tmpjem32kpz.java:54: error: variable isSmallestValue\
    \ is already defined in method pluck(ArrayList<Long>)\n        boolean isSmallestValue\
    \ = false;\n              "
  stdout: ''
  timestamp: 1659798551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MIN_VALUE;\n \
    \       long smallestIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                if (smallestEven\
    \ == Long.MIN_VALUE) {\n                    smallestEven = arr.get(i);\n     \
    \               smallestIndex = i;\n                } else if (arr.get(i) < smallestEven)\
    \ {\n                    smallestEven = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu16uxvnw.java:56)\n"
  stdout: ''
  timestamp: 1659798551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallest_value\
    \ = arr.get(0);\n        long smallest_index = 0;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (smallest_value < arr.get(i)) {\n                    smallest_value = arr.get(i);\n\
    \                    smallest_index = i;\n                }\n            }\n \
    \       }\n        result.add(smallest_value, smallest_index);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl7qiwwzj.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpl7qiwwzj.java:47: error: incompatible types: possible lossy\
    \ conversion from long to int\n        result.add(smallest_value, smallest_index);\n\
    \                   ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MIN_VALUE;\n \
    \       int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0) {\n                if (smallestEven == Long.MIN_VALUE)\
    \ {\n                    smallestEven = arr.get(i);\n                    smallestIndex\
    \ = i;\n                } else if (arr.get(i) < smallestEven) {\n            \
    \        smallestEven = arr.get(i);\n                    smallestIndex = i;\n\
    \                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8g7zzd65.java:50: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MIN_VALUE;\n \
    \       int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0) {\n   \
    \             if (smallestEven > value) {\n                    smallestEven =\
    \ value;\n                    smallestIndex = i;\n                }\n        \
    \    }\n        }\n        if (smallestEven != Long.MIN_VALUE) {\n           \
    \ result.add(smallestEven);\n            result.add(smallestIndex);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpggid7zay.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MIN_VALUE;\n \
    \       int smallestIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0) {\n\
    \                if (smallestEven == Long.MIN_VALUE) {\n                    smallestEven\
    \ = value;\n                    smallestIndex = i;\n                } else if\
    \ (value < smallestEven) {\n                    smallestEven = value;\n      \
    \              smallestIndex = i;\n                }\n            }\n        }\n\
    \        if (smallestEven == Long.MIN_VALUE) {\n            return result;\n \
    \       }\n        result.add(smallestEven);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqw2rdq7c.java:54: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0) {\n   \
    \             if (value < smallestEven) {\n                    smallestEven =\
    \ value;\n                    smallestIndex = i;\n                }\n        \
    \    }\n        }\n        if (smallestEven != Long.MAX_VALUE) {\n           \
    \ result.add(smallestEven);\n            result.add(smallestIndex);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnpmtucko.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0) {\n                if (smallestEven > arr.get(i))\
    \ {\n                    smallestEven = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp066cfk8c.java:47: error: no suitable method found for add(int)\n\
    \        result.add(smallestIndex);\n              ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = Long.MAX_VALUE;\n\
    \        int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                if (smallestEvenValue\
    \ > arr.get(i)) {\n                    smallestEvenValue = arr.get(i);\n     \
    \               smallestIndex = i;\n                }\n            }\n       \
    \ }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfk03ehbu.java:47: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallestEvenValue\
    \ = arr.get(0);\n        int smallestIndex = 0;\n        for (int i = 1; i < arr.size();\
    \ i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (smallestEvenValue\
    \ < arr.get(i)) {\n                    smallestEvenValue = arr.get(i);\n     \
    \               smallestIndex = i;\n                }\n            }\n       \
    \ }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyf8tikml.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpyf8tikml.java:48: error: incompatible types: int cannot\
    \ be converted to Long\n        result.add(smallestIndex);\n                 \
    \  ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0) {\n\
    \                if (smallestEven == Long.MAX_VALUE) {\n                    smallestEven\
    \ = value;\n                    smallestIndex = i;\n                } else if\
    \ (value < smallestEven) {\n                    smallestEven = value;\n      \
    \              smallestIndex = i;\n                }\n            }\n        }\n\
    \        if (smallestEven == Long.MAX_VALUE) {\n            return result;\n \
    \       }\n        ArrayList<Long> evens = new ArrayList<>();\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n      \
    \      if (value % 2 == 0) {\n                evens.add(value);\n            }\n\
    \        }\n        Collections.sort(evens);\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9wrd_xs7.java:62: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = 0;\n        long\
    \ smallestIndex = 0;\n        boolean foundSmallestEvenValue = false;\n      \
    \  boolean foundSmallestIndex = false;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            long value = arr.get(i);\n            if (value % 2 == 0)\
    \ {\n                if (!foundSmallestEvenValue) {\n                    smallestEvenValue\
    \ = value;\n                    foundSmallestEvenValue = true;\n             \
    \   }\n                else {\n                    if (smallestEvenValue == value)\
    \ {\n                        foundSmallestEvenValue = true;\n                \
    \        smallestIndex = i;\n                    }\n                }\n      \
    \      }\n        }\n        if (foundSmallestEvenValue) {\n            result.add(smallestEvenValue);\n\
    \            result.add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_8c78bza.java:62)\n"
  stdout: ''
  timestamp: 1659798552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = 0;\n        int\
    \ smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n       \
    \     if (arr.get(i) % 2 == 0) {\n                if (smallestEvenValue == 0)\
    \ {\n                    smallestEvenValue = arr.get(i);\n                   \
    \ smallestIndex = i;\n                } else {\n                    if (arr.get(i)\
    \ < smallestEvenValue) {\n                        smallestEvenValue = arr.get(i);\n\
    \                        smallestIndex = i;\n                    }\n         \
    \       }\n            }\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5l82a_mf.java:52: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long min = Long.MAX_VALUE;\n        int minIndex\
    \ = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0) {\n                min = Math.min(min, arr.get(i));\n            \
    \    minIndex = i;\n            }\n        }\n        if (min == Long.MAX_VALUE)\
    \ {\n            return res;\n        }\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) ==\
    \ min) {\n                temp.add(arr.get(i));\n            }\n        }\n  \
    \      if (temp.size() == 0) {\n            return res;\n        }\n        Collections.sort(temp);\n\
    \        res.add(min);\n        res.add(minIndex);\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvv9aldef.java:58: error: incompatible types: int cannot be converted\
    \ to Long\n        res.add(minIndex);\n                ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659798552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n    \
    \    int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0) {\n                if (smallestEven > arr.get(i))\
    \ {\n                    smallestEven = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        res.add(smallestEven);\n\
    \        res.add(smallestIndex);\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3rn8t3zv.java:47: error: incompatible types: int cannot be converted\
    \ to Long\n        res.add(smallestIndex);\n                ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659798551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long smallestEven = Long.MAX_VALUE;\n\
    \        int smallestIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                if (smallestEven\
    \ > arr.get(i)) {\n                    smallestEven = arr.get(i);\n          \
    \          smallestIndex = i;\n                }\n            }\n        }\n \
    \       if (smallestEven != Long.MAX_VALUE) {\n            result.add(smallestEven);\n\
    \            result.add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5t08sv75.java:48: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if(value % 2 == 0) {\n    \
    \            if(value < smallestEven) {\n                    smallestEven = value;\n\
    \                    smallestIndex = i;\n                }\n            }\n  \
    \      }\n        result.add(smallestEven);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw6jbt3d9.java:48: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for(Long val : arr) {\n            if(val\
    \ % 2 == 0) {\n                if(smallestEven > val) {\n                    smallestEven\
    \ = val;\n                    smallestIndex = arr.indexOf(val);\n            \
    \    }\n            }\n        }\n        result.add(smallestEven);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpokim0gl_.java:47: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long smallest_even_value = Long.MIN_VALUE;\n\
    \        int smallest_even_index = 0;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (smallest_even_value\
    \ < arr.get(i)) {\n                    smallest_even_value = arr.get(i);\n   \
    \                 smallest_even_index = i;\n                }\n            }\n\
    \        }\n        res.add(smallest_even_value);\n        res.add(smallest_even_index);\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkzmf32kz.java:47: error: incompatible types: int cannot be converted\
    \ to Long\n        res.add(smallest_even_index);\n                ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        long smallestIndex = 0;\n      \
    \  boolean foundSmallestEvenValue = false;\n        boolean foundSmallestIndex\
    \ = false;\n        for(int i = 0; i < arr.size(); i++) {\n            long value\
    \ = arr.get(i);\n            if(value % 2 == 0) {\n                smallestEvenValue\
    \ = value;\n                foundSmallestEvenValue = true;\n            }\n  \
    \          if(!foundSmallestEvenValue) {\n                smallestIndex = i;\n\
    \                foundSmallestEvenValue = true;\n            }\n        }\n  \
    \      if(foundSmallestEvenValue) {\n            smallestEvenValue = smallestEvenValue\
    \ + 1;\n            smallestIndex = smallestIndex + 1;\n        }\n        if(smallestEvenValue\
    \ == 0) {\n            result.add(0);\n            result.add(smallestIndex);\n\
    \            return result;\n        }\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            long value = arr.get(i);\n            if(value % 2 == 0)\
    \ {\n                if(smallestEvenValue == value) {\n                    result.add(smallestEvenValue);\n\
    \                    result.add(smallestIndex);\n                    return result;\n\
    \                }\n                if(smallestEvenValue > value) {\n        \
    \            result.add(smallestEvenValue);\n                    result.add(smallestIndex);\n\
    \                    return result;\n                }\n            }\n      \
    \  }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc4htqgeo.java:57: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(0);\n                       ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659798552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = Long.MAX_VALUE;\n\
    \        int smallestIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if((value % 2) == 0) {\n  \
    \              if(value < smallestEvenValue) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = i;\n                }\n      \
    \      }\n        }\n        if(smallestEvenValue != Long.MAX_VALUE) {\n     \
    \       result.add(smallestEvenValue);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj9ci5vt9.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n    \
    \    int smallestIndex = 0;\n        for (Long node : arr) {\n            if (node\
    \ % 2 == 0) {\n                if (smallestEven > node) {\n                  \
    \  smallestEven = node;\n                    smallestIndex = arr.indexOf(node);\n\
    \                }\n            }\n        }\n        if (smallestEven != Long.MAX_VALUE)\
    \ {\n            res.add(smallestEven);\n            res.add(smallestIndex);\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjtcu8513.java:48: error: incompatible types: int cannot be converted\
    \ to Long\n            res.add(smallestIndex);\n                    ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> temp = new ArrayList<Long>();\n\
    \        long smallestEvenValue = 0;\n        long smallestIndex = 0;\n      \
    \  boolean foundSmallestEvenValue = false;\n        boolean foundSmallestIndex\
    \ = false;\n        for(Long node : arr) {\n            if(node % 2 == 0) {\n\
    \                foundSmallestEvenValue = true;\n                smallestEvenValue\
    \ = node;\n                foundSmallestIndex = true;\n            }\n       \
    \     else if(foundSmallestEvenValue) {\n                if(node < smallestEvenValue)\
    \ {\n                    foundSmallestEvenValue = false;\n                   \
    \ smallestEvenValue = node;\n                    foundSmallestIndex = true;\n\
    \                }\n                else if(node == smallestEvenValue) {\n   \
    \                 foundSmallestIndex = true;\n                }\n            }\n\
    \            else if(foundSmallestIndex) {\n                if(node < smallestIndex)\
    \ {\n                    foundSmallestIndex = false;\n                    smallestIndex\
    \ = node;\n                }\n            }\n        }\n        if(foundSmallestEvenValue)\
    \ {\n            result.add(smallestEvenValue);\n            result.add(smallestIndex);\n\
    \        }\n        else if(foundSmallestIndex) {\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2whac0vq.java:74)\n"
  stdout: ''
  timestamp: 1659798552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long smallestEven = Long.MAX_VALUE;\n\
    \        int smallestIndex = 0;\n        for (Long node : arr) {\n           \
    \ if (node.isEven()) {\n                if (smallestEven > node.value) {\n   \
    \                 smallestEven = node.value;\n                    smallestIndex\
    \ = arr.indexOf(node);\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6y7gg6qw.java:39: error: cannot find symbol\n            if (node.isEven())\
    \ {\n                    ^\n  symbol:   method isEven()\n  location: variable\
    \ node of type Long\n/tmp/tmp6y7gg6qw.java:40: error: value has private access\
    \ in Long\n                if (smallestEven > node.value) {\n                \
    \                       ^\n/tmp/tmp6y7gg6qw.java:41: error: value has private\
    \ access in Long\n                    smallestEven = node.value;\n           \
    \                            ^\n/tmp/tmp6y7gg6qw.java:47: error: incompatible\
    \ types: int cannot be converted to Long\n        result.add(smallestIndex);\n\
    \                   ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659798552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallestEvenValue\
    \ = arr.get(0);\n        long smallestIndex = 0;\n        boolean foundSmallestEvenValue\
    \ = false;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0) {\n                if (!foundSmallestEvenValue) {\n              \
    \      smallestEvenValue = arr.get(i);\n                    smallestIndex = i;\n\
    \                    foundSmallestEvenValue = true;\n                }\n     \
    \       } else if (foundSmallestEvenValue) {\n                result.add(smallestEvenValue);\n\
    \                result.add(smallestIndex);\n                break;\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpswzffxvn.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659798552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        Arrays.sort(arr);\n        long smallest_value\
    \ = arr.get(0);\n        int smallest_index = 0;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (arr.get(i) < smallest_value) {\n                    smallest_value = arr.get(i);\n\
    \                    smallest_index = i;\n                }\n            }\n \
    \       }\n        result.add(smallest_value);\n        result.add(smallest_index);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcohzireg.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpcohzireg.java:48: error: incompatible types: int cannot\
    \ be converted to Long\n        result.add(smallest_index);\n                \
    \   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallest\
    \ = arr.get(0);\n        int smallest_index = -1;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (smallest > arr.get(i)) {\n                    smallest = arr.get(i);\n \
    \                   smallest_index = i;\n                }\n            }\n  \
    \      }\n        if (smallest == 0) {\n            return result;\n        }\n\
    \        result.add(smallest);\n        result.add(smallest_index);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfqf23v90.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpfqf23v90.java:51: error: no suitable method found for add(int)\n\
    \        result.add(smallest_index);\n              ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollec"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long smallestEven = Long.MIN_VALUE;\n    \
    \    int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0) {\n                if (smallestEven > arr.get(i))\
    \ {\n                    smallestEven = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        res.add(smallestEven);\n\
    \        res.add(smallestIndex);\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ix8ozs4.java:47: error: incompatible types: int cannot be converted\
    \ to Long\n        res.add(smallestIndex);\n                ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659798552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = 0;\n        int\
    \ smallestIndex = 0;\n        for(Long node : arr) {\n            if(node % 2\
    \ == 0) {\n                if(smallestEvenValue < node) {\n                  \
    \  smallestEvenValue = node;\n                    smallestIndex = arr.indexOf(node);\n\
    \                }\n            }\n        }\n        if(smallestEvenValue ==\
    \ 0) {\n            return result;\n        }\n        for(Long node : arr) {\n\
    \            if(node % 2 == 0) {\n                if(smallestEvenValue == node)\
    \ {\n                    result.add(node);\n                    result.add(smallestIndex);\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa_d8v0h8.java:53: error: incompatible types: int cannot be converted\
    \ to Long\n                    result.add(smallestIndex);\n                  \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659798552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        Long min = arr.get(0);\n\
    \        int index = 0;\n        for (int i = 1; i < arr.size(); i++) {\n    \
    \        if (arr.get(i) % 2 == 0) {\n                if (min > arr.get(i)) {\n\
    \                    min = arr.get(i);\n                    index = i;\n     \
    \           }\n            }\n        }\n        result.add(min);\n        result.add(index);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpininkjot.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpininkjot.java:48: error: incompatible types: int cannot\
    \ be converted to Long\n        result.add(index);\n                   ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  stdout: ''
  timestamp: 1659798552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        boolean found = false;\n        for(Long val : arr) {\n            if(val\
    \ % 2 == 0) {\n                found = true;\n                smallestEven = val;\n\
    \                smallestIndex = arr.indexOf(val);\n            }\n        }\n\
    \        if(found) {\n            for(Long val : arr) {\n                if(val\
    \ % 2 == 0) {\n                    if(val < smallestEven) {\n                \
    \        smallestEven = val;\n                        smallestIndex = arr.indexOf(val);\n\
    \                    }\n                }\n            }\n            result.add(smallestEven);\n\
    \            result.add(smallestIndex);\n        } else {\n            result.add(smallestEven);\n\
    \            result.add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpubxcv7cf.java:57: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    /tmp/tmpubxcv7cf.java:60: error: incompatible types: int cannot be converted to\
    \ Long\n            result.add(smallestIndex);\n                       ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  stdout: ''
  timestamp: 1659798552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long smallestEvenValue = 0;\n     \
    \   long smallestIndex = 0;\n        for(long value : arr) {\n            if(value\
    \ % 2 == 0) {\n                if(smallestEvenValue < value) {\n             \
    \       smallestEvenValue = value;\n                    smallestIndex = arr.indexOf(value);\n\
    \                }\n            }\n        }\n        if(smallestEvenValue !=\
    \ 0) {\n            result.add(smallestEvenValue);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb3k_j6q4.java:53)\n"
  stdout: ''
  timestamp: 1659798552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0) {\n   \
    \             if (value < smallestEven) {\n                    smallestEven =\
    \ value;\n                    smallestIndex = i;\n                }\n        \
    \    }\n        }\n        if (smallestEven != Long.MAX_VALUE) {\n           \
    \ result.add(smallestEven);\n            result.add(smallestIndex);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnpmtucko.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long smalest_value = Long.MAX_VALUE;\n   \
    \     int smalest_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0) {\n   \
    \             if (smalest_value < value) {\n                    smalest_value\
    \ = value;\n                    smalest_index = i;\n                }\n      \
    \      }\n        }\n        if (smalest_index != -1) {\n            res.add(smalest_value);\n\
    \            res.add(smalest_index);\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt7i9kvcg.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            res.add(smalest_index);\n                    ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        long smallestEvenValue = Long.MAX_VALUE;\n\
    \        int smallestIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if(value % 2 == 0) {\n    \
    \            if(value < smallestEvenValue) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = i;\n                }\n      \
    \      }\n        }\n        if(smallestEvenValue != Long.MAX_VALUE) {\n     \
    \       res.add(smallestEvenValue);\n            res.add(smallestIndex);\n   \
    \     }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8r3wky2e.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            res.add(smallestIndex);\n                    ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallest\
    \ = arr.get(0);\n        int smallest_index = 0;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (smallest > arr.get(i)) {\n                    smallest = arr.get(i);\n \
    \                   smallest_index = i;\n                }\n            }\n  \
    \      }\n        result.add(smallest);\n        result.add(smallest_index);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8509nus_.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp8509nus_.java:48: error: incompatible types: int cannot\
    \ be converted to Long\n        result.add(smallest_index);\n                \
    \   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long smallestEven = Long.MIN_VALUE;\n    \
    \    long smallestIndex = Long.MIN_VALUE;\n        long currentEven = Long.MIN_VALUE;\n\
    \        long currentIndex = Long.MIN_VALUE;\n        for (Long node : arr) {\n\
    \            if (node.isEven()) {\n                if (currentEven == node.value)\
    \ {\n                    currentEven = Long.MIN_VALUE;\n                    currentIndex\
    \ = Long.MIN_VALUE;\n                }\n                else {\n             \
    \       if (currentEven == smallestEven) {\n                        currentIndex\
    \ = currentIndex + 1;\n                    }\n                    else {\n   \
    \                     res.add(smallestEven);\n                        res.add(currentIndex);\n\
    \                        smallestEven = node.value;\n                        currentEven\
    \ = node.value;\n                        currentIndex = Long.MIN_VALUE;\n    \
    \                }\n                }\n            }\n            else {\n   \
    \             if (currentEven == node.value) {\n                    currentEven\
    \ = Long.MIN_VALUE;\n                    currentIndex = Long.MIN_VALUE;\n    \
    \            }\n                else {\n                    if (currentEven ==\
    \ smallestEven) {\n                        currentIndex = currentIndex + 1;\n\
    \                    }\n                    else {\n                        res.add(smallestEven);\n\
    \                        res.add(currentIndex);\n                        smallestEven\
    \ = node.value;\n                        currentEven = node.value;\n         \
    \               currentIndex = Long.MIN_VALUE;\n                    }\n      \
    \          }\n            }\n        }\n        if (currentEven == smallestEven)\
    \ {\n            currentIndex = currentIndex + 1;\n        }\n        else {\n\
    \            res.add(smallestEven);\n            res.add(currentIndex);\n    \
    \    }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppimg9dof.java:41: error: cannot find symbol\n            if (node.isEven())\
    \ {\n                    ^\n  symbol:   method isEven()\n  location: variable\
    \ node of type Long\n/tmp/tmppimg9dof.java:42: error: value has private access\
    \ in Long\n                if (currentEven == node.value) {\n                \
    \                       ^\n/tmp/tmppimg9dof.java:53: error: value has private\
    \ access in Long\n                        smallestEven = node.value;\n       \
    \                                    ^\n/tmp/tmppimg9dof.java:54: error: value\
    \ has private access in Long\n                        currentEven = node.value;\n\
    \                                          ^\n/tmp/tmppimg9dof.java:60: error:\
    \ value has private access in Long\n                if (currentEven == node.value)\
    \ {\n                                       ^\n/tmp/tmppimg9dof.java:71: error:\
    \ value has private access in Long\n                        smallestEven = node.value;\n\
    \                                           ^\n/tmp/tmppimg9dof.java:72: error:\
    \ value has private access in Long\n                        currentEven = node.value;\n\
    \                                          ^\n7 errors\n"
  stdout: ''
  timestamp: 1659798553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long smallest_value = Long.MAX_VALUE;\n  \
    \      int smallest_index = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0) {\n\
    \                if (value < smallest_value) {\n                    smallest_value\
    \ = value;\n                    smallest_index = i;\n                }\n     \
    \       }\n        }\n        if (smallest_index != -1) {\n            res.add(smallest_value);\n\
    \            res.add(smallest_index);\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8n3dxfsw.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            res.add(smallest_index);\n                    ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1659798553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0) {\n   \
    \             if (smallestEven > value) {\n                    smallestEven =\
    \ value;\n                    smallestIndex = i;\n                }\n        \
    \    }\n        }\n        if (smallestEven != Long.MAX_VALUE) {\n           \
    \ result.add(smallestEven);\n            result.add(smallestIndex);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzt6u87xm.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0) {\n                if (smallestEvenValue > arr.get(i)) {\n       \
    \             smallestEvenValue = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        temp.add(smallestEvenValue);\n\
    \        temp.add(smallestIndex);\n        result.add(temp);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpke61inhf.java:48: error: no suitable method found for add(int)\n\
    \        temp.add(smallestIndex);\n            ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\n/tmp/tmpke61inhf.java:49: error: no suitable method\
    \ found for add(ArrayList<Long>)\n        result.add(temp);\n              ^\n\
    \    method Collection.add(Long) is not applicable\n      (argument mismatch;\
    \ ArrayList<Long> cannot be converted to Long)\n    method List.add(Long) is not\
    \ applicable\n      (argument mismatch; ArrayList<Long> cannot be converted to\
    \ Long)\n    method AbstractCollection.add(Long) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method ArrayList.add(Long) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Long)\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallest_value = Long.MAX_VALUE;\n\
    \        int smallest_index = 0;\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if(value % 2 == 0) {\n\
    \                if(value < smallest_value) {\n                    smallest_value\
    \ = value;\n                    smallest_index = i;\n                }\n     \
    \       }\n        }\n        result.add(smallest_value, smallest_index);\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3txkaz2b.java:47: error: incompatible types: possible lossy conversion\
    \ from long to int\n        result.add(smallest_value, smallest_index);\n    \
    \               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659798553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0) {\n                smallestEven = Math.min(smallestEven,\
    \ arr.get(i));\n                smallestIndex = i;\n            }\n        }\n\
    \        if (smallestEven != Long.MAX_VALUE) {\n            result.add(smallestEven);\n\
    \            result.add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp8_npk4u.java:46: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = Long.MAX_VALUE;\n\
    \        int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0) {\n\
    \                if (smallestEvenValue < value) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = i;\n                }\n      \
    \      }\n        }\n        if (smallestEvenValue != Long.MAX_VALUE) {\n    \
    \        result.add(smallestEvenValue);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx7kedb3_.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798553
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> temp = new ArrayList<Long>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        long smallestIndex = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven == Long.MAX_VALUE) {\n         \
    \           smallestEven = arr.get(i);\n                    smallestIndex = i;\n\
    \                } else {\n                    if (arr.get(i) < smallestEven)\
    \ {\n                        smallestEven = arr.get(i);\n                    \
    \    smallestIndex = i;\n                    }\n                }\n          \
    \  }\n        }\n        if (smallestEven != Long.MAX_VALUE) {\n            result.add(smallestEven);\n\
    \            result.add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798554
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MIN_VALUE;\n \
    \       int smallestIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if(value % 2 == 0) {\n    \
    \            if(smallestEven > value) {\n                    smallestEven = value;\n\
    \                    smallestIndex = i;\n                }\n            }\n  \
    \      }\n        if(smallestEven != Long.MIN_VALUE) {\n            result.add(smallestEven);\n\
    \            result.add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5u_vxxjb.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        long smallest_value = 0;\n        int\
    \ smallest_index = 0;\n        for(int i = 0; i < arr.size(); i++) {\n       \
    \     long value = arr.get(i);\n            if(value % 2 == 0) {\n           \
    \     if(value < smallest_value) {\n                    smallest_value = value;\n\
    \                    smallest_index = i;\n                }\n            }\n \
    \       }\n        if(smallest_index != 0) {\n            res.add(smallest_value);\n\
    \            res.add(smallest_index);\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfykkfbsh.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            res.add(smallest_index);\n                    ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1659798553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        long smallestEven = Long.MAX_VALUE;\n\
    \        int smallestIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if((value % 2) == 0) {\n  \
    \              if(smallestEven > value) {\n                    smallestEven =\
    \ value;\n                    smallestIndex = i;\n                }\n        \
    \    }\n        }\n        if(smallestEven != Long.MAX_VALUE) {\n            res.add(smallestEven);\n\
    \            res.add(smallestIndex);\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_x085jde.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            res.add(smallestIndex);\n                    ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798554
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        int smallestIndex = 0;\n       \
    \ for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0)\
    \ {\n                smallestEvenValue = arr.get(i);\n                smallestIndex\
    \ = i;\n            }\n        }\n        if (smallestEvenValue == 0) {\n    \
    \        return result;\n        }\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) == smallestEvenValue) {\n                temp.add(arr.get(i));\n\
    \            }\n        }\n        Collections.sort(temp);\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdjqtahy3.java:55: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798554
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallest\
    \ = arr.get(0);\n        int smallest_index = -1;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (smallest > arr.get(i)) {\n                    smallest = arr.get(i);\n \
    \                   smallest_index = i;\n                }\n            }\n  \
    \      }\n        if (smallest == 0) {\n            return result;\n        }\n\
    \        result.add(smallest);\n        result.add(smallest_index);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfqf23v90.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpfqf23v90.java:51: error: no suitable method found for add(int)\n\
    \        result.add(smallest_index);\n              ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollec"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (Long node : arr) {\n            if\
    \ (node.isEven()) {\n                if (smallestEven > node.value) {\n      \
    \              smallestEven = node.value;\n                    smallestIndex =\
    \ arr.indexOf(node);\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8n9_83za.java:39: error: cannot find symbol\n            if (node.isEven())\
    \ {\n                    ^\n  symbol:   method isEven()\n  location: variable\
    \ node of type Long\n/tmp/tmp8n9_83za.java:40: error: value has private access\
    \ in Long\n                if (smallestEven > node.value) {\n                \
    \                       ^\n/tmp/tmp8n9_83za.java:41: error: value has private\
    \ access in Long\n                    smallestEven = node.value;\n           \
    \                            ^\n/tmp/tmp8n9_83za.java:47: error: incompatible\
    \ types: int cannot be converted to Long\n        result.add(smallestIndex);\n\
    \                   ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659798554
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        temp.add(smallestEven);\n\
    \        temp.add(smallestIndex);\n        res.add(temp);\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsaaf20ms.java:48: error: incompatible types: int cannot be converted\
    \ to Long\n        temp.add(smallestIndex);\n                 ^\n/tmp/tmpsaaf20ms.java:49:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to Long\n   \
    \     res.add(temp);\n                ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798554
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        long smallestIndex = -1;\n\
    \        long tempSmallestEven = Long.MAX_VALUE;\n        long tempSmallestIndex\
    \ = -1;\n        for(long i : arr) {\n            if(i%2 == 0) {\n           \
    \     tempSmallestEven = i;\n                tempSmallestIndex = i;\n        \
    \    }\n            if(i == smallestEven) {\n                smallestIndex = i;\n\
    \            }\n            if(i<smallestEven) {\n                smallestEven\
    \ = i;\n                smallestIndex = i;\n            }\n        }\n       \
    \ if(smallestEven == Long.MAX_VALUE) {\n            return result;\n        }\n\
    \        for(long i : arr) {\n            if(i%2 == 0) {\n                tempSmallestEven\
    \ = i;\n                tempSmallestIndex = i;\n            }\n            if(i\
    \ == smallestEven) {\n                smallestIndex = i;\n            }\n    \
    \        if(i<smallestEven) {\n                smallestEven = i;\n           \
    \     smallestIndex = i;\n            }\n        }\n        temp.add(smallestEven);\n\
    \        temp.add(smallestIndex);\n        result.add(temp);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ul9lxne.java:72: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n        result.add(temp);\n                   ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1659798554
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = Long.MIN_VALUE;\n\
    \        int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0) {\n\
    \                if (smallestEvenValue < value) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = i;\n                }\n      \
    \      }\n        }\n        if (smallestEvenValue == Long.MIN_VALUE) {\n    \
    \        return result;\n        }\n        ArrayList<Long> evenValues = new ArrayList<>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                evenValues.add(value);\n \
    \           }\n        }\n        Arrays.sort(evenValues);\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0c2_mb71.java:57: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(evenValues);\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp0c2_mb71.java:59: error: incompatible types: int cannot\
    \ be converted to Long\n        result.add(smallestIndex);\n                 \
    \  ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798554
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = 0;\n        int\
    \ smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n       \
    \     if (arr.get(i) % 2 == 0) {\n                if (smallestEvenValue == 0)\
    \ {\n                    smallestEvenValue = arr.get(i);\n                   \
    \ smallestIndex = i;\n                } else if (arr.get(i) < smallestEvenValue)\
    \ {\n                    smallestEvenValue = arr.get(i);\n                   \
    \ smallestIndex = i;\n                }\n            }\n        }\n        if\
    \ (smallestEvenValue == 0) {\n            return result;\n        }\n        ArrayList<Long>\
    \ evenValues = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                evenValues.add(arr.get(i));\n\
    \            }\n        }\n        Collections.sort(evenValues);\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzm8sx1ka.java:60: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798554
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallest_value = Long.MAX_VALUE;\n\
    \        int smallest_index = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0) {\n\
    \                if (value < smallest_value) {\n                    smallest_value\
    \ = value;\n                    smallest_index = i;\n                }\n     \
    \       }\n        }\n        if (smallest_index != 0) {\n            result.add(smallest_value);\n\
    \            result.add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi_o_0umj.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallest_index);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798554
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       long smallestIndex = -1;\n        long currentEven = Long.MAX_VALUE;\n\
    \        long currentIndex = -1;\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if(value % 2 == 0) {\n\
    \                if(currentEven == Long.MAX_VALUE) {\n                    currentEven\
    \ = value;\n                    currentIndex = i;\n                } else if(value\
    \ < currentEven) {\n                    currentEven = value;\n               \
    \     currentIndex = i;\n                }\n            }\n        }\n       \
    \ if(currentEven != Long.MAX_VALUE) {\n            smallestEven = currentEven;\n\
    \            smallestIndex = currentIndex;\n        }\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            long value = arr.get(i);\n            if(value\
    \ % 2 == 0) {\n                if(value < smallestEven) {\n                  \
    \  smallestEven = value;\n                    smallestIndex = i;\n           \
    \     }\n            }\n        }\n        if(smallestEven != Long.MAX_VALUE)\
    \ {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798554
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0) {\n   \
    \             if (value < smallestEven) {\n                    smallestEven =\
    \ value;\n                    smallestIndex = i;\n                }\n        \
    \    }\n        }\n        if (smallestEven != Long.MAX_VALUE) {\n           \
    \ result.add(smallestEven);\n            result.add(smallestIndex);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnpmtucko.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long smalest_value = Long.MIN_VALUE;\n   \
    \     int smalest_index = -1;\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            int index = i;\n          \
    \  while(index > 0 && arr.get(index - 1) % 2 == 0) {\n                index--;\n\
    \            }\n            if(value == smalest_value) {\n                res.add(value);\n\
    \                res.add(index);\n            } else {\n                if(value\
    \ < smalest_value) {\n                    smalest_value = value;\n           \
    \         smalest_index = index;\n                }\n            }\n        }\n\
    \        if(smalest_index == -1) {\n            return res;\n        } else {\n\
    \            return res.subList(0, smalest_index + 1);\n        }\n    }\n   \
    \ public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbz3267m8.java:46: error: incompatible types: int cannot be converted\
    \ to Long\n                res.add(index);\n                        ^\n/tmp/tmpbz3267m8.java:57:\
    \ error: incompatible types: List<Long> cannot be converted to ArrayList<Long>\n\
    \            return res.subList(0, smalest_index + 1);\n                     \
    \         ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798554
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0) {\n   \
    \             if (value < smallestEven) {\n                    smallestEven =\
    \ value;\n                    smallestIndex = i;\n                }\n        \
    \    }\n        }\n        if (smallestEven != Long.MAX_VALUE) {\n           \
    \ result.add(smallestEven);\n            result.add(smallestIndex);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnpmtucko.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallest\
    \ = arr.get(0);\n        int smallest_index = 0;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (smallest > arr.get(i)) {\n                    smallest = arr.get(i);\n \
    \                   smallest_index = i;\n                }\n            }\n  \
    \      }\n        result.add(smallest);\n        result.add(smallest_index);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8509nus_.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp8509nus_.java:48: error: incompatible types: int cannot\
    \ be converted to Long\n        result.add(smallest_index);\n                \
    \   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for(Long value : arr) {\n            if(value\
    \ % 2 == 0) {\n                if(smallestEven > value) {\n                  \
    \  smallestEven = value;\n                    smallestIndex = arr.indexOf(value);\n\
    \                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq_elglv_.java:47: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798554
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallest_value = Long.MAX_VALUE;\n\
    \        int smallest_index = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0) {\n\
    \                if (value < smallest_value) {\n                    smallest_value\
    \ = value;\n                    smallest_index = i;\n                }\n     \
    \       }\n        }\n        if (smallest_index != -1) {\n            result.add(smallest_value,\
    \ smallest_index);\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp746509h2.java:48: error: incompatible types: possible lossy conversion\
    \ from long to int\n            result.add(smallest_value, smallest_index);\n\
    \                       ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659798554
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallestEven\
    \ = arr.get(0);\n        int smallestIndex = -1;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (smallestEven == arr.get(i)) {\n                    smallestIndex = i;\n\
    \                    smallestEven = arr.get(i);\n                }\n         \
    \   }\n        }\n        if (smallestIndex != -1) {\n            result.add(smallestEven);\n\
    \            result.add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph_1s3mq0.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmph_1s3mq0.java:49: error: incompatible types: int cannot\
    \ be converted to Long\n            result.add(smallestIndex);\n             \
    \          ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798554
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = Long.MAX_VALUE;\n\
    \        int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                if (smallestEvenValue\
    \ > arr.get(i)) {\n                    smallestEvenValue = arr.get(i);\n     \
    \               smallestIndex = i;\n                }\n            }\n       \
    \ }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfk03ehbu.java:47: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> temp = new ArrayList<Long>();\n\
    \        long smallestEvenValue = 0;\n        long smallestIndex = 0;\n      \
    \  long smallestValue = 0;\n        boolean foundSmallestEvenValue = false;\n\
    \        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestEvenValue = false;\n        boolean foundSmallestIndex\
    \ = false;\n        boolean foundSmallestValue = false;\n        boolean foundSmallestEvenValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestEvenValue = false;\n        boolean foundSmallestIndex\
    \ = false;\n        boolean foundSmallestValue = false;\n        boolean foundSmallestEvenValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestEvenValue = false;\n        boolean foundSmallestIndex\
    \ = false;\n        boolean foundSmallestValue = false;\n        boolean foundSmallestEvenValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestEvenValue = false;\n        boolean foundSmallestIndex\
    \ = false;\n        boolean foundSmallestValue = false;\n        boolean foundSmallestEvenValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestEvenValue = false;\n        boolean foundSmallestIndex\
    \ = false;\n        boolean foundSmallestValue = false;\n        boolean foundSmallestEvenValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestEvenValue = false;\n        boolean foundSmallestIndex\
    \ = false;\n        boolean foundSmallestValue = false;\n        boolean foundSmallestEvenValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestEvenValue = false;\n        boolean foundSmallestIndex\
    \ = false;\n        boolean foundSmallestValue = false;\n        boolean foundSmallestEvenValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestEvenValue = false;\n        boolean foundSmallestIndex\
    \ = false;\n        boolean foundSmallestValue = false;\n        boolean foundSmallestEvenValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean found\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplmeo8dnx.java:90: error: ';' expected\n        boolean found\n\
    \                     ^\n1 error\n"
  stdout: ''
  timestamp: 1659798553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long smallest_even = Long.MAX_VALUE;\n   \
    \     int smallest_index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0) {\n   \
    \             if (smallest_even > value) {\n                    smallest_even\
    \ = value;\n                    smallest_index = i;\n                }\n     \
    \       }\n        }\n        if (smallest_even != Long.MAX_VALUE) {\n       \
    \     res.add(smallest_even);\n            res.add(smallest_index);\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphxmsc9wt.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            res.add(smallest_index);\n                    ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1659798554
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (Long node : arr) {\n            if\
    \ (node % 2 == 0) {\n                if (smallestEven > node) {\n            \
    \        smallestEven = node;\n                    smallestIndex = arr.indexOf(node);\n\
    \                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm9xjkd23.java:47: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallestEven\
    \ = arr.get(0);\n        long smallestIndex = arr.get(0);\n        for (int i\
    \ = 1; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n      \
    \          if (smallestEven > arr.get(i)) {\n                    smallestEven\
    \ = arr.get(i);\n                    smallestIndex = i;\n                }\n \
    \           }\n        }\n        res.add(smallestEven);\n        res.add(smallestIndex);\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpora_hdws.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659798555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long smallestEven = Long.MAX_VALUE;\n\
    \        int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0) {\n\
    \                if (value < smallestEven) {\n                    smallestEven\
    \ = value;\n                    smallestIndex = i;\n                }\n      \
    \      }\n        }\n        if (smallestEven != Long.MAX_VALUE) {\n         \
    \   result.add(smallestEven);\n            result.add(smallestIndex);\n      \
    \  }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqzgv26z1.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long smallestEven = Long.MAX_VALUE;\n\
    \        int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                if (smallestEven\
    \ > arr.get(i)) {\n                    smallestEven = arr.get(i);\n          \
    \          smallestIndex = i;\n                }\n            }\n        }\n \
    \       result.add(smallestEven);\n        result.add(smallestIndex);\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps62bi1v6.java:47: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = Long.MIN_VALUE;\n\
    \        int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                if (smallestEvenValue\
    \ < arr.get(i)) {\n                    smallestEvenValue = arr.get(i);\n     \
    \               smallestIndex = i;\n                }\n            }\n       \
    \ }\n        if (smallestEvenValue == Long.MIN_VALUE) {\n            return result;\n\
    \        }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq80jop4o.java:50: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = -1;\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if(value % 2 == 0) {\n    \
    \            if(value < smallestEven) {\n                    smallestEven = value;\n\
    \                    smallestIndex = i;\n                }\n            }\n  \
    \      }\n        if(smallestEven != Long.MAX_VALUE) {\n            result.add(smallestEven);\n\
    \            result.add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3aqoe9r0.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        Arrays.sort(arr);\n        int size = arr.size();\n\
    \        long smalest_value = arr.get(0);\n        int smalest_index = 0;\n  \
    \      for (int i = 1; i < size; i++) {\n            if (arr.get(i) % 2 == 0)\
    \ {\n                smalest_value = arr.get(i);\n                smalest_index\
    \ = i;\n            }\n        }\n        res.add(smalest_value);\n        res.add(smalest_index);\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn7ofm4t1.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpn7ofm4t1.java:47: error: incompatible types: int cannot\
    \ be converted to Long\n        res.add(smalest_index);\n                ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  stdout: ''
  timestamp: 1659798555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        int smallestIndex = 0;\n       \
    \ for(Long i : arr) {\n            if(i%2 == 0) {\n                smallestEvenValue\
    \ = i;\n            }\n        }\n        for(Long i : arr) {\n            if(i%2\
    \ == 0) {\n                if(i == smallestEvenValue) {\n                    smallestIndex\
    \ = arr.indexOf(i);\n                }\n            }\n        }\n        if(smallestIndex\
    \ != 0) {\n            temp.add(smallestEvenValue);\n            temp.add(smallestIndex);\n\
    \            result.add(temp);\n        }\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeac6dfq6.java:53: error: incompatible types: int cannot be converted\
    \ to Long\n            temp.add(smallestIndex);\n                     ^\n/tmp/tmpeac6dfq6.java:54:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to Long\n   \
    \         result.add(temp);\n                       ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = Long.MAX_VALUE;\n\
    \        int smallestIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if(value % 2 == 0) {\n    \
    \            if(value < smallestEvenValue) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = i;\n                }\n      \
    \      }\n        }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfudirt5i.java:48: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = Long.MIN_VALUE;\n\
    \        long smallestIndex = 0;\n        long currentEvenValue = Long.MIN_VALUE;\n\
    \        long currentIndex = 0;\n        boolean foundSmallestEvenValue = false;\n\
    \        boolean foundSmallestIndex = false;\n        for(Long val : arr) {\n\
    \            if(val % 2 == 0) {\n                currentEvenValue = val;\n   \
    \             currentIndex++;\n            }\n            else {\n           \
    \     if(currentEvenValue < smallestEvenValue) {\n                    foundSmallestEvenValue\
    \ = true;\n                    smallestEvenValue = currentEvenValue;\n       \
    \             smallestIndex = currentIndex;\n                }\n             \
    \   currentEvenValue = Long.MIN_VALUE;\n                currentIndex = 0;\n  \
    \          }\n        }\n        if(foundSmallestEvenValue) {\n            result.add(smallestEvenValue);\n\
    \            result.add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5kun169a.java:64)\n"
  stdout: ''
  timestamp: 1659798555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallest\
    \ = arr.get(0);\n        int smallest_index = -1;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (smallest > arr.get(i)) {\n                    smallest = arr.get(i);\n \
    \                   smallest_index = i;\n                }\n            }\n  \
    \      }\n        result.add(smallest);\n        result.add(smallest_index);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbyc71eea.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpbyc71eea.java:48: error: no suitable method found for add(int)\n\
    \        result.add(smallest_index);\n              ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollec"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0) {\n   \
    \             if (value < smallestEven) {\n                    smallestEven =\
    \ value;\n                    smallestIndex = i;\n                }\n        \
    \    }\n        }\n        if (smallestEven != Long.MAX_VALUE) {\n           \
    \ result.add(smallestEven);\n            result.add(smallestIndex);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnpmtucko.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallest\
    \ = arr.get(0);\n        int smallest_index = 0;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (smallest > arr.get(i)) {\n                    smallest = arr.get(i);\n \
    \                   smallest_index = i;\n                }\n            }\n  \
    \      }\n        result.add(smallest);\n        result.add(smallest_index);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8509nus_.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp8509nus_.java:48: error: incompatible types: int cannot\
    \ be converted to Long\n        result.add(smallest_index);\n                \
    \   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n    \
    \    int smallestIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           long value = arr.get(i);\n            if((value & 1) == 0) {\n   \
    \             if(value < smallestEven) {\n                    smallestEven = value;\n\
    \                    smallestIndex = i;\n                }\n            }\n  \
    \      }\n        if(smallestEven != Long.MAX_VALUE) {\n            res.add(smallestEven);\n\
    \            res.add(smallestIndex);\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95vsznu9.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            res.add(smallestIndex);\n                    ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0) {\n   \
    \             if (value < smallestEven) {\n                    smallestEven =\
    \ value;\n                    smallestIndex = i;\n                }\n        \
    \    }\n        }\n        result.add(smallestEven);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq3fs4alj.java:48: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long smallestEven = Long.MAX_VALUE;\n\
    \        int smallestIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if(value % 2 == 0) {\n    \
    \            if(value < smallestEven) {\n                    smallestEven = value;\n\
    \                    smallestIndex = i;\n                }\n            }\n  \
    \      }\n        if(smallestEven != Long.MAX_VALUE) {\n            result.add(smallestEven);\n\
    \            result.add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpui38nl4t.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = 0;\n        int\
    \ smallestIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n        \
    \    long value = arr.get(i);\n            if(value % 2 == 0) {\n            \
    \    if(smallestEvenValue < value) {\n                    smallestEvenValue =\
    \ value;\n                    smallestIndex = i;\n                }\n        \
    \    }\n        }\n        if(smallestEvenValue != 0) {\n            result.add(smallestEvenValue);\n\
    \            result.add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8noa_lrd.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallest_value = Long.MAX_VALUE;\n\
    \        int smallest_index = 0;\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if(value % 2 == 0) {\n\
    \                if(value < smallest_value) {\n                    smallest_value\
    \ = value;\n                    smallest_index = i;\n                }\n     \
    \       }\n        }\n        result.add(smallest_value, smallest_index);\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3txkaz2b.java:47: error: incompatible types: possible lossy conversion\
    \ from long to int\n        result.add(smallest_value, smallest_index);\n    \
    \               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659798553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = 0;\n        long\
    \ smallestIndex = 0;\n        long smallestValue = 0;\n        boolean foundSmallestEvenValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestEvenValue = false;\n        boolean foundSmallestIndex\
    \ = false;\n        boolean foundSmallestValue = false;\n        boolean foundSmallestEvenValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestEvenValue = false;\n        boolean foundSmallestIndex\
    \ = false;\n        boolean foundSmallestValue = false;\n        boolean foundSmallestEvenValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestEvenValue = false;\n        boolean foundSmallestIndex\
    \ = false;\n        boolean foundSmallestValue = false;\n        boolean foundSmallestEvenValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestEvenValue = false;\n        boolean foundSmallestIndex\
    \ = false;\n        boolean foundSmallestValue = false;\n        boolean foundSmallestEvenValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestEvenValue = false;\n        boolean foundSmallestIndex\
    \ = false;\n        boolean foundSmallestValue = false;\n        boolean foundSmallestEvenValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestEvenValue = false;\n        boolean foundSmallestIndex\
    \ = false;\n        boolean foundSmallestValue = false;\n        boolean foundSmallestEvenValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestEvenValue = false;\n        boolean foundSmallestIndex\
    \ = false;\n        boolean foundSmallestValue = false;\n        boolean foundSmallestEvenValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmallestEvenValue = false;\n        boolean foundSmallestIndex\
    \ = false;\n        boolean foundSmallestValue = false;\n        boolean foundSmallestEvenValue\
    \ = false;\n        boolean foundSmallestIndex = false;\n        boolean foundSmallestValue\
    \ = false;\n        boolean foundSmalle\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps7anzrc2.java:90: error: ';' expected\n        boolean foundSmalle\n\
    \                           ^\n1 error\n"
  stdout: ''
  timestamp: 1659798555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallest\
    \ = arr.get(0);\n        int smallest_index = -1;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (smallest > arr.get(i)) {\n                    smallest = arr.get(i);\n \
    \                   smallest_index = i;\n                }\n            }\n  \
    \      }\n        result.add(smallest);\n        result.add(smallest_index);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbyc71eea.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpbyc71eea.java:48: error: no suitable method found for add(int)\n\
    \        result.add(smallest_index);\n              ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollec"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = 0;\n        long\
    \ smallestIndex = 0;\n        long currentIndex = 0;\n        for(Long node :\
    \ arr) {\n            if(node % 2 == 0) {\n                smallestEvenValue =\
    \ node;\n                smallestIndex = currentIndex;\n            }\n      \
    \      currentIndex++;\n        }\n        if(smallestEvenValue == 0) {\n    \
    \        return result;\n        }\n        for(Long node : arr) {\n         \
    \   if(node % 2 == 0) {\n                if(node < smallestEvenValue) {\n    \
    \                smallestEvenValue = node;\n                    smallestIndex\
    \ = currentIndex;\n                }\n            }\n            currentIndex++;\n\
    \        }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_tpwkzfh.java:66)\n"
  stdout: ''
  timestamp: 1659798555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long smallestEven = Long.MIN_VALUE;\n    \
    \    int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0) {\n                if (smallestEven > arr.get(i))\
    \ {\n                    smallestEven = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        res.add(smallestEven);\n\
    \        res.add(smallestIndex);\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ix8ozs4.java:47: error: incompatible types: int cannot be converted\
    \ to Long\n        res.add(smallestIndex);\n                ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659798552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        ArrayList<Long> temp2 = new ArrayList<>();\n        ArrayList<Long> temp3\
    \ = new ArrayList<>();\n        ArrayList<Long> temp4 = new ArrayList<>();\n \
    \       ArrayList<Long> temp5 = new ArrayList<>();\n        ArrayList<Long> temp6\
    \ = new ArrayList<>();\n        ArrayList<Long> temp7 = new ArrayList<>();\n \
    \       ArrayList<Long> temp8 = new ArrayList<>();\n        ArrayList<Long> temp9\
    \ = new ArrayList<>();\n        ArrayList<Long> temp10 = new ArrayList<>();\n\
    \        ArrayList<Long> temp11 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp12 = new ArrayList<>();\n        ArrayList<Long> temp13 = new ArrayList<>();\n\
    \        ArrayList<Long> temp14 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp15 = new ArrayList<>();\n        ArrayList<Long> temp16 = new ArrayList<>();\n\
    \        ArrayList<Long> temp17 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp18 = new ArrayList<>();\n        ArrayList<Long> temp19 = new ArrayList<>();\n\
    \        ArrayList<Long> temp20 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp21 = new ArrayList<>();\n        ArrayList<Long> temp22 = new ArrayList<>();\n\
    \        ArrayList<Long> temp23 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp24 = new ArrayList<>();\n        ArrayList<Long> temp25 = new ArrayList<>();\n\
    \        ArrayList<Long> temp26 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp27 = new ArrayList<>();\n        ArrayList<Long> temp28 = new ArrayList<>();\n\
    \        ArrayList<Long> temp29 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp30 = new ArrayList<>();\n        ArrayList<Long> temp31 = new ArrayList<>();\n\
    \        ArrayList<Long> temp32 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp33 = new ArrayList<>();\n        ArrayList<Long> temp34 = new ArrayList<>();\n\
    \        ArrayList<Long> temp35 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp36 = new ArrayList<>();\n        ArrayList<Long> temp37 = new ArrayList<>();\n\
    \        ArrayList<Long> temp38 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp39 = new ArrayList<>();\n        ArrayList<Long> temp40 = new ArrayList<>();\n\
    \        ArrayList<Long> temp41 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp42 = new ArrayList<>();\n        ArrayList<Long> temp43 = new ArrayList<>();\n\
    \        ArrayList<Long> temp44 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp45 = new ArrayList<>();\n        ArrayList<Long> temp46 = new ArrayList<>();\n\
    \        ArrayList<Long> temp47 = new ArrayList<>();\n        ArrayList<Long>\
    \ temp48 = new ArrayList<>();\n        ArrayList<Long> temp49 = new ArrayList<>();\n\
    \        ArrayList<Long> temp50 = new ArrayList<\n    }\n    public static void\
    \ main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzb2wsta4.java:86: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798554
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallest_even_value = Long.MAX_VALUE;\n\
    \        int smallest_even_index = -1;\n        int smallest_index = -1;\n   \
    \     for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (smallest_even_value <\
    \ value) {\n                    smallest_even_value = value;\n               \
    \     smallest_even_index = i;\n                }\n                if (smallest_even_value\
    \ == value) {\n                    if (smallest_index < 0) {\n               \
    \         smallest_index = i;\n                    }\n                }\n    \
    \        }\n        }\n        if (smallest_even_value == Long.MAX_VALUE) {\n\
    \            return result;\n        }\n        ArrayList<Long> smallest_even_value_arr\
    \ = new ArrayList<>();\n        smallest_even_value_arr.add(smallest_even_value);\n\
    \        smallest_even_value_arr.add(smallest_even_index);\n        result.add(smallest_even_value_arr);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6m3srya.java:58: error: incompatible types: int cannot be converted\
    \ to Long\n        smallest_even_value_arr.add(smallest_even_index);\n       \
    \                             ^\n/tmp/tmpj6m3srya.java:59: error: incompatible\
    \ types: ArrayList<Long> cannot be converted to Long\n        result.add(smallest_even_value_arr);\n\
    \                   ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = Long.MAX_VALUE;\n\
    \        int smallestIndex = 0;\n        for (Long node : arr) {\n           \
    \ if (node.intValue() % 2 == 0) {\n                if (smallestEvenValue > node.intValue())\
    \ {\n                    smallestEvenValue = node.intValue();\n              \
    \      smallestIndex = arr.indexOf(node);\n                }\n            }\n\
    \        }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppt29mujn.java:47: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallest_value\
    \ = arr.get(0);\n        int smallest_index = -1;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (smallest_value < arr.get(i)) {\n                    smallest_value = arr.get(i);\n\
    \                    smallest_index = i;\n                }\n            }\n \
    \       }\n        result.add(smallest_value);\n        result.add(smallest_index);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu__fb6c4.java:36: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpu__fb6c4.java:48: error: incompatible types: int cannot\
    \ be converted to Long\n        result.add(smallest_index);\n                \
    \   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long smallestEven = Long.MAX_VALUE;\n\
    \        int smallestIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                long value = arr.get(i);\n\
    \                if (value < smallestEven) {\n                    smallestEven\
    \ = value;\n                    smallestIndex = i;\n                }\n      \
    \      }\n        }\n        if (smallestEven != Long.MAX_VALUE) {\n         \
    \   result.add(smallestEven);\n            result.add(smallestIndex);\n      \
    \  }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwosc7r8k.java:49: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659798555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MIN_VALUE;\n \
    \       int smallestIndex = -1;\n        long smallestValue = Long.MIN_VALUE;\n\
    \        for(Long node : arr) {\n            if(node % 2 == 0) {\n           \
    \     if(smallestEven == Long.MIN_VALUE) {\n                    smallestEven =\
    \ node;\n                    smallestIndex = -1;\n                    smallestValue\
    \ = node;\n                }\n                else if(smallestEven == node) {\n\
    \                    smallestIndex = arr.indexOf(node);\n                    smallestValue\
    \ = node;\n                }\n                else if(smallestEven == node &&\
    \ smallestIndex == -1) {\n                    smallestIndex = arr.indexOf(node);\n\
    \                    smallestValue = node;\n                }\n            }\n\
    \        }\n        if(smallestEven == Long.MIN_VALUE) {\n            return result;\n\
    \        }\n        else if(smallestEven == smallestValue) {\n            int\
    \ index = arr.indexOf(smallestEven);\n            result.add(smallestEven);\n\
    \            result.add(smallestIndex);\n            return result;\n        }\n\
    \        else if(smallestEven == smallestValue && smallestIndex == -1) {\n   \
    \         result.add(smallestEven);\n            return result;\n        }\n \
    \       else if(smallestEven == smallestValue && smallestIndex != -1) {\n    \
    \        int index = arr.indexOf(smallestEven);\n            result.add(smallestEven);\n\
    \            result.add(index);\n            return result;\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1zracuwz.java:62: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(smallestIndex);\n                       ^\n\
    /tmp/tmp1zracuwz.java:72: error: incompatible types: int cannot be converted to\
    \ Long\n            result.add(index);\n                       ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        long smallestIndex = 0;\n      \
    \  long currentEvenValue = 0;\n        long currentIndex = 0;\n        boolean\
    \ foundSmallestEvenValue = false;\n        boolean foundSmallestIndex = false;\n\
    \        boolean foundSmallestValue = false;\n        boolean foundSmallestIndex\
    \ = false;\n        boolean foundSmallestValue = false;\n        boolean foundSmallestIndex\
    \ = false;\n        for (long value : arr) {\n            if (value % 2 == 0)\
    \ {\n                currentEvenValue = value;\n                currentIndex =\
    \ 0;\n                foundSmallestEvenValue = false;\n                foundSmallestIndex\
    \ = false;\n                foundSmallestValue = false;\n                foundSmallestIndex\
    \ = false;\n                foundSmallestValue = false;\n                foundSmallestIndex\
    \ = false;\n                foundSmallestValue = false;\n                foundSmallestIndex\
    \ = false;\n                foundSmallestValue = false;\n                foundSmallestIndex\
    \ = false;\n                foundSmallestValue = false;\n                foundSmallestIndex\
    \ = false;\n                foundSmallestValue = false;\n                foundSmallestIndex\
    \ = false;\n                foundSmallestValue = false;\n                foundSmallestIndex\
    \ = false;\n                foundSmallestValue = false;\n                foundSmallestIndex\
    \ = false;\n                foundSmallestValue = false;\n                foundSmallestIndex\
    \ = false;\n                foundSmallestValue = false;\n                foundSmallestIndex\
    \ = false;\n                foundSmallestValue = false;\n                foundSmallestIndex\
    \ = false;\n                foundSmallestValue = false;\n                foundSmallestIndex\
    \ = false;\n                foundSmallestValue = false;\n                foundSmallestIndex\
    \ = false;\n                foundSmallestValue = false;\n                foundSmallestIndex\
    \ = false;\n                foundSmallestValue = false;\n                foundSmallestIndex\
    \ = false;\n                foundSmallestValue = false;\n                foundSmallestIndex\
    \ = false;\n                foundSmallestValue = false;\n                foundSmallestIndex\
    \ = false;\n                foundSmallestValue = false;\n                foundSmallestIndex\
    \ = false;\n                foundSmallestValue = false;\n                foundSmallestIndex\
    \ = false;\n                foundSmallestValue = false;\n                foundSmallestIndex\
    \ = false;\n                foundSmallestValue = false;\n                foundSmallestIndex\
    \ = false;\n                foundSmallestValue = false;\n                foundSmallestIndex\
    \ = false;\n                foundSmallestValue = false;\n                foundSmallestIndex\
    \ = false;\n                found\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf0pju4we.java:99: error: not a statement\n                found\n\
    \                ^\n/tmp/tmpf0pju4we.java:99: error: ';' expected\n          \
    \      found\n                     ^\n/tmp/tmpf0pju4we.java:101: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n3\
    \ errors\n"
  stdout: ''
  timestamp: 1659798555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0) {\n   \
    \             if (value < smallestEven) {\n                    smallestEven =\
    \ value;\n                    smallestIndex = i;\n                }\n        \
    \    }\n        }\n        result.add(smallestEven);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq3fs4alj.java:48: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = 0;\n        int\
    \ smallestIndex = 0;\n        for(long value : arr) {\n            if(value %\
    \ 2 == 0) {\n                if(smallestEvenValue < value) {\n               \
    \     smallestEvenValue = value;\n                    smallestIndex = arr.indexOf(value);\n\
    \                }\n            }\n        }\n        if(smallestEvenValue ==\
    \ 0) {\n            return new ArrayList<>();\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe_06nrum.java:50: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long smallest_even_value = Long.MAX_VALUE;\n\
    \        int smallest_even_index = -1;\n        int smallest_index = -1;\n   \
    \     for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value % 2 == 0) {\n                if(smallest_even_value < value)\
    \ {\n                    smallest_even_value = value;\n                    smallest_even_index\
    \ = i;\n                }\n                if(smallest_even_value == value) {\n\
    \                    smallest_index = i;\n                }\n            }\n \
    \       }\n        if(smallest_even_value == Long.MAX_VALUE) {\n            return\
    \ res;\n        }\n        ArrayList<Long> new_arr = new ArrayList<>();\n    \
    \    for(int i = 0; i < arr.size(); i++) {\n            if(i != smallest_even_index)\
    \ {\n                new_arr.add(arr.get(i));\n            }\n        }\n    \
    \    res.add(smallest_even_value);\n        res.add(smallest_index);\n       \
    \ return res;\n    }\n    public static void main(String[] args) {\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr747g4vc.java:61: error: incompatible types: int cannot be converted\
    \ to Long\n        res.add(smallest_index);\n                ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659798555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = Long.MIN_VALUE;\n\
    \        int smallestIndex = 0;\n        int size = arr.size();\n        for (int\
    \ i = 0; i < size; i++) {\n            if (arr.get(i) % 2 == 0) {\n          \
    \      if (smallestEvenValue > arr.get(i)) {\n                    smallestEvenValue\
    \ = arr.get(i);\n                    smallestIndex = i;\n                }\n \
    \           }\n        }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyaxc2xe9.java:48: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = 0;\n        int\
    \ smallestIndex = 0;\n        for(Long node : arr) {\n            if(node % 2\
    \ == 0) {\n                smallestEvenValue = node;\n                smallestIndex\
    \ = arr.indexOf(node);\n            }\n        }\n        if(smallestEvenValue\
    \ == 0) {\n            return result;\n        }\n        for(Long node : arr)\
    \ {\n            if(node % 2 == 0 && node < smallestEvenValue) {\n           \
    \     smallestEvenValue = node;\n                smallestIndex = arr.indexOf(node);\n\
    \            }\n        }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg4dpngq8.java:54: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(smallestIndex);\n                   ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n \
    \       int smallestIndex = 0;\n        for (Long node : arr) {\n            if\
    \ (node.isEven()) {\n                if (smallestEven > node.value) {\n      \
    \              smallestEven = node.value;\n                    smallestIndex =\
    \ arr.indexOf(node);\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8n9_83za.java:39: error: cannot find symbol\n            if (node.isEven())\
    \ {\n                    ^\n  symbol:   method isEven()\n  location: variable\
    \ node of type Long\n/tmp/tmp8n9_83za.java:40: error: value has private access\
    \ in Long\n                if (smallestEven > node.value) {\n                \
    \                       ^\n/tmp/tmp8n9_83za.java:41: error: value has private\
    \ access in Long\n                    smallestEven = node.value;\n           \
    \                            ^\n/tmp/tmp8n9_83za.java:47: error: incompatible\
    \ types: int cannot be converted to Long\n        result.add(smallestIndex);\n\
    \                   ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659798554
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        long smallestIndex = -1;\n\
    \        for (Long val : arr) {\n            if (val % 2 == 0) {\n           \
    \     if (smallestEven == Long.MAX_VALUE) {\n                    smallestEven\
    \ = val;\n                    smallestIndex = arr.indexOf(val);\n            \
    \    } else {\n                    if (val < smallestEven) {\n               \
    \         smallestEven = val;\n                        smallestIndex = arr.indexOf(val);\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ (smallestEven == Long.MAX_VALUE) {\n            return result;\n        } else\
    \ {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n\
    \            return result;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l,\
    \ (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // \"Given an array array list representing a branch of a\
    \ tree that has non-negative integer nodes\n    // your task is to pluck one of\
    \ the nodes and return it.\n    // The plucked node should be the node with the\
    \ smallest even value.\n    // If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n    // The plucked node\
    \ should be returned in an array array list, [ smalest_value, its index ],\n \
    \   // If there are no even values or the given array array list is empty, return\
    \ [].\n    // Example 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>>\
    \ pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l,\
    \ (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        long smallestIndex = 0;\n      \
    \  long tempValue = 0;\n        boolean foundSmallestEvenValue = false;\n    \
    \    boolean foundSmallestIndex = false;\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            tempValue = arr.get(i);\n            if(tempValue % 2 ==\
    \ 0) {\n                foundSmallestEvenValue = true;\n                smallestEvenValue\
    \ = tempValue;\n                smallestIndex = i;\n            }\n          \
    \  else if(foundSmallestEvenValue) {\n                if(tempValue < smallestEvenValue)\
    \ {\n                    foundSmallestEvenValue = false;\n                   \
    \ smallestEvenValue = tempValue;\n                    smallestIndex = i;\n   \
    \             }\n            }\n            else if(foundSmallestEvenValue &&\
    \ !foundSmallestIndex) {\n                foundSmallestIndex = true;\n       \
    \         smallestIndex = i;\n            }\n        }\n        if(foundSmallestEvenValue)\
    \ {\n            tempValue = smallestEvenValue;\n            temp = new ArrayList<>(Arrays.asList(smallestEvenValue,\
    \ smallestIndex));\n            result.add(temp);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n    assert(pluck((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
    \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz9p88wj0.java:64: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n            result.add(temp);\n                      \
    \ ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659798556
