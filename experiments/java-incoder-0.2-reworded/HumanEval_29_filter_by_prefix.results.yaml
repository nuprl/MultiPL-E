language: java
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ start with a given prefix.\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String>\
    \ strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
    , (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\",\
    \ (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ start with a given prefix.\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String>\
    \ strings, String prefix) {\n        return strings.stream()\n               \
    \ .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
    , (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\",\
    \ (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ start with a given prefix.\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String>\
    \ strings, String prefix) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.startsWith(prefix))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
    , (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\",\
    \ (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ start with a given prefix.\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String>\
    \ strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
    , (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\",\
    \ (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ start with a given prefix.\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String>\
    \ strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
    , (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\",\
    \ (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjl7_gid_.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n\
    \                                                                         ^\n\
    \    equality constraints: List<String>\n    upper bounds: ArrayList<String>,Object\n\
    \  where R,A,T are type-variables:\n    R extends Object declared in method <R,A>collect(Collector<?\
    \ super T,A,R>)\n    A extends Object declared in method <R,A>collect(Collector<?\
    \ super T,A,R>)\n    T extends Object declared in interface Stream\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ start with a given prefix.\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String>\
    \ strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
    , (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\",\
    \ (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ start with a given prefix.\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String>\
    \ strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
    , (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\",\
    \ (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ start with a given prefix.\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String>\
    \ strings, String prefix) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.startsWith(prefix))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
    , (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\",\
    \ (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ start with a given prefix.\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String>\
    \ strings, String prefix) {\n        ArrayList<String> filtered = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if (string.startsWith(prefix))\
    \ {\n                filtered.add(string);\n            }\n        }\n       \
    \ return filtered;\n    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
    , (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\",\
    \ (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ start with a given prefix.\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String>\
    \ strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
    , (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\",\
    \ (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ start with a given prefix.\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String>\
    \ strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
    , (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\",\
    \ (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ start with a given prefix.\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String>\
    \ strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
    , (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\",\
    \ (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ start with a given prefix.\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String>\
    \ strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
    , (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\",\
    \ (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ start with a given prefix.\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String>\
    \ strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
    , (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\",\
    \ (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ start with a given prefix.\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String>\
    \ strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
    , (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\",\
    \ (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ start with a given prefix.\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String>\
    \ strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
    , (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\",\
    \ (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ start with a given prefix.\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String>\
    \ strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
    , (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\",\
    \ (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ start with a given prefix.\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String>\
    \ strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
    , (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\",\
    \ (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ start with a given prefix.\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String>\
    \ strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
    , (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\",\
    \ (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ start with a given prefix.\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String>\
    \ strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
    , (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\",\
    \ (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
