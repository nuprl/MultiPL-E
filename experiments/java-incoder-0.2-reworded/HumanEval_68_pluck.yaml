name: HumanEval_68_pluck
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // \"Given an array array list representing a branch of a tree\
  \ that has non-negative integer nodes\n    // your task is to pluck one of the nodes\
  \ and return it.\n    // The plucked node should be the node with the smallest even\
  \ value.\n    // If multiple nodes with the same smallest even value are found return\
  \ the node that has smallest index.\n    // The plucked node should be returned\
  \ in an array array list, [ smalest_value, its index ],\n    // If there are no\
  \ even values or the given array array list is empty, return [].\n    // Example\
  \ 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
  \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
  \    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n\
  \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n\
  \    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
  \    // Example 4:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n\
  \    // so we will choose the first zero, which has the smallest index.\n    //\
  \ Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
  \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(pluck((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
  \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
  \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
  \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
  \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
  \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
    \        long smallest_value = arr.get(0);\n        int smallest_index = -1;\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallest_value < arr.get(i)) {\n            \
    \        smallest_value = arr.get(i);\n                    smallest_index = i;\n\
    \                }\n            }\n        }\n        if (smallest_index != -1)\
    \ {\n            result.add(smallest_value);\n            result.add(smallest_index);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long value =\
    \ arr.get(i);\n            if (value % 2 == 0) {\n                if (value <\
    \ smallestEvenValue) {\n                    smallestEvenValue = value;\n     \
    \               smallestIndex = i;\n                }\n            }\n       \
    \ }\n        if (smallestEvenValue == Long.MAX_VALUE) {\n            return result;\n\
    \        }\n        ArrayList<Long> evens = new ArrayList<Long>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n \
    \           if (value % 2 == 0) {\n                evens.add(value);\n       \
    \     }\n        }\n        Collections.sort(evens);\n        evens.remove(smallestEvenValue);\n\
    \        evens.remove(smallestIndex);\n        evens.add(smallestEvenValue);\n\
    \        evens.add(smallestIndex);\n        result.addAll(evens);\n        return\
    \ result;", "        ArrayList<Long> res = new ArrayList<>();\n        ArrayList<Long>\
    \ temp = new ArrayList<>();\n        long smallest_even_value = Long.MAX_VALUE;\n\
    \        int smallest_even_index = 0;\n        int size = arr.size();\n      \
    \  for (int i = 0; i < size; i++) {\n            if (arr.get(i) % 2 == 0) {\n\
    \                smallest_even_value = arr.get(i);\n                smallest_even_index\
    \ = i;\n            }\n        }\n        if (smallest_even_value == Long.MAX_VALUE)\
    \ {\n            return res;\n        }\n        for (int i = 0; i < size; i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                if (arr.get(i) <\
    \ smallest_even_value) {\n                    smallest_even_value = arr.get(i);\n\
    \                    smallest_even_index = i;\n                }\n           \
    \ }\n        }\n        temp.add(smallest_even_value);\n        temp.add(smallest_even_index);\n\
    \        res.add(temp);\n        return res;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n        int\
    \ smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n       \
    \     if (arr.get(i) % 2 == 0) {\n                if (smallestEven > arr.get(i))\
    \ {\n                    smallestEven = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0) {\n                if (smallestEvenValue > arr.get(i)) {\n       \
    \             smallestEvenValue = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        temp.add(smallestEvenValue);\n\
    \        temp.add(smallestIndex);\n        result.add(temp);\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
    \        long smallest = arr.get(0);\n        int smallest_index = -1;\n     \
    \   for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) % 2 ==\
    \ 0) {\n                if (smallest > arr.get(i)) {\n                    smallest\
    \ = arr.get(i);\n                    smallest_index = i;\n                }\n\
    \            }\n        }\n        result.add(smallest);\n        result.add(smallest_index);\n\
    \        return result;", "        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MIN_VALUE;\n        int smallestIndex =\
    \ 0;\n        for (Long val : arr) {\n            if (val % 2 == 0) {\n      \
    \          if (smallestEvenValue < val) {\n                    smallestEvenValue\
    \ = val;\n                    smallestIndex = arr.indexOf(val);\n            \
    \    }\n            }\n        }\n        if (smallestEvenValue == Long.MIN_VALUE)\
    \ {\n            return res;\n        }\n        ArrayList<Long> evens = new ArrayList<>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                evens.add(arr.get(i));\n            }\n        }\n\
    \        evens.sort(Comparator.comparingLong(Long::longValue));\n        evens.remove(smallestIndex);\n\
    \        res.add(smallestEvenValue);\n        res.add(smallestIndex);\n      \
    \  return res;", "        ArrayList<Long> result = new ArrayList<>();\n      \
    \  Arrays.sort(arr);\n        long smallest = arr.get(0);\n        int smallest_index\
    \ = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0) {\n                if (smallest > arr.get(i)) {\n                \
    \    smallest = arr.get(i);\n                    smallest_index = i;\n       \
    \         }\n            }\n        }\n        result.add(smallest);\n       \
    \ result.add(smallest_index);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEven = Long.MIN_VALUE;\n \
    \       int smallestIndex = 0;\n        for (Long node : arr) {\n            if\
    \ (node % 2 == 0) {\n                if (smallestEven > node) {\n            \
    \        smallestEven = node;\n                    smallestIndex = arr.indexOf(node);\n\
    \                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallest_value = Long.MAX_VALUE;\n\
    \        int smallest_index = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0) {\n\
    \                if (value < smallest_value) {\n                    smallest_value\
    \ = value;\n                    smallest_index = i;\n                }\n     \
    \       }\n        }\n        if (smallest_index != 0) {\n            result.add(smallest_value,\
    \ smallest_index);\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        ArrayList<Long> evens = new ArrayList<>();\n\
    \        ArrayList<Long> indexes = new ArrayList<>();\n        long smallestEven\
    \ = Long.MAX_VALUE;\n        int smallestIndex = 0;\n        for(Long node : arr)\
    \ {\n            if(node % 2 == 0) {\n                evens.add(node);\n     \
    \           for(Long index : indexes) {\n                    if(node < smallestEven)\
    \ {\n                        smallestEven = node;\n                        smallestIndex\
    \ = index;\n                    }\n                }\n            } else {\n \
    \               for(Long index : indexes) {\n                    if(node < smallestEven)\
    \ {\n                        smallestEven = node;\n                        smallestIndex\
    \ = index;\n                    }\n                }\n            }\n        }\n\
    \        if(evens.size() > 0) {\n            smallestEven = evens.get(0);\n  \
    \          smallestIndex = indexes.get(0);\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        if (arr.isEmpty())\
    \ {\n            return result;\n        }\n        long smallest = arr.get(0);\n\
    \        int smallest_index = -1;\n        for (int i = 1; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                if (smallest > arr.get(i))\
    \ {\n                    smallest = arr.get(i);\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        result.add(smallest);\n\
    \        result.add(smallest_index);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallest\
    \ = arr.get(0);\n        int smallest_index = -1;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (smallest > arr.get(i)) {\n                    smallest = arr.get(i);\n \
    \                   smallest_index = i;\n                }\n            }\n  \
    \      }\n        if (smallest == 0) {\n            return result;\n        }\n\
    \        result.add(smallest);\n        result.add(smallest_index);\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ smallestEvenValue = 0;\n        int smallestIndex = 0;\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n        \
    \        if (smallestEvenValue < arr.get(i)) {\n                    smallestEvenValue\
    \ = arr.get(i);\n                    smallestIndex = i;\n                }\n \
    \           }\n        }\n        if (smallestEvenValue == 0) {\n            return\
    \ result;\n        }\n        ArrayList<Long> evenValues = new ArrayList<>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                evenValues.add(arr.get(i));\n            }\n    \
    \    }\n        evenValues.sort((a, b) -> a - b);\n        evenValues.stream().forEach((e)\
    \ -> {\n            if (smallestEvenValue == e) {\n                result.add(e);\n\
    \            }\n        });\n        return result;", "        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n    \
    \    int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if (value % 2 == 0) {\n   \
    \             if (value < smallestEven) {\n                    smallestEven =\
    \ value;\n                    smallestIndex = i;\n                }\n        \
    \    }\n        }\n        if (smallestEven != Long.MAX_VALUE) {\n           \
    \ res.add(smallestEven);\n            res.add(smallestIndex);\n        }\n   \
    \     return res;", "        ArrayList<Long> res = new ArrayList<>();\n      \
    \  long smallest_even_value = Long.MIN_VALUE;\n        long smallest_index = -1;\n\
    \        long smallest_value = Long.MAX_VALUE;\n        for (Long val : arr) {\n\
    \            if (val % 2 == 0) {\n                if (smallest_even_value < val)\
    \ {\n                    smallest_even_value = val;\n                    smallest_index\
    \ = arr.indexOf(val);\n                }\n                if (smallest_value <\
    \ val) {\n                    smallest_value = val;\n                }\n     \
    \       }\n        }\n        if (smallest_even_value == Long.MIN_VALUE) {\n \
    \           return res;\n        }\n        ArrayList<Long> evens = new ArrayList<>();\n\
    \        evens.add(smallest_even_value);\n        evens.add(smallest_index);\n\
    \        for (Long val : arr) {\n            if (val % 2 == 0) {\n           \
    \     if (smallest_even_value < val) {\n                    evens.add(val);\n\
    \                }\n            }\n        }\n        if (evens.size() == 0) {\n\
    \            return res;\n        }\n        evens.sort(Comparator.comparingLong(Long::longValue));\n\
    \        ArrayList<Long> evens_arr = new ArrayList<>();\n        for (Long val\
    \ : evens) {\n            evens_arr.add(val);\n        }\n        evens_arr.sort(Comparator.comparingLong(Long::longValue));\n\
    \        ArrayList<Long> evens_arr_res = new ArrayList<>();\n        for (Long\
    \ val : evens_arr) {\n            evens_arr_res\n                    .add(evens_arr_res.size()\
    \ - evens_arr_res.indexOf(val) + 1);\n        }\n        evens_arr_res.sort(Comparator.comparingLong(Long::longValue));\n\
    \        evens_arr_res.add(evens_arr_res.size() - evens_arr_res.indexOf(smallest_even_value)\
    \ + 1);\n        for (Long val : evens_arr) {\n            if (val % 2 == 0) {\n\
    \                if (smallest_even_value < val) {\n                    evens_arr_res.add(val);\n\
    \                }\n            }\n        }\n        if (evens_arr_res.size()\
    \ == 0) {\n            return res;\n        }\n        evens_arr_res.sort(Comparator.comparingLong(Long::longValue));\n\
    \        evens_arr_res.add(evens_arr_res.size() - evens_arr_res.indexOf(smallest_even_value)\
    \ + 1);\n        for (Long val : evens_arr) {\n            if (val % 2 == 0) {\n\
    \                if (smallest_even_value < val) {\n                    evens_arr_res.add(val);\n\
    \                }\n            }\n        }\n        if (evens_arr_res.size()\
    \ == 0) {\n            return res;\n        }\n        evens_arr_res.sort(Comparator.comparingLong(Long::longValue));\n\
    \        evens_arr_res.add(evens_arr_res.size() - evens_", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallest\
    \ = arr.get(0);\n        int smallest_index = -1;\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n               \
    \ if (smallest > arr.get(i)) {\n                    smallest = arr.get(i);\n \
    \                   smallest_index = i;\n                }\n            }\n  \
    \      }\n        if (smallest == 0) {\n            return result;\n        }\n\
    \        result.add(smallest);\n        result.add(smallest_index);\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n\
    \                if (smallestEven > arr.get(i)) {\n                    smallestEven\
    \ = arr.get(i);\n                    smallestIndex = i;\n                }\n \
    \           }\n        }\n        result.add(smallestEven);\n        result.add(smallestIndex);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (smallestEven > value)\
    \ {\n                    smallestEven = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        if (smallestEven\
    \ != Long.MAX_VALUE) {\n            result.add(smallestEven);\n            result.add(smallestIndex);\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;"]
stop_tokens:
- "\n    }\n"
