name: HumanEval_49_modp
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
  \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
  \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    //\
  \ (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long modp(long\
  \ n, long p) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
  \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
  \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
  \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
  \ (5l)) == (3l));\n    }\n\n}\n"
completions: ["        long r = 1l;\n        while (n>0) {\n            r = r*p;\n\
    \            n = n-1l;\n        }\n        return r;", "        long r = 1;\n\
    \        while (n>0) {\n            long m = n%p;\n            n = n/p;\n    \
    \        r = r*p + m;\n        }\n        return r;", "        long res = 1l;\n\
    \        while (n > 0) {\n            long t = n & p;\n            n >>>= p;\n\
    \            res = (res * t) % p;\n        }\n        return res;", "        long\
    \ r = 1;\n        while (n > 0) {\n            r = r * p % n;\n            n =\
    \ n / 2;\n        }\n        return r;", "        long r = 1;\n        while (n>0)\
    \ {\n            long t = n%p;\n            n = p;\n            p = t;\n     \
    \   }\n        return r;", "        long r = 1l;\n        while (n-- > 0) {\n\
    \            r = (r * p) % p;\n        }\n        return r;", "        long r\
    \ = 1l;\n        while (n>0) {\n            long t = n%p;\n            if (t>r)\
    \ r = t;\n            n = n/p;\n        }\n        return r;", "        long r\
    \ = 1;\n        while (n>0) {\n            long m = n%p;\n            if (m>0)\
    \ {\n                r = (r*p)%p;\n            }\n            n = (n*p)%p;\n \
    \       }\n        return r;", "        long r = 1l;\n        while ((r << 1)\
    \ <= n) {\n            r <<= 1;\n        }\n        while ((r >> 1) >= p) {\n\
    \            r >>= 1;\n        }\n        return r;", "        long r = 1;\n \
    \       while (n > 0) {\n            long m = n & -p;\n            n >>>= p;\n\
    \            r = (r * m) % p;\n        }\n        return r;", "        long r\
    \ = 1;\n        while (n>0) {\n            long t = n%p;\n            n = p;\n\
    \            p = t;\n            r = (r*p)%p;\n        }\n        return r;",
  "        long r = 1;\n        while (n>0) {\n            long m = n%p;\n       \
    \     r = (r*m)%p;\n            n = n/p;\n        }\n        return r;", "   \
    \     long r = 1;\n        while (n>0) {\n            r = r*p;\n            n\
    \ = n-1;\n        }\n        return r;", "        long r = 1l;\n        while\
    \ (n>0) {\n            r = r*p;\n            n = n-1l;\n        }\n        return\
    \ r;", "        long result = 1l;\n        while (n-- > 0) {\n            result\
    \ *= p;\n        }\n        return result;", "        long r = 1;\n        while\
    \ (n > 0) {\n            r = r * p % n;\n            n = n / 2;\n        }\n \
    \       return r;", "        long r = 1;\n        while ((n & 1) == 0) {\n   \
    \         n >>>= 1;\n            r *= p;\n        }\n        while ((n & 1) ==\
    \ 1) {\n            n >>>= 1;\n            r *= p;\n        }\n        return\
    \ r;", "        long res = 1l;\n        while (n) {\n            long t = n;\n\
    \            n &= n - 1l;\n            res = (res * t) % p;\n        }\n     \
    \   return res;", "        if (n == 0l) return 1l;\n        if (n == 1l) return\
    \ p;\n        if (n == 2l) return p;\n        if (n == 3l) return p;\n       \
    \ if (n == 4l) return p;\n        if (n == 5l) return p;\n        if (n == 6l)\
    \ return p;\n        if (n == 7l) return p;\n        if (n == 8l) return p;\n\
    \        if (n == 9l) return p;\n        if (n == 10l) return p;\n        if (n\
    \ == 11l) return p;\n        if (n == 12l) return p;\n        if (n == 13l) return\
    \ p;\n        if (n == 14l) return p;\n        if (n == 15l) return p;\n     \
    \   if (n == 16l) return p;\n        if (n == 17l) return p;\n        if (n ==\
    \ 18l) return p;\n        if (n == 19l) return p;\n        if (n == 20l) return\
    \ p;\n        if (n == 21l) return p;\n        if (n == 22l) return p;\n     \
    \   if (n == 23l) return p;\n        if (n == 24l) return p;\n        if (n ==\
    \ 25l) return p;\n        if (n == 26l) return p;\n        if (n == 27l) return\
    \ p;\n        if (n == 28l) return p;\n        if (n == 29l) return p;\n     \
    \   if (n == 30l) return p;\n        if (n == 31l) return p;\n        if (n ==\
    \ 32l) return p;\n        if (n == 33l) return p;\n        if (n == 34l) return\
    \ p;\n        if (n == 35l) return p;\n        if (n == 36l) return p;\n     \
    \   if (n == 37l) return p;\n        if (n == 38l) return p;\n        if (n ==\
    \ 39l) return p;\n        if (n == 40l) return p;\n        if (n == 41l) return\
    \ p;\n        if (n == 42l) return p;\n        if (n == 43l) return p;\n     \
    \   if (n == 44l) return p;\n        if (n == 45l) return p;\n        if (n ==\
    \ 46l) return p;\n        if (n == 47l) return p;\n        if (n == 48l) return\
    \ p;\n        if (n == 49l) return p;\n        if (n == 50l) return p;\n     \
    \   if (n == 51l) return p;\n        if (n == 52l) return p;\n        if (n ==\
    \ 53l) return p;\n        if (n == 54l) return p;\n        if (n == 55l) return\
    \ p;\n        if (n == 56l) return p;\n        if (n == 57l) return p;\n     \
    \   if (n == 58l) return p;\n        if (n == 59l) return p;\n        if (n ==\
    \ 60l) return p;\n        if (n == 61l) return p;\n        if (n == 62l) return\
    \ p;\n        if (n == 63l) return p;\n        if (n == 64l) return p;\n     \
    \   if (n == 65l) return p;\n        if (n == 66l) return p;\n        if (n ==\
    \ 67l) return p;\n        if (n == 68l) return p;\n        if (n == 69l) return\
    \ p;\n        if (n == 70l) return p;\n        if (n == 71l) return p;\n     \
    \   if (n == 72l) return p;", "        long r = 1l;\n        while (n>0) {\n \
    \           r = r*p;\n            n = n-1l;\n        }\n        return r;"]
stop_tokens:
- "\n    }\n"
